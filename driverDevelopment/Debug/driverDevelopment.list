
driverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  4 .ARM          00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010758  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002773  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005d9  00000000  00000000  00012efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000134d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  000135a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022f8  00000000  00000000  00013640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017a9  00000000  00000000  00015938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009597  00000000  00000000  000170e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00020678  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000021c  00000000  00000000  000206cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000738 	.word	0x08000738

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000738 	.word	0x08000738

080001e8 <EXTI0_IRQHandler>:
SPI_HandleTypedef_t SPI_Handle;

void GPIO_Config();
void EXTI_Config();
void EXTI0_IRQHandler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	if(EXTI->PR & 0x1)
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <EXTI0_IRQHandler+0x24>)
 80001ee:	695b      	ldr	r3, [r3, #20]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d007      	beq.n	8000208 <EXTI0_IRQHandler+0x20>
	{
		EXTI->PR = 0x1;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <EXTI0_IRQHandler+0x24>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	615a      	str	r2, [r3, #20]
		GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80001fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000202:	4803      	ldr	r0, [pc, #12]	; (8000210 <EXTI0_IRQHandler+0x28>)
 8000204:	f000 fa5a 	bl	80006bc <GPIO_TogglePin>
	}

}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40013c00 	.word	0x40013c00
 8000210:	40020c00 	.word	0x40020c00

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
    /* Loop forever */


	GPIO_Config();
 8000218:	f000 f804 	bl	8000224 <GPIO_Config>

	EXTI_Config();
 800021c:	f000 f840 	bl	80002a0 <EXTI_Config>





	for(;;);
 8000220:	e7fe      	b.n	8000220 <main+0xc>
	...

08000224 <GPIO_Config>:

}
void GPIO_Config()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
	RCC_GPIOD_CLOCK_ENABLE();
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <GPIO_Config+0x74>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <GPIO_Config+0x74>)
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <GPIO_Config+0x74>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	f003 0308 	and.w	r3, r3, #8
 8000242:	61fb      	str	r3, [r7, #28]
	RCC_GPIOA_CLOCK_ENABLE();
 8000244:	2300      	movs	r3, #0
 8000246:	61bb      	str	r3, [r7, #24]
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <GPIO_Config+0x74>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <GPIO_Config+0x74>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <GPIO_Config+0x74>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 800025e:	463b      	mov	r3, r7
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800026e:	2301      	movs	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000272:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000276:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_OSPEED_HIGH;
 8000280:	2302      	movs	r3, #2
 8000282:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000284:	463b      	mov	r3, r7
 8000286:	4619      	mov	r1, r3
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <GPIO_Config+0x78>)
 800028a:	f000 f95b 	bl	8000544 <GPIO_Init>


}
 800028e:	bf00      	nop
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020c00 	.word	0x40020c00

080002a0 <EXTI_Config>:
void EXTI_Config()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	RCC_SYSCFG_CLOCK_ENABLE();
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <EXTI_Config+0x54>)
 80002ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ae:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <EXTI_Config+0x54>)
 80002b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002b4:	6453      	str	r3, [r2, #68]	; 0x44
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <EXTI_Config+0x54>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002be:	607b      	str	r3, [r7, #4]
	EXTI_LineConfig(EXTI_PortSource_A,EXTI_LineSource_0);
 80002c0:	2100      	movs	r1, #0
 80002c2:	2000      	movs	r0, #0
 80002c4:	f000 f8d4 	bl	8000470 <EXTI_LineConfig>

	EXTI_InitTypeDef_t EXTI_InitStruct={0};
 80002c8:	2300      	movs	r3, #0
 80002ca:	603b      	str	r3, [r7, #0]

	EXTI_InitStruct.LineCmd = ENABLE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	703b      	strb	r3, [r7, #0]
	EXTI_InitStruct.LineNumber = EXTI_LineSource_0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	707b      	strb	r3, [r7, #1]
	EXTI_InitStruct.Mode = EXTI_MODE_IMR;
 80002d4:	2300      	movs	r3, #0
 80002d6:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Rising;
 80002d8:	2308      	movs	r3, #8
 80002da:	70bb      	strb	r3, [r7, #2]


	EXTI_Init(&EXTI_InitStruct);
 80002dc:	463b      	mov	r3, r7
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f834 	bl	800034c <EXTI_Init>
	NVIC_InterruptEnable(EXTI0_IRQNumber);
 80002e4:	2006      	movs	r0, #6
 80002e6:	f000 f8f9 	bl	80004dc <NVIC_InterruptEnable>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f9e3 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff73 	bl	8000214 <main>

0800032e <LoopForever>:

LoopForever:
    b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	08000758 	.word	0x08000758
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <EXTI_Init>:
#include "EXTI.h"

void EXTI_Init(EXTI_InitTypeDef_t * EXTI_InitStruct)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U<<EXTI_InitStruct->LineNumber);
 8000358:	4b44      	ldr	r3, [pc, #272]	; (800046c <EXTI_Init+0x120>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	785b      	ldrb	r3, [r3, #1]
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	4940      	ldr	r1, [pc, #256]	; (800046c <EXTI_Init+0x120>)
 800036a:	4013      	ands	r3, r2
 800036c:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U<<EXTI_InitStruct->LineNumber);
 800036e:	4b3f      	ldr	r3, [pc, #252]	; (800046c <EXTI_Init+0x120>)
 8000370:	685a      	ldr	r2, [r3, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	785b      	ldrb	r3, [r3, #1]
 8000376:	4619      	mov	r1, r3
 8000378:	2301      	movs	r3, #1
 800037a:	408b      	lsls	r3, r1
 800037c:	43db      	mvns	r3, r3
 800037e:	493b      	ldr	r1, [pc, #236]	; (800046c <EXTI_Init+0x120>)
 8000380:	4013      	ands	r3, r2
 8000382:	604b      	str	r3, [r1, #4]
	if(EXTI_InitStruct->LineCmd != DISABLE)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d055      	beq.n	8000438 <EXTI_Init+0xec>
	{
		 tempValue = EXTI_BASE_ADDR;
 800038c:	4b37      	ldr	r3, [pc, #220]	; (800046c <EXTI_Init+0x120>)
 800038e:	60fb      	str	r3, [r7, #12]

		 tempValue+=EXTI_InitStruct->Mode;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4413      	add	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]

		*((__IO uint32_t *)tempValue) |= (0x1U<<EXTI_InitStruct->LineNumber);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	785b      	ldrb	r3, [r3, #1]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2301      	movs	r3, #1
 80003a8:	fa03 f202 	lsl.w	r2, r3, r2
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]

		EXTI->FTSR &= ~(0x1U<<EXTI_InitStruct->LineNumber);
 80003b2:	4b2e      	ldr	r3, [pc, #184]	; (800046c <EXTI_Init+0x120>)
 80003b4:	68da      	ldr	r2, [r3, #12]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	4619      	mov	r1, r3
 80003bc:	2301      	movs	r3, #1
 80003be:	408b      	lsls	r3, r1
 80003c0:	43db      	mvns	r3, r3
 80003c2:	492a      	ldr	r1, [pc, #168]	; (800046c <EXTI_Init+0x120>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	60cb      	str	r3, [r1, #12]
		EXTI->RTSR &= ~(0x1U<<EXTI_InitStruct->LineNumber);
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <EXTI_Init+0x120>)
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	785b      	ldrb	r3, [r3, #1]
 80003d0:	4619      	mov	r1, r3
 80003d2:	2301      	movs	r3, #1
 80003d4:	408b      	lsls	r3, r1
 80003d6:	43db      	mvns	r3, r3
 80003d8:	4924      	ldr	r1, [pc, #144]	; (800046c <EXTI_Init+0x120>)
 80003da:	4013      	ands	r3, r2
 80003dc:	608b      	str	r3, [r1, #8]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	789b      	ldrb	r3, [r3, #2]
 80003e2:	2b08      	cmp	r3, #8
 80003e4:	d114      	bne.n	8000410 <EXTI_Init+0xc4>
		{
			EXTI->FTSR |= (0x1U<<EXTI_InitStruct->LineNumber);
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <EXTI_Init+0x120>)
 80003e8:	68da      	ldr	r2, [r3, #12]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	4619      	mov	r1, r3
 80003f0:	2301      	movs	r3, #1
 80003f2:	408b      	lsls	r3, r1
 80003f4:	491d      	ldr	r1, [pc, #116]	; (800046c <EXTI_Init+0x120>)
 80003f6:	4313      	orrs	r3, r2
 80003f8:	60cb      	str	r3, [r1, #12]
			EXTI->RTSR |= (0x1U<<EXTI_InitStruct->LineNumber);
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <EXTI_Init+0x120>)
 80003fc:	689a      	ldr	r2, [r3, #8]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	785b      	ldrb	r3, [r3, #1]
 8000402:	4619      	mov	r1, r3
 8000404:	2301      	movs	r3, #1
 8000406:	408b      	lsls	r3, r1
 8000408:	4918      	ldr	r1, [pc, #96]	; (800046c <EXTI_Init+0x120>)
 800040a:	4313      	orrs	r3, r2
 800040c:	608b      	str	r3, [r1, #8]

		*((__IO uint32_t *)tempValue) &= ~(0x1U<<EXTI_InitStruct->LineNumber);

	}

}
 800040e:	e026      	b.n	800045e <EXTI_Init+0x112>
			tempValue = EXTI_BASE_ADDR;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <EXTI_Init+0x120>)
 8000412:	60fb      	str	r3, [r7, #12]
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	789b      	ldrb	r3, [r3, #2]
 8000418:	461a      	mov	r2, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	4413      	add	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]
			*((__IO uint32_t *)tempValue) |= (0x1U<<EXTI_InitStruct->LineNumber);
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	785b      	ldrb	r3, [r3, #1]
 8000428:	461a      	mov	r2, r3
 800042a:	2301      	movs	r3, #1
 800042c:	fa03 f202 	lsl.w	r2, r3, r2
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	430a      	orrs	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	e012      	b.n	800045e <EXTI_Init+0x112>
		 tempValue = EXTI_BASE_ADDR;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <EXTI_Init+0x120>)
 800043a:	60fb      	str	r3, [r7, #12]
		 tempValue+=EXTI_InitStruct->Mode;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	78db      	ldrb	r3, [r3, #3]
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	4413      	add	r3, r2
 8000446:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t *)tempValue) &= ~(0x1U<<EXTI_InitStruct->LineNumber);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	461a      	mov	r2, r3
 8000452:	2301      	movs	r3, #1
 8000454:	4093      	lsls	r3, r2
 8000456:	43da      	mvns	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40013c00 	.word	0x40013c00

08000470 <EXTI_LineConfig>:


void EXTI_LineConfig(uint8_t PortSource, uint8_t LineSource)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue=SYSCFG->CR[LineSource>>2U];
 8000480:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <EXTI_LineConfig+0x68>)
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	089b      	lsrs	r3, r3, #2
 8000486:	b2db      	uxtb	r3, r3
 8000488:	3302      	adds	r3, #2
 800048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800048e:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU<<((LineSource & 0x3U)*4U));
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	f003 0303 	and.w	r3, r3, #3
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	220f      	movs	r2, #15
 800049a:	fa02 f303 	lsl.w	r3, r2, r3
 800049e:	43db      	mvns	r3, r3
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	4013      	ands	r3, r2
 80004a4:	60fb      	str	r3, [r7, #12]
	tempValue |= (PortSource<<((LineSource & 0x3U)*4U));
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	79bb      	ldrb	r3, [r7, #6]
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
	SYSCFG->CR[LineSource>>2U] = tempValue;
 80004bc:	4906      	ldr	r1, [pc, #24]	; (80004d8 <EXTI_LineConfig+0x68>)
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	089b      	lsrs	r3, r3, #2
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	3302      	adds	r3, #2
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40013800 	.word	0x40013800

080004dc <NVIC_InterruptEnable>:

void NVIC_InterruptEnable(IRQNumber_TypeDef_t IRQNumber)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]

	tempValue = *((IRQNumber>>5)+ NVIC_ISER0);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	095b      	lsrs	r3, r3, #5
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80004f6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U<<(IRQNumber  &  0x1FU));	/*!< bu kodum herhangi bir etkisi olmaz çünkü iser registerina  0 yazildigi zaman bir etki gostermez*/
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 031f 	and.w	r3, r3, #31
 8000504:	2201      	movs	r2, #1
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	4013      	ands	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
	tempValue |=  (0x1U<<(IRQNumber  &  0x1FU));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 031f 	and.w	r3, r3, #31
 8000518:	2201      	movs	r2, #1
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
	*((IRQNumber>>5)+ NVIC_ISER0) = tempValue;
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	b2db      	uxtb	r3, r3
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000530:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <GPIO_Init>:
#include "GPIO.h"

void GPIO_Init(GPIO_Typedef_t* GPIOx,GPIO_InitTypeDef_t* GPIO_InitStruct)
{
 8000544:	b480      	push	{r7}
 8000546:	b087      	sub	sp, #28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t testpos=0;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
	uint32_t lastpos=0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]

	for(position=0; position<16;position++){
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e0a4      	b.n	80006a6 <GPIO_Init+0x162>

		testpos = 0x1<<position;
 800055c:	2201      	movs	r2, #1
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	613b      	str	r3, [r7, #16]
		lastpos = (uint32_t)(GPIO_InitStruct->pinNumber & testpos);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]

		if(lastpos == testpos)
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	429a      	cmp	r2, r3
 8000576:	f040 8093 	bne.w	80006a0 <GPIO_Init+0x15c>
		{
			uint32_t tempValue = GPIOx->MODER;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3<<(position*2));
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	2203      	movs	r2, #3
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_InitStruct->Mode << (position*2);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	601a      	str	r2, [r3, #0]

			if(GPIO_InitStruct->Mode == GPIO_MODE_OUTPUT || GPIO_InitStruct->Mode == GPIO_MODE_ALTERNATE)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d003      	beq.n	80005bc <GPIO_Init+0x78>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d12f      	bne.n	800061c <GPIO_Init+0xd8>
			{

				tempValue = GPIOx->OTYPER;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1<<position);
 80005c2:	2201      	movs	r2, #1
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_InitStruct->Otype<<position;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	605a      	str	r2, [r3, #4]

				tempValue = GPIOx->OSPEEDR;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3<<(position*2));
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2203      	movs	r2, #3
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4013      	ands	r3, r2
 8000602:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_InitStruct->Speed<<(position*2);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	691a      	ldr	r2, [r3, #16]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	4313      	orrs	r3, r2
 8000614:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	609a      	str	r2, [r3, #8]

			}
			tempValue = GPIOx->PUPDR;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3<<(position*2));
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2203      	movs	r2, #3
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4013      	ands	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_InitStruct->PuPd << (position*2);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	4313      	orrs	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	60da      	str	r2, [r3, #12]


			if( GPIO_InitStruct->Mode == GPIO_MODE_ALTERNATE)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d124      	bne.n	80006a0 <GPIO_Init+0x15c>
			{
				tempValue = GPIOx->AFR[position>>3];
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	08da      	lsrs	r2, r3, #3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3208      	adds	r2, #8
 800065e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000662:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xF<<((position & 0x7)*4));
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	220f      	movs	r2, #15
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_InitStruct->Alternate<<((position & 0x7)*4));
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	4313      	orrs	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position>>3] = tempValue;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	08da      	lsrs	r2, r3, #3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3208      	adds	r2, #8
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position=0; position<16;position++){
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3301      	adds	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	f67f af57 	bls.w	800055c <GPIO_Init+0x18>

	}



}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <GPIO_TogglePin>:
	tempreg = GPIOx->LCKR;

}

void GPIO_TogglePin(GPIO_Typedef_t * GPIOx, uint16_t pinNumber)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	807b      	strh	r3, [r7, #2]
	uint32_t tempODRreg = GPIOx->ODR;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	60fb      	str	r3, [r7, #12]

	GPIOx->BSRR = ((tempODRreg & pinNumber) <<16U) | (~tempODRreg & pinNumber);
 80006ce:	887a      	ldrh	r2, [r7, #2]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4013      	ands	r3, r2
 80006d4:	041a      	lsls	r2, r3, #16
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	43d9      	mvns	r1, r3
 80006da:	887b      	ldrh	r3, [r7, #2]
 80006dc:	400b      	ands	r3, r1
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	619a      	str	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 f818 	bl	8000738 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000750 	.word	0x08000750
 800072c:	08000750 	.word	0x08000750
 8000730:	08000750 	.word	0x08000750
 8000734:	08000754 	.word	0x08000754

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
