
ethernet_echo_server_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c80  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012464  08012464  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012464  08012464  00022464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801246c  0801246c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801246c  0801246c  0002246c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012470  08012470  00022470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012474  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00006844  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200068bc  200068bc  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a7e0  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005541  00000000  00000000  0005a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  0005fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  00060e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c891  00000000  00000000  00061da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022378  00000000  00000000  0008e639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9116  00000000  00000000  000b09b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00189ac7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047d8  00000000  00000000  00189b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7cc 	.word	0x0800f7cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f7cc 	.word	0x0800f7cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc62 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f80e 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f876 	bl	8000664 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000578:	f002 fce6 	bl	8002f48 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 800057c:	f000 f9ea 	bl	8000954 <tcp_echoserver_init>
  udp_echoserver_init();
 8000580:	f000 fbee 	bl	8000d60 <udp_echoserver_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000584:	f002 fe12 	bl	80031ac <MX_LWIP_Process>
	  HAL_Delay(50);
 8000588:	2032      	movs	r0, #50	; 0x32
 800058a:	f000 fcc5 	bl	8000f18 <HAL_Delay>
	  MX_LWIP_Process();
 800058e:	e7f9      	b.n	8000584 <main+0x1c>

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00e f8f2 	bl	800e788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000604:	23a8      	movs	r3, #168	; 0xa8
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f002 f84b 	bl	80026b0 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f864 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f002 faac 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064e:	f000 f84d 	bl	80006ec <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x84>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_GPIO_Init+0x84>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_GPIO_Init+0x84>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x84>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 fba0 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_kill>:

int _kill(int pid, int sig)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <_kill+0x20>)
 80007b8:	2216      	movs	r2, #22
 80007ba:	601a      	str	r2, [r3, #0]
	return -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	200068ac 	.word	0x200068ac

080007d0 <_exit>:

void _exit (int status)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe5 	bl	80007ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80007e2:	e7fe      	b.n	80007e2 <_exit+0x12>

080007e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e00a      	b.n	800080c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007f6:	f3af 8000 	nop.w
 80007fa:	4601      	mov	r1, r0
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	b2ca      	uxtb	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf0      	blt.n	80007f6 <_read+0x12>
	}

return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e009      	b.n	8000844 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf1      	blt.n	8000830 <_write+0x12>
	}
	return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_close>:

int _close(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	605a      	str	r2, [r3, #4]
	return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d205      	bcs.n	80008fc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <_sbrk+0x6c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	371c      	adds	r7, #28
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20020000 	.word	0x20020000
 8000920:	00000400 	.word	0x00000400
 8000924:	20000094 	.word	0x20000094
 8000928:	200068c0 	.word	0x200068c0
 800092c:	200068ac 	.word	0x200068ac

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800095a:	f006 f8b1 	bl	8006ac0 <tcp_new>
 800095e:	4603      	mov	r3, r0
 8000960:	4a16      	ldr	r2, [pc, #88]	; (80009bc <tcp_echoserver_init+0x68>)
 8000962:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <tcp_echoserver_init+0x68>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d022      	beq.n	80009b2 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <tcp_echoserver_init+0x68>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2207      	movs	r2, #7
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <tcp_echoserver_init+0x6c>)
 8000974:	4618      	mov	r0, r3
 8000976:	f004 ffff 	bl	8005978 <tcp_bind>
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10f      	bne.n	80009a6 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <tcp_echoserver_init+0x68>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4618      	mov	r0, r3
 800098e:	f005 f8ab 	bl	8005ae8 <tcp_listen_with_backlog>
 8000992:	4603      	mov	r3, r0
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <tcp_echoserver_init+0x68>)
 8000996:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <tcp_echoserver_init+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4909      	ldr	r1, [pc, #36]	; (80009c4 <tcp_echoserver_init+0x70>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f006 f90e 	bl	8006bc0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80009a4:	e005      	b.n	80009b2 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <tcp_echoserver_init+0x68>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2001      	movs	r0, #1
 80009ae:	f003 fc2d 	bl	800420c <memp_free>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000098 	.word	0x20000098
 80009c0:	08012304 	.word	0x08012304
 80009c4:	080009c9 	.word	0x080009c9

080009c8 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80009d6:	2101      	movs	r1, #1
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f005 fe7f 	bl	80066dc <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80009de:	200c      	movs	r0, #12
 80009e0:	f003 fa5a 	bl	8003e98 <mem_malloc>
 80009e4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d01f      	beq.n	8000a2c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2200      	movs	r2, #0
 80009fc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f006 f862 	bl	8006ad0 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000a0c:	490d      	ldr	r1, [pc, #52]	; (8000a44 <tcp_echoserver_accept+0x7c>)
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f006 f870 	bl	8006af4 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <tcp_echoserver_accept+0x80>)
 8000a16:	68b8      	ldr	r0, [r7, #8]
 8000a18:	f006 f8b0 	bl	8006b7c <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <tcp_echoserver_accept+0x84>)
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f006 f8e5 	bl	8006bf0 <tcp_poll>
    
    ret_err = ERR_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
 8000a2a:	e005      	b.n	8000a38 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000a2c:	6939      	ldr	r1, [r7, #16]
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f000 f96f 	bl	8000d12 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000a34:	23ff      	movs	r3, #255	; 0xff
 8000a36:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08000a51 	.word	0x08000a51
 8000a48:	08000b99 	.word	0x08000b99
 8000a4c:	08000bbd 	.word	0x08000bbd

08000a50 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <tcp_echoserver_recv+0x20>
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <tcp_echoserver_recv+0x134>)
 8000a66:	22ad      	movs	r2, #173	; 0xad
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <tcp_echoserver_recv+0x138>)
 8000a6a:	4848      	ldr	r0, [pc, #288]	; (8000b8c <tcp_echoserver_recv+0x13c>)
 8000a6c:	f00d fe94 	bl	800e798 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d116      	bne.n	8000aa8 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000a88:	69b9      	ldr	r1, [r7, #24]
 8000a8a:	68b8      	ldr	r0, [r7, #8]
 8000a8c:	f000 f941 	bl	8000d12 <tcp_echoserver_connection_close>
 8000a90:	e007      	b.n	8000aa2 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000a92:	493f      	ldr	r1, [pc, #252]	; (8000b90 <tcp_echoserver_recv+0x140>)
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f006 f84f 	bl	8006b38 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000a9a:	69b9      	ldr	r1, [r7, #24]
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f000 f8e5 	bl	8000c6c <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	77fb      	strb	r3, [r7, #31]
 8000aa6:	e067      	b.n	8000b78 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00b      	beq.n	8000ac8 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f004 f9b7 	bl	8004e30 <pbuf_free>
    }
    ret_err = err;
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	77fb      	strb	r3, [r7, #31]
 8000ac6:	e057      	b.n	8000b78 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d114      	bne.n	8000afa <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000adc:	492c      	ldr	r1, [pc, #176]	; (8000b90 <tcp_echoserver_recv+0x140>)
 8000ade:	68b8      	ldr	r0, [r7, #8]
 8000ae0:	f006 f82a 	bl	8006b38 <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <tcp_echoserver_recv+0x144>)
 8000aea:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000aec:	69b9      	ldr	r1, [r7, #24]
 8000aee:	68b8      	ldr	r0, [r7, #8]
 8000af0:	f000 f8bc 	bl	8000c6c <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	77fb      	strb	r3, [r7, #31]
 8000af8:	e03e      	b.n	8000b78 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d119      	bne.n	8000b36 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10b      	bne.n	8000b22 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <tcp_echoserver_recv+0x144>)
 8000b16:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000b18:	69b9      	ldr	r1, [r7, #24]
 8000b1a:	68b8      	ldr	r0, [r7, #8]
 8000b1c:	f000 f8a6 	bl	8000c6c <tcp_echoserver_send>
 8000b20:	e006      	b.n	8000b30 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f004 fa98 	bl	8005060 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	77fb      	strb	r3, [r7, #31]
 8000b34:	e020      	b.n	8000b78 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d10e      	bne.n	8000b5c <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	891b      	ldrh	r3, [r3, #8]
 8000b42:	4619      	mov	r1, r3
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f005 f8e5 	bl	8005d14 <tcp_recved>
    es->p = NULL;
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f004 f96d 	bl	8004e30 <pbuf_free>
    ret_err = ERR_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	77fb      	strb	r3, [r7, #31]
 8000b5a:	e00d      	b.n	8000b78 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	891b      	ldrh	r3, [r3, #8]
 8000b60:	4619      	mov	r1, r3
 8000b62:	68b8      	ldr	r0, [r7, #8]
 8000b64:	f005 f8d6 	bl	8005d14 <tcp_recved>
    es->p = NULL;
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f004 f95e 	bl	8004e30 <pbuf_free>
    ret_err = ERR_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	0800f7e4 	.word	0x0800f7e4
 8000b88:	0800f804 	.word	0x0800f804
 8000b8c:	0800f810 	.word	0x0800f810
 8000b90:	08000c1d 	.word	0x08000c1d
 8000b94:	0800f838 	.word	0x0800f838

08000b98 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f003 f80c 	bl	8003bcc <mem_free>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d017      	beq.n	8000c00 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d008      	beq.n	8000bea <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000bd8:	490f      	ldr	r1, [pc, #60]	; (8000c18 <tcp_echoserver_poll+0x5c>)
 8000bda:	6838      	ldr	r0, [r7, #0]
 8000bdc:	f005 ffac 	bl	8006b38 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6838      	ldr	r0, [r7, #0]
 8000be4:	f000 f842 	bl	8000c6c <tcp_echoserver_send>
 8000be8:	e007      	b.n	8000bfa <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d103      	bne.n	8000bfa <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	6838      	ldr	r0, [r7, #0]
 8000bf6:	f000 f88c 	bl	8000d12 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	73fb      	strb	r3, [r7, #15]
 8000bfe:	e004      	b.n	8000c0a <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f004 fead 	bl	8005960 <tcp_abort>
    ret_err = ERR_ABRT;
 8000c06:	23f3      	movs	r3, #243	; 0xf3
 8000c08:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08000c1d 	.word	0x08000c1d

08000c1c <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	4613      	mov	r3, r2
 8000c28:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2200      	movs	r2, #0
 8000c32:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d008      	beq.n	8000c4e <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c3c:	490a      	ldr	r1, [pc, #40]	; (8000c68 <tcp_echoserver_sent+0x4c>)
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f005 ff7a 	bl	8006b38 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000c44:	6979      	ldr	r1, [r7, #20]
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f000 f810 	bl	8000c6c <tcp_echoserver_send>
 8000c4c:	e007      	b.n	8000c5e <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d103      	bne.n	8000c5e <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000c56:	6979      	ldr	r1, [r7, #20]
 8000c58:	68b8      	ldr	r0, [r7, #8]
 8000c5a:	f000 f85a 	bl	8000d12 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	08000c1d 	.word	0x08000c1d

08000c6c <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000c7a:	e036      	b.n	8000cea <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	6859      	ldr	r1, [r3, #4]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	895a      	ldrh	r2, [r3, #10]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f008 fe5d 	bl	800994c <tcp_write>
 8000c92:	4603      	mov	r3, r0
 8000c94:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d11d      	bne.n	8000cda <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	895b      	ldrh	r3, [r3, #10]
 8000ca2:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f004 f959 	bl	8004f70 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000cbe:	6938      	ldr	r0, [r7, #16]
 8000cc0:	f004 f8b6 	bl	8004e30 <pbuf_free>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f7      	beq.n	8000cbe <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f005 f81e 	bl	8005d14 <tcp_recved>
 8000cd8:	e007      	b.n	8000cea <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce2:	d102      	bne.n	8000cea <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10b      	bne.n	8000d0a <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d007      	beq.n	8000d0a <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	895a      	ldrh	r2, [r3, #10]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d9b8      	bls.n	8000c7c <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f005 fed6 	bl	8006ad0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000d24:	2100      	movs	r1, #0
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f005 ff06 	bl	8006b38 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f005 fee0 	bl	8006af4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000d34:	2100      	movs	r1, #0
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f005 ff20 	bl	8006b7c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f005 ff55 	bl	8006bf0 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000d4c:	6838      	ldr	r0, [r7, #0]
 8000d4e:	f002 ff3d 	bl	8003bcc <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f004 fd1a 	bl	800578c <tcp_close>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d66:	f00b f9c7 	bl	800c0f8 <udp_new>
 8000d6a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d013      	beq.n	8000d9a <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000d72:	2207      	movs	r2, #7
 8000d74:	490b      	ldr	r1, [pc, #44]	; (8000da4 <udp_echoserver_init+0x44>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f00b f83e 	bl	800bdf8 <udp_bind>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4907      	ldr	r1, [pc, #28]	; (8000da8 <udp_echoserver_init+0x48>)
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f00b f951 	bl	800c034 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000d92:	e002      	b.n	8000d9a <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f00b f96d 	bl	800c074 <udp_remove>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	08012304 	.word	0x08012304
 8000da8:	08000dad 	.word	0x08000dad

08000dac <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000dba:	2207      	movs	r2, #7
 8000dbc:	6839      	ldr	r1, [r7, #0]
 8000dbe:	68b8      	ldr	r0, [r7, #8]
 8000dc0:	f00b f8a2 	bl	800bf08 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	68b8      	ldr	r0, [r7, #8]
 8000dc8:	f00a fe2c 	bl	800ba24 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000dcc:	68b8      	ldr	r0, [r7, #8]
 8000dce:	f00b f909 	bl	800bfe4 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f004 f82c 	bl	8004e30 <pbuf_free>
   
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff fd91 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f00d fc7b 	bl	800e708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fba9 	bl	8000568 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e24:	08012474 	.word	0x08012474
  ldr r2, =_sbss
 8000e28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e2c:	200068bc 	.word	0x200068bc

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f931 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fc46 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f93b 	bl	8001112 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f911 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000214 	.word	0x20000214

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000214 	.word	0x20000214

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5c 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800113c:	4baa      	ldr	r3, [pc, #680]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 800113e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e183      	b.n	800145a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f002 f82c 	bl	80031c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a9d      	ldr	r2, [pc, #628]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
 800117c:	4b9b      	ldr	r3, [pc, #620]	; (80013ec <HAL_ETH_Init+0x2c0>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001188:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800118e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001192:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001194:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4994      	ldr	r1, [pc, #592]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ba:	f7ff fea1 	bl	8000f00 <HAL_GetTick>
 80011be:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011c0:	e011      	b.n	80011e6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011c2:	f7ff fe9d 	bl	8000f00 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d0:	d909      	bls.n	80011e6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e139      	b.n	800145a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f023 031c 	bic.w	r3, r3, #28
 8001206:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001208:	f001 fe92 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 800120c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4a78      	ldr	r2, [pc, #480]	; (80013f4 <HAL_ETH_Init+0x2c8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d908      	bls.n	8001228 <HAL_ETH_Init+0xfc>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a77      	ldr	r2, [pc, #476]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d804      	bhi.n	8001228 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e027      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4a73      	ldr	r2, [pc, #460]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d908      	bls.n	8001242 <HAL_ETH_Init+0x116>
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4a6d      	ldr	r2, [pc, #436]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d204      	bcs.n	8001242 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e01a      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d303      	bcc.n	8001252 <HAL_ETH_Init+0x126>
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4a6b      	ldr	r2, [pc, #428]	; (80013fc <HAL_ETH_Init+0x2d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d911      	bls.n	8001276 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a69      	ldr	r2, [pc, #420]	; (80013fc <HAL_ETH_Init+0x2d0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d908      	bls.n	800126c <HAL_ETH_Init+0x140>
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4a68      	ldr	r2, [pc, #416]	; (8001400 <HAL_ETH_Init+0x2d4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d804      	bhi.n	800126c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e005      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e000      	b.n	8001278 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001276:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001280:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001284:	2100      	movs	r1, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fb98 	bl	80019bc <HAL_ETH_WritePHYRegister>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fd4d 	bl	8001d38 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0d7      	b.n	800145a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012aa:	20ff      	movs	r0, #255	; 0xff
 80012ac:	f7ff fe34 	bl	8000f18 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a5 	beq.w	8001404 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fe21 	bl	8000f00 <HAL_GetTick>
 80012be:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	461a      	mov	r2, r3
 80012c6:	2101      	movs	r1, #1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb0f 	bl	80018ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012ce:	f7ff fe17 	bl	8000f00 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d90f      	bls.n	8001300 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fd26 	bl	8001d38 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0ac      	b.n	800145a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0da      	beq.n	80012c0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800130a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fb53 	bl	80019bc <HAL_ETH_WritePHYRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fd08 	bl	8001d38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001330:	2301      	movs	r3, #1
 8001332:	e092      	b.n	800145a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001334:	f7ff fde4 	bl	8000f00 <HAL_GetTick>
 8001338:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	461a      	mov	r2, r3
 8001340:	2101      	movs	r1, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fad2 	bl	80018ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001348:	f7ff fdda 	bl	8000f00 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d90f      	bls.n	800137a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fce9 	bl	8001d38 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e06f      	b.n	800145a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0da      	beq.n	800133a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	461a      	mov	r2, r3
 800138a:	2110      	movs	r1, #16
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 faad 	bl	80018ec <HAL_ETH_ReadPHYRegister>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fcca 	bl	8001d38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013ac:	2301      	movs	r3, #1
 80013ae:	e054      	b.n	800145a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e002      	b.n	80013ca <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	e035      	b.n	8001448 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e030      	b.n	8001448 <HAL_ETH_Init+0x31c>
 80013e6:	bf00      	nop
 80013e8:	03938700 	.word	0x03938700
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	01312cff 	.word	0x01312cff
 80013f8:	02160ebf 	.word	0x02160ebf
 80013fc:	05f5e0ff 	.word	0x05f5e0ff
 8001400:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001414:	4313      	orrs	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 facd 	bl	80019bc <HAL_ETH_WritePHYRegister>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fc82 	bl	8001d38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e00c      	b.n	800145a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001440:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001444:	f7ff fd68 	bl	8000f18 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc74 	bl	8001d38 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop

08001464 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ETH_DMATxDescListInit+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e052      	b.n	800152a <HAL_ETH_DMATxDescListInit+0xc6>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e030      	b.n	8001502 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d208      	bcs.n	80014f6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	e002      	b.n	80014fc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ca      	bcc.n	80014a0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	3310      	adds	r3, #16
 8001516:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ETH_DMARxDescListInit+0x20>
 8001552:	2302      	movs	r3, #2
 8001554:	e056      	b.n	8001604 <HAL_ETH_DMARxDescListInit+0xce>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e034      	b.n	80015dc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800158a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	461a      	mov	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d208      	bcs.n	80015d0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	015b      	lsls	r3, r3, #5
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	e002      	b.n	80015d6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3c6      	bcc.n	8001572 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	330c      	adds	r3, #12
 80015f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ETH_TransmitFrame+0x24>
 8001630:	2302      	movs	r3, #2
 8001632:	e0cd      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800165a:	2301      	movs	r3, #1
 800165c:	e0b8      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da09      	bge.n	800167c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2212      	movs	r2, #18
 800166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0a9      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001682:	4293      	cmp	r3, r2
 8001684:	d915      	bls.n	80016b2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_ETH_TransmitFrame+0x1cc>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0a9b      	lsrs	r3, r3, #10
 8001690:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_ETH_TransmitFrame+0x1cc>)
 8001696:	fba3 1302 	umull	r1, r3, r3, r2
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e001      	b.n	80016b6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d11c      	bne.n	80016f6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016ca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016d6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016e6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f4:	e04b      	b.n	800178e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e044      	b.n	8001786 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800170a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001720:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800172a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3b01      	subs	r3, #1
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	429a      	cmp	r2, r3
 8001734:	d116      	bne.n	8001764 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001744:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <HAL_ETH_TransmitFrame+0x1d0>)
 800174a:	fb02 f203 	mul.w	r2, r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4413      	add	r3, r2
 8001752:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001756:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001762:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001772:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	3301      	adds	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3b6      	bcc.n	80016fc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	3314      	adds	r3, #20
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	3314      	adds	r3, #20
 80017ac:	2204      	movs	r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	3304      	adds	r3, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	ac02b00b 	.word	0xac02b00b
 80017e0:	fffffa0c 	.word	0xfffffa0c

080017e4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ETH_GetReceivedFrame+0x1a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e070      	b.n	80018e0 <HAL_ETH_GetReceivedFrame+0xfc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db5a      	blt.n	80018ce <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d030      	beq.n	8001888 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	2b01      	cmp	r3, #1
 8001836:	d103      	bne.n	8001840 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001854:	3b04      	subs	r3, #4
 8001856:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e02b      	b.n	80018e0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
 80018b6:	e00a      	b.n	80018ce <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	460b      	mov	r3, r1
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b82      	cmp	r3, #130	; 0x82
 800190c:	d101      	bne.n	8001912 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
 8001910:	e050      	b.n	80019b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2282      	movs	r2, #130	; 0x82
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 031c 	and.w	r3, r3, #28
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8a1b      	ldrh	r3, [r3, #16]
 800192e:	02db      	lsls	r3, r3, #11
 8001930:	b29b      	uxth	r3, r3
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4313      	orrs	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f023 0302 	bic.w	r3, r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800195e:	f7ff facf 	bl	8000f00 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001964:	e015      	b.n	8001992 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001966:	f7ff facb 	bl	8000f00 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d309      	bcc.n	800198a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e014      	b.n	80019b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e4      	bne.n	8001966 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	460b      	mov	r3, r1
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b42      	cmp	r3, #66	; 0x42
 80019dc:	d101      	bne.n	80019e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019de:	2302      	movs	r3, #2
 80019e0:	e04e      	b.n	8001a80 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2242      	movs	r2, #66	; 0x42
 80019e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 031c 	and.w	r3, r3, #28
 80019f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8a1b      	ldrh	r3, [r3, #16]
 80019fe:	02db      	lsls	r3, r3, #11
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a08:	897b      	ldrh	r3, [r7, #10]
 8001a0a:	019b      	lsls	r3, r3, #6
 8001a0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff fa62 	bl	8000f00 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a3e:	e015      	b.n	8001a6c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a40:	f7ff fa5e 	bl	8000f00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d309      	bcc.n	8001a64 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e00d      	b.n	8001a80 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e4      	bne.n	8001a40 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ETH_Start+0x16>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e01f      	b.n	8001ade <HAL_ETH_Start+0x56>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fb44 	bl	800213c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fb7b 	bl	80021b0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fc12 	bl	80022e4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fbaf 	bl	8002224 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fbdc 	bl	8002284 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ETH_Stop+0x16>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e01f      	b.n	8001b3c <HAL_ETH_Stop+0x56>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fba1 	bl	8002254 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fbce 	bl	80022b4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fb66 	bl	80021ea <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fbe0 	bl	80022e4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fb26 	bl	8002176 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_ETH_ConfigMAC+0x1c>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e0e4      	b.n	8001d2a <HAL_ETH_ConfigMAC+0x1e6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80b1 	beq.w	8001cda <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b90:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b96:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b9c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ba2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ba8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001bae:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001bb4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001bba:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001bc0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001bc6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001bcc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001bd2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff f994 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c00:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c06:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c0c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c12:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c18:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c1e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c2a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c2c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff f96e 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c4c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c56:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c66:	4013      	ands	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c74:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c7a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c80:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c86:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c8c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f937 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff f924 	bl	8000f18 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	61da      	str	r2, [r3, #28]
 8001cd8:	e01e      	b.n	8001d18 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ce8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff f904 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	ff20810f 	.word	0xff20810f

08001d38 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0b0      	sub	sp, #192	; 0xc0
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d54:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	663b      	str	r3, [r7, #96]	; 0x60
 8001d84:	e001      	b.n	8001d8a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d94:	2300      	movs	r3, #0
 8001d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001da4:	2340      	movs	r3, #64	; 0x40
 8001da6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e10:	4bac      	ldr	r3, [pc, #688]	; (80020c4 <ETH_MACDMAConfig+0x38c>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e1c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e20:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e24:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e2a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e2e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e32:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e38:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e3c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e40:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e44:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e48:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e4c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e60:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7ff f853 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e7a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e80:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e84:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e8a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e90:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e96:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ea0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ea8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eaa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff f82e 	bl	8000f18 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ec4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ece:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001ed8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eec:	4013      	ands	r3, r2
 8001eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001efc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f02:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f08:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f0e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f14:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f28:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7fe ffef 	bl	8000f18 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f42:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f44:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7fe ffda 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f6c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f76:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f80:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f92:	2304      	movs	r3, #4
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc2:	3318      	adds	r3, #24
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <ETH_MACDMAConfig+0x390>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fd6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fda:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001fdc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001fde:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fe0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fe2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fe4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fe6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fe8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001fea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ff2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ff6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ff8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	3318      	adds	r3, #24
 800200c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	3318      	adds	r3, #24
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002022:	2001      	movs	r0, #1
 8002024:	f7fe ff78 	bl	8000f18 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002030:	3318      	adds	r3, #24
 8002032:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002036:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800203a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800203c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002040:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002044:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002048:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800204a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800204e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002052:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800205c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002060:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7fe ff51 	bl	8000f18 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002082:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d10f      	bne.n	80020ac <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	331c      	adds	r3, #28
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	331c      	adds	r3, #28
 80020aa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	461a      	mov	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f809 	bl	80020cc <ETH_MACAddressConfig>
}
 80020ba:	bf00      	nop
 80020bc:	37c0      	adds	r7, #192	; 0xc0
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	ff20810f 	.word	0xff20810f
 80020c8:	f8de3f23 	.word	0xf8de3f23

080020cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3305      	adds	r3, #5
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	3204      	adds	r2, #4
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <ETH_MACAddressConfig+0x68>)
 80020ee:	4413      	add	r3, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3303      	adds	r3, #3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	061a      	lsls	r2, r3, #24
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3302      	adds	r3, #2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3301      	adds	r3, #1
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4313      	orrs	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <ETH_MACAddressConfig+0x6c>)
 800211e:	4413      	add	r3, r2
 8002120:	461a      	mov	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	6013      	str	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40028040 	.word	0x40028040
 8002138:	40028044 	.word	0x40028044

0800213c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002160:	2001      	movs	r0, #1
 8002162:	f000 f8e9 	bl	8002338 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0208 	bic.w	r2, r2, #8
 8002190:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800219a:	2001      	movs	r0, #1
 800219c:	f000 f8cc 	bl	8002338 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0204 	orr.w	r2, r2, #4
 80021ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f000 f8af 	bl	8002338 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0204 	bic.w	r2, r2, #4
 8002204:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800220e:	2001      	movs	r0, #1
 8002210:	f000 f892 	bl	8002338 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3318      	adds	r3, #24
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002244:	3318      	adds	r3, #24
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	3318      	adds	r3, #24
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	3318      	adds	r3, #24
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	3318      	adds	r3, #24
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0202 	orr.w	r2, r2, #2
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	3318      	adds	r3, #24
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	3318      	adds	r3, #24
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0202 	bic.w	r2, r2, #2
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	3318      	adds	r3, #24
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	3318      	adds	r3, #24
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002308:	3318      	adds	r3, #24
 800230a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	3318      	adds	r3, #24
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f000 f80c 	bl	8002338 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	3318      	adds	r3, #24
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <ETH_Delay+0x38>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <ETH_Delay+0x3c>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002354:	bf00      	nop
  } 
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <ETH_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000000 	.word	0x20000000
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e16b      	b.n	800266c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 815a 	bne.w	8002666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d005      	beq.n	80023ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d130      	bne.n	800242c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0201 	and.w	r2, r3, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d017      	beq.n	8002468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d123      	bne.n	80024bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80b4 	beq.w	8002666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a5f      	ldr	r2, [pc, #380]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a5b      	ldr	r2, [pc, #364]	; (8002688 <HAL_GPIO_Init+0x310>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_GPIO_Init+0x314>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <HAL_GPIO_Init+0x226>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a51      	ldr	r2, [pc, #324]	; (8002690 <HAL_GPIO_Init+0x318>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x222>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <HAL_GPIO_Init+0x31c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x21e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <HAL_GPIO_Init+0x320>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x21a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_GPIO_Init+0x324>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x216>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4d      	ldr	r2, [pc, #308]	; (80026a0 <HAL_GPIO_Init+0x328>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x212>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x32c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_GPIO_Init+0x330>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x20a>
 800257e:	2307      	movs	r3, #7
 8002580:	e00e      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002582:	2308      	movs	r3, #8
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002586:	2306      	movs	r3, #6
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	; (8002688 <HAL_GPIO_Init+0x310>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e2:	4a32      	ldr	r2, [pc, #200]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_GPIO_Init+0x334>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x334>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f ae90 	bls.w	8002394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e264      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d075      	beq.n	80027ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ce:	4ba3      	ldr	r3, [pc, #652]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4ba0      	ldr	r3, [pc, #640]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d112      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b9d      	ldr	r3, [pc, #628]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4b99      	ldr	r3, [pc, #612]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05b      	beq.n	80027b8 <HAL_RCC_OscConfig+0x108>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d157      	bne.n	80027b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e23f      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x74>
 8002716:	4b91      	ldr	r3, [pc, #580]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a90      	ldr	r2, [pc, #576]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x98>
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a8a      	ldr	r2, [pc, #552]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b88      	ldr	r3, [pc, #544]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a87      	ldr	r2, [pc, #540]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002748:	4b84      	ldr	r3, [pc, #528]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a83      	ldr	r2, [pc, #524]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a80      	ldr	r2, [pc, #512]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fbca 	bl	8000f00 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fbc6 	bl	8000f00 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e204      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b76      	ldr	r3, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xc0>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fbb6 	bl	8000f00 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fbb2 	bl	8000f00 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1f0      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b6c      	ldr	r3, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0xe8>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b62      	ldr	r3, [pc, #392]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1c4      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4952      	ldr	r1, [pc, #328]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e03a      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCC_OscConfig+0x2b0>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fb6b 	bl	8000f00 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fb67 	bl	8000f00 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1a5      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4940      	ldr	r1, [pc, #256]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0x2b0>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fb4a 	bl	8000f00 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002870:	f7fe fb46 	bl	8000f00 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e184      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d030      	beq.n	80028fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCC_OscConfig+0x2b4>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fb2a 	bl	8000f00 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fb26 	bl	8000f00 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e164      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x200>
 80028ce:	e015      	b.n	80028fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_RCC_OscConfig+0x2b4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fb13 	bl	8000f00 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe fb0f 	bl	8000f00 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e14d      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a0 	beq.w	8002a4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_OscConfig+0x2b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d121      	bne.n	800298a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RCC_OscConfig+0x2b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <HAL_RCC_OscConfig+0x2b8>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fad5 	bl	8000f00 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e011      	b.n	800297e <HAL_RCC_OscConfig+0x2ce>
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	42470000 	.word	0x42470000
 8002964:	42470e80 	.word	0x42470e80
 8002968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe fac8 	bl	8000f00 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e106      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b85      	ldr	r3, [pc, #532]	; (8002b94 <HAL_RCC_OscConfig+0x4e4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2f0>
 8002992:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x312>
 80029a8:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a7a      	ldr	r2, [pc, #488]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x32a>
 80029c2:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a74      	ldr	r2, [pc, #464]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a71      	ldr	r2, [pc, #452]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fa8d 	bl	8000f00 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fa89 	bl	8000f00 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0c5      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x33a>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fa77 	bl	8000f00 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fa73 	bl	8000f00 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0af      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 809b 	beq.w	8002b8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d05c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d141      	bne.n	8002aec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_RCC_OscConfig+0x4ec>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fa47 	bl	8000f00 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fa43 	bl	8000f00 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e081      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	019b      	lsls	r3, r3, #6
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	061b      	lsls	r3, r3, #24
 8002ab8:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_OscConfig+0x4ec>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fa1c 	bl	8000f00 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fa18 	bl	8000f00 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e056      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x41c>
 8002aea:	e04e      	b.n	8002b8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_OscConfig+0x4ec>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fa05 	bl	8000f00 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fa01 	bl	8000f00 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e03f      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x44a>
 8002b18:	e037      	b.n	8002b8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e032      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d028      	beq.n	8002b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d121      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d11a      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b56:	4013      	ands	r3, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40007000 	.word	0x40007000
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470060 	.word	0x42470060

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0cc      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d90c      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b8      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	494d      	ldr	r1, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d044      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e067      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4934      	ldr	r1, [pc, #208]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe f936 	bl	8000f00 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe f932 	bl	8000f00 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e04f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d20c      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e032      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4916      	ldr	r1, [pc, #88]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d26:	f000 f821 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490a      	ldr	r1, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f896 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08012224 	.word	0x08012224
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000004 	.word	0x20000004

08002d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x40>
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	f200 80bd 	bhi.w	8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9e:	e0b7      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002da2:	60bb      	str	r3, [r7, #8]
       break;
 8002da4:	e0b7      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da6:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002da8:	60bb      	str	r3, [r7, #8]
      break;
 8002daa:	e0b4      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db6:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d04d      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc2:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	ea02 0800 	and.w	r8, r2, r0
 8002dda:	ea03 0901 	and.w	r9, r3, r1
 8002dde:	4640      	mov	r0, r8
 8002de0:	4649      	mov	r1, r9
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	014b      	lsls	r3, r1, #5
 8002dec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df0:	0142      	lsls	r2, r0, #5
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	ebb0 0008 	subs.w	r0, r0, r8
 8002dfa:	eb61 0109 	sbc.w	r1, r1, r9
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	018b      	lsls	r3, r1, #6
 8002e08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e0c:	0182      	lsls	r2, r0, #6
 8002e0e:	1a12      	subs	r2, r2, r0
 8002e10:	eb63 0301 	sbc.w	r3, r3, r1
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	00d9      	lsls	r1, r3, #3
 8002e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e22:	00d0      	lsls	r0, r2, #3
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	eb12 0208 	adds.w	r2, r2, r8
 8002e2c:	eb43 0309 	adc.w	r3, r3, r9
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	0259      	lsls	r1, r3, #9
 8002e3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e3e:	0250      	lsls	r0, r2, #9
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f7fd fa0e 	bl	8000270 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e04a      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	461a      	mov	r2, r3
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	ea02 0400 	and.w	r4, r2, r0
 8002e76:	ea03 0501 	and.w	r5, r3, r1
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	014b      	lsls	r3, r1, #5
 8002e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e8c:	0142      	lsls	r2, r0, #5
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	1b00      	subs	r0, r0, r4
 8002e94:	eb61 0105 	sbc.w	r1, r1, r5
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	018b      	lsls	r3, r1, #6
 8002ea2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ea6:	0182      	lsls	r2, r0, #6
 8002ea8:	1a12      	subs	r2, r2, r0
 8002eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002eae:	f04f 0000 	mov.w	r0, #0
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	00d9      	lsls	r1, r3, #3
 8002eb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ebc:	00d0      	lsls	r0, r2, #3
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	1912      	adds	r2, r2, r4
 8002ec4:	eb45 0303 	adc.w	r3, r5, r3
 8002ec8:	f04f 0000 	mov.w	r0, #0
 8002ecc:	f04f 0100 	mov.w	r1, #0
 8002ed0:	0299      	lsls	r1, r3, #10
 8002ed2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ed6:	0290      	lsls	r0, r2, #10
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	f7fd f9c2 	bl	8000270 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	3301      	adds	r3, #1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
      break;
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f12:	60bb      	str	r3, [r7, #8]
      break;
 8002f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f16:	68bb      	ldr	r3, [r7, #8]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	00f42400 	.word	0x00f42400
 8002f2c:	007a1200 	.word	0x007a1200

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000000 	.word	0x20000000

08002f48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002f4e:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002f50:	22c0      	movs	r2, #192	; 0xc0
 8002f52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002f54:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002f56:	22a8      	movs	r2, #168	; 0xa8
 8002f58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002f5a:	4b8a      	ldr	r3, [pc, #552]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8002f60:	4b88      	ldr	r3, [pc, #544]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002f62:	220a      	movs	r2, #10
 8002f64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <MX_LWIP_Init+0x240>)
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f6c:	4b86      	ldr	r3, [pc, #536]	; (8003188 <MX_LWIP_Init+0x240>)
 8002f6e:	22ff      	movs	r2, #255	; 0xff
 8002f70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002f72:	4b85      	ldr	r3, [pc, #532]	; (8003188 <MX_LWIP_Init+0x240>)
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f78:	4b83      	ldr	r3, [pc, #524]	; (8003188 <MX_LWIP_Init+0x240>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8002f7e:	4b83      	ldr	r3, [pc, #524]	; (800318c <MX_LWIP_Init+0x244>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <MX_LWIP_Init+0x244>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002f8a:	4b80      	ldr	r3, [pc, #512]	; (800318c <MX_LWIP_Init+0x244>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8002f90:	4b7e      	ldr	r3, [pc, #504]	; (800318c <MX_LWIP_Init+0x244>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002f96:	f000 fcc5 	bl	8003924 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002f9a:	4b7a      	ldr	r3, [pc, #488]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	061a      	lsls	r2, r3, #24
 8002fa0:	4b78      	ldr	r3, [pc, #480]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	4b76      	ldr	r3, [pc, #472]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002faa:	789b      	ldrb	r3, [r3, #2]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	4a74      	ldr	r2, [pc, #464]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fb2:	78d2      	ldrb	r2, [r2, #3]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	061a      	lsls	r2, r3, #24
 8002fb8:	4b72      	ldr	r3, [pc, #456]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	0619      	lsls	r1, r3, #24
 8002fbe:	4b71      	ldr	r3, [pc, #452]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	4319      	orrs	r1, r3
 8002fc6:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fc8:	789b      	ldrb	r3, [r3, #2]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	496d      	ldr	r1, [pc, #436]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fd0:	78c9      	ldrb	r1, [r1, #3]
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0619      	lsls	r1, r3, #24
 8002fe2:	4b68      	ldr	r3, [pc, #416]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	4319      	orrs	r1, r3
 8002fea:	4b66      	ldr	r3, [pc, #408]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	4964      	ldr	r1, [pc, #400]	; (8003184 <MX_LWIP_Init+0x23c>)
 8002ff4:	78c9      	ldrb	r1, [r1, #3]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ffe:	431a      	orrs	r2, r3
 8003000:	4b60      	ldr	r3, [pc, #384]	; (8003184 <MX_LWIP_Init+0x23c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	0619      	lsls	r1, r3, #24
 8003006:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <MX_LWIP_Init+0x23c>)
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	4319      	orrs	r1, r3
 800300e:	4b5d      	ldr	r3, [pc, #372]	; (8003184 <MX_LWIP_Init+0x23c>)
 8003010:	789b      	ldrb	r3, [r3, #2]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	430b      	orrs	r3, r1
 8003016:	495b      	ldr	r1, [pc, #364]	; (8003184 <MX_LWIP_Init+0x23c>)
 8003018:	78c9      	ldrb	r1, [r1, #3]
 800301a:	430b      	orrs	r3, r1
 800301c:	0e1b      	lsrs	r3, r3, #24
 800301e:	4313      	orrs	r3, r2
 8003020:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <MX_LWIP_Init+0x248>)
 8003022:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003024:	4b58      	ldr	r3, [pc, #352]	; (8003188 <MX_LWIP_Init+0x240>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	061a      	lsls	r2, r3, #24
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <MX_LWIP_Init+0x240>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	041b      	lsls	r3, r3, #16
 8003030:	431a      	orrs	r2, r3
 8003032:	4b55      	ldr	r3, [pc, #340]	; (8003188 <MX_LWIP_Init+0x240>)
 8003034:	789b      	ldrb	r3, [r3, #2]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	4313      	orrs	r3, r2
 800303a:	4a53      	ldr	r2, [pc, #332]	; (8003188 <MX_LWIP_Init+0x240>)
 800303c:	78d2      	ldrb	r2, [r2, #3]
 800303e:	4313      	orrs	r3, r2
 8003040:	061a      	lsls	r2, r3, #24
 8003042:	4b51      	ldr	r3, [pc, #324]	; (8003188 <MX_LWIP_Init+0x240>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	0619      	lsls	r1, r3, #24
 8003048:	4b4f      	ldr	r3, [pc, #316]	; (8003188 <MX_LWIP_Init+0x240>)
 800304a:	785b      	ldrb	r3, [r3, #1]
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	4319      	orrs	r1, r3
 8003050:	4b4d      	ldr	r3, [pc, #308]	; (8003188 <MX_LWIP_Init+0x240>)
 8003052:	789b      	ldrb	r3, [r3, #2]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	430b      	orrs	r3, r1
 8003058:	494b      	ldr	r1, [pc, #300]	; (8003188 <MX_LWIP_Init+0x240>)
 800305a:	78c9      	ldrb	r1, [r1, #3]
 800305c:	430b      	orrs	r3, r1
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003064:	431a      	orrs	r2, r3
 8003066:	4b48      	ldr	r3, [pc, #288]	; (8003188 <MX_LWIP_Init+0x240>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	0619      	lsls	r1, r3, #24
 800306c:	4b46      	ldr	r3, [pc, #280]	; (8003188 <MX_LWIP_Init+0x240>)
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	4319      	orrs	r1, r3
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <MX_LWIP_Init+0x240>)
 8003076:	789b      	ldrb	r3, [r3, #2]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	430b      	orrs	r3, r1
 800307c:	4942      	ldr	r1, [pc, #264]	; (8003188 <MX_LWIP_Init+0x240>)
 800307e:	78c9      	ldrb	r1, [r1, #3]
 8003080:	430b      	orrs	r3, r1
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003088:	431a      	orrs	r2, r3
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <MX_LWIP_Init+0x240>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	0619      	lsls	r1, r3, #24
 8003090:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <MX_LWIP_Init+0x240>)
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	4319      	orrs	r1, r3
 8003098:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <MX_LWIP_Init+0x240>)
 800309a:	789b      	ldrb	r3, [r3, #2]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	430b      	orrs	r3, r1
 80030a0:	4939      	ldr	r1, [pc, #228]	; (8003188 <MX_LWIP_Init+0x240>)
 80030a2:	78c9      	ldrb	r1, [r1, #3]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	0e1b      	lsrs	r3, r3, #24
 80030a8:	4313      	orrs	r3, r2
 80030aa:	4a3a      	ldr	r2, [pc, #232]	; (8003194 <MX_LWIP_Init+0x24c>)
 80030ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <MX_LWIP_Init+0x244>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	061a      	lsls	r2, r3, #24
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <MX_LWIP_Init+0x244>)
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <MX_LWIP_Init+0x244>)
 80030be:	789b      	ldrb	r3, [r3, #2]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4313      	orrs	r3, r2
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <MX_LWIP_Init+0x244>)
 80030c6:	78d2      	ldrb	r2, [r2, #3]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	061a      	lsls	r2, r3, #24
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <MX_LWIP_Init+0x244>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	0619      	lsls	r1, r3, #24
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <MX_LWIP_Init+0x244>)
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	4319      	orrs	r1, r3
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <MX_LWIP_Init+0x244>)
 80030dc:	789b      	ldrb	r3, [r3, #2]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	430b      	orrs	r3, r1
 80030e2:	492a      	ldr	r1, [pc, #168]	; (800318c <MX_LWIP_Init+0x244>)
 80030e4:	78c9      	ldrb	r1, [r1, #3]
 80030e6:	430b      	orrs	r3, r1
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030ee:	431a      	orrs	r2, r3
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <MX_LWIP_Init+0x244>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	0619      	lsls	r1, r3, #24
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <MX_LWIP_Init+0x244>)
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	4319      	orrs	r1, r3
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <MX_LWIP_Init+0x244>)
 8003100:	789b      	ldrb	r3, [r3, #2]
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	430b      	orrs	r3, r1
 8003106:	4921      	ldr	r1, [pc, #132]	; (800318c <MX_LWIP_Init+0x244>)
 8003108:	78c9      	ldrb	r1, [r1, #3]
 800310a:	430b      	orrs	r3, r1
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003112:	431a      	orrs	r2, r3
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <MX_LWIP_Init+0x244>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	0619      	lsls	r1, r3, #24
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <MX_LWIP_Init+0x244>)
 800311c:	785b      	ldrb	r3, [r3, #1]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	4319      	orrs	r1, r3
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <MX_LWIP_Init+0x244>)
 8003124:	789b      	ldrb	r3, [r3, #2]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	430b      	orrs	r3, r1
 800312a:	4918      	ldr	r1, [pc, #96]	; (800318c <MX_LWIP_Init+0x244>)
 800312c:	78c9      	ldrb	r1, [r1, #3]
 800312e:	430b      	orrs	r3, r1
 8003130:	0e1b      	lsrs	r3, r3, #24
 8003132:	4313      	orrs	r3, r2
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <MX_LWIP_Init+0x250>)
 8003136:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <MX_LWIP_Init+0x254>)
 800313a:	9302      	str	r3, [sp, #8]
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <MX_LWIP_Init+0x258>)
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <MX_LWIP_Init+0x250>)
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <MX_LWIP_Init+0x24c>)
 8003148:	4911      	ldr	r1, [pc, #68]	; (8003190 <MX_LWIP_Init+0x248>)
 800314a:	4816      	ldr	r0, [pc, #88]	; (80031a4 <MX_LWIP_Init+0x25c>)
 800314c:	f001 f890 	bl	8004270 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003150:	4814      	ldr	r0, [pc, #80]	; (80031a4 <MX_LWIP_Init+0x25c>)
 8003152:	f001 fa3f 	bl	80045d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <MX_LWIP_Init+0x25c>)
 8003158:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003168:	480e      	ldr	r0, [pc, #56]	; (80031a4 <MX_LWIP_Init+0x25c>)
 800316a:	f001 fa43 	bl	80045f4 <netif_set_up>
 800316e:	e002      	b.n	8003176 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <MX_LWIP_Init+0x25c>)
 8003172:	f001 faab 	bl	80046cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003176:	490c      	ldr	r1, [pc, #48]	; (80031a8 <MX_LWIP_Init+0x260>)
 8003178:	480a      	ldr	r0, [pc, #40]	; (80031a4 <MX_LWIP_Init+0x25c>)
 800317a:	f001 fad9 	bl	8004730 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000258 	.word	0x20000258
 8003188:	20000254 	.word	0x20000254
 800318c:	20000218 	.word	0x20000218
 8003190:	20000250 	.word	0x20000250
 8003194:	2000025c 	.word	0x2000025c
 8003198:	20000260 	.word	0x20000260
 800319c:	0800e55d 	.word	0x0800e55d
 80031a0:	08003751 	.word	0x08003751
 80031a4:	2000021c 	.word	0x2000021c
 80031a8:	080037bd 	.word	0x080037bd

080031ac <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80031b0:	4803      	ldr	r0, [pc, #12]	; (80031c0 <MX_LWIP_Process+0x14>)
 80031b2:	f000 faad 	bl	8003710 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80031b6:	f008 fa31 	bl	800b61c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000021c 	.word	0x2000021c

080031c4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a46      	ldr	r2, [pc, #280]	; (80032fc <HAL_ETH_MspInit+0x138>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	f040 8085 	bne.w	80032f2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	4b44      	ldr	r3, [pc, #272]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	4a43      	ldr	r2, [pc, #268]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 80031f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031f6:	6313      	str	r3, [r2, #48]	; 0x30
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4a3c      	ldr	r2, [pc, #240]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800320e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003212:	6313      	str	r3, [r2, #48]	; 0x30
 8003214:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4a35      	ldr	r2, [pc, #212]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800322a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800322e:	6313      	str	r3, [r2, #48]	; 0x30
 8003230:	4b33      	ldr	r3, [pc, #204]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6313      	str	r3, [r2, #48]	; 0x30
 800324c:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_ETH_MspInit+0x13c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003290:	2332      	movs	r3, #50	; 0x32
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032a0:	230b      	movs	r3, #11
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a8:	4619      	mov	r1, r3
 80032aa:	4816      	ldr	r0, [pc, #88]	; (8003304 <HAL_ETH_MspInit+0x140>)
 80032ac:	f7ff f864 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80032b0:	2386      	movs	r3, #134	; 0x86
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032bc:	2303      	movs	r3, #3
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032c0:	230b      	movs	r3, #11
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c8:	4619      	mov	r1, r3
 80032ca:	480f      	ldr	r0, [pc, #60]	; (8003308 <HAL_ETH_MspInit+0x144>)
 80032cc:	f7ff f854 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80032d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	2302      	movs	r3, #2
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032de:	2303      	movs	r3, #3
 80032e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032e2:	230b      	movs	r3, #11
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ea:	4619      	mov	r1, r3
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <HAL_ETH_MspInit+0x148>)
 80032ee:	f7ff f843 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80032f2:	bf00      	nop
 80032f4:	3738      	adds	r7, #56	; 0x38
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40028000 	.word	0x40028000
 8003300:	40023800 	.word	0x40023800
 8003304:	40020800 	.word	0x40020800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400

08003310 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <low_level_init+0x144>)
 800331e:	4a4e      	ldr	r2, [pc, #312]	; (8003458 <low_level_init+0x148>)
 8003320:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003322:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <low_level_init+0x144>)
 8003324:	2201      	movs	r2, #1
 8003326:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <low_level_init+0x144>)
 800332a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800332e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <low_level_init+0x144>)
 8003332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003336:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <low_level_init+0x144>)
 800333a:	2201      	movs	r2, #1
 800333c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003346:	23e1      	movs	r3, #225	; 0xe1
 8003348:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800334a:	2300      	movs	r3, #0
 800334c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800334e:	2300      	movs	r3, #0
 8003350:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003352:	2300      	movs	r3, #0
 8003354:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003356:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <low_level_init+0x144>)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <low_level_init+0x144>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <low_level_init+0x144>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <low_level_init+0x144>)
 800336c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003370:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003372:	4838      	ldr	r0, [pc, #224]	; (8003454 <low_level_init+0x144>)
 8003374:	f7fd feda 	bl	800112c <HAL_ETH_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d108      	bne.n	8003394 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	b2da      	uxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003394:	2304      	movs	r3, #4
 8003396:	4a31      	ldr	r2, [pc, #196]	; (800345c <low_level_init+0x14c>)
 8003398:	4931      	ldr	r1, [pc, #196]	; (8003460 <low_level_init+0x150>)
 800339a:	482e      	ldr	r0, [pc, #184]	; (8003454 <low_level_init+0x144>)
 800339c:	f7fe f862 	bl	8001464 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80033a0:	2304      	movs	r3, #4
 80033a2:	4a30      	ldr	r2, [pc, #192]	; (8003464 <low_level_init+0x154>)
 80033a4:	4930      	ldr	r1, [pc, #192]	; (8003468 <low_level_init+0x158>)
 80033a6:	482b      	ldr	r0, [pc, #172]	; (8003454 <low_level_init+0x144>)
 80033a8:	f7fe f8c5 	bl	8001536 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2206      	movs	r2, #6
 80033b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <low_level_init+0x144>)
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <low_level_init+0x144>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	785a      	ldrb	r2, [r3, #1]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80033cc:	4b21      	ldr	r3, [pc, #132]	; (8003454 <low_level_init+0x144>)
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	789a      	ldrb	r2, [r3, #2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <low_level_init+0x144>)
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	78da      	ldrb	r2, [r3, #3]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <low_level_init+0x144>)
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	791a      	ldrb	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <low_level_init+0x144>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	795a      	ldrb	r2, [r3, #5]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003402:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800340a:	f043 030a 	orr.w	r3, r3, #10
 800340e:	b2da      	uxtb	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003416:	480f      	ldr	r0, [pc, #60]	; (8003454 <low_level_init+0x144>)
 8003418:	f7fe fb36 	bl	8001a88 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	461a      	mov	r2, r3
 8003422:	211d      	movs	r1, #29
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <low_level_init+0x144>)
 8003426:	f7fe fa61 	bl	80018ec <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f043 030b 	orr.w	r3, r3, #11
 8003430:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	461a      	mov	r2, r3
 8003436:	211d      	movs	r1, #29
 8003438:	4806      	ldr	r0, [pc, #24]	; (8003454 <low_level_init+0x144>)
 800343a:	f7fe fabf 	bl	80019bc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800343e:	f107 0310 	add.w	r3, r7, #16
 8003442:	461a      	mov	r2, r3
 8003444:	211d      	movs	r1, #29
 8003446:	4803      	ldr	r0, [pc, #12]	; (8003454 <low_level_init+0x144>)
 8003448:	f7fe fa50 	bl	80018ec <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800344c:	bf00      	nop
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20001b34 	.word	0x20001b34
 8003458:	40028000 	.word	0x40028000
 800345c:	20001b7c 	.word	0x20001b7c
 8003460:	20000264 	.word	0x20000264
 8003464:	200002e4 	.word	0x200002e4
 8003468:	20001ab4 	.word	0x20001ab4

0800346c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <low_level_output+0x138>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800348e:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <low_level_output+0x138>)
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	e05a      	b.n	8003554 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da03      	bge.n	80034ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80034a6:	23f8      	movs	r3, #248	; 0xf8
 80034a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80034ac:	e05c      	b.n	8003568 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	895b      	ldrh	r3, [r3, #10]
 80034b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80034b8:	e02f      	b.n	800351a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	18d0      	adds	r0, r2, r3
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	18d1      	adds	r1, r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80034ce:	3304      	adds	r3, #4
 80034d0:	461a      	mov	r2, r3
 80034d2:	f00b f94b 	bl	800e76c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da03      	bge.n	80034ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80034e4:	23f8      	movs	r3, #248	; 0xf8
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80034ea:	e03d      	b.n	8003568 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80034fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003508:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003514:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003524:	4293      	cmp	r3, r2
 8003526:	d8c8      	bhi.n	80034ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	18d0      	adds	r0, r2, r3
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4413      	add	r3, r2
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4619      	mov	r1, r3
 800353a:	f00b f917 	bl	800e76c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1a1      	bne.n	800349e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	4811      	ldr	r0, [pc, #68]	; (80035a4 <low_level_output+0x138>)
 800355e:	f7fe f857 	bl	8001610 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <low_level_output+0x138>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	3314      	adds	r3, #20
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <low_level_output+0x138>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003584:	3314      	adds	r3, #20
 8003586:	2220      	movs	r2, #32
 8003588:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <low_level_output+0x138>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003592:	3304      	adds	r3, #4
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20001b34 	.word	0x20001b34

080035a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80035cc:	484f      	ldr	r0, [pc, #316]	; (800370c <low_level_input+0x164>)
 80035ce:	f7fe f909 	bl	80017e4 <HAL_ETH_GetReceivedFrame>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <low_level_input+0x34>

    return NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	e092      	b.n	8003702 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <low_level_input+0x164>)
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80035e2:	4b4a      	ldr	r3, [pc, #296]	; (800370c <low_level_input+0x164>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80035ee:	89fb      	ldrh	r3, [r7, #14]
 80035f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80035f4:	4619      	mov	r1, r3
 80035f6:	2000      	movs	r0, #0
 80035f8:	f001 f936 	bl	8004868 <pbuf_alloc>
 80035fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04b      	beq.n	800369c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003604:	4b41      	ldr	r3, [pc, #260]	; (800370c <low_level_input+0x164>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 8003612:	e040      	b.n	8003696 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	895b      	ldrh	r3, [r3, #10]
 8003618:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800361e:	e021      	b.n	8003664 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	18d0      	adds	r0, r2, r3
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	18d1      	adds	r1, r2, r3
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003634:	3304      	adds	r3, #4
 8003636:	461a      	mov	r2, r3
 8003638:	f00b f898 	bl	800e76c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	4413      	add	r3, r2
 800364e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003652:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800365e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800366e:	4293      	cmp	r3, r2
 8003670:	d8d6      	bhi.n	8003620 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	18d0      	adds	r0, r2, r3
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4619      	mov	r1, r3
 8003684:	f00b f872 	bl	800e76c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1bb      	bne.n	8003614 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <low_level_input+0x164>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e00b      	b.n	80036c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <low_level_input+0x164>)
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3ee      	bcc.n	80036a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <low_level_input+0x164>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <low_level_input+0x164>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d8:	3314      	adds	r3, #20
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <low_level_input+0x164>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	3314      	adds	r3, #20
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80036f2:	4b06      	ldr	r3, [pc, #24]	; (800370c <low_level_input+0x164>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	3308      	adds	r3, #8
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003702:	4618      	mov	r0, r3
 8003704:	3730      	adds	r7, #48	; 0x30
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20001b34 	.word	0x20001b34

08003710 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff45 	bl	80035a8 <low_level_input>
 800371e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	4798      	blx	r3
 8003730:	4603      	mov	r3, r0
 8003732:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003734:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f001 fb77 	bl	8004e30 <pbuf_free>
    p = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e000      	b.n	800374a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003748:	bf00      	nop
  }
}
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <ethernetif_init+0x1c>
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <ethernetif_init+0x48>)
 8003760:	f240 2207 	movw	r2, #519	; 0x207
 8003764:	490d      	ldr	r1, [pc, #52]	; (800379c <ethernetif_init+0x4c>)
 8003766:	480e      	ldr	r0, [pc, #56]	; (80037a0 <ethernetif_init+0x50>)
 8003768:	f00b f816 	bl	800e798 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2273      	movs	r2, #115	; 0x73
 8003770:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2274      	movs	r2, #116	; 0x74
 8003778:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <ethernetif_init+0x54>)
 8003780:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <ethernetif_init+0x58>)
 8003786:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fdc1 	bl	8003310 <low_level_init>

  return ERR_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	0800f844 	.word	0x0800f844
 800379c:	0800f860 	.word	0x0800f860
 80037a0:	0800f870 	.word	0x0800f870
 80037a4:	0800ca21 	.word	0x0800ca21
 80037a8:	0800346d 	.word	0x0800346d

080037ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80037b0:	f7fd fba6 	bl	8000f00 <HAL_GetTick>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d05d      	beq.n	800389a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <ethernetif_update_config+0xf4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03f      	beq.n	8003866 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80037e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ea:	2100      	movs	r1, #0
 80037ec:	4830      	ldr	r0, [pc, #192]	; (80038b0 <ethernetif_update_config+0xf4>)
 80037ee:	f7fe f8e5 	bl	80019bc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fd fb85 	bl	8000f00 <HAL_GetTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	461a      	mov	r2, r3
 8003800:	2101      	movs	r1, #1
 8003802:	482b      	ldr	r0, [pc, #172]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003804:	f7fe f872 	bl	80018ec <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003808:	f7fd fb7a 	bl	8000f00 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003816:	d828      	bhi.n	800386a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0eb      	beq.n	80037fa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003822:	f107 0308 	add.w	r3, r7, #8
 8003826:	461a      	mov	r2, r3
 8003828:	2110      	movs	r1, #16
 800382a:	4821      	ldr	r0, [pc, #132]	; (80038b0 <ethernetif_update_config+0xf4>)
 800382c:	f7fe f85e 	bl	80018ec <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <ethernetif_update_config+0xf4>)
 800383c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	e002      	b.n	800384a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	e016      	b.n	800388a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <ethernetif_update_config+0xf4>)
 800385e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	e011      	b.n	800388a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <ethernetif_update_config+0xb0>
          goto error;
 800386a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <ethernetif_update_config+0xf4>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800387c:	4313      	orrs	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	2100      	movs	r1, #0
 8003884:	480a      	ldr	r0, [pc, #40]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003886:	f7fe f899 	bl	80019bc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800388a:	2100      	movs	r1, #0
 800388c:	4808      	ldr	r0, [pc, #32]	; (80038b0 <ethernetif_update_config+0xf4>)
 800388e:	f7fe f959 	bl	8001b44 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003892:	4807      	ldr	r0, [pc, #28]	; (80038b0 <ethernetif_update_config+0xf4>)
 8003894:	f7fe f8f8 	bl	8001a88 <HAL_ETH_Start>
 8003898:	e002      	b.n	80038a0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800389a:	4805      	ldr	r0, [pc, #20]	; (80038b0 <ethernetif_update_config+0xf4>)
 800389c:	f7fe f923 	bl	8001ae6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f807 	bl	80038b4 <ethernetif_notify_conn_changed>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20001b34 	.word	0x20001b34

080038b4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	b21a      	sxth	r2, r3
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b21b      	sxth	r3, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	b29b      	uxth	r3, r3
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	061a      	lsls	r2, r3, #24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	4313      	orrs	r3, r2
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800392e:	f000 f8d5 	bl	8003adc <mem_init>
  memp_init();
 8003932:	f000 fbdb 	bl	80040ec <memp_init>
  pbuf_init();
  netif_init();
 8003936:	f000 fc93 	bl	8004260 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800393a:	f007 feb1 	bl	800b6a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800393e:	f001 fd15 	bl	800536c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003942:	f007 fe23 	bl	800b58c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <ptr_to_mem+0x20>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4413      	add	r3, r2
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	2000009c 	.word	0x2000009c

08003974 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <mem_to_ptr+0x20>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	b29b      	uxth	r3, r3
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	2000009c 	.word	0x2000009c

08003998 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <plug_holes+0x120>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d206      	bcs.n	80039b8 <plug_holes+0x20>
 80039aa:	4b44      	ldr	r3, [pc, #272]	; (8003abc <plug_holes+0x124>)
 80039ac:	f240 12df 	movw	r2, #479	; 0x1df
 80039b0:	4943      	ldr	r1, [pc, #268]	; (8003ac0 <plug_holes+0x128>)
 80039b2:	4844      	ldr	r0, [pc, #272]	; (8003ac4 <plug_holes+0x12c>)
 80039b4:	f00a fef0 	bl	800e798 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80039b8:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <plug_holes+0x130>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d306      	bcc.n	80039d0 <plug_holes+0x38>
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <plug_holes+0x124>)
 80039c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039c8:	4940      	ldr	r1, [pc, #256]	; (8003acc <plug_holes+0x134>)
 80039ca:	483e      	ldr	r0, [pc, #248]	; (8003ac4 <plug_holes+0x12c>)
 80039cc:	f00a fee4 	bl	800e798 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <plug_holes+0x4e>
 80039d8:	4b38      	ldr	r3, [pc, #224]	; (8003abc <plug_holes+0x124>)
 80039da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80039de:	493c      	ldr	r1, [pc, #240]	; (8003ad0 <plug_holes+0x138>)
 80039e0:	4838      	ldr	r0, [pc, #224]	; (8003ac4 <plug_holes+0x12c>)
 80039e2:	f00a fed9 	bl	800e798 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039ee:	d906      	bls.n	80039fe <plug_holes+0x66>
 80039f0:	4b32      	ldr	r3, [pc, #200]	; (8003abc <plug_holes+0x124>)
 80039f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80039f6:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <plug_holes+0x13c>)
 80039f8:	4832      	ldr	r0, [pc, #200]	; (8003ac4 <plug_holes+0x12c>)
 80039fa:	f00a fecd 	bl	800e798 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ffa4 	bl	8003950 <ptr_to_mem>
 8003a08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d024      	beq.n	8003a5c <plug_holes+0xc4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d120      	bne.n	8003a5c <plug_holes+0xc4>
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <plug_holes+0x130>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d01b      	beq.n	8003a5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003a24:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <plug_holes+0x140>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d102      	bne.n	8003a34 <plug_holes+0x9c>
      lfree = mem;
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <plug_holes+0x140>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a44:	d00a      	beq.n	8003a5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff80 	bl	8003950 <ptr_to_mem>
 8003a50:	4604      	mov	r4, r0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff8e 	bl	8003974 <mem_to_ptr>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	885b      	ldrh	r3, [r3, #2]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff75 	bl	8003950 <ptr_to_mem>
 8003a66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d01f      	beq.n	8003ab0 <plug_holes+0x118>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	791b      	ldrb	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11b      	bne.n	8003ab0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <plug_holes+0x140>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d102      	bne.n	8003a88 <plug_holes+0xf0>
      lfree = pmem;
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <plug_holes+0x140>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a98:	d00a      	beq.n	8003ab0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff56 	bl	8003950 <ptr_to_mem>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	68b8      	ldr	r0, [r7, #8]
 8003aa8:	f7ff ff64 	bl	8003974 <mem_to_ptr>
 8003aac:	4603      	mov	r3, r0
 8003aae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	2000009c 	.word	0x2000009c
 8003abc:	0800f898 	.word	0x0800f898
 8003ac0:	0800f8c8 	.word	0x0800f8c8
 8003ac4:	0800f8e0 	.word	0x0800f8e0
 8003ac8:	200000a0 	.word	0x200000a0
 8003acc:	0800f908 	.word	0x0800f908
 8003ad0:	0800f924 	.word	0x0800f924
 8003ad4:	0800f940 	.word	0x0800f940
 8003ad8:	200000a4 	.word	0x200000a4

08003adc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <mem_init+0x68>)
 8003ae4:	3303      	adds	r3, #3
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <mem_init+0x6c>)
 8003aee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <mem_init+0x6c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003afc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b0a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003b0e:	f7ff ff1f 	bl	8003950 <ptr_to_mem>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <mem_init+0x70>)
 8003b16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <mem_init+0x70>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <mem_init+0x70>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <mem_init+0x70>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003b32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <mem_init+0x6c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <mem_init+0x74>)
 8003b3a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20003364 	.word	0x20003364
 8003b48:	2000009c 	.word	0x2000009c
 8003b4c:	200000a0 	.word	0x200000a0
 8003b50:	200000a4 	.word	0x200000a4

08003b54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff09 	bl	8003974 <mem_to_ptr>
 8003b62:	4603      	mov	r3, r0
 8003b64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fef0 	bl	8003950 <ptr_to_mem>
 8003b70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	885b      	ldrh	r3, [r3, #2]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff feea 	bl	8003950 <ptr_to_mem>
 8003b7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b86:	d818      	bhi.n	8003bba <mem_link_valid+0x66>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	885b      	ldrh	r3, [r3, #2]
 8003b8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b90:	d813      	bhi.n	8003bba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b96:	8afa      	ldrh	r2, [r7, #22]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d004      	beq.n	8003ba6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	8afa      	ldrh	r2, [r7, #22]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d109      	bne.n	8003bba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <mem_link_valid+0x74>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d006      	beq.n	8003bbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	885b      	ldrh	r3, [r3, #2]
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <mem_link_valid+0x6a>
    return 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <mem_link_valid+0x6c>
  }
  return 1;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200000a0 	.word	0x200000a0

08003bcc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04c      	beq.n	8003c74 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <mem_free+0xb0>)
 8003be6:	f240 2273 	movw	r2, #627	; 0x273
 8003bea:	4925      	ldr	r1, [pc, #148]	; (8003c80 <mem_free+0xb4>)
 8003bec:	4825      	ldr	r0, [pc, #148]	; (8003c84 <mem_free+0xb8>)
 8003bee:	f00a fdd3 	bl	800e798 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003bf2:	e040      	b.n	8003c76 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b08      	subs	r3, #8
 8003bf8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <mem_free+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d306      	bcc.n	8003c12 <mem_free+0x46>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 020c 	add.w	r2, r3, #12
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <mem_free+0xc0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d907      	bls.n	8003c22 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <mem_free+0xb0>)
 8003c14:	f240 227f 	movw	r2, #639	; 0x27f
 8003c18:	491d      	ldr	r1, [pc, #116]	; (8003c90 <mem_free+0xc4>)
 8003c1a:	481a      	ldr	r0, [pc, #104]	; (8003c84 <mem_free+0xb8>)
 8003c1c:	f00a fdbc 	bl	800e798 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c20:	e029      	b.n	8003c76 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	791b      	ldrb	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <mem_free+0xb0>)
 8003c2c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003c30:	4918      	ldr	r1, [pc, #96]	; (8003c94 <mem_free+0xc8>)
 8003c32:	4814      	ldr	r0, [pc, #80]	; (8003c84 <mem_free+0xb8>)
 8003c34:	f00a fdb0 	bl	800e798 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c38:	e01d      	b.n	8003c76 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff8a 	bl	8003b54 <mem_link_valid>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <mem_free+0xb0>)
 8003c48:	f240 2295 	movw	r2, #661	; 0x295
 8003c4c:	4912      	ldr	r1, [pc, #72]	; (8003c98 <mem_free+0xcc>)
 8003c4e:	480d      	ldr	r0, [pc, #52]	; (8003c84 <mem_free+0xb8>)
 8003c50:	f00a fda2 	bl	800e798 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c54:	e00f      	b.n	8003c76 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <mem_free+0xd0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d202      	bcs.n	8003c6c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <mem_free+0xd0>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff fe93 	bl	8003998 <plug_holes>
 8003c72:	e000      	b.n	8003c76 <mem_free+0xaa>
    return;
 8003c74:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	0800f898 	.word	0x0800f898
 8003c80:	0800f96c 	.word	0x0800f96c
 8003c84:	0800f8e0 	.word	0x0800f8e0
 8003c88:	2000009c 	.word	0x2000009c
 8003c8c:	200000a0 	.word	0x200000a0
 8003c90:	0800f990 	.word	0x0800f990
 8003c94:	0800f9ac 	.word	0x0800f9ac
 8003c98:	0800f9d4 	.word	0x0800f9d4
 8003c9c:	200000a4 	.word	0x200000a4

08003ca0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	3303      	adds	r3, #3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003cb8:	8bfb      	ldrh	r3, [r7, #30]
 8003cba:	2b0b      	cmp	r3, #11
 8003cbc:	d801      	bhi.n	8003cc2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003cc2:	8bfb      	ldrh	r3, [r7, #30]
 8003cc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cc8:	d803      	bhi.n	8003cd2 <mem_trim+0x32>
 8003cca:	8bfa      	ldrh	r2, [r7, #30]
 8003ccc:	887b      	ldrh	r3, [r7, #2]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d201      	bcs.n	8003cd6 <mem_trim+0x36>
    return NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e0cc      	b.n	8003e70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003cd6:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <mem_trim+0x1d8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d304      	bcc.n	8003cea <mem_trim+0x4a>
 8003ce0:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <mem_trim+0x1dc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d306      	bcc.n	8003cf8 <mem_trim+0x58>
 8003cea:	4b65      	ldr	r3, [pc, #404]	; (8003e80 <mem_trim+0x1e0>)
 8003cec:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003cf0:	4964      	ldr	r1, [pc, #400]	; (8003e84 <mem_trim+0x1e4>)
 8003cf2:	4865      	ldr	r0, [pc, #404]	; (8003e88 <mem_trim+0x1e8>)
 8003cf4:	f00a fd50 	bl	800e798 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003cf8:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <mem_trim+0x1d8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d304      	bcc.n	8003d0c <mem_trim+0x6c>
 8003d02:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <mem_trim+0x1dc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d301      	bcc.n	8003d10 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e0af      	b.n	8003e70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b08      	subs	r3, #8
 8003d14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003d16:	69b8      	ldr	r0, [r7, #24]
 8003d18:	f7ff fe2c 	bl	8003974 <mem_to_ptr>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	8afb      	ldrh	r3, [r7, #22]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b08      	subs	r3, #8
 8003d2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d2e:	8bfa      	ldrh	r2, [r7, #30]
 8003d30:	8abb      	ldrh	r3, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d906      	bls.n	8003d44 <mem_trim+0xa4>
 8003d36:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <mem_trim+0x1e0>)
 8003d38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003d3c:	4953      	ldr	r1, [pc, #332]	; (8003e8c <mem_trim+0x1ec>)
 8003d3e:	4852      	ldr	r0, [pc, #328]	; (8003e88 <mem_trim+0x1e8>)
 8003d40:	f00a fd2a 	bl	800e798 <iprintf>
  if (newsize > size) {
 8003d44:	8bfa      	ldrh	r2, [r7, #30]
 8003d46:	8abb      	ldrh	r3, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d901      	bls.n	8003d50 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e08f      	b.n	8003e70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003d50:	8bfa      	ldrh	r2, [r7, #30]
 8003d52:	8abb      	ldrh	r3, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d101      	bne.n	8003d5c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	e089      	b.n	8003e70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fdf5 	bl	8003950 <ptr_to_mem>
 8003d66:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13f      	bne.n	8003df0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d78:	d106      	bne.n	8003d88 <mem_trim+0xe8>
 8003d7a:	4b41      	ldr	r3, [pc, #260]	; (8003e80 <mem_trim+0x1e0>)
 8003d7c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003d80:	4943      	ldr	r1, [pc, #268]	; (8003e90 <mem_trim+0x1f0>)
 8003d82:	4841      	ldr	r0, [pc, #260]	; (8003e88 <mem_trim+0x1e8>)
 8003d84:	f00a fd08 	bl	800e798 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	8bfb      	ldrh	r3, [r7, #30]
 8003d92:	4413      	add	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3308      	adds	r3, #8
 8003d98:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <mem_trim+0x1f4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d106      	bne.n	8003db2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fdd2 	bl	8003950 <ptr_to_mem>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <mem_trim+0x1f4>)
 8003db0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fdcb 	bl	8003950 <ptr_to_mem>
 8003dba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	89ba      	ldrh	r2, [r7, #12]
 8003dc6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	8afa      	ldrh	r2, [r7, #22]
 8003dcc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	89fa      	ldrh	r2, [r7, #14]
 8003dd2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ddc:	d047      	beq.n	8003e6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fdb4 	bl	8003950 <ptr_to_mem>
 8003de8:	4602      	mov	r2, r0
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	8053      	strh	r3, [r2, #2]
 8003dee:	e03e      	b.n	8003e6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003df0:	8bfb      	ldrh	r3, [r7, #30]
 8003df2:	f103 0214 	add.w	r2, r3, #20
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d838      	bhi.n	8003e6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dfc:	8afa      	ldrh	r2, [r7, #22]
 8003dfe:	8bfb      	ldrh	r3, [r7, #30]
 8003e00:	4413      	add	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3308      	adds	r3, #8
 8003e06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e10:	d106      	bne.n	8003e20 <mem_trim+0x180>
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <mem_trim+0x1e0>)
 8003e14:	f240 3216 	movw	r2, #790	; 0x316
 8003e18:	491d      	ldr	r1, [pc, #116]	; (8003e90 <mem_trim+0x1f0>)
 8003e1a:	481b      	ldr	r0, [pc, #108]	; (8003e88 <mem_trim+0x1e8>)
 8003e1c:	f00a fcbc 	bl	800e798 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fd94 	bl	8003950 <ptr_to_mem>
 8003e28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <mem_trim+0x1f4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d202      	bcs.n	8003e3a <mem_trim+0x19a>
      lfree = mem2;
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <mem_trim+0x1f4>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	8afa      	ldrh	r2, [r7, #22]
 8003e4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	89fa      	ldrh	r2, [r7, #14]
 8003e52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e5c:	d007      	beq.n	8003e6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fd74 	bl	8003950 <ptr_to_mem>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	2000009c 	.word	0x2000009c
 8003e7c:	200000a0 	.word	0x200000a0
 8003e80:	0800f898 	.word	0x0800f898
 8003e84:	0800fa08 	.word	0x0800fa08
 8003e88:	0800f8e0 	.word	0x0800f8e0
 8003e8c:	0800fa20 	.word	0x0800fa20
 8003e90:	0800fa40 	.word	0x0800fa40
 8003e94:	200000a4 	.word	0x200000a4

08003e98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <mem_malloc+0x14>
    return NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e0d9      	b.n	8004060 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	3303      	adds	r3, #3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003eb8:	8bbb      	ldrh	r3, [r7, #28]
 8003eba:	2b0b      	cmp	r3, #11
 8003ebc:	d801      	bhi.n	8003ec2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003ec2:	8bbb      	ldrh	r3, [r7, #28]
 8003ec4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ec8:	d803      	bhi.n	8003ed2 <mem_malloc+0x3a>
 8003eca:	8bba      	ldrh	r2, [r7, #28]
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d201      	bcs.n	8003ed6 <mem_malloc+0x3e>
    return NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e0c4      	b.n	8004060 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003ed6:	4b64      	ldr	r3, [pc, #400]	; (8004068 <mem_malloc+0x1d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fd4a 	bl	8003974 <mem_to_ptr>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	83fb      	strh	r3, [r7, #30]
 8003ee4:	e0b4      	b.n	8004050 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003ee6:	8bfb      	ldrh	r3, [r7, #30]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fd31 	bl	8003950 <ptr_to_mem>
 8003eee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 80a4 	bne.w	8004042 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	8bfb      	ldrh	r3, [r7, #30]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f1a3 0208 	sub.w	r2, r3, #8
 8003f08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f0c0 8099 	bcc.w	8004042 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	8bfb      	ldrh	r3, [r7, #30]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f1a3 0208 	sub.w	r2, r3, #8
 8003f1e:	8bbb      	ldrh	r3, [r7, #28]
 8003f20:	3314      	adds	r3, #20
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d333      	bcc.n	8003f8e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003f26:	8bfa      	ldrh	r2, [r7, #30]
 8003f28:	8bbb      	ldrh	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3308      	adds	r3, #8
 8003f30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003f32:	8a7b      	ldrh	r3, [r7, #18]
 8003f34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f38:	d106      	bne.n	8003f48 <mem_malloc+0xb0>
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	; (800406c <mem_malloc+0x1d4>)
 8003f3c:	f240 3287 	movw	r2, #903	; 0x387
 8003f40:	494b      	ldr	r1, [pc, #300]	; (8004070 <mem_malloc+0x1d8>)
 8003f42:	484c      	ldr	r0, [pc, #304]	; (8004074 <mem_malloc+0x1dc>)
 8003f44:	f00a fc28 	bl	800e798 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003f48:	8a7b      	ldrh	r3, [r7, #18]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd00 	bl	8003950 <ptr_to_mem>
 8003f50:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8bfa      	ldrh	r2, [r7, #30]
 8003f64:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	8a7a      	ldrh	r2, [r7, #18]
 8003f6a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f7a:	d00b      	beq.n	8003f94 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fce5 	bl	8003950 <ptr_to_mem>
 8003f86:	4602      	mov	r2, r0
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	8053      	strh	r3, [r2, #2]
 8003f8c:	e002      	b.n	8003f94 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2201      	movs	r2, #1
 8003f92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003f94:	4b34      	ldr	r3, [pc, #208]	; (8004068 <mem_malloc+0x1d0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d127      	bne.n	8003fee <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003f9e:	4b32      	ldr	r3, [pc, #200]	; (8004068 <mem_malloc+0x1d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003fa4:	e005      	b.n	8003fb2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fcd0 	bl	8003950 <ptr_to_mem>
 8003fb0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	791b      	ldrb	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <mem_malloc+0x12c>
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <mem_malloc+0x1e0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1f0      	bne.n	8003fa6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003fc4:	4a28      	ldr	r2, [pc, #160]	; (8004068 <mem_malloc+0x1d0>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <mem_malloc+0x1d0>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <mem_malloc+0x1e0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d00b      	beq.n	8003fee <mem_malloc+0x156>
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <mem_malloc+0x1d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	791b      	ldrb	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <mem_malloc+0x156>
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <mem_malloc+0x1d4>)
 8003fe2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003fe6:	4925      	ldr	r1, [pc, #148]	; (800407c <mem_malloc+0x1e4>)
 8003fe8:	4822      	ldr	r0, [pc, #136]	; (8004074 <mem_malloc+0x1dc>)
 8003fea:	f00a fbd5 	bl	800e798 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003fee:	8bba      	ldrh	r2, [r7, #28]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	4a20      	ldr	r2, [pc, #128]	; (8004078 <mem_malloc+0x1e0>)
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d906      	bls.n	800400c <mem_malloc+0x174>
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <mem_malloc+0x1d4>)
 8004000:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004004:	491e      	ldr	r1, [pc, #120]	; (8004080 <mem_malloc+0x1e8>)
 8004006:	481b      	ldr	r0, [pc, #108]	; (8004074 <mem_malloc+0x1dc>)
 8004008:	f00a fbc6 	bl	800e798 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <mem_malloc+0x18c>
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <mem_malloc+0x1d4>)
 8004018:	f240 32bb 	movw	r2, #955	; 0x3bb
 800401c:	4919      	ldr	r1, [pc, #100]	; (8004084 <mem_malloc+0x1ec>)
 800401e:	4815      	ldr	r0, [pc, #84]	; (8004074 <mem_malloc+0x1dc>)
 8004020:	f00a fbba 	bl	800e798 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <mem_malloc+0x1a4>
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <mem_malloc+0x1d4>)
 8004030:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004034:	4914      	ldr	r1, [pc, #80]	; (8004088 <mem_malloc+0x1f0>)
 8004036:	480f      	ldr	r0, [pc, #60]	; (8004074 <mem_malloc+0x1dc>)
 8004038:	f00a fbae 	bl	800e798 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3308      	adds	r3, #8
 8004040:	e00e      	b.n	8004060 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004042:	8bfb      	ldrh	r3, [r7, #30]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fc83 	bl	8003950 <ptr_to_mem>
 800404a:	4603      	mov	r3, r0
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004050:	8bfa      	ldrh	r2, [r7, #30]
 8004052:	8bbb      	ldrh	r3, [r7, #28]
 8004054:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004058:	429a      	cmp	r2, r3
 800405a:	f4ff af44 	bcc.w	8003ee6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200000a4 	.word	0x200000a4
 800406c:	0800f898 	.word	0x0800f898
 8004070:	0800fa40 	.word	0x0800fa40
 8004074:	0800f8e0 	.word	0x0800f8e0
 8004078:	200000a0 	.word	0x200000a0
 800407c:	0800fa54 	.word	0x0800fa54
 8004080:	0800fa70 	.word	0x0800fa70
 8004084:	0800faa0 	.word	0x0800faa0
 8004088:	0800fad0 	.word	0x0800fad0

0800408c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	3303      	adds	r3, #3
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e011      	b.n	80040d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	885b      	ldrh	r3, [r3, #2]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4293      	cmp	r3, r2
 80040dc:	dbe7      	blt.n	80040ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	80fb      	strh	r3, [r7, #6]
 80040f6:	e009      	b.n	800410c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	4a08      	ldr	r2, [pc, #32]	; (800411c <memp_init+0x30>)
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ffc3 	bl	800408c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	3301      	adds	r3, #1
 800410a:	80fb      	strh	r3, [r7, #6]
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d9f2      	bls.n	80040f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	080122a0 	.word	0x080122a0

08004120 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <do_memp_malloc_pool+0x38>
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <do_memp_malloc_pool+0x48>)
 800414c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004150:	4906      	ldr	r1, [pc, #24]	; (800416c <do_memp_malloc_pool+0x4c>)
 8004152:	4807      	ldr	r0, [pc, #28]	; (8004170 <do_memp_malloc_pool+0x50>)
 8004154:	f00a fb20 	bl	800e798 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e000      	b.n	800415e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800faf4 	.word	0x0800faf4
 800416c:	0800fb24 	.word	0x0800fb24
 8004170:	0800fb48 	.word	0x0800fb48

08004174 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d908      	bls.n	8004196 <memp_malloc+0x22>
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <memp_malloc+0x3c>)
 8004186:	f240 1257 	movw	r2, #343	; 0x157
 800418a:	490a      	ldr	r1, [pc, #40]	; (80041b4 <memp_malloc+0x40>)
 800418c:	480a      	ldr	r0, [pc, #40]	; (80041b8 <memp_malloc+0x44>)
 800418e:	f00a fb03 	bl	800e798 <iprintf>
 8004192:	2300      	movs	r3, #0
 8004194:	e008      	b.n	80041a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	4a08      	ldr	r2, [pc, #32]	; (80041bc <memp_malloc+0x48>)
 800419a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ffbe 	bl	8004120 <do_memp_malloc_pool>
 80041a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	0800faf4 	.word	0x0800faf4
 80041b4:	0800fb84 	.word	0x0800fb84
 80041b8:	0800fb48 	.word	0x0800fb48
 80041bc:	080122a0 	.word	0x080122a0

080041c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <do_memp_free_pool+0x22>
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <do_memp_free_pool+0x40>)
 80041d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80041da:	490a      	ldr	r1, [pc, #40]	; (8004204 <do_memp_free_pool+0x44>)
 80041dc:	480a      	ldr	r0, [pc, #40]	; (8004208 <do_memp_free_pool+0x48>)
 80041de:	f00a fadb 	bl	800e798 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	0800faf4 	.word	0x0800faf4
 8004204:	0800fba4 	.word	0x0800fba4
 8004208:	0800fb48 	.word	0x0800fb48

0800420c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d907      	bls.n	800422e <memp_free+0x22>
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <memp_free+0x44>)
 8004220:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004224:	490b      	ldr	r1, [pc, #44]	; (8004254 <memp_free+0x48>)
 8004226:	480c      	ldr	r0, [pc, #48]	; (8004258 <memp_free+0x4c>)
 8004228:	f00a fab6 	bl	800e798 <iprintf>
 800422c:	e00c      	b.n	8004248 <memp_free+0x3c>

  if (mem == NULL) {
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4a09      	ldr	r2, [pc, #36]	; (800425c <memp_free+0x50>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ffbe 	bl	80041c0 <do_memp_free_pool>
 8004244:	e000      	b.n	8004248 <memp_free+0x3c>
    return;
 8004246:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	0800faf4 	.word	0x0800faf4
 8004254:	0800fbc4 	.word	0x0800fbc4
 8004258:	0800fb48 	.word	0x0800fb48
 800425c:	080122a0 	.word	0x080122a0

08004260 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <netif_add+0x26>
 8004284:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <netif_add+0x174>)
 8004286:	f240 1227 	movw	r2, #295	; 0x127
 800428a:	4957      	ldr	r1, [pc, #348]	; (80043e8 <netif_add+0x178>)
 800428c:	4857      	ldr	r0, [pc, #348]	; (80043ec <netif_add+0x17c>)
 800428e:	f00a fa83 	bl	800e798 <iprintf>
 8004292:	2300      	movs	r3, #0
 8004294:	e0a2      	b.n	80043dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <netif_add+0x3e>
 800429c:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <netif_add+0x174>)
 800429e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80042a2:	4953      	ldr	r1, [pc, #332]	; (80043f0 <netif_add+0x180>)
 80042a4:	4851      	ldr	r0, [pc, #324]	; (80043ec <netif_add+0x17c>)
 80042a6:	f00a fa77 	bl	800e798 <iprintf>
 80042aa:	2300      	movs	r3, #0
 80042ac:	e096      	b.n	80043dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80042b4:	4b4f      	ldr	r3, [pc, #316]	; (80043f4 <netif_add+0x184>)
 80042b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80042be:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <netif_add+0x184>)
 80042c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80042c8:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <netif_add+0x184>)
 80042ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a45      	ldr	r2, [pc, #276]	; (80043f8 <netif_add+0x188>)
 80042e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80042fe:	4b3f      	ldr	r3, [pc, #252]	; (80043fc <netif_add+0x18c>)
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f913 	bl	8004540 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	4798      	blx	r3
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <netif_add+0xba>
    return NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	e058      	b.n	80043dc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004330:	2bff      	cmp	r3, #255	; 0xff
 8004332:	d103      	bne.n	800433c <netif_add+0xcc>
        netif->num = 0;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <netif_add+0x190>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e02b      	b.n	80043a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d106      	bne.n	800435e <netif_add+0xee>
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <netif_add+0x174>)
 8004352:	f240 128b 	movw	r2, #395	; 0x18b
 8004356:	492b      	ldr	r1, [pc, #172]	; (8004404 <netif_add+0x194>)
 8004358:	4824      	ldr	r0, [pc, #144]	; (80043ec <netif_add+0x17c>)
 800435a:	f00a fa1d 	bl	800e798 <iprintf>
        num_netifs++;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2bff      	cmp	r3, #255	; 0xff
 8004368:	dd06      	ble.n	8004378 <netif_add+0x108>
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <netif_add+0x174>)
 800436c:	f240 128d 	movw	r2, #397	; 0x18d
 8004370:	4925      	ldr	r1, [pc, #148]	; (8004408 <netif_add+0x198>)
 8004372:	481e      	ldr	r0, [pc, #120]	; (80043ec <netif_add+0x17c>)
 8004374:	f00a fa10 	bl	800e798 <iprintf>
        if (netif2->num == netif->num) {
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004384:	429a      	cmp	r2, r3
 8004386:	d108      	bne.n	800439a <netif_add+0x12a>
          netif->num++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004398:	e005      	b.n	80043a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d0      	bne.n	8004348 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1be      	bne.n	800432a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b2:	2bfe      	cmp	r3, #254	; 0xfe
 80043b4:	d103      	bne.n	80043be <netif_add+0x14e>
    netif_num = 0;
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <netif_add+0x18c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e006      	b.n	80043cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043c4:	3301      	adds	r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <netif_add+0x18c>)
 80043ca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <netif_add+0x190>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <netif_add+0x190>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	0800fbe0 	.word	0x0800fbe0
 80043e8:	0800fc74 	.word	0x0800fc74
 80043ec:	0800fc30 	.word	0x0800fc30
 80043f0:	0800fc90 	.word	0x0800fc90
 80043f4:	08012304 	.word	0x08012304
 80043f8:	08004753 	.word	0x08004753
 80043fc:	200000cc 	.word	0x200000cc
 8004400:	20006880 	.word	0x20006880
 8004404:	0800fcb4 	.word	0x0800fcb4
 8004408:	0800fcc8 	.word	0x0800fcc8

0800440c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004416:	6839      	ldr	r1, [r7, #0]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f002 fd8f 	bl	8006f3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f007 fe81 	bl	800c128 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <netif_do_set_ipaddr+0x20>
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <netif_do_set_ipaddr+0x88>)
 8004444:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004448:	491c      	ldr	r1, [pc, #112]	; (80044bc <netif_do_set_ipaddr+0x8c>)
 800444a:	481d      	ldr	r0, [pc, #116]	; (80044c0 <netif_do_set_ipaddr+0x90>)
 800444c:	f00a f9a4 	bl	800e798 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <netif_do_set_ipaddr+0x34>
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <netif_do_set_ipaddr+0x88>)
 8004458:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800445c:	4917      	ldr	r1, [pc, #92]	; (80044bc <netif_do_set_ipaddr+0x8c>)
 800445e:	4818      	ldr	r0, [pc, #96]	; (80044c0 <netif_do_set_ipaddr+0x90>)
 8004460:	f00a f99a 	bl	800e798 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3304      	adds	r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d01c      	beq.n	80044ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3304      	adds	r3, #4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ffbf 	bl	800440c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <netif_do_set_ipaddr+0x6a>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	e000      	b.n	800449c <netif_do_set_ipaddr+0x6c>
 800449a:	2300      	movs	r3, #0
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80044a0:	2101      	movs	r1, #1
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8d2 	bl	800464c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	0800fbe0 	.word	0x0800fbe0
 80044bc:	0800fcf8 	.word	0x0800fcf8
 80044c0:	0800fc30 	.word	0x0800fc30

080044c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3308      	adds	r3, #8
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d00a      	beq.n	80044f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <netif_do_set_netmask+0x26>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	e000      	b.n	80044ec <netif_do_set_netmask+0x28>
 80044ea:	2300      	movs	r3, #0
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	330c      	adds	r3, #12
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d00a      	beq.n	8004532 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <netif_do_set_gw+0x26>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	e000      	b.n	800452a <netif_do_set_gw+0x28>
 8004528:	2300      	movs	r3, #0
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800455c:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <netif_set_addr+0x90>)
 800455e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <netif_set_addr+0x90>)
 8004568:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <netif_set_addr+0x90>)
 8004572:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <netif_set_addr+0x42>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <netif_set_addr+0x46>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <netif_set_addr+0x48>
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  if (remove) {
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	461a      	mov	r2, r3
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff ff49 	bl	8004430 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ff8e 	bl	80044c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ffa8 	bl	8004502 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff ff35 	bl	8004430 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80045c6:	bf00      	nop
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	08012304 	.word	0x08012304

080045d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <netif_set_default+0x1c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20006884 	.word	0x20006884

080045f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d107      	bne.n	8004612 <netif_set_up+0x1e>
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <netif_set_up+0x4c>)
 8004604:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <netif_set_up+0x50>)
 800460a:	480f      	ldr	r0, [pc, #60]	; (8004648 <netif_set_up+0x54>)
 800460c:	f00a f8c4 	bl	800e798 <iprintf>
 8004610:	e013      	b.n	800463a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10c      	bne.n	800463a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	b2da      	uxtb	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004632:	2103      	movs	r1, #3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f809 	bl	800464c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	0800fbe0 	.word	0x0800fbe0
 8004644:	0800fd68 	.word	0x0800fd68
 8004648:	0800fc30 	.word	0x0800fc30

0800464c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <netif_issue_reports+0x20>
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <netif_issue_reports+0x74>)
 8004660:	f240 326d 	movw	r2, #877	; 0x36d
 8004664:	4917      	ldr	r1, [pc, #92]	; (80046c4 <netif_issue_reports+0x78>)
 8004666:	4818      	ldr	r0, [pc, #96]	; (80046c8 <netif_issue_reports+0x7c>)
 8004668:	f00a f896 	bl	800e798 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01e      	beq.n	80046b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004680:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004684:	2b00      	cmp	r3, #0
 8004686:	d017      	beq.n	80046b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d013      	beq.n	80046ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f008 fca3 	bl	800cffc <etharp_request>
 80046b6:	e000      	b.n	80046ba <netif_issue_reports+0x6e>
    return;
 80046b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0800fbe0 	.word	0x0800fbe0
 80046c4:	0800fd84 	.word	0x0800fd84
 80046c8:	0800fc30 	.word	0x0800fc30

080046cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d107      	bne.n	80046ea <netif_set_down+0x1e>
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <netif_set_down+0x58>)
 80046dc:	f240 329b 	movw	r2, #923	; 0x39b
 80046e0:	4911      	ldr	r1, [pc, #68]	; (8004728 <netif_set_down+0x5c>)
 80046e2:	4812      	ldr	r0, [pc, #72]	; (800472c <netif_set_down+0x60>)
 80046e4:	f00a f858 	bl	800e798 <iprintf>
 80046e8:	e019      	b.n	800471e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f008 f82d 	bl	800c778 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	0800fbe0 	.word	0x0800fbe0
 8004728:	0800fda8 	.word	0x0800fda8
 800472c:	0800fc30 	.word	0x0800fc30

08004730 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	61da      	str	r2, [r3, #28]
  }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800475e:	f06f 030b 	mvn.w	r3, #11
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <netif_get_by_index+0x48>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e00c      	b.n	80047a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800478e:	3301      	adds	r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	79fa      	ldrb	r2, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d101      	bne.n	800479c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	e006      	b.n	80047aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ef      	bne.n	8004788 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20006880 	.word	0x20006880

080047bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <pbuf_free_ooseq+0x38>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <pbuf_free_ooseq+0x3c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e00a      	b.n	80047e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f002 fbed 	bl	8006fb8 <tcp_free_ooseq>
      return;
 80047de:	e005      	b.n	80047ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f1      	bne.n	80047d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20006888 	.word	0x20006888
 80047f8:	20006890 	.word	0x20006890

080047fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <pbuf_pool_is_empty+0x14>)
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20006888 	.word	0x20006888

08004814 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4611      	mov	r1, r2
 8004820:	461a      	mov	r2, r3
 8004822:	460b      	mov	r3, r1
 8004824:	80fb      	strh	r3, [r7, #6]
 8004826:	4613      	mov	r3, r2
 8004828:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88ba      	ldrh	r2, [r7, #4]
 8004840:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004842:	8b3b      	ldrh	r3, [r7, #24]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	7f3a      	ldrb	r2, [r7, #28]
 800484e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	73da      	strb	r2, [r3, #15]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af02      	add	r7, sp, #8
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
 8004872:	460b      	mov	r3, r1
 8004874:	80bb      	strh	r3, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004884:	d07f      	beq.n	8004986 <pbuf_alloc+0x11e>
 8004886:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800488a:	f300 80c8 	bgt.w	8004a1e <pbuf_alloc+0x1b6>
 800488e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004892:	d010      	beq.n	80048b6 <pbuf_alloc+0x4e>
 8004894:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004898:	f300 80c1 	bgt.w	8004a1e <pbuf_alloc+0x1b6>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <pbuf_alloc+0x3e>
 80048a0:	2b41      	cmp	r3, #65	; 0x41
 80048a2:	f040 80bc 	bne.w	8004a1e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	88bb      	ldrh	r3, [r7, #4]
 80048aa:	4619      	mov	r1, r3
 80048ac:	2000      	movs	r0, #0
 80048ae:	f000 f8d1 	bl	8004a54 <pbuf_alloc_reference>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80048b4:	e0bd      	b.n	8004a32 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80048be:	88bb      	ldrh	r3, [r7, #4]
 80048c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80048c2:	2008      	movs	r0, #8
 80048c4:	f7ff fc56 	bl	8004174 <memp_malloc>
 80048c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80048d0:	f7ff ff94 	bl	80047fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80048da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048dc:	f000 faa8 	bl	8004e30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e0a7      	b.n	8004a34 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80048e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048e6:	3303      	adds	r3, #3
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8b7a      	ldrh	r2, [r7, #26]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bf28      	it	cs
 80048fc:	4613      	movcs	r3, r2
 80048fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004902:	3310      	adds	r3, #16
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	3303      	adds	r3, #3
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	4618      	mov	r0, r3
 8004910:	89f9      	ldrh	r1, [r7, #14]
 8004912:	8b7a      	ldrh	r2, [r7, #26]
 8004914:	2300      	movs	r3, #0
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	4601      	mov	r1, r0
 8004920:	6938      	ldr	r0, [r7, #16]
 8004922:	f7ff ff77 	bl	8004814 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <pbuf_alloc+0xd8>
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <pbuf_alloc+0x1d4>)
 8004934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004938:	4941      	ldr	r1, [pc, #260]	; (8004a40 <pbuf_alloc+0x1d8>)
 800493a:	4842      	ldr	r0, [pc, #264]	; (8004a44 <pbuf_alloc+0x1dc>)
 800493c:	f009 ff2c 	bl	800e798 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004940:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004942:	3303      	adds	r3, #3
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800494c:	d106      	bne.n	800495c <pbuf_alloc+0xf4>
 800494e:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <pbuf_alloc+0x1d4>)
 8004950:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004954:	493c      	ldr	r1, [pc, #240]	; (8004a48 <pbuf_alloc+0x1e0>)
 8004956:	483b      	ldr	r0, [pc, #236]	; (8004a44 <pbuf_alloc+0x1dc>)
 8004958:	f009 ff1e 	bl	800e798 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	e002      	b.n	800496e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004972:	8b7a      	ldrh	r2, [r7, #26]
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800497e:	8b7b      	ldrh	r3, [r7, #26]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d19e      	bne.n	80048c2 <pbuf_alloc+0x5a>
      break;
 8004984:	e055      	b.n	8004a32 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004988:	3303      	adds	r3, #3
 800498a:	b29b      	uxth	r3, r3
 800498c:	f023 0303 	bic.w	r3, r3, #3
 8004990:	b29a      	uxth	r2, r3
 8004992:	88bb      	ldrh	r3, [r7, #4]
 8004994:	3303      	adds	r3, #3
 8004996:	b29b      	uxth	r3, r3
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	b29b      	uxth	r3, r3
 800499e:	4413      	add	r3, r2
 80049a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80049a2:	8b3b      	ldrh	r3, [r7, #24]
 80049a4:	3310      	adds	r3, #16
 80049a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049a8:	8b3a      	ldrh	r2, [r7, #24]
 80049aa:	88bb      	ldrh	r3, [r7, #4]
 80049ac:	3303      	adds	r3, #3
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d306      	bcc.n	80049c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80049b6:	8afa      	ldrh	r2, [r7, #22]
 80049b8:	88bb      	ldrh	r3, [r7, #4]
 80049ba:	3303      	adds	r3, #3
 80049bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d201      	bcs.n	80049c8 <pbuf_alloc+0x160>
        return NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e035      	b.n	8004a34 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80049c8:	8afb      	ldrh	r3, [r7, #22]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fa64 	bl	8003e98 <mem_malloc>
 80049d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <pbuf_alloc+0x174>
        return NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	e02b      	b.n	8004a34 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80049dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049de:	3310      	adds	r3, #16
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	4413      	add	r3, r2
 80049e4:	3303      	adds	r3, #3
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	4618      	mov	r0, r3
 80049ec:	88b9      	ldrh	r1, [r7, #4]
 80049ee:	88ba      	ldrh	r2, [r7, #4]
 80049f0:	2300      	movs	r3, #0
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4601      	mov	r1, r0
 80049fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049fe:	f7ff ff09 	bl	8004814 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <pbuf_alloc+0x1c8>
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <pbuf_alloc+0x1d4>)
 8004a10:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004a14:	490d      	ldr	r1, [pc, #52]	; (8004a4c <pbuf_alloc+0x1e4>)
 8004a16:	480b      	ldr	r0, [pc, #44]	; (8004a44 <pbuf_alloc+0x1dc>)
 8004a18:	f009 febe 	bl	800e798 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004a1c:	e008      	b.n	8004a30 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <pbuf_alloc+0x1d4>)
 8004a20:	f240 1227 	movw	r2, #295	; 0x127
 8004a24:	490a      	ldr	r1, [pc, #40]	; (8004a50 <pbuf_alloc+0x1e8>)
 8004a26:	4807      	ldr	r0, [pc, #28]	; (8004a44 <pbuf_alloc+0x1dc>)
 8004a28:	f009 feb6 	bl	800e798 <iprintf>
      return NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e001      	b.n	8004a34 <pbuf_alloc+0x1cc>
      break;
 8004a30:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	0800fe10 	.word	0x0800fe10
 8004a40:	0800fe40 	.word	0x0800fe40
 8004a44:	0800fe70 	.word	0x0800fe70
 8004a48:	0800fe98 	.word	0x0800fe98
 8004a4c:	0800fecc 	.word	0x0800fecc
 8004a50:	0800fef8 	.word	0x0800fef8

08004a54 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004a64:	883b      	ldrh	r3, [r7, #0]
 8004a66:	2b41      	cmp	r3, #65	; 0x41
 8004a68:	d009      	beq.n	8004a7e <pbuf_alloc_reference+0x2a>
 8004a6a:	883b      	ldrh	r3, [r7, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d006      	beq.n	8004a7e <pbuf_alloc_reference+0x2a>
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <pbuf_alloc_reference+0x5c>)
 8004a72:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004a76:	490f      	ldr	r1, [pc, #60]	; (8004ab4 <pbuf_alloc_reference+0x60>)
 8004a78:	480f      	ldr	r0, [pc, #60]	; (8004ab8 <pbuf_alloc_reference+0x64>)
 8004a7a:	f009 fe8d 	bl	800e798 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004a7e:	2007      	movs	r0, #7
 8004a80:	f7ff fb78 	bl	8004174 <memp_malloc>
 8004a84:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e00b      	b.n	8004aa8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004a90:	8879      	ldrh	r1, [r7, #2]
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	883b      	ldrh	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff feb7 	bl	8004814 <pbuf_init_alloced_pbuf>
  return p;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0800fe10 	.word	0x0800fe10
 8004ab4:	0800ff14 	.word	0x0800ff14
 8004ab8:	0800fe70 	.word	0x0800fe70

08004abc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	81bb      	strh	r3, [r7, #12]
 8004acc:	4613      	mov	r3, r2
 8004ace:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004ad4:	8a7b      	ldrh	r3, [r7, #18]
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	f023 0203 	bic.w	r2, r3, #3
 8004adc:	89bb      	ldrh	r3, [r7, #12]
 8004ade:	441a      	add	r2, r3
 8004ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d901      	bls.n	8004aea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e018      	b.n	8004b1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004af0:	8a7b      	ldrh	r3, [r7, #18]
 8004af2:	3303      	adds	r3, #3
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	4413      	add	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e001      	b.n	8004b04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	89b9      	ldrh	r1, [r7, #12]
 8004b08:	89ba      	ldrh	r2, [r7, #12]
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	460b      	mov	r3, r1
 8004b14:	6979      	ldr	r1, [r7, #20]
 8004b16:	f7ff fe7d 	bl	8004814 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004b1a:	687b      	ldr	r3, [r7, #4]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <pbuf_realloc+0x20>
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <pbuf_realloc+0xfc>)
 8004b38:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004b3c:	4939      	ldr	r1, [pc, #228]	; (8004c24 <pbuf_realloc+0x100>)
 8004b3e:	483a      	ldr	r0, [pc, #232]	; (8004c28 <pbuf_realloc+0x104>)
 8004b40:	f009 fe2a 	bl	800e798 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	891b      	ldrh	r3, [r3, #8]
 8004b48:	887a      	ldrh	r2, [r7, #2]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d263      	bcs.n	8004c16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	891a      	ldrh	r2, [r3, #8]
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	817b      	strh	r3, [r7, #10]
  q = p;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004b60:	e018      	b.n	8004b94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	895b      	ldrh	r3, [r3, #10]
 8004b66:	897a      	ldrh	r2, [r7, #10]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	891a      	ldrh	r2, [r3, #8]
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <pbuf_realloc+0x70>
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <pbuf_realloc+0xfc>)
 8004b88:	f240 12af 	movw	r2, #431	; 0x1af
 8004b8c:	4927      	ldr	r1, [pc, #156]	; (8004c2c <pbuf_realloc+0x108>)
 8004b8e:	4826      	ldr	r0, [pc, #152]	; (8004c28 <pbuf_realloc+0x104>)
 8004b90:	f009 fe02 	bl	800e798 <iprintf>
  while (rem_len > q->len) {
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	895b      	ldrh	r3, [r3, #10]
 8004b98:	897a      	ldrh	r2, [r7, #10]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d8e1      	bhi.n	8004b62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	7b1b      	ldrb	r3, [r3, #12]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d121      	bne.n	8004bee <pbuf_realloc+0xca>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	895b      	ldrh	r3, [r3, #10]
 8004bae:	897a      	ldrh	r2, [r7, #10]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d01c      	beq.n	8004bee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	7b5b      	ldrb	r3, [r3, #13]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d116      	bne.n	8004bee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	897b      	ldrh	r3, [r7, #10]
 8004bcc:	4413      	add	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff f864 	bl	8003ca0 <mem_trim>
 8004bd8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <pbuf_realloc+0xca>
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <pbuf_realloc+0xfc>)
 8004be2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004be6:	4912      	ldr	r1, [pc, #72]	; (8004c30 <pbuf_realloc+0x10c>)
 8004be8:	480f      	ldr	r0, [pc, #60]	; (8004c28 <pbuf_realloc+0x104>)
 8004bea:	f009 fdd5 	bl	800e798 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	897a      	ldrh	r2, [r7, #10]
 8004bf2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	895a      	ldrh	r2, [r3, #10]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f911 	bl	8004e30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e000      	b.n	8004c18 <pbuf_realloc+0xf4>
    return;
 8004c16:	bf00      	nop

}
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	0800fe10 	.word	0x0800fe10
 8004c24:	0800ff28 	.word	0x0800ff28
 8004c28:	0800fe70 	.word	0x0800fe70
 8004c2c:	0800ff40 	.word	0x0800ff40
 8004c30:	0800ff58 	.word	0x0800ff58

08004c34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <pbuf_add_header_impl+0x22>
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <pbuf_add_header_impl+0xc4>)
 8004c4a:	f240 12df 	movw	r2, #479	; 0x1df
 8004c4e:	492b      	ldr	r1, [pc, #172]	; (8004cfc <pbuf_add_header_impl+0xc8>)
 8004c50:	482b      	ldr	r0, [pc, #172]	; (8004d00 <pbuf_add_header_impl+0xcc>)
 8004c52:	f009 fda1 	bl	800e798 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <pbuf_add_header_impl+0x30>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d301      	bcc.n	8004c68 <pbuf_add_header_impl+0x34>
    return 1;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e043      	b.n	8004cf0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <pbuf_add_header_impl+0x3e>
    return 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e03e      	b.n	8004cf0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	891a      	ldrh	r2, [r3, #8]
 8004c7a:	8a7b      	ldrh	r3, [r7, #18]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8a7a      	ldrh	r2, [r7, #18]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d901      	bls.n	8004c8a <pbuf_add_header_impl+0x56>
    return 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e032      	b.n	8004cf0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	7b1b      	ldrb	r3, [r3, #12]
 8004c8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004c90:	8a3b      	ldrh	r3, [r7, #16]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3310      	adds	r3, #16
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d20d      	bcs.n	8004ccc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e01d      	b.n	8004cf0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	425b      	negs	r3, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e001      	b.n	8004ccc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e011      	b.n	8004cf0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	895a      	ldrh	r2, [r3, #10]
 8004cd6:	8a7b      	ldrh	r3, [r7, #18]
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	891a      	ldrh	r2, [r3, #8]
 8004ce4:	8a7b      	ldrh	r3, [r7, #18]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	811a      	strh	r2, [r3, #8]


  return 0;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	0800fe10 	.word	0x0800fe10
 8004cfc:	0800ff74 	.word	0x0800ff74
 8004d00:	0800fe70 	.word	0x0800fe70

08004d04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ff8e 	bl	8004c34 <pbuf_add_header_impl>
 8004d18:	4603      	mov	r3, r0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <pbuf_remove_header+0x1e>
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <pbuf_remove_header+0x94>)
 8004d36:	f240 224b 	movw	r2, #587	; 0x24b
 8004d3a:	4920      	ldr	r1, [pc, #128]	; (8004dbc <pbuf_remove_header+0x98>)
 8004d3c:	4820      	ldr	r0, [pc, #128]	; (8004dc0 <pbuf_remove_header+0x9c>)
 8004d3e:	f009 fd2b 	bl	800e798 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <pbuf_remove_header+0x2c>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d301      	bcc.n	8004d54 <pbuf_remove_header+0x30>
    return 1;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e02c      	b.n	8004dae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <pbuf_remove_header+0x3a>
    return 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e027      	b.n	8004dae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	895b      	ldrh	r3, [r3, #10]
 8004d66:	89fa      	ldrh	r2, [r7, #14]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d908      	bls.n	8004d7e <pbuf_remove_header+0x5a>
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <pbuf_remove_header+0x94>)
 8004d6e:	f240 2255 	movw	r2, #597	; 0x255
 8004d72:	4914      	ldr	r1, [pc, #80]	; (8004dc4 <pbuf_remove_header+0xa0>)
 8004d74:	4812      	ldr	r0, [pc, #72]	; (8004dc0 <pbuf_remove_header+0x9c>)
 8004d76:	f009 fd0f 	bl	800e798 <iprintf>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e017      	b.n	8004dae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	895a      	ldrh	r2, [r3, #10]
 8004d94:	89fb      	ldrh	r3, [r7, #14]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	891a      	ldrh	r2, [r3, #8]
 8004da2:	89fb      	ldrh	r3, [r7, #14]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0800fe10 	.word	0x0800fe10
 8004dbc:	0800ff74 	.word	0x0800ff74
 8004dc0:	0800fe70 	.word	0x0800fe70
 8004dc4:	0800ff80 	.word	0x0800ff80

08004dc8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004dd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	da08      	bge.n	8004df2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004de0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004de4:	425b      	negs	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff9b 	bl	8004d24 <pbuf_remove_header>
 8004dee:	4603      	mov	r3, r0
 8004df0:	e007      	b.n	8004e02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004df2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004df6:	787a      	ldrb	r2, [r7, #1]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff1a 	bl	8004c34 <pbuf_add_header_impl>
 8004e00:	4603      	mov	r3, r0
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004e16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ffd2 	bl	8004dc8 <pbuf_header_impl>
 8004e24:	4603      	mov	r3, r0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <pbuf_free+0x22>
 8004e44:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <pbuf_free+0xf8>)
 8004e46:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004e4a:	4938      	ldr	r1, [pc, #224]	; (8004f2c <pbuf_free+0xfc>)
 8004e4c:	4838      	ldr	r0, [pc, #224]	; (8004f30 <pbuf_free+0x100>)
 8004e4e:	f009 fca3 	bl	800e798 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e063      	b.n	8004f1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e5a:	e05c      	b.n	8004f16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7b9b      	ldrb	r3, [r3, #14]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <pbuf_free+0x42>
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <pbuf_free+0xf8>)
 8004e66:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004e6a:	4932      	ldr	r1, [pc, #200]	; (8004f34 <pbuf_free+0x104>)
 8004e6c:	4830      	ldr	r0, [pc, #192]	; (8004f30 <pbuf_free+0x100>)
 8004e6e:	f009 fc93 	bl	800e798 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7b9b      	ldrb	r3, [r3, #14]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	739a      	strb	r2, [r3, #14]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7b9b      	ldrb	r3, [r3, #14]
 8004e82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004e84:	7dbb      	ldrb	r3, [r7, #22]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d143      	bne.n	8004f12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7b1b      	ldrb	r3, [r3, #12]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7b5b      	ldrb	r3, [r3, #13]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d011      	beq.n	8004eca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <pbuf_free+0x90>
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <pbuf_free+0xf8>)
 8004eb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8004eb8:	491f      	ldr	r1, [pc, #124]	; (8004f38 <pbuf_free+0x108>)
 8004eba:	481d      	ldr	r0, [pc, #116]	; (8004f30 <pbuf_free+0x100>)
 8004ebc:	f009 fc6c 	bl	800e798 <iprintf>
        pc->custom_free_function(p);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	e01d      	b.n	8004f06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d104      	bne.n	8004eda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	2008      	movs	r0, #8
 8004ed4:	f7ff f99a 	bl	800420c <memp_free>
 8004ed8:	e015      	b.n	8004f06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d104      	bne.n	8004eea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	2007      	movs	r0, #7
 8004ee4:	f7ff f992 	bl	800420c <memp_free>
 8004ee8:	e00d      	b.n	8004f06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <pbuf_free+0xc8>
          mem_free(p);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fe fe6b 	bl	8003bcc <mem_free>
 8004ef6:	e006      	b.n	8004f06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <pbuf_free+0xf8>)
 8004efa:	f240 320f 	movw	r2, #783	; 0x30f
 8004efe:	490f      	ldr	r1, [pc, #60]	; (8004f3c <pbuf_free+0x10c>)
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <pbuf_free+0x100>)
 8004f02:	f009 fc49 	bl	800e798 <iprintf>
        }
      }
      count++;
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	e001      	b.n	8004f16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d19f      	bne.n	8004e5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	0800fe10 	.word	0x0800fe10
 8004f2c:	0800ff74 	.word	0x0800ff74
 8004f30:	0800fe70 	.word	0x0800fe70
 8004f34:	0800ffa0 	.word	0x0800ffa0
 8004f38:	0800ffb8 	.word	0x0800ffb8
 8004f3c:	0800ffdc 	.word	0x0800ffdc

08004f40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f4c:	e005      	b.n	8004f5a <pbuf_clen+0x1a>
    ++len;
 8004f4e:	89fb      	ldrh	r3, [r7, #14]
 8004f50:	3301      	adds	r3, #1
 8004f52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f6      	bne.n	8004f4e <pbuf_clen+0xe>
  }
  return len;
 8004f60:	89fb      	ldrh	r3, [r7, #14]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d010      	beq.n	8004fa0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7b9b      	ldrb	r3, [r3, #14]
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7b9b      	ldrb	r3, [r3, #14]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <pbuf_ref+0x30>
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <pbuf_ref+0x38>)
 8004f94:	f240 3242 	movw	r2, #834	; 0x342
 8004f98:	4904      	ldr	r1, [pc, #16]	; (8004fac <pbuf_ref+0x3c>)
 8004f9a:	4805      	ldr	r0, [pc, #20]	; (8004fb0 <pbuf_ref+0x40>)
 8004f9c:	f009 fbfc 	bl	800e798 <iprintf>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	0800fe10 	.word	0x0800fe10
 8004fac:	0800fff0 	.word	0x0800fff0
 8004fb0:	0800fe70 	.word	0x0800fe70

08004fb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <pbuf_cat+0x16>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d107      	bne.n	8004fda <pbuf_cat+0x26>
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <pbuf_cat+0x98>)
 8004fcc:	f240 3259 	movw	r2, #857	; 0x359
 8004fd0:	491f      	ldr	r1, [pc, #124]	; (8005050 <pbuf_cat+0x9c>)
 8004fd2:	4820      	ldr	r0, [pc, #128]	; (8005054 <pbuf_cat+0xa0>)
 8004fd4:	f009 fbe0 	bl	800e798 <iprintf>
 8004fd8:	e034      	b.n	8005044 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e00a      	b.n	8004ff6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	891a      	ldrh	r2, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	891b      	ldrh	r3, [r3, #8]
 8004fe8:	4413      	add	r3, r2
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	891a      	ldrh	r2, [r3, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	895b      	ldrh	r3, [r3, #10]
 8005006:	429a      	cmp	r2, r3
 8005008:	d006      	beq.n	8005018 <pbuf_cat+0x64>
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <pbuf_cat+0x98>)
 800500c:	f240 3262 	movw	r2, #866	; 0x362
 8005010:	4911      	ldr	r1, [pc, #68]	; (8005058 <pbuf_cat+0xa4>)
 8005012:	4810      	ldr	r0, [pc, #64]	; (8005054 <pbuf_cat+0xa0>)
 8005014:	f009 fbc0 	bl	800e798 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <pbuf_cat+0x7a>
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <pbuf_cat+0x98>)
 8005022:	f240 3263 	movw	r2, #867	; 0x363
 8005026:	490d      	ldr	r1, [pc, #52]	; (800505c <pbuf_cat+0xa8>)
 8005028:	480a      	ldr	r0, [pc, #40]	; (8005054 <pbuf_cat+0xa0>)
 800502a:	f009 fbb5 	bl	800e798 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	891a      	ldrh	r2, [r3, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	891b      	ldrh	r3, [r3, #8]
 8005036:	4413      	add	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	0800fe10 	.word	0x0800fe10
 8005050:	08010004 	.word	0x08010004
 8005054:	0800fe70 	.word	0x0800fe70
 8005058:	0801003c 	.word	0x0801003c
 800505c:	0801006c 	.word	0x0801006c

08005060 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ffa1 	bl	8004fb4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f7ff ff7c 	bl	8004f70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <pbuf_copy+0x2a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <pbuf_copy+0x2a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	891a      	ldrh	r2, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	891b      	ldrh	r3, [r3, #8]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d209      	bcs.n	80050be <pbuf_copy+0x3e>
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <pbuf_copy+0x188>)
 80050ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80050b0:	4956      	ldr	r1, [pc, #344]	; (800520c <pbuf_copy+0x18c>)
 80050b2:	4857      	ldr	r0, [pc, #348]	; (8005210 <pbuf_copy+0x190>)
 80050b4:	f009 fb70 	bl	800e798 <iprintf>
 80050b8:	f06f 030f 	mvn.w	r3, #15
 80050bc:	e09f      	b.n	80051fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	895b      	ldrh	r3, [r3, #10]
 80050c2:	461a      	mov	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	895b      	ldrh	r3, [r3, #10]
 80050cc:	4619      	mov	r1, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1acb      	subs	r3, r1, r3
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d306      	bcc.n	80050e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	895b      	ldrh	r3, [r3, #10]
 80050da:	461a      	mov	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e005      	b.n	80050f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	895b      	ldrh	r3, [r3, #10]
 80050e8:	461a      	mov	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	18d0      	adds	r0, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4619      	mov	r1, r3
 8005104:	f009 fb32 	bl	800e76c <memcpy>
    offset_to += len;
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	895b      	ldrh	r3, [r3, #10]
 800511c:	461a      	mov	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4293      	cmp	r3, r2
 8005122:	d906      	bls.n	8005132 <pbuf_copy+0xb2>
 8005124:	4b38      	ldr	r3, [pc, #224]	; (8005208 <pbuf_copy+0x188>)
 8005126:	f240 32d9 	movw	r2, #985	; 0x3d9
 800512a:	493a      	ldr	r1, [pc, #232]	; (8005214 <pbuf_copy+0x194>)
 800512c:	4838      	ldr	r0, [pc, #224]	; (8005210 <pbuf_copy+0x190>)
 800512e:	f009 fb33 	bl	800e798 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	895b      	ldrh	r3, [r3, #10]
 8005136:	461a      	mov	r2, r3
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4293      	cmp	r3, r2
 800513c:	d906      	bls.n	800514c <pbuf_copy+0xcc>
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <pbuf_copy+0x188>)
 8005140:	f240 32da 	movw	r2, #986	; 0x3da
 8005144:	4934      	ldr	r1, [pc, #208]	; (8005218 <pbuf_copy+0x198>)
 8005146:	4832      	ldr	r0, [pc, #200]	; (8005210 <pbuf_copy+0x190>)
 8005148:	f009 fb26 	bl	800e798 <iprintf>
    if (offset_from >= p_from->len) {
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	895b      	ldrh	r3, [r3, #10]
 8005150:	461a      	mov	r2, r3
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4293      	cmp	r3, r2
 8005156:	d304      	bcc.n	8005162 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	895b      	ldrh	r3, [r3, #10]
 8005166:	461a      	mov	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4293      	cmp	r3, r2
 800516c:	d114      	bne.n	8005198 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <pbuf_copy+0x118>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <pbuf_copy+0x118>
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <pbuf_copy+0x188>)
 8005186:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800518a:	4924      	ldr	r1, [pc, #144]	; (800521c <pbuf_copy+0x19c>)
 800518c:	4820      	ldr	r0, [pc, #128]	; (8005210 <pbuf_copy+0x190>)
 800518e:	f009 fb03 	bl	800e798 <iprintf>
 8005192:	f06f 030f 	mvn.w	r3, #15
 8005196:	e032      	b.n	80051fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d013      	beq.n	80051c6 <pbuf_copy+0x146>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	895a      	ldrh	r2, [r3, #10]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	891b      	ldrh	r3, [r3, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d10d      	bne.n	80051c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <pbuf_copy+0x146>
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <pbuf_copy+0x188>)
 80051b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80051b8:	4919      	ldr	r1, [pc, #100]	; (8005220 <pbuf_copy+0x1a0>)
 80051ba:	4815      	ldr	r0, [pc, #84]	; (8005210 <pbuf_copy+0x190>)
 80051bc:	f009 faec 	bl	800e798 <iprintf>
 80051c0:	f06f 0305 	mvn.w	r3, #5
 80051c4:	e01b      	b.n	80051fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <pbuf_copy+0x174>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	895a      	ldrh	r2, [r3, #10]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	891b      	ldrh	r3, [r3, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d10d      	bne.n	80051f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <pbuf_copy+0x174>
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <pbuf_copy+0x188>)
 80051e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80051e6:	490e      	ldr	r1, [pc, #56]	; (8005220 <pbuf_copy+0x1a0>)
 80051e8:	4809      	ldr	r0, [pc, #36]	; (8005210 <pbuf_copy+0x190>)
 80051ea:	f009 fad5 	bl	800e798 <iprintf>
 80051ee:	f06f 0305 	mvn.w	r3, #5
 80051f2:	e004      	b.n	80051fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f47f af61 	bne.w	80050be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	0800fe10 	.word	0x0800fe10
 800520c:	080100b8 	.word	0x080100b8
 8005210:	0800fe70 	.word	0x0800fe70
 8005214:	080100e8 	.word	0x080100e8
 8005218:	08010100 	.word	0x08010100
 800521c:	0801011c 	.word	0x0801011c
 8005220:	0801012c 	.word	0x0801012c

08005224 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	460b      	mov	r3, r1
 8005234:	80fb      	strh	r3, [r7, #6]
 8005236:	4613      	mov	r3, r2
 8005238:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <pbuf_copy_partial+0x36>
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <pbuf_copy_partial+0xd4>)
 800524a:	f240 420a 	movw	r2, #1034	; 0x40a
 800524e:	492b      	ldr	r1, [pc, #172]	; (80052fc <pbuf_copy_partial+0xd8>)
 8005250:	482b      	ldr	r0, [pc, #172]	; (8005300 <pbuf_copy_partial+0xdc>)
 8005252:	f009 faa1 	bl	800e798 <iprintf>
 8005256:	2300      	movs	r3, #0
 8005258:	e04a      	b.n	80052f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <pbuf_copy_partial+0x4e>
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <pbuf_copy_partial+0xd4>)
 8005262:	f240 420b 	movw	r2, #1035	; 0x40b
 8005266:	4927      	ldr	r1, [pc, #156]	; (8005304 <pbuf_copy_partial+0xe0>)
 8005268:	4825      	ldr	r0, [pc, #148]	; (8005300 <pbuf_copy_partial+0xdc>)
 800526a:	f009 fa95 	bl	800e798 <iprintf>
 800526e:	2300      	movs	r3, #0
 8005270:	e03e      	b.n	80052f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e034      	b.n	80052e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005278:	88bb      	ldrh	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <pbuf_copy_partial+0x70>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	895b      	ldrh	r3, [r3, #10]
 8005282:	88ba      	ldrh	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d305      	bcc.n	8005294 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	895b      	ldrh	r3, [r3, #10]
 800528c:	88ba      	ldrh	r2, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	80bb      	strh	r3, [r7, #4]
 8005292:	e023      	b.n	80052dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	895a      	ldrh	r2, [r3, #10]
 8005298:	88bb      	ldrh	r3, [r7, #4]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800529e:	8b3a      	ldrh	r2, [r7, #24]
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d901      	bls.n	80052aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80052aa:	8b7b      	ldrh	r3, [r7, #26]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	18d0      	adds	r0, r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	88bb      	ldrh	r3, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	8b3a      	ldrh	r2, [r7, #24]
 80052ba:	4619      	mov	r1, r3
 80052bc:	f009 fa56 	bl	800e76c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80052c0:	8afa      	ldrh	r2, [r7, #22]
 80052c2:	8b3b      	ldrh	r3, [r7, #24]
 80052c4:	4413      	add	r3, r2
 80052c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80052c8:	8b7a      	ldrh	r2, [r7, #26]
 80052ca:	8b3b      	ldrh	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	8b3b      	ldrh	r3, [r7, #24]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80052d8:	2300      	movs	r3, #0
 80052da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	61fb      	str	r3, [r7, #28]
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <pbuf_copy_partial+0xca>
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1c4      	bne.n	8005278 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80052ee:	8afb      	ldrh	r3, [r7, #22]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	0800fe10 	.word	0x0800fe10
 80052fc:	08010158 	.word	0x08010158
 8005300:	0800fe70 	.word	0x0800fe70
 8005304:	08010178 	.word	0x08010178

08005308 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	603a      	str	r2, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
 8005314:	460b      	mov	r3, r1
 8005316:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	8919      	ldrh	r1, [r3, #8]
 800531c:	88ba      	ldrh	r2, [r7, #4]
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff faa1 	bl	8004868 <pbuf_alloc>
 8005326:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <pbuf_clone+0x2a>
    return NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	e011      	b.n	8005356 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fea3 	bl	8005080 <pbuf_copy>
 800533a:	4603      	mov	r3, r0
 800533c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800533e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <pbuf_clone+0x4c>
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <pbuf_clone+0x58>)
 8005348:	f240 5224 	movw	r2, #1316	; 0x524
 800534c:	4905      	ldr	r1, [pc, #20]	; (8005364 <pbuf_clone+0x5c>)
 800534e:	4806      	ldr	r0, [pc, #24]	; (8005368 <pbuf_clone+0x60>)
 8005350:	f009 fa22 	bl	800e798 <iprintf>
  return q;
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	0800fe10 	.word	0x0800fe10
 8005364:	08010284 	.word	0x08010284
 8005368:	0800fe70 	.word	0x0800fe70

0800536c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005370:	f009 fa2a 	bl	800e7c8 <rand>
 8005374:	4603      	mov	r3, r0
 8005376:	b29b      	uxth	r3, r3
 8005378:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800537c:	b29b      	uxth	r3, r3
 800537e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005382:	b29a      	uxth	r2, r3
 8005384:	4b01      	ldr	r3, [pc, #4]	; (800538c <tcp_init+0x20>)
 8005386:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005388:	bf00      	nop
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2000000a 	.word	0x2000000a

08005390 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7d1b      	ldrb	r3, [r3, #20]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <tcp_free+0x1c>
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <tcp_free+0x2c>)
 80053a2:	22d4      	movs	r2, #212	; 0xd4
 80053a4:	4906      	ldr	r1, [pc, #24]	; (80053c0 <tcp_free+0x30>)
 80053a6:	4807      	ldr	r0, [pc, #28]	; (80053c4 <tcp_free+0x34>)
 80053a8:	f009 f9f6 	bl	800e798 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7fe ff2c 	bl	800420c <memp_free>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08010310 	.word	0x08010310
 80053c0:	08010340 	.word	0x08010340
 80053c4:	08010354 	.word	0x08010354

080053c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7d1b      	ldrb	r3, [r3, #20]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <tcp_free_listen+0x1c>
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <tcp_free_listen+0x2c>)
 80053da:	22df      	movs	r2, #223	; 0xdf
 80053dc:	4906      	ldr	r1, [pc, #24]	; (80053f8 <tcp_free_listen+0x30>)
 80053de:	4807      	ldr	r0, [pc, #28]	; (80053fc <tcp_free_listen+0x34>)
 80053e0:	f009 f9da 	bl	800e798 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	2002      	movs	r0, #2
 80053e8:	f7fe ff10 	bl	800420c <memp_free>
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	08010310 	.word	0x08010310
 80053f8:	0801037c 	.word	0x0801037c
 80053fc:	08010354 	.word	0x08010354

08005400 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005404:	f001 f85c 	bl	80064c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <tcp_tmr+0x28>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <tcp_tmr+0x28>)
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <tcp_tmr+0x28>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005420:	f000 fd0e 	bl	8005e40 <tcp_slowtmr>
  }
}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200000cd 	.word	0x200000cd

0800542c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <tcp_remove_listener+0x1c>
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <tcp_remove_listener+0x48>)
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	490d      	ldr	r1, [pc, #52]	; (8005478 <tcp_remove_listener+0x4c>)
 8005442:	480e      	ldr	r0, [pc, #56]	; (800547c <tcp_remove_listener+0x50>)
 8005444:	f009 f9a8 	bl	800e798 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	e00a      	b.n	8005464 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d102      	bne.n	800545e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f1      	bne.n	800544e <tcp_remove_listener+0x22>
    }
  }
}
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08010310 	.word	0x08010310
 8005478:	08010398 	.word	0x08010398
 800547c:	08010354 	.word	0x08010354

08005480 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <tcp_listen_closed+0x1c>
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <tcp_listen_closed+0x60>)
 8005490:	f240 1211 	movw	r2, #273	; 0x111
 8005494:	4913      	ldr	r1, [pc, #76]	; (80054e4 <tcp_listen_closed+0x64>)
 8005496:	4814      	ldr	r0, [pc, #80]	; (80054e8 <tcp_listen_closed+0x68>)
 8005498:	f009 f97e 	bl	800e798 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	7d1b      	ldrb	r3, [r3, #20]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d006      	beq.n	80054b2 <tcp_listen_closed+0x32>
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <tcp_listen_closed+0x60>)
 80054a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80054aa:	4910      	ldr	r1, [pc, #64]	; (80054ec <tcp_listen_closed+0x6c>)
 80054ac:	480e      	ldr	r0, [pc, #56]	; (80054e8 <tcp_listen_closed+0x68>)
 80054ae:	f009 f973 	bl	800e798 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054b2:	2301      	movs	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e00b      	b.n	80054d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <tcp_listen_closed+0x70>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff ffb1 	bl	800542c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3301      	adds	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d9f0      	bls.n	80054b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08010310 	.word	0x08010310
 80054e4:	080103c0 	.word	0x080103c0
 80054e8:	08010354 	.word	0x08010354
 80054ec:	080103cc 	.word	0x080103cc
 80054f0:	080122dc 	.word	0x080122dc

080054f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80054f4:	b5b0      	push	{r4, r5, r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af04      	add	r7, sp, #16
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <tcp_close_shutdown+0x20>
 8005506:	4b63      	ldr	r3, [pc, #396]	; (8005694 <tcp_close_shutdown+0x1a0>)
 8005508:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800550c:	4962      	ldr	r1, [pc, #392]	; (8005698 <tcp_close_shutdown+0x1a4>)
 800550e:	4863      	ldr	r0, [pc, #396]	; (800569c <tcp_close_shutdown+0x1a8>)
 8005510:	f009 f942 	bl	800e798 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d066      	beq.n	80055e8 <tcp_close_shutdown+0xf4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	7d1b      	ldrb	r3, [r3, #20]
 800551e:	2b04      	cmp	r3, #4
 8005520:	d003      	beq.n	800552a <tcp_close_shutdown+0x36>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	7d1b      	ldrb	r3, [r3, #20]
 8005526:	2b07      	cmp	r3, #7
 8005528:	d15e      	bne.n	80055e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <tcp_close_shutdown+0x48>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005536:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800553a:	d055      	beq.n	80055e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8b5b      	ldrh	r3, [r3, #26]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <tcp_close_shutdown+0x62>
 8005548:	4b52      	ldr	r3, [pc, #328]	; (8005694 <tcp_close_shutdown+0x1a0>)
 800554a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800554e:	4954      	ldr	r1, [pc, #336]	; (80056a0 <tcp_close_shutdown+0x1ac>)
 8005550:	4852      	ldr	r0, [pc, #328]	; (800569c <tcp_close_shutdown+0x1a8>)
 8005552:	f009 f921 	bl	800e798 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800555e:	687d      	ldr	r5, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	8ad2      	ldrh	r2, [r2, #22]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	8b09      	ldrh	r1, [r1, #24]
 800556c:	9102      	str	r1, [sp, #8]
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	462b      	mov	r3, r5
 8005574:	4622      	mov	r2, r4
 8005576:	4601      	mov	r1, r0
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f005 fd85 	bl	800b088 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 fb66 	bl	8006c50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005584:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <tcp_close_shutdown+0x1b0>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d105      	bne.n	800559a <tcp_close_shutdown+0xa6>
 800558e:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <tcp_close_shutdown+0x1b0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a43      	ldr	r2, [pc, #268]	; (80056a4 <tcp_close_shutdown+0x1b0>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e013      	b.n	80055c2 <tcp_close_shutdown+0xce>
 800559a:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <tcp_close_shutdown+0x1b0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e00c      	b.n	80055bc <tcp_close_shutdown+0xc8>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <tcp_close_shutdown+0xc2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e005      	b.n	80055c2 <tcp_close_shutdown+0xce>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ef      	bne.n	80055a2 <tcp_close_shutdown+0xae>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	4b37      	ldr	r3, [pc, #220]	; (80056a8 <tcp_close_shutdown+0x1b4>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <tcp_close_shutdown+0x1b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d102      	bne.n	80055de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80055d8:	f003 fffa 	bl	80095d0 <tcp_trigger_input_pcb_close>
 80055dc:	e002      	b.n	80055e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fed6 	bl	8005390 <tcp_free>
      }
      return ERR_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e050      	b.n	800568a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7d1b      	ldrb	r3, [r3, #20]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d03b      	beq.n	8005668 <tcp_close_shutdown+0x174>
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	dc44      	bgt.n	800567e <tcp_close_shutdown+0x18a>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <tcp_close_shutdown+0x10a>
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d02a      	beq.n	8005652 <tcp_close_shutdown+0x15e>
 80055fc:	e03f      	b.n	800567e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8adb      	ldrh	r3, [r3, #22]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d021      	beq.n	800564a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005606:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <tcp_close_shutdown+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d105      	bne.n	800561c <tcp_close_shutdown+0x128>
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <tcp_close_shutdown+0x1bc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <tcp_close_shutdown+0x1bc>)
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e013      	b.n	8005644 <tcp_close_shutdown+0x150>
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <tcp_close_shutdown+0x1bc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	e00c      	b.n	800563e <tcp_close_shutdown+0x14a>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d104      	bne.n	8005638 <tcp_close_shutdown+0x144>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	e005      	b.n	8005644 <tcp_close_shutdown+0x150>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <tcp_close_shutdown+0x130>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fea0 	bl	8005390 <tcp_free>
      break;
 8005650:	e01a      	b.n	8005688 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff14 	bl	8005480 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4816      	ldr	r0, [pc, #88]	; (80056b4 <tcp_close_shutdown+0x1c0>)
 800565c:	f001 fb48 	bl	8006cf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff feb1 	bl	80053c8 <tcp_free_listen>
      break;
 8005666:	e00f      	b.n	8005688 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	480e      	ldr	r0, [pc, #56]	; (80056a4 <tcp_close_shutdown+0x1b0>)
 800566c:	f001 fb40 	bl	8006cf0 <tcp_pcb_remove>
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <tcp_close_shutdown+0x1b4>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fe8a 	bl	8005390 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800567c:	e004      	b.n	8005688 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f81a 	bl	80056b8 <tcp_close_shutdown_fin>
 8005684:	4603      	mov	r3, r0
 8005686:	e000      	b.n	800568a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bdb0      	pop	{r4, r5, r7, pc}
 8005692:	bf00      	nop
 8005694:	08010310 	.word	0x08010310
 8005698:	080103e4 	.word	0x080103e4
 800569c:	08010354 	.word	0x08010354
 80056a0:	08010404 	.word	0x08010404
 80056a4:	20006890 	.word	0x20006890
 80056a8:	2000688c 	.word	0x2000688c
 80056ac:	200068a4 	.word	0x200068a4
 80056b0:	2000689c 	.word	0x2000689c
 80056b4:	20006898 	.word	0x20006898

080056b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <tcp_close_shutdown_fin+0x1c>
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <tcp_close_shutdown_fin+0xc8>)
 80056c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80056cc:	492d      	ldr	r1, [pc, #180]	; (8005784 <tcp_close_shutdown_fin+0xcc>)
 80056ce:	482e      	ldr	r0, [pc, #184]	; (8005788 <tcp_close_shutdown_fin+0xd0>)
 80056d0:	f009 f862 	bl	800e798 <iprintf>

  switch (pcb->state) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7d1b      	ldrb	r3, [r3, #20]
 80056d8:	2b07      	cmp	r3, #7
 80056da:	d020      	beq.n	800571e <tcp_close_shutdown_fin+0x66>
 80056dc:	2b07      	cmp	r3, #7
 80056de:	dc2b      	bgt.n	8005738 <tcp_close_shutdown_fin+0x80>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d002      	beq.n	80056ea <tcp_close_shutdown_fin+0x32>
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d00d      	beq.n	8005704 <tcp_close_shutdown_fin+0x4c>
 80056e8:	e026      	b.n	8005738 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f004 fdda 	bl	800a2a4 <tcp_send_fin>
 80056f0:	4603      	mov	r3, r0
 80056f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80056f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11f      	bne.n	800573c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2205      	movs	r2, #5
 8005700:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005702:	e01b      	b.n	800573c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f004 fdcd 	bl	800a2a4 <tcp_send_fin>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800570e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d114      	bne.n	8005740 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2205      	movs	r2, #5
 800571a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800571c:	e010      	b.n	8005740 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f004 fdc0 	bl	800a2a4 <tcp_send_fin>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2209      	movs	r2, #9
 8005734:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005736:	e005      	b.n	8005744 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e01c      	b.n	8005776 <tcp_close_shutdown_fin+0xbe>
      break;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <tcp_close_shutdown_fin+0x8e>
      break;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <tcp_close_shutdown_fin+0x8e>
      break;
 8005744:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f004 fee6 	bl	800a520 <tcp_output>
 8005754:	e00d      	b.n	8005772 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d108      	bne.n	8005772 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8b5b      	ldrh	r3, [r3, #26]
 8005764:	f043 0308 	orr.w	r3, r3, #8
 8005768:	b29a      	uxth	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e001      	b.n	8005776 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	08010310 	.word	0x08010310
 8005784:	080103c0 	.word	0x080103c0
 8005788:	08010354 	.word	0x08010354

0800578c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <tcp_close+0x22>
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <tcp_close+0x4c>)
 800579c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80057a0:	490e      	ldr	r1, [pc, #56]	; (80057dc <tcp_close+0x50>)
 80057a2:	480f      	ldr	r0, [pc, #60]	; (80057e0 <tcp_close+0x54>)
 80057a4:	f008 fff8 	bl	800e798 <iprintf>
 80057a8:	f06f 030f 	mvn.w	r3, #15
 80057ac:	e00f      	b.n	80057ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7d1b      	ldrb	r3, [r3, #20]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d006      	beq.n	80057c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8b5b      	ldrh	r3, [r3, #26]
 80057ba:	f043 0310 	orr.w	r3, r3, #16
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80057c4:	2101      	movs	r1, #1
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fe94 	bl	80054f4 <tcp_close_shutdown>
 80057cc:	4603      	mov	r3, r0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	08010310 	.word	0x08010310
 80057dc:	08010420 	.word	0x08010420
 80057e0:	08010354 	.word	0x08010354

080057e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af04      	add	r7, sp, #16
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d107      	bne.n	8005804 <tcp_abandon+0x20>
 80057f4:	4b52      	ldr	r3, [pc, #328]	; (8005940 <tcp_abandon+0x15c>)
 80057f6:	f240 223d 	movw	r2, #573	; 0x23d
 80057fa:	4952      	ldr	r1, [pc, #328]	; (8005944 <tcp_abandon+0x160>)
 80057fc:	4852      	ldr	r0, [pc, #328]	; (8005948 <tcp_abandon+0x164>)
 80057fe:	f008 ffcb 	bl	800e798 <iprintf>
 8005802:	e099      	b.n	8005938 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7d1b      	ldrb	r3, [r3, #20]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <tcp_abandon+0x36>
 800580c:	4b4c      	ldr	r3, [pc, #304]	; (8005940 <tcp_abandon+0x15c>)
 800580e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005812:	494e      	ldr	r1, [pc, #312]	; (800594c <tcp_abandon+0x168>)
 8005814:	484c      	ldr	r0, [pc, #304]	; (8005948 <tcp_abandon+0x164>)
 8005816:	f008 ffbf 	bl	800e798 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7d1b      	ldrb	r3, [r3, #20]
 800581e:	2b0a      	cmp	r3, #10
 8005820:	d107      	bne.n	8005832 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	484a      	ldr	r0, [pc, #296]	; (8005950 <tcp_abandon+0x16c>)
 8005826:	f001 fa63 	bl	8006cf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fdb0 	bl	8005390 <tcp_free>
 8005830:	e082      	b.n	8005938 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	7d1b      	ldrb	r3, [r3, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d126      	bne.n	80058aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8adb      	ldrh	r3, [r3, #22]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02e      	beq.n	80058c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005864:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <tcp_abandon+0x170>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d105      	bne.n	800587a <tcp_abandon+0x96>
 800586e:	4b39      	ldr	r3, [pc, #228]	; (8005954 <tcp_abandon+0x170>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a37      	ldr	r2, [pc, #220]	; (8005954 <tcp_abandon+0x170>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e013      	b.n	80058a2 <tcp_abandon+0xbe>
 800587a:	4b36      	ldr	r3, [pc, #216]	; (8005954 <tcp_abandon+0x170>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e00c      	b.n	800589c <tcp_abandon+0xb8>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d104      	bne.n	8005896 <tcp_abandon+0xb2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	60da      	str	r2, [r3, #12]
 8005894:	e005      	b.n	80058a2 <tcp_abandon+0xbe>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ef      	bne.n	8005882 <tcp_abandon+0x9e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e00b      	b.n	80058c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8adb      	ldrh	r3, [r3, #22]
 80058b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4828      	ldr	r0, [pc, #160]	; (8005958 <tcp_abandon+0x174>)
 80058b8:	f001 fa1a 	bl	8006cf0 <tcp_pcb_remove>
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <tcp_abandon+0x178>)
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fed6 	bl	8006680 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fecd 	bl	8006680 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d004      	beq.n	80058f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fec4 	bl	8006680 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	8b12      	ldrh	r2, [r2, #24]
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800590c:	9201      	str	r2, [sp, #4]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	460b      	mov	r3, r1
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	69b9      	ldr	r1, [r7, #24]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f005 fbb6 	bl	800b088 <tcp_rst>
    }
    last_state = pcb->state;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7d1b      	ldrb	r3, [r3, #20]
 8005920:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fd34 	bl	8005390 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <tcp_abandon+0x154>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f06f 010c 	mvn.w	r1, #12
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	4798      	blx	r3
  }
}
 8005938:	3728      	adds	r7, #40	; 0x28
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08010310 	.word	0x08010310
 8005944:	08010454 	.word	0x08010454
 8005948:	08010354 	.word	0x08010354
 800594c:	08010470 	.word	0x08010470
 8005950:	200068a0 	.word	0x200068a0
 8005954:	2000689c 	.word	0x2000689c
 8005958:	20006890 	.word	0x20006890
 800595c:	2000688c 	.word	0x2000688c

08005960 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005968:	2101      	movs	r1, #1
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff ff3a 	bl	80057e4 <tcp_abandon>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005986:	2304      	movs	r3, #4
 8005988:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005990:	4b3e      	ldr	r3, [pc, #248]	; (8005a8c <tcp_bind+0x114>)
 8005992:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <tcp_bind+0x36>
 800599a:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <tcp_bind+0x118>)
 800599c:	f240 22a9 	movw	r2, #681	; 0x2a9
 80059a0:	493c      	ldr	r1, [pc, #240]	; (8005a94 <tcp_bind+0x11c>)
 80059a2:	483d      	ldr	r0, [pc, #244]	; (8005a98 <tcp_bind+0x120>)
 80059a4:	f008 fef8 	bl	800e798 <iprintf>
 80059a8:	f06f 030f 	mvn.w	r3, #15
 80059ac:	e06a      	b.n	8005a84 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7d1b      	ldrb	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <tcp_bind+0x52>
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <tcp_bind+0x118>)
 80059b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80059bc:	4937      	ldr	r1, [pc, #220]	; (8005a9c <tcp_bind+0x124>)
 80059be:	4836      	ldr	r0, [pc, #216]	; (8005a98 <tcp_bind+0x120>)
 80059c0:	f008 feea 	bl	800e798 <iprintf>
 80059c4:	f06f 0305 	mvn.w	r3, #5
 80059c8:	e05c      	b.n	8005a84 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80059d0:	f000 f9f0 	bl	8005db4 <tcp_new_port>
 80059d4:	4603      	mov	r3, r0
 80059d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d135      	bne.n	8005a4a <tcp_bind+0xd2>
      return ERR_BUF;
 80059de:	f06f 0301 	mvn.w	r3, #1
 80059e2:	e04f      	b.n	8005a84 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e02b      	b.n	8005a42 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80059ea:	4a2d      	ldr	r2, [pc, #180]	; (8005aa0 <tcp_bind+0x128>)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	e01e      	b.n	8005a36 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	8adb      	ldrh	r3, [r3, #22]
 80059fc:	88fa      	ldrh	r2, [r7, #6]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d116      	bne.n	8005a30 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005a02:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d010      	beq.n	8005a2a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <tcp_bind+0xb2>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d102      	bne.n	8005a30 <tcp_bind+0xb8>
              return ERR_USE;
 8005a2a:	f06f 0307 	mvn.w	r3, #7
 8005a2e:	e029      	b.n	8005a84 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1dd      	bne.n	80059f8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	dbcf      	blt.n	80059ea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <tcp_bind+0xf2>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <tcp_bind+0xec>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	e000      	b.n	8005a66 <tcp_bind+0xee>
 8005a64:	2300      	movs	r3, #0
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	88fa      	ldrh	r2, [r7, #6]
 8005a6e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <tcp_bind+0x12c>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <tcp_bind+0x12c>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	f005 fcc5 	bl	800b40c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08012304 	.word	0x08012304
 8005a90:	08010310 	.word	0x08010310
 8005a94:	080104a4 	.word	0x080104a4
 8005a98:	08010354 	.word	0x08010354
 8005a9c:	080104bc 	.word	0x080104bc
 8005aa0:	080122dc 	.word	0x080122dc
 8005aa4:	2000689c 	.word	0x2000689c

08005aa8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <tcp_accept_null+0x22>
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <tcp_accept_null+0x34>)
 8005abe:	f240 320f 	movw	r2, #783	; 0x30f
 8005ac2:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <tcp_accept_null+0x38>)
 8005ac4:	4807      	ldr	r0, [pc, #28]	; (8005ae4 <tcp_accept_null+0x3c>)
 8005ac6:	f008 fe67 	bl	800e798 <iprintf>

  tcp_abort(pcb);
 8005aca:	68b8      	ldr	r0, [r7, #8]
 8005acc:	f7ff ff48 	bl	8005960 <tcp_abort>

  return ERR_ABRT;
 8005ad0:	f06f 030c 	mvn.w	r3, #12
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	08010310 	.word	0x08010310
 8005ae0:	080104e4 	.word	0x080104e4
 8005ae4:	08010354 	.word	0x08010354

08005ae8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	2200      	movs	r2, #0
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f806 	bl	8005b0c <tcp_listen_with_backlog_and_err>
 8005b00:	4603      	mov	r3, r0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	460b      	mov	r3, r1
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <tcp_listen_with_backlog_and_err+0x2c>
 8005b24:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <tcp_listen_with_backlog_and_err+0x138>)
 8005b26:	f240 3259 	movw	r2, #857	; 0x359
 8005b2a:	4947      	ldr	r1, [pc, #284]	; (8005c48 <tcp_listen_with_backlog_and_err+0x13c>)
 8005b2c:	4847      	ldr	r0, [pc, #284]	; (8005c4c <tcp_listen_with_backlog_and_err+0x140>)
 8005b2e:	f008 fe33 	bl	800e798 <iprintf>
 8005b32:	23f0      	movs	r3, #240	; 0xf0
 8005b34:	76fb      	strb	r3, [r7, #27]
 8005b36:	e079      	b.n	8005c2c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	7d1b      	ldrb	r3, [r3, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <tcp_listen_with_backlog_and_err+0x48>
 8005b40:	4b40      	ldr	r3, [pc, #256]	; (8005c44 <tcp_listen_with_backlog_and_err+0x138>)
 8005b42:	f240 325a 	movw	r2, #858	; 0x35a
 8005b46:	4942      	ldr	r1, [pc, #264]	; (8005c50 <tcp_listen_with_backlog_and_err+0x144>)
 8005b48:	4840      	ldr	r0, [pc, #256]	; (8005c4c <tcp_listen_with_backlog_and_err+0x140>)
 8005b4a:	f008 fe25 	bl	800e798 <iprintf>
 8005b4e:	23f1      	movs	r3, #241	; 0xf1
 8005b50:	76fb      	strb	r3, [r7, #27]
 8005b52:	e06b      	b.n	8005c2c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	7d1b      	ldrb	r3, [r3, #20]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d104      	bne.n	8005b66 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005b60:	23f7      	movs	r3, #247	; 0xf7
 8005b62:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005b64:	e062      	b.n	8005c2c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005b66:	2002      	movs	r0, #2
 8005b68:	f7fe fb04 	bl	8004174 <memp_malloc>
 8005b6c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005b74:	23ff      	movs	r3, #255	; 0xff
 8005b76:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005b78:	e058      	b.n	8005c2c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8ada      	ldrh	r2, [r3, #22]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	7d5a      	ldrb	r2, [r3, #21]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	7a5a      	ldrb	r2, [r3, #9]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	7ada      	ldrb	r2, [r3, #11]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	7a9a      	ldrb	r2, [r3, #10]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8adb      	ldrh	r3, [r3, #22]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d021      	beq.n	8005c0a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005bc6:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <tcp_listen_with_backlog_and_err+0x148>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d105      	bne.n	8005bdc <tcp_listen_with_backlog_and_err+0xd0>
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <tcp_listen_with_backlog_and_err+0x148>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <tcp_listen_with_backlog_and_err+0x148>)
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e013      	b.n	8005c04 <tcp_listen_with_backlog_and_err+0xf8>
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <tcp_listen_with_backlog_and_err+0x148>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e00c      	b.n	8005bfe <tcp_listen_with_backlog_and_err+0xf2>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d104      	bne.n	8005bf8 <tcp_listen_with_backlog_and_err+0xec>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	e005      	b.n	8005c04 <tcp_listen_with_backlog_and_err+0xf8>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ef      	bne.n	8005be4 <tcp_listen_with_backlog_and_err+0xd8>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fbc0 	bl	8005390 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <tcp_listen_with_backlog_and_err+0x14c>)
 8005c14:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <tcp_listen_with_backlog_and_err+0x150>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	4a0f      	ldr	r2, [pc, #60]	; (8005c5c <tcp_listen_with_backlog_and_err+0x150>)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f005 fbf2 	bl	800b40c <tcp_timer_needed>
  res = ERR_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7efa      	ldrb	r2, [r7, #27]
 8005c36:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005c38:	69fb      	ldr	r3, [r7, #28]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08010310 	.word	0x08010310
 8005c48:	08010504 	.word	0x08010504
 8005c4c:	08010354 	.word	0x08010354
 8005c50:	08010534 	.word	0x08010534
 8005c54:	2000689c 	.word	0x2000689c
 8005c58:	08005aa9 	.word	0x08005aa9
 8005c5c:	20006898 	.word	0x20006898

08005c60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <tcp_update_rcv_ann_wnd+0x1c>
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <tcp_update_rcv_ann_wnd+0xa4>)
 8005c70:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005c74:	4924      	ldr	r1, [pc, #144]	; (8005d08 <tcp_update_rcv_ann_wnd+0xa8>)
 8005c76:	4825      	ldr	r0, [pc, #148]	; (8005d0c <tcp_update_rcv_ann_wnd+0xac>)
 8005c78:	f008 fd8e 	bl	800e798 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005c84:	4413      	add	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005c90:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005c94:	bf28      	it	cs
 8005c96:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	db08      	blt.n	8005cb8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	e020      	b.n	8005cfa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dd03      	ble.n	8005cce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ccc:	e014      	b.n	8005cf8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce0:	d306      	bcc.n	8005cf0 <tcp_update_rcv_ann_wnd+0x90>
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <tcp_update_rcv_ann_wnd+0xa4>)
 8005ce4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005ce8:	4909      	ldr	r1, [pc, #36]	; (8005d10 <tcp_update_rcv_ann_wnd+0xb0>)
 8005cea:	4808      	ldr	r0, [pc, #32]	; (8005d0c <tcp_update_rcv_ann_wnd+0xac>)
 8005cec:	f008 fd54 	bl	800e798 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005cf8:	2300      	movs	r3, #0
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	08010310 	.word	0x08010310
 8005d08:	0801056c 	.word	0x0801056c
 8005d0c:	08010354 	.word	0x08010354
 8005d10:	08010590 	.word	0x08010590

08005d14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <tcp_recved+0x22>
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <tcp_recved+0x90>)
 8005d28:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005d2c:	491e      	ldr	r1, [pc, #120]	; (8005da8 <tcp_recved+0x94>)
 8005d2e:	481f      	ldr	r0, [pc, #124]	; (8005dac <tcp_recved+0x98>)
 8005d30:	f008 fd32 	bl	800e798 <iprintf>
 8005d34:	e032      	b.n	8005d9c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7d1b      	ldrb	r3, [r3, #20]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d106      	bne.n	8005d4c <tcp_recved+0x38>
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <tcp_recved+0x90>)
 8005d40:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005d44:	491a      	ldr	r1, [pc, #104]	; (8005db0 <tcp_recved+0x9c>)
 8005d46:	4819      	ldr	r0, [pc, #100]	; (8005dac <tcp_recved+0x98>)
 8005d48:	f008 fd26 	bl	800e798 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005d50:	887b      	ldrh	r3, [r7, #2]
 8005d52:	4413      	add	r3, r2
 8005d54:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005d56:	89fb      	ldrh	r3, [r7, #14]
 8005d58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d5c:	d804      	bhi.n	8005d68 <tcp_recved+0x54>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d62:	89fa      	ldrh	r2, [r7, #14]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d204      	bcs.n	8005d72 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d70:	e002      	b.n	8005d78 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	89fa      	ldrh	r2, [r7, #14]
 8005d76:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff71 	bl	8005c60 <tcp_update_rcv_ann_wnd>
 8005d7e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005d86:	d309      	bcc.n	8005d9c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8b5b      	ldrh	r3, [r3, #26]
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f004 fbc2 	bl	800a520 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	08010310 	.word	0x08010310
 8005da8:	080105ac 	.word	0x080105ac
 8005dac:	08010354 	.word	0x08010354
 8005db0:	080105c4 	.word	0x080105c4

08005db4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <tcp_new_port+0x84>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <tcp_new_port+0x84>)
 8005dc8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <tcp_new_port+0x84>)
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d103      	bne.n	8005dde <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <tcp_new_port+0x84>)
 8005dd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005ddc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005dde:	2300      	movs	r3, #0
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	e01e      	b.n	8005e22 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <tcp_new_port+0x88>)
 8005de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	e011      	b.n	8005e16 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	8ada      	ldrh	r2, [r3, #22]
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <tcp_new_port+0x84>)
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d108      	bne.n	8005e10 <tcp_new_port+0x5c>
        n++;
 8005dfe:	88bb      	ldrh	r3, [r7, #4]
 8005e00:	3301      	adds	r3, #1
 8005e02:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005e04:	88bb      	ldrh	r3, [r7, #4]
 8005e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e0a:	d3d8      	bcc.n	8005dbe <tcp_new_port+0xa>
          return 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e00d      	b.n	8005e2c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	71fb      	strb	r3, [r7, #7]
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d9dd      	bls.n	8005de4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <tcp_new_port+0x84>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	2000000a 	.word	0x2000000a
 8005e3c:	080122dc 	.word	0x080122dc

08005e40 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b090      	sub	sp, #64	; 0x40
 8005e44:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005e4c:	4b94      	ldr	r3, [pc, #592]	; (80060a0 <tcp_slowtmr+0x260>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a93      	ldr	r2, [pc, #588]	; (80060a0 <tcp_slowtmr+0x260>)
 8005e54:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005e56:	4b93      	ldr	r3, [pc, #588]	; (80060a4 <tcp_slowtmr+0x264>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4b91      	ldr	r3, [pc, #580]	; (80060a4 <tcp_slowtmr+0x264>)
 8005e60:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005e66:	4b90      	ldr	r3, [pc, #576]	; (80060a8 <tcp_slowtmr+0x268>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005e6c:	e29f      	b.n	80063ae <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	7d1b      	ldrb	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <tcp_slowtmr+0x44>
 8005e76:	4b8d      	ldr	r3, [pc, #564]	; (80060ac <tcp_slowtmr+0x26c>)
 8005e78:	f240 42be 	movw	r2, #1214	; 0x4be
 8005e7c:	498c      	ldr	r1, [pc, #560]	; (80060b0 <tcp_slowtmr+0x270>)
 8005e7e:	488d      	ldr	r0, [pc, #564]	; (80060b4 <tcp_slowtmr+0x274>)
 8005e80:	f008 fc8a 	bl	800e798 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	7d1b      	ldrb	r3, [r3, #20]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <tcp_slowtmr+0x5a>
 8005e8c:	4b87      	ldr	r3, [pc, #540]	; (80060ac <tcp_slowtmr+0x26c>)
 8005e8e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005e92:	4989      	ldr	r1, [pc, #548]	; (80060b8 <tcp_slowtmr+0x278>)
 8005e94:	4887      	ldr	r0, [pc, #540]	; (80060b4 <tcp_slowtmr+0x274>)
 8005e96:	f008 fc7f 	bl	800e798 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	7d1b      	ldrb	r3, [r3, #20]
 8005e9e:	2b0a      	cmp	r3, #10
 8005ea0:	d106      	bne.n	8005eb0 <tcp_slowtmr+0x70>
 8005ea2:	4b82      	ldr	r3, [pc, #520]	; (80060ac <tcp_slowtmr+0x26c>)
 8005ea4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005ea8:	4984      	ldr	r1, [pc, #528]	; (80060bc <tcp_slowtmr+0x27c>)
 8005eaa:	4882      	ldr	r0, [pc, #520]	; (80060b4 <tcp_slowtmr+0x274>)
 8005eac:	f008 fc74 	bl	800e798 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	7f9a      	ldrb	r2, [r3, #30]
 8005eb4:	4b7b      	ldr	r3, [pc, #492]	; (80060a4 <tcp_slowtmr+0x264>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d105      	bne.n	8005ec8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005ec6:	e272      	b.n	80063ae <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005ec8:	4b76      	ldr	r3, [pc, #472]	; (80060a4 <tcp_slowtmr+0x264>)
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	7d1b      	ldrb	r3, [r3, #20]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d10a      	bne.n	8005efa <tcp_slowtmr+0xba>
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d905      	bls.n	8005efa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ef8:	e11e      	b.n	8006138 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f00:	2b0b      	cmp	r3, #11
 8005f02:	d905      	bls.n	8005f10 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f0e:	e113      	b.n	8006138 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d075      	beq.n	8006006 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <tcp_slowtmr+0xf0>
 8005f22:	4b62      	ldr	r3, [pc, #392]	; (80060ac <tcp_slowtmr+0x26c>)
 8005f24:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005f28:	4965      	ldr	r1, [pc, #404]	; (80060c0 <tcp_slowtmr+0x280>)
 8005f2a:	4862      	ldr	r0, [pc, #392]	; (80060b4 <tcp_slowtmr+0x274>)
 8005f2c:	f008 fc34 	bl	800e798 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <tcp_slowtmr+0x106>
 8005f38:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <tcp_slowtmr+0x26c>)
 8005f3a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005f3e:	4961      	ldr	r1, [pc, #388]	; (80060c4 <tcp_slowtmr+0x284>)
 8005f40:	485c      	ldr	r0, [pc, #368]	; (80060b4 <tcp_slowtmr+0x274>)
 8005f42:	f008 fc29 	bl	800e798 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005f4c:	2b0b      	cmp	r3, #11
 8005f4e:	d905      	bls.n	8005f5c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f54:	3301      	adds	r3, #1
 8005f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005f5a:	e0ed      	b.n	8006138 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <tcp_slowtmr+0x288>)
 8005f66:	5cd3      	ldrb	r3, [r2, r3]
 8005f68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f70:	7c7a      	ldrb	r2, [r7, #17]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d907      	bls.n	8005f86 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f8c:	7c7a      	ldrb	r2, [r7, #17]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	f200 80d2 	bhi.w	8006138 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005f94:	2301      	movs	r3, #1
 8005f96:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa4:	f005 f964 	bl	800b270 <tcp_zero_window_probe>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d014      	beq.n	8005fd8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	e011      	b.n	8005fd8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fbe:	f004 f829 	bl	800a014 <tcp_split_unsent_seg>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d107      	bne.n	8005fd8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fca:	f004 faa9 	bl	800a520 <tcp_output>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80ac 	beq.w	8006138 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005fee:	2b06      	cmp	r3, #6
 8005ff0:	f200 80a2 	bhi.w	8006138 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006004:	e098      	b.n	8006138 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800600c:	2b00      	cmp	r3, #0
 800600e:	db0f      	blt.n	8006030 <tcp_slowtmr+0x1f0>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006016:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800601a:	4293      	cmp	r3, r2
 800601c:	d008      	beq.n	8006030 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006024:	b29b      	uxth	r3, r3
 8006026:	3301      	adds	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	b21a      	sxth	r2, r3
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800603c:	429a      	cmp	r2, r3
 800603e:	db7b      	blt.n	8006138 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006042:	f004 fd5f 	bl	800ab04 <tcp_rexmit_rto_prepare>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <tcp_slowtmr+0x21c>
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	2b00      	cmp	r3, #0
 8006052:	d171      	bne.n	8006138 <tcp_slowtmr+0x2f8>
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d06d      	beq.n	8006138 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	7d1b      	ldrb	r3, [r3, #20]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d03a      	beq.n	80060da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800606a:	2b0c      	cmp	r3, #12
 800606c:	bf28      	it	cs
 800606e:	230c      	movcs	r3, #12
 8006070:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006078:	10db      	asrs	r3, r3, #3
 800607a:	b21b      	sxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006084:	4413      	add	r3, r2
 8006086:	7efa      	ldrb	r2, [r7, #27]
 8006088:	4910      	ldr	r1, [pc, #64]	; (80060cc <tcp_slowtmr+0x28c>)
 800608a:	5c8a      	ldrb	r2, [r1, r2]
 800608c:	4093      	lsls	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006096:	4293      	cmp	r3, r2
 8006098:	dc1a      	bgt.n	80060d0 <tcp_slowtmr+0x290>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	b21a      	sxth	r2, r3
 800609e:	e019      	b.n	80060d4 <tcp_slowtmr+0x294>
 80060a0:	20006894 	.word	0x20006894
 80060a4:	200000ce 	.word	0x200000ce
 80060a8:	20006890 	.word	0x20006890
 80060ac:	08010310 	.word	0x08010310
 80060b0:	08010654 	.word	0x08010654
 80060b4:	08010354 	.word	0x08010354
 80060b8:	08010680 	.word	0x08010680
 80060bc:	080106ac 	.word	0x080106ac
 80060c0:	080106dc 	.word	0x080106dc
 80060c4:	08010710 	.word	0x08010710
 80060c8:	080122d4 	.word	0x080122d4
 80060cc:	080122c4 	.word	0x080122c4
 80060d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	2200      	movs	r2, #0
 80060de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bf28      	it	cs
 80060f0:	4613      	movcs	r3, r2
 80060f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80060f4:	8a7b      	ldrh	r3, [r7, #18]
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	429a      	cmp	r2, r3
 8006110:	d206      	bcs.n	8006120 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2200      	movs	r2, #0
 800612e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006134:	f004 fd56 	bl	800abe4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	7d1b      	ldrb	r3, [r3, #20]
 800613c:	2b06      	cmp	r3, #6
 800613e:	d111      	bne.n	8006164 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	8b5b      	ldrh	r3, [r3, #26]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800614c:	4b9d      	ldr	r3, [pc, #628]	; (80063c4 <tcp_slowtmr+0x584>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b28      	cmp	r3, #40	; 0x28
 8006158:	d904      	bls.n	8006164 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800615a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615e:	3301      	adds	r3, #1
 8006160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	7a5b      	ldrb	r3, [r3, #9]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d04c      	beq.n	800620a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006174:	2b04      	cmp	r3, #4
 8006176:	d003      	beq.n	8006180 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800617c:	2b07      	cmp	r3, #7
 800617e:	d144      	bne.n	800620a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006180:	4b90      	ldr	r3, [pc, #576]	; (80063c4 <tcp_slowtmr+0x584>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006190:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006194:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006198:	498b      	ldr	r1, [pc, #556]	; (80063c8 <tcp_slowtmr+0x588>)
 800619a:	fba1 1303 	umull	r1, r3, r1, r3
 800619e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d90a      	bls.n	80061ba <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80061a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a8:	3301      	adds	r3, #1
 80061aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80061ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061b2:	3301      	adds	r3, #1
 80061b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061b8:	e027      	b.n	800620a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061ba:	4b82      	ldr	r3, [pc, #520]	; (80063c4 <tcp_slowtmr+0x584>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80061d0:	4618      	mov	r0, r3
 80061d2:	4b7e      	ldr	r3, [pc, #504]	; (80063cc <tcp_slowtmr+0x58c>)
 80061d4:	fb03 f300 	mul.w	r3, r3, r0
 80061d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80061da:	497b      	ldr	r1, [pc, #492]	; (80063c8 <tcp_slowtmr+0x588>)
 80061dc:	fba1 1303 	umull	r1, r3, r1, r3
 80061e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d911      	bls.n	800620a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80061e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e8:	f005 f802 	bl	800b1f0 <tcp_keepalive>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80061f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d107      	bne.n	800620a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006200:	3301      	adds	r3, #1
 8006202:	b2da      	uxtb	r2, r3
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	2b00      	cmp	r3, #0
 8006210:	d011      	beq.n	8006236 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006212:	4b6c      	ldr	r3, [pc, #432]	; (80063c4 <tcp_slowtmr+0x584>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006222:	4619      	mov	r1, r3
 8006224:	460b      	mov	r3, r1
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	440b      	add	r3, r1
 800622a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006232:	f000 fec1 	bl	8006fb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	7d1b      	ldrb	r3, [r3, #20]
 800623a:	2b03      	cmp	r3, #3
 800623c:	d10b      	bne.n	8006256 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800623e:	4b61      	ldr	r3, [pc, #388]	; (80063c4 <tcp_slowtmr+0x584>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b28      	cmp	r3, #40	; 0x28
 800624a:	d904      	bls.n	8006256 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006250:	3301      	adds	r3, #1
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	7d1b      	ldrb	r3, [r3, #20]
 800625a:	2b09      	cmp	r3, #9
 800625c:	d10b      	bne.n	8006276 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800625e:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <tcp_slowtmr+0x584>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2bf0      	cmp	r3, #240	; 0xf0
 800626a:	d904      	bls.n	8006276 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006270:	3301      	adds	r3, #1
 8006272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800627a:	2b00      	cmp	r3, #0
 800627c:	d060      	beq.n	8006340 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006288:	f000 fce2 	bl	8006c50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006292:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <tcp_slowtmr+0x590>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <tcp_slowtmr+0x46a>
 800629c:	4b4d      	ldr	r3, [pc, #308]	; (80063d4 <tcp_slowtmr+0x594>)
 800629e:	f240 526d 	movw	r2, #1389	; 0x56d
 80062a2:	494d      	ldr	r1, [pc, #308]	; (80063d8 <tcp_slowtmr+0x598>)
 80062a4:	484d      	ldr	r0, [pc, #308]	; (80063dc <tcp_slowtmr+0x59c>)
 80062a6:	f008 fa77 	bl	800e798 <iprintf>
        prev->next = pcb->next;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	e00f      	b.n	80062d4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80062b4:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <tcp_slowtmr+0x590>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d006      	beq.n	80062cc <tcp_slowtmr+0x48c>
 80062be:	4b45      	ldr	r3, [pc, #276]	; (80063d4 <tcp_slowtmr+0x594>)
 80062c0:	f240 5271 	movw	r2, #1393	; 0x571
 80062c4:	4946      	ldr	r1, [pc, #280]	; (80063e0 <tcp_slowtmr+0x5a0>)
 80062c6:	4845      	ldr	r0, [pc, #276]	; (80063dc <tcp_slowtmr+0x59c>)
 80062c8:	f008 fa66 	bl	800e798 <iprintf>
        tcp_active_pcbs = pcb->next;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a3f      	ldr	r2, [pc, #252]	; (80063d0 <tcp_slowtmr+0x590>)
 80062d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80062d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d013      	beq.n	8006304 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80062e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	3304      	adds	r3, #4
 80062ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ec:	8ad2      	ldrh	r2, [r2, #22]
 80062ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f0:	8b09      	ldrh	r1, [r1, #24]
 80062f2:	9102      	str	r1, [sp, #8]
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	462b      	mov	r3, r5
 80062fa:	4622      	mov	r2, r4
 80062fc:	4601      	mov	r1, r0
 80062fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006300:	f004 fec2 	bl	800b088 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	7d1b      	ldrb	r3, [r3, #20]
 800630e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800631a:	6838      	ldr	r0, [r7, #0]
 800631c:	f7ff f838 	bl	8005390 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006320:	4b30      	ldr	r3, [pc, #192]	; (80063e4 <tcp_slowtmr+0x5a4>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <tcp_slowtmr+0x4f6>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f06f 010c 	mvn.w	r1, #12
 8006332:	68b8      	ldr	r0, [r7, #8]
 8006334:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006336:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <tcp_slowtmr+0x5a4>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d037      	beq.n	80063ae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800633e:	e590      	b.n	8005e62 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	7f1b      	ldrb	r3, [r3, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	7f1a      	ldrb	r2, [r3, #28]
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	7f5b      	ldrb	r3, [r3, #29]
 800635e:	429a      	cmp	r2, r3
 8006360:	d325      	bcc.n	80063ae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <tcp_slowtmr+0x5a4>)
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <tcp_slowtmr+0x550>
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006380:	6912      	ldr	r2, [r2, #16]
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	4610      	mov	r0, r2
 8006386:	4798      	blx	r3
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800638e:	e002      	b.n	8006396 <tcp_slowtmr+0x556>
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <tcp_slowtmr+0x5a4>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d000      	beq.n	80063a0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800639e:	e560      	b.n	8005e62 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80063a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80063a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063aa:	f004 f8b9 	bl	800a520 <tcp_output>
  while (pcb != NULL) {
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f ad5c 	bne.w	8005e6e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <tcp_slowtmr+0x5a8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80063c0:	e067      	b.n	8006492 <tcp_slowtmr+0x652>
 80063c2:	bf00      	nop
 80063c4:	20006894 	.word	0x20006894
 80063c8:	10624dd3 	.word	0x10624dd3
 80063cc:	000124f8 	.word	0x000124f8
 80063d0:	20006890 	.word	0x20006890
 80063d4:	08010310 	.word	0x08010310
 80063d8:	08010748 	.word	0x08010748
 80063dc:	08010354 	.word	0x08010354
 80063e0:	08010774 	.word	0x08010774
 80063e4:	2000688c 	.word	0x2000688c
 80063e8:	200068a0 	.word	0x200068a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	7d1b      	ldrb	r3, [r3, #20]
 80063f0:	2b0a      	cmp	r3, #10
 80063f2:	d006      	beq.n	8006402 <tcp_slowtmr+0x5c2>
 80063f4:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <tcp_slowtmr+0x664>)
 80063f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80063fa:	492b      	ldr	r1, [pc, #172]	; (80064a8 <tcp_slowtmr+0x668>)
 80063fc:	482b      	ldr	r0, [pc, #172]	; (80064ac <tcp_slowtmr+0x66c>)
 80063fe:	f008 f9cb 	bl	800e798 <iprintf>
    pcb_remove = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006408:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <tcp_slowtmr+0x670>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2bf0      	cmp	r3, #240	; 0xf0
 8006414:	d904      	bls.n	8006420 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800641a:	3301      	adds	r3, #1
 800641c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006424:	2b00      	cmp	r3, #0
 8006426:	d02f      	beq.n	8006488 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006428:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800642a:	f000 fc11 	bl	8006c50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006434:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <tcp_slowtmr+0x674>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643a:	429a      	cmp	r2, r3
 800643c:	d106      	bne.n	800644c <tcp_slowtmr+0x60c>
 800643e:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <tcp_slowtmr+0x664>)
 8006440:	f240 52af 	movw	r2, #1455	; 0x5af
 8006444:	491c      	ldr	r1, [pc, #112]	; (80064b8 <tcp_slowtmr+0x678>)
 8006446:	4819      	ldr	r0, [pc, #100]	; (80064ac <tcp_slowtmr+0x66c>)
 8006448:	f008 f9a6 	bl	800e798 <iprintf>
        prev->next = pcb->next;
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	60da      	str	r2, [r3, #12]
 8006454:	e00f      	b.n	8006476 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006456:	4b17      	ldr	r3, [pc, #92]	; (80064b4 <tcp_slowtmr+0x674>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645c:	429a      	cmp	r2, r3
 800645e:	d006      	beq.n	800646e <tcp_slowtmr+0x62e>
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <tcp_slowtmr+0x664>)
 8006462:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006466:	4915      	ldr	r1, [pc, #84]	; (80064bc <tcp_slowtmr+0x67c>)
 8006468:	4810      	ldr	r0, [pc, #64]	; (80064ac <tcp_slowtmr+0x66c>)
 800646a:	f008 f995 	bl	800e798 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <tcp_slowtmr+0x674>)
 8006474:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006480:	69f8      	ldr	r0, [r7, #28]
 8006482:	f7fe ff85 	bl	8005390 <tcp_free>
 8006486:	e004      	b.n	8006492 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1a9      	bne.n	80063ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	3730      	adds	r7, #48	; 0x30
 800649e:	46bd      	mov	sp, r7
 80064a0:	bdb0      	pop	{r4, r5, r7, pc}
 80064a2:	bf00      	nop
 80064a4:	08010310 	.word	0x08010310
 80064a8:	080107a0 	.word	0x080107a0
 80064ac:	08010354 	.word	0x08010354
 80064b0:	20006894 	.word	0x20006894
 80064b4:	200068a0 	.word	0x200068a0
 80064b8:	080107d0 	.word	0x080107d0
 80064bc:	080107f8 	.word	0x080107f8

080064c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80064c6:	4b2d      	ldr	r3, [pc, #180]	; (800657c <tcp_fasttmr+0xbc>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	4b2b      	ldr	r3, [pc, #172]	; (800657c <tcp_fasttmr+0xbc>)
 80064d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80064d2:	4b2b      	ldr	r3, [pc, #172]	; (8006580 <tcp_fasttmr+0xc0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80064d8:	e048      	b.n	800656c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7f9a      	ldrb	r2, [r3, #30]
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <tcp_fasttmr+0xbc>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d03f      	beq.n	8006566 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80064e6:	4b25      	ldr	r3, [pc, #148]	; (800657c <tcp_fasttmr+0xbc>)
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8b5b      	ldrh	r3, [r3, #26]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8b5b      	ldrh	r3, [r3, #26]
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f004 f809 	bl	800a520 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8b5b      	ldrh	r3, [r3, #26]
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8b5b      	ldrh	r3, [r3, #26]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8b5b      	ldrh	r3, [r3, #26]
 800652c:	f023 0308 	bic.w	r3, r3, #8
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff f8be 	bl	80056b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800654a:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <tcp_fasttmr+0xc4>)
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f819 	bl	8006588 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <tcp_fasttmr+0xc4>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d000      	beq.n	8006560 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800655e:	e7b8      	b.n	80064d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	e002      	b.n	800656c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1b3      	bne.n	80064da <tcp_fasttmr+0x1a>
    }
  }
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	200000ce 	.word	0x200000ce
 8006580:	20006890 	.word	0x20006890
 8006584:	2000688c 	.word	0x2000688c

08006588 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006588:	b590      	push	{r4, r7, lr}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <tcp_process_refused_data+0x22>
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <tcp_process_refused_data+0xec>)
 8006598:	f240 6209 	movw	r2, #1545	; 0x609
 800659c:	4936      	ldr	r1, [pc, #216]	; (8006678 <tcp_process_refused_data+0xf0>)
 800659e:	4837      	ldr	r0, [pc, #220]	; (800667c <tcp_process_refused_data+0xf4>)
 80065a0:	f008 f8fa 	bl	800e798 <iprintf>
 80065a4:	f06f 030f 	mvn.w	r3, #15
 80065a8:	e060      	b.n	800666c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ae:	7b5b      	ldrb	r3, [r3, #13]
 80065b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <tcp_process_refused_data+0x58>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6918      	ldr	r0, [r3, #16]
 80065d2:	2300      	movs	r3, #0
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	47a0      	blx	r4
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
 80065de:	e007      	b.n	80065f0 <tcp_process_refused_data+0x68>
 80065e0:	2300      	movs	r3, #0
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	2000      	movs	r0, #0
 80065e8:	f000 f8c2 	bl	8006770 <tcp_recv_null>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80065f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d12a      	bne.n	800664e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d033      	beq.n	800666a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800660a:	d005      	beq.n	8006618 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	3301      	adds	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <tcp_process_refused_data+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6918      	ldr	r0, [r3, #16]
 800662c:	2300      	movs	r3, #0
 800662e:	2200      	movs	r2, #0
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	47a0      	blx	r4
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e001      	b.n	800663e <tcp_process_refused_data+0xb6>
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006642:	f113 0f0d 	cmn.w	r3, #13
 8006646:	d110      	bne.n	800666a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006648:	f06f 030c 	mvn.w	r3, #12
 800664c:	e00e      	b.n	800666c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800664e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006652:	f113 0f0d 	cmn.w	r3, #13
 8006656:	d102      	bne.n	800665e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006658:	f06f 030c 	mvn.w	r3, #12
 800665c:	e006      	b.n	800666c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006664:	f06f 0304 	mvn.w	r3, #4
 8006668:	e000      	b.n	800666c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	bd90      	pop	{r4, r7, pc}
 8006674:	08010310 	.word	0x08010310
 8006678:	08010820 	.word	0x08010820
 800667c:	08010354 	.word	0x08010354

08006680 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006688:	e007      	b.n	800669a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f80a 	bl	80066aa <tcp_seg_free>
    seg = next;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f4      	bne.n	800668a <tcp_segs_free+0xa>
  }
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fbb3 	bl	8004e30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	2003      	movs	r0, #3
 80066ce:	f7fd fd9d 	bl	800420c <memp_free>
  }
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d107      	bne.n	80066fe <tcp_setprio+0x22>
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <tcp_setprio+0x30>)
 80066f0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80066f4:	4906      	ldr	r1, [pc, #24]	; (8006710 <tcp_setprio+0x34>)
 80066f6:	4807      	ldr	r0, [pc, #28]	; (8006714 <tcp_setprio+0x38>)
 80066f8:	f008 f84e 	bl	800e798 <iprintf>
 80066fc:	e002      	b.n	8006704 <tcp_setprio+0x28>

  pcb->prio = prio;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	755a      	strb	r2, [r3, #21]
}
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	08010310 	.word	0x08010310
 8006710:	08010848 	.word	0x08010848
 8006714:	08010354 	.word	0x08010354

08006718 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <tcp_seg_copy+0x1c>
 8006726:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <tcp_seg_copy+0x4c>)
 8006728:	f240 6282 	movw	r2, #1666	; 0x682
 800672c:	490e      	ldr	r1, [pc, #56]	; (8006768 <tcp_seg_copy+0x50>)
 800672e:	480f      	ldr	r0, [pc, #60]	; (800676c <tcp_seg_copy+0x54>)
 8006730:	f008 f832 	bl	800e798 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006734:	2003      	movs	r0, #3
 8006736:	f7fd fd1d 	bl	8004174 <memp_malloc>
 800673a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <tcp_seg_copy+0x2e>
    return NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	e00a      	b.n	800675c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006746:	2210      	movs	r2, #16
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f008 f80e 	bl	800e76c <memcpy>
  pbuf_ref(cseg->p);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fc0b 	bl	8004f70 <pbuf_ref>
  return cseg;
 800675a:	68fb      	ldr	r3, [r7, #12]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08010310 	.word	0x08010310
 8006768:	08010864 	.word	0x08010864
 800676c:	08010354 	.word	0x08010354

08006770 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <tcp_recv_null+0x28>
 8006784:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <tcp_recv_null+0x60>)
 8006786:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800678a:	4912      	ldr	r1, [pc, #72]	; (80067d4 <tcp_recv_null+0x64>)
 800678c:	4812      	ldr	r0, [pc, #72]	; (80067d8 <tcp_recv_null+0x68>)
 800678e:	f008 f803 	bl	800e798 <iprintf>
 8006792:	f06f 030f 	mvn.w	r3, #15
 8006796:	e016      	b.n	80067c6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	891b      	ldrh	r3, [r3, #8]
 80067a2:	4619      	mov	r1, r3
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f7ff fab5 	bl	8005d14 <tcp_recved>
    pbuf_free(p);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fe fb40 	bl	8004e30 <pbuf_free>
 80067b0:	e008      	b.n	80067c4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80067b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80067ba:	68b8      	ldr	r0, [r7, #8]
 80067bc:	f7fe ffe6 	bl	800578c <tcp_close>
 80067c0:	4603      	mov	r3, r0
 80067c2:	e000      	b.n	80067c6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	08010310 	.word	0x08010310
 80067d4:	08010880 	.word	0x08010880
 80067d8:	08010354 	.word	0x08010354

080067dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80067e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	db01      	blt.n	80067f2 <tcp_kill_prio+0x16>
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	e000      	b.n	80067f4 <tcp_kill_prio+0x18>
 80067f2:	237f      	movs	r3, #127	; 0x7f
 80067f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d034      	beq.n	8006866 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	3b01      	subs	r3, #1
 8006800:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <tcp_kill_prio+0x94>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e01f      	b.n	8006852 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	7d5b      	ldrb	r3, [r3, #21]
 8006816:	7afa      	ldrb	r2, [r7, #11]
 8006818:	429a      	cmp	r2, r3
 800681a:	d80c      	bhi.n	8006836 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006820:	7afa      	ldrb	r2, [r7, #11]
 8006822:	429a      	cmp	r2, r3
 8006824:	d112      	bne.n	800684c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006826:	4b13      	ldr	r3, [pc, #76]	; (8006874 <tcp_kill_prio+0x98>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	429a      	cmp	r2, r3
 8006834:	d80a      	bhi.n	800684c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <tcp_kill_prio+0x98>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	7d5b      	ldrb	r3, [r3, #21]
 800684a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1dc      	bne.n	8006812 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800685e:	6938      	ldr	r0, [r7, #16]
 8006860:	f7ff f87e 	bl	8005960 <tcp_abort>
 8006864:	e000      	b.n	8006868 <tcp_kill_prio+0x8c>
    return;
 8006866:	bf00      	nop
  }
}
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20006890 	.word	0x20006890
 8006874:	20006894 	.word	0x20006894

08006878 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	2b08      	cmp	r3, #8
 8006886:	d009      	beq.n	800689c <tcp_kill_state+0x24>
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	2b09      	cmp	r3, #9
 800688c:	d006      	beq.n	800689c <tcp_kill_state+0x24>
 800688e:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <tcp_kill_state+0x80>)
 8006890:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006894:	4919      	ldr	r1, [pc, #100]	; (80068fc <tcp_kill_state+0x84>)
 8006896:	481a      	ldr	r0, [pc, #104]	; (8006900 <tcp_kill_state+0x88>)
 8006898:	f007 ff7e 	bl	800e798 <iprintf>

  inactivity = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068a4:	4b17      	ldr	r3, [pc, #92]	; (8006904 <tcp_kill_state+0x8c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e017      	b.n	80068dc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	7d1b      	ldrb	r3, [r3, #20]
 80068b0:	79fa      	ldrb	r2, [r7, #7]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d10f      	bne.n	80068d6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <tcp_kill_state+0x90>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d807      	bhi.n	80068d6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <tcp_kill_state+0x90>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e4      	bne.n	80068ac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80068e8:	2100      	movs	r1, #0
 80068ea:	6938      	ldr	r0, [r7, #16]
 80068ec:	f7fe ff7a 	bl	80057e4 <tcp_abandon>
  }
}
 80068f0:	bf00      	nop
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	08010310 	.word	0x08010310
 80068fc:	0801089c 	.word	0x0801089c
 8006900:	08010354 	.word	0x08010354
 8006904:	20006890 	.word	0x20006890
 8006908:	20006894 	.word	0x20006894

0800690c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <tcp_kill_timewait+0x58>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e012      	b.n	8006948 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <tcp_kill_timewait+0x5c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	429a      	cmp	r2, r3
 8006930:	d807      	bhi.n	8006942 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <tcp_kill_timewait+0x5c>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e9      	bne.n	8006922 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006954:	68b8      	ldr	r0, [r7, #8]
 8006956:	f7ff f803 	bl	8005960 <tcp_abort>
  }
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200068a0 	.word	0x200068a0
 8006968:	20006894 	.word	0x20006894

0800696c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <tcp_handle_closepend+0x48>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006978:	e014      	b.n	80069a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8b5b      	ldrh	r3, [r3, #26]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8b5b      	ldrh	r3, [r3, #26]
 8006990:	f023 0308 	bic.w	r3, r3, #8
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe fe8c 	bl	80056b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e7      	bne.n	800697a <tcp_handle_closepend+0xe>
  }
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20006890 	.word	0x20006890

080069b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069c2:	2001      	movs	r0, #1
 80069c4:	f7fd fbd6 	bl	8004174 <memp_malloc>
 80069c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d126      	bne.n	8006a1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80069d0:	f7ff ffcc 	bl	800696c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80069d4:	f7ff ff9a 	bl	800690c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069d8:	2001      	movs	r0, #1
 80069da:	f7fd fbcb 	bl	8004174 <memp_malloc>
 80069de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11b      	bne.n	8006a1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80069e6:	2009      	movs	r0, #9
 80069e8:	f7ff ff46 	bl	8006878 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7fd fbc1 	bl	8004174 <memp_malloc>
 80069f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d111      	bne.n	8006a1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80069fa:	2008      	movs	r0, #8
 80069fc:	f7ff ff3c 	bl	8006878 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a00:	2001      	movs	r0, #1
 8006a02:	f7fd fbb7 	bl	8004174 <memp_malloc>
 8006a06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fee3 	bl	80067dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fd fbac 	bl	8004174 <memp_malloc>
 8006a1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d03f      	beq.n	8006aa4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006a24:	229c      	movs	r2, #156	; 0x9c
 8006a26:	2100      	movs	r1, #0
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f007 fead 	bl	800e788 <memset>
    pcb->prio = prio;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	79fa      	ldrb	r2, [r7, #7]
 8006a32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006a3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	22ff      	movs	r2, #255	; 0xff
 8006a52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006a5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2206      	movs	r2, #6
 8006a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2206      	movs	r2, #6
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <tcp_alloc+0xf8>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006a82:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <tcp_alloc+0xfc>)
 8006a84:	781a      	ldrb	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006a90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <tcp_alloc+0x100>)
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a07      	ldr	r2, [pc, #28]	; (8006abc <tcp_alloc+0x104>)
 8006aa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20006894 	.word	0x20006894
 8006ab4:	200000ce 	.word	0x200000ce
 8006ab8:	08006771 	.word	0x08006771
 8006abc:	006ddd00 	.word	0x006ddd00

08006ac0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006ac4:	2040      	movs	r0, #64	; 0x40
 8006ac6:	f7ff ff77 	bl	80069b8 <tcp_alloc>
 8006aca:	4603      	mov	r3, r0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	611a      	str	r2, [r3, #16]
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7d1b      	ldrb	r3, [r3, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d106      	bne.n	8006b1a <tcp_recv+0x26>
 8006b0c:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <tcp_recv+0x38>)
 8006b0e:	f240 72df 	movw	r2, #2015	; 0x7df
 8006b12:	4907      	ldr	r1, [pc, #28]	; (8006b30 <tcp_recv+0x3c>)
 8006b14:	4807      	ldr	r0, [pc, #28]	; (8006b34 <tcp_recv+0x40>)
 8006b16:	f007 fe3f 	bl	800e798 <iprintf>
    pcb->recv = recv;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08010310 	.word	0x08010310
 8006b30:	080108ac 	.word	0x080108ac
 8006b34:	08010354 	.word	0x08010354

08006b38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00e      	beq.n	8006b66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7d1b      	ldrb	r3, [r3, #20]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <tcp_sent+0x26>
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <tcp_sent+0x38>)
 8006b52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8006b56:	4907      	ldr	r1, [pc, #28]	; (8006b74 <tcp_sent+0x3c>)
 8006b58:	4807      	ldr	r0, [pc, #28]	; (8006b78 <tcp_sent+0x40>)
 8006b5a:	f007 fe1d 	bl	800e798 <iprintf>
    pcb->sent = sent;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	08010310 	.word	0x08010310
 8006b74:	080108d4 	.word	0x080108d4
 8006b78:	08010354 	.word	0x08010354

08006b7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	7d1b      	ldrb	r3, [r3, #20]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d106      	bne.n	8006ba2 <tcp_err+0x26>
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <tcp_err+0x38>)
 8006b96:	f640 020d 	movw	r2, #2061	; 0x80d
 8006b9a:	4907      	ldr	r1, [pc, #28]	; (8006bb8 <tcp_err+0x3c>)
 8006b9c:	4807      	ldr	r0, [pc, #28]	; (8006bbc <tcp_err+0x40>)
 8006b9e:	f007 fdfb 	bl	800e798 <iprintf>
    pcb->errf = err;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08010310 	.word	0x08010310
 8006bb8:	080108fc 	.word	0x080108fc
 8006bbc:	08010354 	.word	0x08010354

08006bc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <tcp_accept+0x22>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7d1b      	ldrb	r3, [r3, #20]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d104      	bne.n	8006be2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	619a      	str	r2, [r3, #24]
  }
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d107      	bne.n	8006c14 <tcp_poll+0x24>
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <tcp_poll+0x50>)
 8006c06:	f640 023d 	movw	r2, #2109	; 0x83d
 8006c0a:	490e      	ldr	r1, [pc, #56]	; (8006c44 <tcp_poll+0x54>)
 8006c0c:	480e      	ldr	r0, [pc, #56]	; (8006c48 <tcp_poll+0x58>)
 8006c0e:	f007 fdc3 	bl	800e798 <iprintf>
 8006c12:	e011      	b.n	8006c38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	7d1b      	ldrb	r3, [r3, #20]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d106      	bne.n	8006c2a <tcp_poll+0x3a>
 8006c1c:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <tcp_poll+0x50>)
 8006c1e:	f640 023e 	movw	r2, #2110	; 0x83e
 8006c22:	490a      	ldr	r1, [pc, #40]	; (8006c4c <tcp_poll+0x5c>)
 8006c24:	4808      	ldr	r0, [pc, #32]	; (8006c48 <tcp_poll+0x58>)
 8006c26:	f007 fdb7 	bl	800e798 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	79fa      	ldrb	r2, [r7, #7]
 8006c36:	775a      	strb	r2, [r3, #29]
}
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	08010310 	.word	0x08010310
 8006c44:	08010924 	.word	0x08010924
 8006c48:	08010354 	.word	0x08010354
 8006c4c:	0801093c 	.word	0x0801093c

08006c50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d107      	bne.n	8006c6e <tcp_pcb_purge+0x1e>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <tcp_pcb_purge+0x94>)
 8006c60:	f640 0251 	movw	r2, #2129	; 0x851
 8006c64:	4920      	ldr	r1, [pc, #128]	; (8006ce8 <tcp_pcb_purge+0x98>)
 8006c66:	4821      	ldr	r0, [pc, #132]	; (8006cec <tcp_pcb_purge+0x9c>)
 8006c68:	f007 fd96 	bl	800e798 <iprintf>
 8006c6c:	e037      	b.n	8006cde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	7d1b      	ldrb	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d033      	beq.n	8006cde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006c7a:	2b0a      	cmp	r3, #10
 8006c7c:	d02f      	beq.n	8006cde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d02b      	beq.n	8006cde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe f8cc 	bl	8004e30 <pbuf_free>
      pcb->refused_data = NULL;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f986 	bl	8006fb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fce1 	bl	8006680 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fcdc 	bl	8006680 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	66da      	str	r2, [r3, #108]	; 0x6c
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08010310 	.word	0x08010310
 8006ce8:	0801095c 	.word	0x0801095c
 8006cec:	08010354 	.word	0x08010354

08006cf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <tcp_pcb_remove+0x1e>
 8006d00:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <tcp_pcb_remove+0x10c>)
 8006d02:	f640 0283 	movw	r2, #2179	; 0x883
 8006d06:	493e      	ldr	r1, [pc, #248]	; (8006e00 <tcp_pcb_remove+0x110>)
 8006d08:	483e      	ldr	r0, [pc, #248]	; (8006e04 <tcp_pcb_remove+0x114>)
 8006d0a:	f007 fd45 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <tcp_pcb_remove+0x32>
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <tcp_pcb_remove+0x10c>)
 8006d16:	f640 0284 	movw	r2, #2180	; 0x884
 8006d1a:	493b      	ldr	r1, [pc, #236]	; (8006e08 <tcp_pcb_remove+0x118>)
 8006d1c:	4839      	ldr	r0, [pc, #228]	; (8006e04 <tcp_pcb_remove+0x114>)
 8006d1e:	f007 fd3b 	bl	800e798 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d105      	bne.n	8006d38 <tcp_pcb_remove+0x48>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e013      	b.n	8006d60 <tcp_pcb_remove+0x70>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e00c      	b.n	8006d5a <tcp_pcb_remove+0x6a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d104      	bne.n	8006d54 <tcp_pcb_remove+0x64>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	e005      	b.n	8006d60 <tcp_pcb_remove+0x70>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ef      	bne.n	8006d40 <tcp_pcb_remove+0x50>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	f7ff ff72 	bl	8006c50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	7d1b      	ldrb	r3, [r3, #20]
 8006d70:	2b0a      	cmp	r3, #10
 8006d72:	d013      	beq.n	8006d9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d00f      	beq.n	8006d9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	8b5b      	ldrh	r3, [r3, #26]
 8006d80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	8b5b      	ldrh	r3, [r3, #26]
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d96:	6838      	ldr	r0, [r7, #0]
 8006d98:	f003 fbc2 	bl	800a520 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	7d1b      	ldrb	r3, [r3, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d020      	beq.n	8006de6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <tcp_pcb_remove+0xca>
 8006dac:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <tcp_pcb_remove+0x10c>)
 8006dae:	f640 0293 	movw	r2, #2195	; 0x893
 8006db2:	4916      	ldr	r1, [pc, #88]	; (8006e0c <tcp_pcb_remove+0x11c>)
 8006db4:	4813      	ldr	r0, [pc, #76]	; (8006e04 <tcp_pcb_remove+0x114>)
 8006db6:	f007 fcef 	bl	800e798 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <tcp_pcb_remove+0xe0>
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <tcp_pcb_remove+0x10c>)
 8006dc4:	f640 0294 	movw	r2, #2196	; 0x894
 8006dc8:	4911      	ldr	r1, [pc, #68]	; (8006e10 <tcp_pcb_remove+0x120>)
 8006dca:	480e      	ldr	r0, [pc, #56]	; (8006e04 <tcp_pcb_remove+0x114>)
 8006dcc:	f007 fce4 	bl	800e798 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <tcp_pcb_remove+0xf6>
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <tcp_pcb_remove+0x10c>)
 8006dda:	f640 0296 	movw	r2, #2198	; 0x896
 8006dde:	490d      	ldr	r1, [pc, #52]	; (8006e14 <tcp_pcb_remove+0x124>)
 8006de0:	4808      	ldr	r0, [pc, #32]	; (8006e04 <tcp_pcb_remove+0x114>)
 8006de2:	f007 fcd9 	bl	800e798 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08010310 	.word	0x08010310
 8006e00:	08010978 	.word	0x08010978
 8006e04:	08010354 	.word	0x08010354
 8006e08:	08010994 	.word	0x08010994
 8006e0c:	080109b4 	.word	0x080109b4
 8006e10:	080109cc 	.word	0x080109cc
 8006e14:	080109e8 	.word	0x080109e8

08006e18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <tcp_next_iss+0x1c>
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <tcp_next_iss+0x38>)
 8006e28:	f640 02af 	movw	r2, #2223	; 0x8af
 8006e2c:	4909      	ldr	r1, [pc, #36]	; (8006e54 <tcp_next_iss+0x3c>)
 8006e2e:	480a      	ldr	r0, [pc, #40]	; (8006e58 <tcp_next_iss+0x40>)
 8006e30:	f007 fcb2 	bl	800e798 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <tcp_next_iss+0x44>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <tcp_next_iss+0x48>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	4a07      	ldr	r2, [pc, #28]	; (8006e5c <tcp_next_iss+0x44>)
 8006e40:	6013      	str	r3, [r2, #0]
  return iss;
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <tcp_next_iss+0x44>)
 8006e44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	08010310 	.word	0x08010310
 8006e54:	08010a00 	.word	0x08010a00
 8006e58:	08010354 	.word	0x08010354
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	20006894 	.word	0x20006894

08006e64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d106      	bne.n	8006e86 <tcp_eff_send_mss_netif+0x22>
 8006e78:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <tcp_eff_send_mss_netif+0x68>)
 8006e7a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006e7e:	4914      	ldr	r1, [pc, #80]	; (8006ed0 <tcp_eff_send_mss_netif+0x6c>)
 8006e80:	4814      	ldr	r0, [pc, #80]	; (8006ed4 <tcp_eff_send_mss_netif+0x70>)
 8006e82:	f007 fc89 	bl	800e798 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006e8c:	89fb      	ldrh	r3, [r7, #14]
 8006e8e:	e019      	b.n	8006ec4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006e96:	8afb      	ldrh	r3, [r7, #22]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d012      	beq.n	8006ec2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006e9c:	2328      	movs	r3, #40	; 0x28
 8006e9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006ea0:	8afa      	ldrh	r2, [r7, #22]
 8006ea2:	8abb      	ldrh	r3, [r7, #20]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d904      	bls.n	8006eb2 <tcp_eff_send_mss_netif+0x4e>
 8006ea8:	8afa      	ldrh	r2, [r7, #22]
 8006eaa:	8abb      	ldrh	r3, [r7, #20]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	e000      	b.n	8006eb4 <tcp_eff_send_mss_netif+0x50>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006eb6:	8a7a      	ldrh	r2, [r7, #18]
 8006eb8:	89fb      	ldrh	r3, [r7, #14]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bf28      	it	cs
 8006ebe:	4613      	movcs	r3, r2
 8006ec0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	08010310 	.word	0x08010310
 8006ed0:	08010a1c 	.word	0x08010a1c
 8006ed4:	08010354 	.word	0x08010354

08006ed8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d119      	bne.n	8006f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006eee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006ef2:	4910      	ldr	r1, [pc, #64]	; (8006f34 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006ef4:	4810      	ldr	r0, [pc, #64]	; (8006f38 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006ef6:	f007 fc4f 	bl	800e798 <iprintf>

  while (pcb != NULL) {
 8006efa:	e011      	b.n	8006f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7fe fd26 	bl	8005960 <tcp_abort>
      pcb = next;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e002      	b.n	8006f20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ea      	bne.n	8006efc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	08010310 	.word	0x08010310
 8006f34:	08010a44 	.word	0x08010a44
 8006f38:	08010354 	.word	0x08010354

08006f3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d02a      	beq.n	8006fa2 <tcp_netif_ip_addr_changed+0x66>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d026      	beq.n	8006fa2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <tcp_netif_ip_addr_changed+0x70>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ffbc 	bl	8006ed8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <tcp_netif_ip_addr_changed+0x74>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ffb6 	bl	8006ed8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d017      	beq.n	8006fa2 <tcp_netif_ip_addr_changed+0x66>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d013      	beq.n	8006fa2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <tcp_netif_ip_addr_changed+0x78>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e00c      	b.n	8006f9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d103      	bne.n	8006f96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1ef      	bne.n	8006f82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20006890 	.word	0x20006890
 8006fb0:	2000689c 	.word	0x2000689c
 8006fb4:	20006898 	.word	0x20006898

08006fb8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fb57 	bl	8006680 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b08d      	sub	sp, #52	; 0x34
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d105      	bne.n	8006ffc <tcp_input+0x1c>
 8006ff0:	4b9b      	ldr	r3, [pc, #620]	; (8007260 <tcp_input+0x280>)
 8006ff2:	2283      	movs	r2, #131	; 0x83
 8006ff4:	499b      	ldr	r1, [pc, #620]	; (8007264 <tcp_input+0x284>)
 8006ff6:	489c      	ldr	r0, [pc, #624]	; (8007268 <tcp_input+0x288>)
 8006ff8:	f007 fbce 	bl	800e798 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a9a      	ldr	r2, [pc, #616]	; (800726c <tcp_input+0x28c>)
 8007002:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	895b      	ldrh	r3, [r3, #10]
 8007008:	2b13      	cmp	r3, #19
 800700a:	f240 83c4 	bls.w	8007796 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800700e:	4b98      	ldr	r3, [pc, #608]	; (8007270 <tcp_input+0x290>)
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	4a97      	ldr	r2, [pc, #604]	; (8007270 <tcp_input+0x290>)
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f006 fc25 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 83ba 	bne.w	800779a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007026:	4b92      	ldr	r3, [pc, #584]	; (8007270 <tcp_input+0x290>)
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800702e:	2be0      	cmp	r3, #224	; 0xe0
 8007030:	f000 83b3 	beq.w	800779a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007034:	4b8d      	ldr	r3, [pc, #564]	; (800726c <tcp_input+0x28c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	899b      	ldrh	r3, [r3, #12]
 800703a:	b29b      	uxth	r3, r3
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fc43 	bl	80038c8 <lwip_htons>
 8007042:	4603      	mov	r3, r0
 8007044:	0b1b      	lsrs	r3, r3, #12
 8007046:	b29b      	uxth	r3, r3
 8007048:	b2db      	uxtb	r3, r3
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800704e:	7cbb      	ldrb	r3, [r7, #18]
 8007050:	2b13      	cmp	r3, #19
 8007052:	f240 83a4 	bls.w	800779e <tcp_input+0x7be>
 8007056:	7cbb      	ldrb	r3, [r7, #18]
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	891b      	ldrh	r3, [r3, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	f200 839d 	bhi.w	800779e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007064:	7cbb      	ldrb	r3, [r7, #18]
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b14      	subs	r3, #20
 800706a:	b29a      	uxth	r2, r3
 800706c:	4b81      	ldr	r3, [pc, #516]	; (8007274 <tcp_input+0x294>)
 800706e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007070:	4b81      	ldr	r3, [pc, #516]	; (8007278 <tcp_input+0x298>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	895a      	ldrh	r2, [r3, #10]
 800707a:	7cbb      	ldrb	r3, [r7, #18]
 800707c:	b29b      	uxth	r3, r3
 800707e:	429a      	cmp	r2, r3
 8007080:	d309      	bcc.n	8007096 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007082:	4b7c      	ldr	r3, [pc, #496]	; (8007274 <tcp_input+0x294>)
 8007084:	881a      	ldrh	r2, [r3, #0]
 8007086:	4b7d      	ldr	r3, [pc, #500]	; (800727c <tcp_input+0x29c>)
 8007088:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800708a:	7cbb      	ldrb	r3, [r7, #18]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fd fe48 	bl	8004d24 <pbuf_remove_header>
 8007094:	e04e      	b.n	8007134 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <tcp_input+0xca>
 800709e:	4b70      	ldr	r3, [pc, #448]	; (8007260 <tcp_input+0x280>)
 80070a0:	22c2      	movs	r2, #194	; 0xc2
 80070a2:	4977      	ldr	r1, [pc, #476]	; (8007280 <tcp_input+0x2a0>)
 80070a4:	4870      	ldr	r0, [pc, #448]	; (8007268 <tcp_input+0x288>)
 80070a6:	f007 fb77 	bl	800e798 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80070aa:	2114      	movs	r1, #20
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fd fe39 	bl	8004d24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	895a      	ldrh	r2, [r3, #10]
 80070b6:	4b71      	ldr	r3, [pc, #452]	; (800727c <tcp_input+0x29c>)
 80070b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80070ba:	4b6e      	ldr	r3, [pc, #440]	; (8007274 <tcp_input+0x294>)
 80070bc:	881a      	ldrh	r2, [r3, #0]
 80070be:	4b6f      	ldr	r3, [pc, #444]	; (800727c <tcp_input+0x29c>)
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80070c6:	4b6d      	ldr	r3, [pc, #436]	; (800727c <tcp_input+0x29c>)
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fd fe29 	bl	8004d24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	895b      	ldrh	r3, [r3, #10]
 80070d8:	8a3a      	ldrh	r2, [r7, #16]
 80070da:	429a      	cmp	r2, r3
 80070dc:	f200 8361 	bhi.w	80077a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4a64      	ldr	r2, [pc, #400]	; (8007278 <tcp_input+0x298>)
 80070e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	8a3a      	ldrh	r2, [r7, #16]
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd fe16 	bl	8004d24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	891a      	ldrh	r2, [r3, #8]
 80070fc:	8a3b      	ldrh	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	b29a      	uxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	895b      	ldrh	r3, [r3, #10]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <tcp_input+0x13a>
 800710e:	4b54      	ldr	r3, [pc, #336]	; (8007260 <tcp_input+0x280>)
 8007110:	22df      	movs	r2, #223	; 0xdf
 8007112:	495c      	ldr	r1, [pc, #368]	; (8007284 <tcp_input+0x2a4>)
 8007114:	4854      	ldr	r0, [pc, #336]	; (8007268 <tcp_input+0x288>)
 8007116:	f007 fb3f 	bl	800e798 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	891a      	ldrh	r2, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	891b      	ldrh	r3, [r3, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	d005      	beq.n	8007134 <tcp_input+0x154>
 8007128:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <tcp_input+0x280>)
 800712a:	22e0      	movs	r2, #224	; 0xe0
 800712c:	4956      	ldr	r1, [pc, #344]	; (8007288 <tcp_input+0x2a8>)
 800712e:	484e      	ldr	r0, [pc, #312]	; (8007268 <tcp_input+0x288>)
 8007130:	f007 fb32 	bl	800e798 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007134:	4b4d      	ldr	r3, [pc, #308]	; (800726c <tcp_input+0x28c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4a4b      	ldr	r2, [pc, #300]	; (800726c <tcp_input+0x28c>)
 800713e:	6814      	ldr	r4, [r2, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f7fc fbc1 	bl	80038c8 <lwip_htons>
 8007146:	4603      	mov	r3, r0
 8007148:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800714a:	4b48      	ldr	r3, [pc, #288]	; (800726c <tcp_input+0x28c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	885b      	ldrh	r3, [r3, #2]
 8007150:	b29b      	uxth	r3, r3
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <tcp_input+0x28c>)
 8007154:	6814      	ldr	r4, [r2, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fbb6 	bl	80038c8 <lwip_htons>
 800715c:	4603      	mov	r3, r0
 800715e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007160:	4b42      	ldr	r3, [pc, #264]	; (800726c <tcp_input+0x28c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	4a41      	ldr	r2, [pc, #260]	; (800726c <tcp_input+0x28c>)
 8007168:	6814      	ldr	r4, [r2, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fc fbc1 	bl	80038f2 <lwip_htonl>
 8007170:	4603      	mov	r3, r0
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	4a45      	ldr	r2, [pc, #276]	; (800728c <tcp_input+0x2ac>)
 8007178:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800717a:	4b3c      	ldr	r3, [pc, #240]	; (800726c <tcp_input+0x28c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a3a      	ldr	r2, [pc, #232]	; (800726c <tcp_input+0x28c>)
 8007182:	6814      	ldr	r4, [r2, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f7fc fbb4 	bl	80038f2 <lwip_htonl>
 800718a:	4603      	mov	r3, r0
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	4a3f      	ldr	r2, [pc, #252]	; (8007290 <tcp_input+0x2b0>)
 8007192:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007194:	4b35      	ldr	r3, [pc, #212]	; (800726c <tcp_input+0x28c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	89db      	ldrh	r3, [r3, #14]
 800719a:	b29b      	uxth	r3, r3
 800719c:	4a33      	ldr	r2, [pc, #204]	; (800726c <tcp_input+0x28c>)
 800719e:	6814      	ldr	r4, [r2, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fc fb91 	bl	80038c8 <lwip_htons>
 80071a6:	4603      	mov	r3, r0
 80071a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80071aa:	4b30      	ldr	r3, [pc, #192]	; (800726c <tcp_input+0x28c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	899b      	ldrh	r3, [r3, #12]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fb88 	bl	80038c8 <lwip_htons>
 80071b8:	4603      	mov	r3, r0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4b34      	ldr	r3, [pc, #208]	; (8007294 <tcp_input+0x2b4>)
 80071c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	891a      	ldrh	r2, [r3, #8]
 80071ca:	4b33      	ldr	r3, [pc, #204]	; (8007298 <tcp_input+0x2b8>)
 80071cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80071ce:	4b31      	ldr	r3, [pc, #196]	; (8007294 <tcp_input+0x2b4>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <tcp_input+0x214>
    tcplen++;
 80071da:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <tcp_input+0x2b8>)
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	3301      	adds	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	4b2d      	ldr	r3, [pc, #180]	; (8007298 <tcp_input+0x2b8>)
 80071e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	891a      	ldrh	r2, [r3, #8]
 80071ea:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <tcp_input+0x2b8>)
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	f200 82d9 	bhi.w	80077a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80071f8:	4b28      	ldr	r3, [pc, #160]	; (800729c <tcp_input+0x2bc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	e09d      	b.n	800733c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d105      	bne.n	8007214 <tcp_input+0x234>
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <tcp_input+0x280>)
 800720a:	22fb      	movs	r2, #251	; 0xfb
 800720c:	4924      	ldr	r1, [pc, #144]	; (80072a0 <tcp_input+0x2c0>)
 800720e:	4816      	ldr	r0, [pc, #88]	; (8007268 <tcp_input+0x288>)
 8007210:	f007 fac2 	bl	800e798 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	7d1b      	ldrb	r3, [r3, #20]
 8007218:	2b0a      	cmp	r3, #10
 800721a:	d105      	bne.n	8007228 <tcp_input+0x248>
 800721c:	4b10      	ldr	r3, [pc, #64]	; (8007260 <tcp_input+0x280>)
 800721e:	22fc      	movs	r2, #252	; 0xfc
 8007220:	4920      	ldr	r1, [pc, #128]	; (80072a4 <tcp_input+0x2c4>)
 8007222:	4811      	ldr	r0, [pc, #68]	; (8007268 <tcp_input+0x288>)
 8007224:	f007 fab8 	bl	800e798 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	7d1b      	ldrb	r3, [r3, #20]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d105      	bne.n	800723c <tcp_input+0x25c>
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <tcp_input+0x280>)
 8007232:	22fd      	movs	r2, #253	; 0xfd
 8007234:	491c      	ldr	r1, [pc, #112]	; (80072a8 <tcp_input+0x2c8>)
 8007236:	480c      	ldr	r0, [pc, #48]	; (8007268 <tcp_input+0x288>)
 8007238:	f007 faae 	bl	800e798 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	7a1b      	ldrb	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d033      	beq.n	80072ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	7a1a      	ldrb	r2, [r3, #8]
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <tcp_input+0x290>)
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007250:	3301      	adds	r3, #1
 8007252:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007254:	429a      	cmp	r2, r3
 8007256:	d029      	beq.n	80072ac <tcp_input+0x2cc>
      prev = pcb;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	61bb      	str	r3, [r7, #24]
      continue;
 800725c:	e06b      	b.n	8007336 <tcp_input+0x356>
 800725e:	bf00      	nop
 8007260:	08010a78 	.word	0x08010a78
 8007264:	08010aac 	.word	0x08010aac
 8007268:	08010ac4 	.word	0x08010ac4
 800726c:	200000e0 	.word	0x200000e0
 8007270:	2000334c 	.word	0x2000334c
 8007274:	200000e4 	.word	0x200000e4
 8007278:	200000e8 	.word	0x200000e8
 800727c:	200000e6 	.word	0x200000e6
 8007280:	08010aec 	.word	0x08010aec
 8007284:	08010afc 	.word	0x08010afc
 8007288:	08010b08 	.word	0x08010b08
 800728c:	200000f0 	.word	0x200000f0
 8007290:	200000f4 	.word	0x200000f4
 8007294:	200000fc 	.word	0x200000fc
 8007298:	200000fa 	.word	0x200000fa
 800729c:	20006890 	.word	0x20006890
 80072a0:	08010b28 	.word	0x08010b28
 80072a4:	08010b50 	.word	0x08010b50
 80072a8:	08010b7c 	.word	0x08010b7c
    }

    if (pcb->remote_port == tcphdr->src &&
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	8b1a      	ldrh	r2, [r3, #24]
 80072b0:	4b94      	ldr	r3, [pc, #592]	; (8007504 <tcp_input+0x524>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d13a      	bne.n	8007332 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	8ada      	ldrh	r2, [r3, #22]
 80072c0:	4b90      	ldr	r3, [pc, #576]	; (8007504 <tcp_input+0x524>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d132      	bne.n	8007332 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b8d      	ldr	r3, [pc, #564]	; (8007508 <tcp_input+0x528>)
 80072d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d12c      	bne.n	8007332 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b8a      	ldr	r3, [pc, #552]	; (8007508 <tcp_input+0x528>)
 80072de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d126      	bne.n	8007332 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d106      	bne.n	80072fc <tcp_input+0x31c>
 80072ee:	4b87      	ldr	r3, [pc, #540]	; (800750c <tcp_input+0x52c>)
 80072f0:	f240 120d 	movw	r2, #269	; 0x10d
 80072f4:	4986      	ldr	r1, [pc, #536]	; (8007510 <tcp_input+0x530>)
 80072f6:	4887      	ldr	r0, [pc, #540]	; (8007514 <tcp_input+0x534>)
 80072f8:	f007 fa4e 	bl	800e798 <iprintf>
      if (prev != NULL) {
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <tcp_input+0x338>
        prev->next = pcb->next;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800730a:	4b83      	ldr	r3, [pc, #524]	; (8007518 <tcp_input+0x538>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007312:	4a81      	ldr	r2, [pc, #516]	; (8007518 <tcp_input+0x538>)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	429a      	cmp	r2, r3
 8007320:	d111      	bne.n	8007346 <tcp_input+0x366>
 8007322:	4b7a      	ldr	r3, [pc, #488]	; (800750c <tcp_input+0x52c>)
 8007324:	f240 1215 	movw	r2, #277	; 0x115
 8007328:	497c      	ldr	r1, [pc, #496]	; (800751c <tcp_input+0x53c>)
 800732a:	487a      	ldr	r0, [pc, #488]	; (8007514 <tcp_input+0x534>)
 800732c:	f007 fa34 	bl	800e798 <iprintf>
      break;
 8007330:	e009      	b.n	8007346 <tcp_input+0x366>
    }
    prev = pcb;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f47f af5e 	bne.w	8007200 <tcp_input+0x220>
 8007344:	e000      	b.n	8007348 <tcp_input+0x368>
      break;
 8007346:	bf00      	nop
  }

  if (pcb == NULL) {
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 8095 	bne.w	800747a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007350:	4b73      	ldr	r3, [pc, #460]	; (8007520 <tcp_input+0x540>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e03f      	b.n	80073d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	7d1b      	ldrb	r3, [r3, #20]
 800735c:	2b0a      	cmp	r3, #10
 800735e:	d006      	beq.n	800736e <tcp_input+0x38e>
 8007360:	4b6a      	ldr	r3, [pc, #424]	; (800750c <tcp_input+0x52c>)
 8007362:	f240 121f 	movw	r2, #287	; 0x11f
 8007366:	496f      	ldr	r1, [pc, #444]	; (8007524 <tcp_input+0x544>)
 8007368:	486a      	ldr	r0, [pc, #424]	; (8007514 <tcp_input+0x534>)
 800736a:	f007 fa15 	bl	800e798 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	7a1b      	ldrb	r3, [r3, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	7a1a      	ldrb	r2, [r3, #8]
 800737a:	4b63      	ldr	r3, [pc, #396]	; (8007508 <tcp_input+0x528>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007382:	3301      	adds	r3, #1
 8007384:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007386:	429a      	cmp	r2, r3
 8007388:	d122      	bne.n	80073d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	8b1a      	ldrh	r2, [r3, #24]
 800738e:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <tcp_input+0x524>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	d11b      	bne.n	80073d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	8ada      	ldrh	r2, [r3, #22]
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <tcp_input+0x524>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	885b      	ldrh	r3, [r3, #2]
 80073a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d113      	bne.n	80073d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	4b56      	ldr	r3, [pc, #344]	; (8007508 <tcp_input+0x528>)
 80073b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d10d      	bne.n	80073d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b53      	ldr	r3, [pc, #332]	; (8007508 <tcp_input+0x528>)
 80073bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073be:	429a      	cmp	r2, r3
 80073c0:	d107      	bne.n	80073d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80073c2:	69f8      	ldr	r0, [r7, #28]
 80073c4:	f000 fb54 	bl	8007a70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7fd fd31 	bl	8004e30 <pbuf_free>
        return;
 80073ce:	e1f0      	b.n	80077b2 <tcp_input+0x7d2>
        continue;
 80073d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1bc      	bne.n	8007358 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073e2:	4b51      	ldr	r3, [pc, #324]	; (8007528 <tcp_input+0x548>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e02a      	b.n	8007440 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	7a1b      	ldrb	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00c      	beq.n	800740c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	7a1a      	ldrb	r2, [r3, #8]
 80073f6:	4b44      	ldr	r3, [pc, #272]	; (8007508 <tcp_input+0x528>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073fe:	3301      	adds	r3, #1
 8007400:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007402:	429a      	cmp	r2, r3
 8007404:	d002      	beq.n	800740c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	61bb      	str	r3, [r7, #24]
        continue;
 800740a:	e016      	b.n	800743a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	8ada      	ldrh	r2, [r3, #22]
 8007410:	4b3c      	ldr	r3, [pc, #240]	; (8007504 <tcp_input+0x524>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	b29b      	uxth	r3, r3
 8007418:	429a      	cmp	r2, r3
 800741a:	d10c      	bne.n	8007436 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b39      	ldr	r3, [pc, #228]	; (8007508 <tcp_input+0x528>)
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	429a      	cmp	r2, r3
 8007426:	d00f      	beq.n	8007448 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00d      	beq.n	800744a <tcp_input+0x46a>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1d1      	bne.n	80073ea <tcp_input+0x40a>
 8007446:	e000      	b.n	800744a <tcp_input+0x46a>
            break;
 8007448:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d014      	beq.n	800747a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800745e:	4b32      	ldr	r3, [pc, #200]	; (8007528 <tcp_input+0x548>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007466:	4a30      	ldr	r2, [pc, #192]	; (8007528 <tcp_input+0x548>)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	f000 fa01 	bl	8007874 <tcp_listen_input>
      }
      pbuf_free(p);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fd fcdc 	bl	8004e30 <pbuf_free>
      return;
 8007478:	e19b      	b.n	80077b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8160 	beq.w	8007742 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007482:	4b2a      	ldr	r3, [pc, #168]	; (800752c <tcp_input+0x54c>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	891a      	ldrh	r2, [r3, #8]
 800748c:	4b27      	ldr	r3, [pc, #156]	; (800752c <tcp_input+0x54c>)
 800748e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007490:	4a26      	ldr	r2, [pc, #152]	; (800752c <tcp_input+0x54c>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <tcp_input+0x524>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a24      	ldr	r2, [pc, #144]	; (800752c <tcp_input+0x54c>)
 800749c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800749e:	4b24      	ldr	r3, [pc, #144]	; (8007530 <tcp_input+0x550>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80074a4:	4b23      	ldr	r3, [pc, #140]	; (8007534 <tcp_input+0x554>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <tcp_input+0x558>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80074b0:	4b22      	ldr	r3, [pc, #136]	; (800753c <tcp_input+0x55c>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7b5b      	ldrb	r3, [r3, #13]
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d038      	beq.n	8007544 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074d2:	69f8      	ldr	r0, [r7, #28]
 80074d4:	f7ff f858 	bl	8006588 <tcp_process_refused_data>
 80074d8:	4603      	mov	r3, r0
 80074da:	f113 0f0d 	cmn.w	r3, #13
 80074de:	d007      	beq.n	80074f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02d      	beq.n	8007544 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80074e8:	4b15      	ldr	r3, [pc, #84]	; (8007540 <tcp_input+0x560>)
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d029      	beq.n	8007544 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8104 	bne.w	8007702 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80074fa:	69f8      	ldr	r0, [r7, #28]
 80074fc:	f003 fe16 	bl	800b12c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007500:	e0ff      	b.n	8007702 <tcp_input+0x722>
 8007502:	bf00      	nop
 8007504:	200000e0 	.word	0x200000e0
 8007508:	2000334c 	.word	0x2000334c
 800750c:	08010a78 	.word	0x08010a78
 8007510:	08010ba4 	.word	0x08010ba4
 8007514:	08010ac4 	.word	0x08010ac4
 8007518:	20006890 	.word	0x20006890
 800751c:	08010bd0 	.word	0x08010bd0
 8007520:	200068a0 	.word	0x200068a0
 8007524:	08010bfc 	.word	0x08010bfc
 8007528:	20006898 	.word	0x20006898
 800752c:	200000d0 	.word	0x200000d0
 8007530:	20000100 	.word	0x20000100
 8007534:	200000fd 	.word	0x200000fd
 8007538:	200000f8 	.word	0x200000f8
 800753c:	200000fc 	.word	0x200000fc
 8007540:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8007544:	4a9c      	ldr	r2, [pc, #624]	; (80077b8 <tcp_input+0x7d8>)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800754a:	69f8      	ldr	r0, [r7, #28]
 800754c:	f000 fb0a 	bl	8007b64 <tcp_process>
 8007550:	4603      	mov	r3, r0
 8007552:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007558:	f113 0f0d 	cmn.w	r3, #13
 800755c:	f000 80d3 	beq.w	8007706 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007560:	4b96      	ldr	r3, [pc, #600]	; (80077bc <tcp_input+0x7dc>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <tcp_input+0x5a8>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	6912      	ldr	r2, [r2, #16]
 8007580:	f06f 010d 	mvn.w	r1, #13
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	488d      	ldr	r0, [pc, #564]	; (80077c0 <tcp_input+0x7e0>)
 800758c:	f7ff fbb0 	bl	8006cf0 <tcp_pcb_remove>
        tcp_free(pcb);
 8007590:	69f8      	ldr	r0, [r7, #28]
 8007592:	f7fd fefd 	bl	8005390 <tcp_free>
 8007596:	e0c1      	b.n	800771c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800759c:	4b89      	ldr	r3, [pc, #548]	; (80077c4 <tcp_input+0x7e4>)
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01d      	beq.n	80075e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80075a4:	4b87      	ldr	r3, [pc, #540]	; (80077c4 <tcp_input+0x7e4>)
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <tcp_input+0x5ea>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	6910      	ldr	r0, [r2, #16]
 80075be:	89fa      	ldrh	r2, [r7, #14]
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	4798      	blx	r3
 80075c4:	4603      	mov	r3, r0
 80075c6:	74fb      	strb	r3, [r7, #19]
 80075c8:	e001      	b.n	80075ce <tcp_input+0x5ee>
 80075ca:	2300      	movs	r3, #0
 80075cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80075ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075d2:	f113 0f0d 	cmn.w	r3, #13
 80075d6:	f000 8098 	beq.w	800770a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80075da:	4b7a      	ldr	r3, [pc, #488]	; (80077c4 <tcp_input+0x7e4>)
 80075dc:	2200      	movs	r2, #0
 80075de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80075e0:	69f8      	ldr	r0, [r7, #28]
 80075e2:	f000 f907 	bl	80077f4 <tcp_input_delayed_close>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 8090 	bne.w	800770e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80075ee:	4b76      	ldr	r3, [pc, #472]	; (80077c8 <tcp_input+0x7e8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d041      	beq.n	800767a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d006      	beq.n	800760c <tcp_input+0x62c>
 80075fe:	4b73      	ldr	r3, [pc, #460]	; (80077cc <tcp_input+0x7ec>)
 8007600:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007604:	4972      	ldr	r1, [pc, #456]	; (80077d0 <tcp_input+0x7f0>)
 8007606:	4873      	ldr	r0, [pc, #460]	; (80077d4 <tcp_input+0x7f4>)
 8007608:	f007 f8c6 	bl	800e798 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	8b5b      	ldrh	r3, [r3, #26]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007618:	4b6b      	ldr	r3, [pc, #428]	; (80077c8 <tcp_input+0x7e8>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fc07 	bl	8004e30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007622:	69f8      	ldr	r0, [r7, #28]
 8007624:	f7fe f99c 	bl	8005960 <tcp_abort>
            goto aborted;
 8007628:	e078      	b.n	800771c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <tcp_input+0x66e>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	4b62      	ldr	r3, [pc, #392]	; (80077c8 <tcp_input+0x7e8>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	47a0      	blx	r4
 8007648:	4603      	mov	r3, r0
 800764a:	74fb      	strb	r3, [r7, #19]
 800764c:	e008      	b.n	8007660 <tcp_input+0x680>
 800764e:	4b5e      	ldr	r3, [pc, #376]	; (80077c8 <tcp_input+0x7e8>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	69f9      	ldr	r1, [r7, #28]
 8007656:	2000      	movs	r0, #0
 8007658:	f7ff f88a 	bl	8006770 <tcp_recv_null>
 800765c:	4603      	mov	r3, r0
 800765e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007664:	f113 0f0d 	cmn.w	r3, #13
 8007668:	d053      	beq.n	8007712 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800766a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007672:	4b55      	ldr	r3, [pc, #340]	; (80077c8 <tcp_input+0x7e8>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800767a:	4b50      	ldr	r3, [pc, #320]	; (80077bc <tcp_input+0x7dc>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d030      	beq.n	80076e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007692:	7b5a      	ldrb	r2, [r3, #13]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007698:	f042 0220 	orr.w	r2, r2, #32
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	735a      	strb	r2, [r3, #13]
 80076a0:	e022      	b.n	80076e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076aa:	d005      	beq.n	80076b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <tcp_input+0x6fa>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	6918      	ldr	r0, [r3, #16]
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	47a0      	blx	r4
 80076d4:	4603      	mov	r3, r0
 80076d6:	74fb      	strb	r3, [r7, #19]
 80076d8:	e001      	b.n	80076de <tcp_input+0x6fe>
 80076da:	2300      	movs	r3, #0
 80076dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076e2:	f113 0f0d 	cmn.w	r3, #13
 80076e6:	d016      	beq.n	8007716 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80076e8:	4b33      	ldr	r3, [pc, #204]	; (80077b8 <tcp_input+0x7d8>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80076ee:	69f8      	ldr	r0, [r7, #28]
 80076f0:	f000 f880 	bl	80077f4 <tcp_input_delayed_close>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10f      	bne.n	800771a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80076fa:	69f8      	ldr	r0, [r7, #28]
 80076fc:	f002 ff10 	bl	800a520 <tcp_output>
 8007700:	e00c      	b.n	800771c <tcp_input+0x73c>
        goto aborted;
 8007702:	bf00      	nop
 8007704:	e00a      	b.n	800771c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007706:	bf00      	nop
 8007708:	e008      	b.n	800771c <tcp_input+0x73c>
              goto aborted;
 800770a:	bf00      	nop
 800770c:	e006      	b.n	800771c <tcp_input+0x73c>
          goto aborted;
 800770e:	bf00      	nop
 8007710:	e004      	b.n	800771c <tcp_input+0x73c>
            goto aborted;
 8007712:	bf00      	nop
 8007714:	e002      	b.n	800771c <tcp_input+0x73c>
              goto aborted;
 8007716:	bf00      	nop
 8007718:	e000      	b.n	800771c <tcp_input+0x73c>
          goto aborted;
 800771a:	bf00      	nop
    tcp_input_pcb = NULL;
 800771c:	4b26      	ldr	r3, [pc, #152]	; (80077b8 <tcp_input+0x7d8>)
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007722:	4b29      	ldr	r3, [pc, #164]	; (80077c8 <tcp_input+0x7e8>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007728:	4b2b      	ldr	r3, [pc, #172]	; (80077d8 <tcp_input+0x7f8>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d03f      	beq.n	80077b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007730:	4b29      	ldr	r3, [pc, #164]	; (80077d8 <tcp_input+0x7f8>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fb7b 	bl	8004e30 <pbuf_free>
      inseg.p = NULL;
 800773a:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <tcp_input+0x7f8>)
 800773c:	2200      	movs	r2, #0
 800773e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007740:	e036      	b.n	80077b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <tcp_input+0x7fc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	899b      	ldrh	r3, [r3, #12]
 8007748:	b29b      	uxth	r3, r3
 800774a:	4618      	mov	r0, r3
 800774c:	f7fc f8bc 	bl	80038c8 <lwip_htons>
 8007750:	4603      	mov	r3, r0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d118      	bne.n	800778e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <tcp_input+0x800>)
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	4b20      	ldr	r3, [pc, #128]	; (80077e4 <tcp_input+0x804>)
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <tcp_input+0x808>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <tcp_input+0x7fc>)
 800776e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007770:	885b      	ldrh	r3, [r3, #2]
 8007772:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007774:	4a19      	ldr	r2, [pc, #100]	; (80077dc <tcp_input+0x7fc>)
 8007776:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007778:	8812      	ldrh	r2, [r2, #0]
 800777a:	b292      	uxth	r2, r2
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <tcp_input+0x80c>)
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <tcp_input+0x810>)
 8007786:	4602      	mov	r2, r0
 8007788:	2000      	movs	r0, #0
 800778a:	f003 fc7d 	bl	800b088 <tcp_rst>
    pbuf_free(p);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fd fb4e 	bl	8004e30 <pbuf_free>
  return;
 8007794:	e00c      	b.n	80077b0 <tcp_input+0x7d0>
    goto dropped;
 8007796:	bf00      	nop
 8007798:	e006      	b.n	80077a8 <tcp_input+0x7c8>
    goto dropped;
 800779a:	bf00      	nop
 800779c:	e004      	b.n	80077a8 <tcp_input+0x7c8>
    goto dropped;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <tcp_input+0x7c8>
      goto dropped;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <tcp_input+0x7c8>
      goto dropped;
 80077a6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7fd fb41 	bl	8004e30 <pbuf_free>
 80077ae:	e000      	b.n	80077b2 <tcp_input+0x7d2>
  return;
 80077b0:	bf00      	nop
}
 80077b2:	3724      	adds	r7, #36	; 0x24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd90      	pop	{r4, r7, pc}
 80077b8:	200068a4 	.word	0x200068a4
 80077bc:	200000fd 	.word	0x200000fd
 80077c0:	20006890 	.word	0x20006890
 80077c4:	200000f8 	.word	0x200000f8
 80077c8:	20000100 	.word	0x20000100
 80077cc:	08010a78 	.word	0x08010a78
 80077d0:	08010c2c 	.word	0x08010c2c
 80077d4:	08010ac4 	.word	0x08010ac4
 80077d8:	200000d0 	.word	0x200000d0
 80077dc:	200000e0 	.word	0x200000e0
 80077e0:	200000f4 	.word	0x200000f4
 80077e4:	200000fa 	.word	0x200000fa
 80077e8:	200000f0 	.word	0x200000f0
 80077ec:	2000335c 	.word	0x2000335c
 80077f0:	20003360 	.word	0x20003360

080077f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <tcp_input_delayed_close+0x1c>
 8007802:	4b17      	ldr	r3, [pc, #92]	; (8007860 <tcp_input_delayed_close+0x6c>)
 8007804:	f240 225a 	movw	r2, #602	; 0x25a
 8007808:	4916      	ldr	r1, [pc, #88]	; (8007864 <tcp_input_delayed_close+0x70>)
 800780a:	4817      	ldr	r0, [pc, #92]	; (8007868 <tcp_input_delayed_close+0x74>)
 800780c:	f006 ffc4 	bl	800e798 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007810:	4b16      	ldr	r3, [pc, #88]	; (800786c <tcp_input_delayed_close+0x78>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01c      	beq.n	8007856 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8b5b      	ldrh	r3, [r3, #26]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10d      	bne.n	8007844 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <tcp_input_delayed_close+0x50>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6912      	ldr	r2, [r2, #16]
 800783c:	f06f 010e 	mvn.w	r1, #14
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	480a      	ldr	r0, [pc, #40]	; (8007870 <tcp_input_delayed_close+0x7c>)
 8007848:	f7ff fa52 	bl	8006cf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7fd fd9f 	bl	8005390 <tcp_free>
    return 1;
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	08010a78 	.word	0x08010a78
 8007864:	08010c48 	.word	0x08010c48
 8007868:	08010ac4 	.word	0x08010ac4
 800786c:	200000fd 	.word	0x200000fd
 8007870:	20006890 	.word	0x20006890

08007874 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b08b      	sub	sp, #44	; 0x2c
 8007878:	af04      	add	r7, sp, #16
 800787a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800787c:	4b6f      	ldr	r3, [pc, #444]	; (8007a3c <tcp_listen_input+0x1c8>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 80d2 	bne.w	8007a2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <tcp_listen_input+0x2a>
 8007890:	4b6b      	ldr	r3, [pc, #428]	; (8007a40 <tcp_listen_input+0x1cc>)
 8007892:	f240 2281 	movw	r2, #641	; 0x281
 8007896:	496b      	ldr	r1, [pc, #428]	; (8007a44 <tcp_listen_input+0x1d0>)
 8007898:	486b      	ldr	r0, [pc, #428]	; (8007a48 <tcp_listen_input+0x1d4>)
 800789a:	f006 ff7d 	bl	800e798 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800789e:	4b67      	ldr	r3, [pc, #412]	; (8007a3c <tcp_listen_input+0x1c8>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d019      	beq.n	80078de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078aa:	4b68      	ldr	r3, [pc, #416]	; (8007a4c <tcp_listen_input+0x1d8>)
 80078ac:	6819      	ldr	r1, [r3, #0]
 80078ae:	4b68      	ldr	r3, [pc, #416]	; (8007a50 <tcp_listen_input+0x1dc>)
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	4b67      	ldr	r3, [pc, #412]	; (8007a54 <tcp_listen_input+0x1e0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078ba:	4b67      	ldr	r3, [pc, #412]	; (8007a58 <tcp_listen_input+0x1e4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078c2:	4a65      	ldr	r2, [pc, #404]	; (8007a58 <tcp_listen_input+0x1e4>)
 80078c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078c6:	8812      	ldrh	r2, [r2, #0]
 80078c8:	b292      	uxth	r2, r2
 80078ca:	9202      	str	r2, [sp, #8]
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	4b63      	ldr	r3, [pc, #396]	; (8007a5c <tcp_listen_input+0x1e8>)
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4b63      	ldr	r3, [pc, #396]	; (8007a60 <tcp_listen_input+0x1ec>)
 80078d4:	4602      	mov	r2, r0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f003 fbd6 	bl	800b088 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80078dc:	e0a9      	b.n	8007a32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80078de:	4b57      	ldr	r3, [pc, #348]	; (8007a3c <tcp_listen_input+0x1c8>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80a3 	beq.w	8007a32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	7d5b      	ldrb	r3, [r3, #21]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff f861 	bl	80069b8 <tcp_alloc>
 80078f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d111      	bne.n	8007922 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <tcp_listen_input+0xa8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6910      	ldr	r0, [r2, #16]
 800790e:	f04f 32ff 	mov.w	r2, #4294967295
 8007912:	2100      	movs	r1, #0
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]
      return;
 800791a:	e08b      	b.n	8007a34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800791c:	23f0      	movs	r3, #240	; 0xf0
 800791e:	73bb      	strb	r3, [r7, #14]
      return;
 8007920:	e088      	b.n	8007a34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <tcp_listen_input+0x1f0>)
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800792a:	4b4e      	ldr	r3, [pc, #312]	; (8007a64 <tcp_listen_input+0x1f0>)
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8ada      	ldrh	r2, [r3, #22]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800793a:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <tcp_listen_input+0x1e4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29a      	uxth	r2, r3
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2203      	movs	r2, #3
 800794a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800794c:	4b41      	ldr	r3, [pc, #260]	; (8007a54 <tcp_listen_input+0x1e0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	f7ff fa5a 	bl	8006e18 <tcp_next_iss>
 8007964:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800797e:	4b35      	ldr	r3, [pc, #212]	; (8007a54 <tcp_listen_input+0x1e0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	1e5a      	subs	r2, r3, #1
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7a5b      	ldrb	r3, [r3, #9]
 800799a:	f003 030c 	and.w	r3, r3, #12
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	7a1a      	ldrb	r2, [r3, #8]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80079ac:	4b2e      	ldr	r3, [pc, #184]	; (8007a68 <tcp_listen_input+0x1f4>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	60da      	str	r2, [r3, #12]
 80079b4:	4a2c      	ldr	r2, [pc, #176]	; (8007a68 <tcp_listen_input+0x1f4>)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	f003 fd27 	bl	800b40c <tcp_timer_needed>
 80079be:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <tcp_listen_input+0x1f8>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80079c4:	6978      	ldr	r0, [r7, #20]
 80079c6:	f001 fd8d 	bl	80094e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <tcp_listen_input+0x1e4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	89db      	ldrh	r3, [r3, #14]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f005 fca5 	bl	800d33c <ip4_route>
 80079f2:	4601      	mov	r1, r0
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3304      	adds	r3, #4
 80079f8:	461a      	mov	r2, r3
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7ff fa32 	bl	8006e64 <tcp_eff_send_mss_netif>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007a08:	2112      	movs	r1, #18
 8007a0a:	6978      	ldr	r0, [r7, #20]
 8007a0c:	f002 fc9a 	bl	800a344 <tcp_enqueue_flags>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	6978      	ldr	r0, [r7, #20]
 8007a20:	f7fd fee0 	bl	80057e4 <tcp_abandon>
      return;
 8007a24:	e006      	b.n	8007a34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f002 fd7a 	bl	800a520 <tcp_output>
  return;
 8007a2c:	e001      	b.n	8007a32 <tcp_listen_input+0x1be>
    return;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <tcp_listen_input+0x1c0>
  return;
 8007a32:	bf00      	nop
}
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200000fc 	.word	0x200000fc
 8007a40:	08010a78 	.word	0x08010a78
 8007a44:	08010c70 	.word	0x08010c70
 8007a48:	08010ac4 	.word	0x08010ac4
 8007a4c:	200000f4 	.word	0x200000f4
 8007a50:	200000fa 	.word	0x200000fa
 8007a54:	200000f0 	.word	0x200000f0
 8007a58:	200000e0 	.word	0x200000e0
 8007a5c:	2000335c 	.word	0x2000335c
 8007a60:	20003360 	.word	0x20003360
 8007a64:	2000334c 	.word	0x2000334c
 8007a68:	20006890 	.word	0x20006890
 8007a6c:	2000688c 	.word	0x2000688c

08007a70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af04      	add	r7, sp, #16
 8007a76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007a78:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <tcp_timewait_input+0xc8>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d153      	bne.n	8007b2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <tcp_timewait_input+0x28>
 8007a8a:	4b2c      	ldr	r3, [pc, #176]	; (8007b3c <tcp_timewait_input+0xcc>)
 8007a8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007a90:	492b      	ldr	r1, [pc, #172]	; (8007b40 <tcp_timewait_input+0xd0>)
 8007a92:	482c      	ldr	r0, [pc, #176]	; (8007b44 <tcp_timewait_input+0xd4>)
 8007a94:	f006 fe80 	bl	800e798 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007a98:	4b27      	ldr	r3, [pc, #156]	; (8007b38 <tcp_timewait_input+0xc8>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02a      	beq.n	8007afa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <tcp_timewait_input+0xd8>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db2d      	blt.n	8007b0e <tcp_timewait_input+0x9e>
 8007ab2:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <tcp_timewait_input+0xd8>)
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007abe:	440b      	add	r3, r1
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dc23      	bgt.n	8007b0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ac6:	4b21      	ldr	r3, [pc, #132]	; (8007b4c <tcp_timewait_input+0xdc>)
 8007ac8:	6819      	ldr	r1, [r3, #0]
 8007aca:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <tcp_timewait_input+0xe0>)
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <tcp_timewait_input+0xd8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	; (8007b54 <tcp_timewait_input+0xe4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ada:	885b      	ldrh	r3, [r3, #2]
 8007adc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <tcp_timewait_input+0xe4>)
 8007ae0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae2:	8812      	ldrh	r2, [r2, #0]
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	9202      	str	r2, [sp, #8]
 8007ae8:	9301      	str	r3, [sp, #4]
 8007aea:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <tcp_timewait_input+0xe8>)
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <tcp_timewait_input+0xec>)
 8007af0:	4602      	mov	r2, r0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f003 fac8 	bl	800b088 <tcp_rst>
      return;
 8007af8:	e01b      	b.n	8007b32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <tcp_timewait_input+0xc8>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007b06:	4b16      	ldr	r3, [pc, #88]	; (8007b60 <tcp_timewait_input+0xf0>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <tcp_timewait_input+0xe0>)
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8b5b      	ldrh	r3, [r3, #26]
 8007b1a:	f043 0302 	orr.w	r3, r3, #2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f002 fcfb 	bl	800a520 <tcp_output>
  }
  return;
 8007b2a:	e001      	b.n	8007b30 <tcp_timewait_input+0xc0>
    return;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <tcp_timewait_input+0xc2>
  return;
 8007b30:	bf00      	nop
}
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200000fc 	.word	0x200000fc
 8007b3c:	08010a78 	.word	0x08010a78
 8007b40:	08010c90 	.word	0x08010c90
 8007b44:	08010ac4 	.word	0x08010ac4
 8007b48:	200000f0 	.word	0x200000f0
 8007b4c:	200000f4 	.word	0x200000f4
 8007b50:	200000fa 	.word	0x200000fa
 8007b54:	200000e0 	.word	0x200000e0
 8007b58:	2000335c 	.word	0x2000335c
 8007b5c:	20003360 	.word	0x20003360
 8007b60:	20006894 	.word	0x20006894

08007b64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007b64:	b590      	push	{r4, r7, lr}
 8007b66:	b08d      	sub	sp, #52	; 0x34
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <tcp_process+0x24>
 8007b7a:	4ba5      	ldr	r3, [pc, #660]	; (8007e10 <tcp_process+0x2ac>)
 8007b7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007b80:	49a4      	ldr	r1, [pc, #656]	; (8007e14 <tcp_process+0x2b0>)
 8007b82:	48a5      	ldr	r0, [pc, #660]	; (8007e18 <tcp_process+0x2b4>)
 8007b84:	f006 fe08 	bl	800e798 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007b88:	4ba4      	ldr	r3, [pc, #656]	; (8007e1c <tcp_process+0x2b8>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d04e      	beq.n	8007c32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7d1b      	ldrb	r3, [r3, #20]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d108      	bne.n	8007bae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba0:	4b9f      	ldr	r3, [pc, #636]	; (8007e20 <tcp_process+0x2bc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d123      	bne.n	8007bf0 <tcp_process+0x8c>
        acceptable = 1;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	76fb      	strb	r3, [r7, #27]
 8007bac:	e020      	b.n	8007bf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bb2:	4b9c      	ldr	r3, [pc, #624]	; (8007e24 <tcp_process+0x2c0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d102      	bne.n	8007bc0 <tcp_process+0x5c>
        acceptable = 1;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	76fb      	strb	r3, [r7, #27]
 8007bbe:	e017      	b.n	8007bf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007bc0:	4b98      	ldr	r3, [pc, #608]	; (8007e24 <tcp_process+0x2c0>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	db10      	blt.n	8007bf0 <tcp_process+0x8c>
 8007bce:	4b95      	ldr	r3, [pc, #596]	; (8007e24 <tcp_process+0x2c0>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007bda:	440b      	add	r3, r1
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dc06      	bgt.n	8007bf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8b5b      	ldrh	r3, [r3, #26]
 8007be6:	f043 0302 	orr.w	r3, r3, #2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007bf0:	7efb      	ldrb	r3, [r7, #27]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01b      	beq.n	8007c2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7d1b      	ldrb	r3, [r3, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <tcp_process+0xa8>
 8007bfe:	4b84      	ldr	r3, [pc, #528]	; (8007e10 <tcp_process+0x2ac>)
 8007c00:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007c04:	4988      	ldr	r1, [pc, #544]	; (8007e28 <tcp_process+0x2c4>)
 8007c06:	4884      	ldr	r0, [pc, #528]	; (8007e18 <tcp_process+0x2b4>)
 8007c08:	f006 fdc6 	bl	800e798 <iprintf>
      recv_flags |= TF_RESET;
 8007c0c:	4b87      	ldr	r3, [pc, #540]	; (8007e2c <tcp_process+0x2c8>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	4b85      	ldr	r3, [pc, #532]	; (8007e2c <tcp_process+0x2c8>)
 8007c18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8b5b      	ldrh	r3, [r3, #26]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007c28:	f06f 030d 	mvn.w	r3, #13
 8007c2c:	e37a      	b.n	8008324 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e378      	b.n	8008324 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007c32:	4b7a      	ldr	r3, [pc, #488]	; (8007e1c <tcp_process+0x2b8>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d010      	beq.n	8007c60 <tcp_process+0xfc>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d00c      	beq.n	8007c60 <tcp_process+0xfc>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7d1b      	ldrb	r3, [r3, #20]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d008      	beq.n	8007c60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8b5b      	ldrh	r3, [r3, #26]
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e361      	b.n	8008324 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8b5b      	ldrh	r3, [r3, #26]
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007c6c:	4b70      	ldr	r3, [pc, #448]	; (8007e30 <tcp_process+0x2cc>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 fc2d 	bl	80094e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7d1b      	ldrb	r3, [r3, #20]
 8007c8e:	3b02      	subs	r3, #2
 8007c90:	2b07      	cmp	r3, #7
 8007c92:	f200 8337 	bhi.w	8008304 <tcp_process+0x7a0>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <tcp_process+0x138>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007eed 	.word	0x08007eed
 8007ca4:	08008065 	.word	0x08008065
 8007ca8:	0800808f 	.word	0x0800808f
 8007cac:	080081b3 	.word	0x080081b3
 8007cb0:	08008065 	.word	0x08008065
 8007cb4:	0800823f 	.word	0x0800823f
 8007cb8:	080082cf 	.word	0x080082cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007cbc:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <tcp_process+0x2b8>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80e4 	beq.w	8007e92 <tcp_process+0x32e>
 8007cca:	4b54      	ldr	r3, [pc, #336]	; (8007e1c <tcp_process+0x2b8>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 80dd 	beq.w	8007e92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	4b50      	ldr	r3, [pc, #320]	; (8007e20 <tcp_process+0x2bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	f040 80d5 	bne.w	8007e92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007ce8:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <tcp_process+0x2c0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007cfa:	4b49      	ldr	r3, [pc, #292]	; (8007e20 <tcp_process+0x2bc>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007d02:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <tcp_process+0x2d0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	89db      	ldrh	r3, [r3, #14]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007d1c:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <tcp_process+0x2c0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	1e5a      	subs	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f005 fb01 	bl	800d33c <ip4_route>
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	461a      	mov	r2, r3
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff f88e 	bl	8006e64 <tcp_eff_send_mss_netif>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d54:	009a      	lsls	r2, r3, #2
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007d60:	428b      	cmp	r3, r1
 8007d62:	bf38      	it	cc
 8007d64:	460b      	movcc	r3, r1
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d204      	bcs.n	8007d74 <tcp_process+0x210>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	e00d      	b.n	8007d90 <tcp_process+0x22c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d904      	bls.n	8007d8c <tcp_process+0x228>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	e001      	b.n	8007d90 <tcp_process+0x22c>
 8007d8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <tcp_process+0x24a>
 8007da0:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <tcp_process+0x2ac>)
 8007da2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007da6:	4924      	ldr	r1, [pc, #144]	; (8007e38 <tcp_process+0x2d4>)
 8007da8:	481b      	ldr	r0, [pc, #108]	; (8007e18 <tcp_process+0x2b4>)
 8007daa:	f006 fcf5 	bl	800e798 <iprintf>
        --pcb->snd_queuelen;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d111      	bne.n	8007dee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <tcp_process+0x280>
 8007dd6:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <tcp_process+0x2ac>)
 8007dd8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007ddc:	4917      	ldr	r1, [pc, #92]	; (8007e3c <tcp_process+0x2d8>)
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <tcp_process+0x2b4>)
 8007de0:	f006 fcda 	bl	800e798 <iprintf>
          pcb->unsent = rseg->next;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8007dec:	e003      	b.n	8007df6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007df6:	69f8      	ldr	r0, [r7, #28]
 8007df8:	f7fe fc57 	bl	80066aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11d      	bne.n	8007e40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8007e0c:	e01f      	b.n	8007e4e <tcp_process+0x2ea>
 8007e0e:	bf00      	nop
 8007e10:	08010a78 	.word	0x08010a78
 8007e14:	08010cb0 	.word	0x08010cb0
 8007e18:	08010ac4 	.word	0x08010ac4
 8007e1c:	200000fc 	.word	0x200000fc
 8007e20:	200000f4 	.word	0x200000f4
 8007e24:	200000f0 	.word	0x200000f0
 8007e28:	08010ccc 	.word	0x08010ccc
 8007e2c:	200000fd 	.word	0x200000fd
 8007e30:	20006894 	.word	0x20006894
 8007e34:	200000e0 	.word	0x200000e0
 8007e38:	08010cec 	.word	0x08010cec
 8007e3c:	08010d04 	.word	0x08010d04
        } else {
          pcb->rtime = 0;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <tcp_process+0x30a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6910      	ldr	r0, [r2, #16]
 8007e62:	2200      	movs	r2, #0
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4798      	blx	r3
 8007e68:	4603      	mov	r3, r0
 8007e6a:	76bb      	strb	r3, [r7, #26]
 8007e6c:	e001      	b.n	8007e72 <tcp_process+0x30e>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007e72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e76:	f113 0f0d 	cmn.w	r3, #13
 8007e7a:	d102      	bne.n	8007e82 <tcp_process+0x31e>
          return ERR_ABRT;
 8007e7c:	f06f 030c 	mvn.w	r3, #12
 8007e80:	e250      	b.n	8008324 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8b5b      	ldrh	r3, [r3, #26]
 8007e86:	f043 0302 	orr.w	r3, r3, #2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007e90:	e23a      	b.n	8008308 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007e92:	4b9d      	ldr	r3, [pc, #628]	; (8008108 <tcp_process+0x5a4>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8234 	beq.w	8008308 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ea0:	4b9a      	ldr	r3, [pc, #616]	; (800810c <tcp_process+0x5a8>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	4b9a      	ldr	r3, [pc, #616]	; (8008110 <tcp_process+0x5ac>)
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b9a      	ldr	r3, [pc, #616]	; (8008114 <tcp_process+0x5b0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007eb0:	4b99      	ldr	r3, [pc, #612]	; (8008118 <tcp_process+0x5b4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007eb8:	4a97      	ldr	r2, [pc, #604]	; (8008118 <tcp_process+0x5b4>)
 8007eba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	b292      	uxth	r2, r2
 8007ec0:	9202      	str	r2, [sp, #8]
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	4b95      	ldr	r3, [pc, #596]	; (800811c <tcp_process+0x5b8>)
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4b95      	ldr	r3, [pc, #596]	; (8008120 <tcp_process+0x5bc>)
 8007eca:	4602      	mov	r2, r0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f003 f8db 	bl	800b088 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	f200 8215 	bhi.w	8008308 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f002 fea5 	bl	800ac34 <tcp_rexmit_rto>
      break;
 8007eea:	e20d      	b.n	8008308 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007eec:	4b86      	ldr	r3, [pc, #536]	; (8008108 <tcp_process+0x5a4>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80a1 	beq.w	800803c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007efa:	4b84      	ldr	r3, [pc, #528]	; (800810c <tcp_process+0x5a8>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	db7e      	blt.n	8008008 <tcp_process+0x4a4>
 8007f0a:	4b80      	ldr	r3, [pc, #512]	; (800810c <tcp_process+0x5a8>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	dc77      	bgt.n	8008008 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007f26:	23fa      	movs	r3, #250	; 0xfa
 8007f28:	76bb      	strb	r3, [r7, #26]
 8007f2a:	e01d      	b.n	8007f68 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <tcp_process+0x3e0>
 8007f36:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <tcp_process+0x5c0>)
 8007f38:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007f3c:	497a      	ldr	r1, [pc, #488]	; (8008128 <tcp_process+0x5c4>)
 8007f3e:	487b      	ldr	r0, [pc, #492]	; (800812c <tcp_process+0x5c8>)
 8007f40:	f006 fc2a 	bl	800e798 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <tcp_process+0x400>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6910      	ldr	r0, [r2, #16]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4798      	blx	r3
 8007f5e:	4603      	mov	r3, r0
 8007f60:	76bb      	strb	r3, [r7, #26]
 8007f62:	e001      	b.n	8007f68 <tcp_process+0x404>
 8007f64:	23f0      	movs	r3, #240	; 0xf0
 8007f66:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007f68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007f70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f74:	f113 0f0d 	cmn.w	r3, #13
 8007f78:	d002      	beq.n	8007f80 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fd fcf0 	bl	8005960 <tcp_abort>
            }
            return ERR_ABRT;
 8007f80:	f06f 030c 	mvn.w	r3, #12
 8007f84:	e1ce      	b.n	8008324 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fae0 	bl	800854c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007f8c:	4b68      	ldr	r3, [pc, #416]	; (8008130 <tcp_process+0x5cc>)
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <tcp_process+0x43c>
            recv_acked--;
 8007f94:	4b66      	ldr	r3, [pc, #408]	; (8008130 <tcp_process+0x5cc>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	4b64      	ldr	r3, [pc, #400]	; (8008130 <tcp_process+0x5cc>)
 8007f9e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fa4:	009a      	lsls	r2, r3, #2
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	f241 111c 	movw	r1, #4380	; 0x111c
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf38      	it	cc
 8007fb4:	460b      	movcc	r3, r1
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d204      	bcs.n	8007fc4 <tcp_process+0x460>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	e00d      	b.n	8007fe0 <tcp_process+0x47c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	f241 121c 	movw	r2, #4380	; 0x111c
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d904      	bls.n	8007fdc <tcp_process+0x478>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	e001      	b.n	8007fe0 <tcp_process+0x47c>
 8007fdc:	f241 131c 	movw	r3, #4380	; 0x111c
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007fe6:	4b53      	ldr	r3, [pc, #332]	; (8008134 <tcp_process+0x5d0>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d037      	beq.n	8008062 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	8b5b      	ldrh	r3, [r3, #26]
 8007ff6:	f043 0302 	orr.w	r3, r3, #2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2207      	movs	r2, #7
 8008004:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008006:	e02c      	b.n	8008062 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008008:	4b40      	ldr	r3, [pc, #256]	; (800810c <tcp_process+0x5a8>)
 800800a:	6819      	ldr	r1, [r3, #0]
 800800c:	4b40      	ldr	r3, [pc, #256]	; (8008110 <tcp_process+0x5ac>)
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	4b40      	ldr	r3, [pc, #256]	; (8008114 <tcp_process+0x5b0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008018:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <tcp_process+0x5b4>)
 800801a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008020:	4a3d      	ldr	r2, [pc, #244]	; (8008118 <tcp_process+0x5b4>)
 8008022:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008024:	8812      	ldrh	r2, [r2, #0]
 8008026:	b292      	uxth	r2, r2
 8008028:	9202      	str	r2, [sp, #8]
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	4b3b      	ldr	r3, [pc, #236]	; (800811c <tcp_process+0x5b8>)
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4b3b      	ldr	r3, [pc, #236]	; (8008120 <tcp_process+0x5bc>)
 8008032:	4602      	mov	r2, r0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f003 f827 	bl	800b088 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800803a:	e167      	b.n	800830c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800803c:	4b32      	ldr	r3, [pc, #200]	; (8008108 <tcp_process+0x5a4>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8161 	beq.w	800830c <tcp_process+0x7a8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	1e5a      	subs	r2, r3, #1
 8008050:	4b30      	ldr	r3, [pc, #192]	; (8008114 <tcp_process+0x5b0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	f040 8159 	bne.w	800830c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f002 fe0c 	bl	800ac78 <tcp_rexmit>
      break;
 8008060:	e154      	b.n	800830c <tcp_process+0x7a8>
 8008062:	e153      	b.n	800830c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa71 	bl	800854c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800806a:	4b32      	ldr	r3, [pc, #200]	; (8008134 <tcp_process+0x5d0>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 814c 	beq.w	8008310 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8b5b      	ldrh	r3, [r3, #26]
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2207      	movs	r2, #7
 800808a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800808c:	e140      	b.n	8008310 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa5c 	bl	800854c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008094:	4b27      	ldr	r3, [pc, #156]	; (8008134 <tcp_process+0x5d0>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d071      	beq.n	8008184 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080a0:	4b19      	ldr	r3, [pc, #100]	; (8008108 <tcp_process+0x5a4>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d060      	beq.n	800816e <tcp_process+0x60a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <tcp_process+0x5a8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d15a      	bne.n	800816e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d156      	bne.n	800816e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	8b5b      	ldrh	r3, [r3, #26]
 80080c4:	f043 0302 	orr.w	r3, r3, #2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe fdbe 	bl	8006c50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80080d4:	4b18      	ldr	r3, [pc, #96]	; (8008138 <tcp_process+0x5d4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d105      	bne.n	80080ea <tcp_process+0x586>
 80080de:	4b16      	ldr	r3, [pc, #88]	; (8008138 <tcp_process+0x5d4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	4a14      	ldr	r2, [pc, #80]	; (8008138 <tcp_process+0x5d4>)
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	e02e      	b.n	8008148 <tcp_process+0x5e4>
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <tcp_process+0x5d4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	e027      	b.n	8008142 <tcp_process+0x5de>
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d11f      	bne.n	800813c <tcp_process+0x5d8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	60da      	str	r2, [r3, #12]
 8008104:	e020      	b.n	8008148 <tcp_process+0x5e4>
 8008106:	bf00      	nop
 8008108:	200000fc 	.word	0x200000fc
 800810c:	200000f4 	.word	0x200000f4
 8008110:	200000fa 	.word	0x200000fa
 8008114:	200000f0 	.word	0x200000f0
 8008118:	200000e0 	.word	0x200000e0
 800811c:	2000335c 	.word	0x2000335c
 8008120:	20003360 	.word	0x20003360
 8008124:	08010a78 	.word	0x08010a78
 8008128:	08010d18 	.word	0x08010d18
 800812c:	08010ac4 	.word	0x08010ac4
 8008130:	200000f8 	.word	0x200000f8
 8008134:	200000fd 	.word	0x200000fd
 8008138:	20006890 	.word	0x20006890
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1d4      	bne.n	80080f2 <tcp_process+0x58e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	4b77      	ldr	r3, [pc, #476]	; (800832c <tcp_process+0x7c8>)
 8008150:	2201      	movs	r2, #1
 8008152:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220a      	movs	r2, #10
 8008158:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800815a:	4b75      	ldr	r3, [pc, #468]	; (8008330 <tcp_process+0x7cc>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60da      	str	r2, [r3, #12]
 8008162:	4a73      	ldr	r2, [pc, #460]	; (8008330 <tcp_process+0x7cc>)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	f003 f950 	bl	800b40c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800816c:	e0d2      	b.n	8008314 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8b5b      	ldrh	r3, [r3, #26]
 8008172:	f043 0302 	orr.w	r3, r3, #2
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2208      	movs	r2, #8
 8008180:	751a      	strb	r2, [r3, #20]
      break;
 8008182:	e0c7      	b.n	8008314 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008184:	4b6b      	ldr	r3, [pc, #428]	; (8008334 <tcp_process+0x7d0>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80c1 	beq.w	8008314 <tcp_process+0x7b0>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008196:	4b68      	ldr	r3, [pc, #416]	; (8008338 <tcp_process+0x7d4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	f040 80ba 	bne.w	8008314 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 80b5 	bne.w	8008314 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2206      	movs	r2, #6
 80081ae:	751a      	strb	r2, [r3, #20]
      break;
 80081b0:	e0b0      	b.n	8008314 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9ca 	bl	800854c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80081b8:	4b60      	ldr	r3, [pc, #384]	; (800833c <tcp_process+0x7d8>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80a9 	beq.w	8008318 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8b5b      	ldrh	r3, [r3, #26]
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fe fd3b 	bl	8006c50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80081da:	4b59      	ldr	r3, [pc, #356]	; (8008340 <tcp_process+0x7dc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d105      	bne.n	80081f0 <tcp_process+0x68c>
 80081e4:	4b56      	ldr	r3, [pc, #344]	; (8008340 <tcp_process+0x7dc>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4a55      	ldr	r2, [pc, #340]	; (8008340 <tcp_process+0x7dc>)
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e013      	b.n	8008218 <tcp_process+0x6b4>
 80081f0:	4b53      	ldr	r3, [pc, #332]	; (8008340 <tcp_process+0x7dc>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	e00c      	b.n	8008212 <tcp_process+0x6ae>
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d104      	bne.n	800820c <tcp_process+0x6a8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	60da      	str	r2, [r3, #12]
 800820a:	e005      	b.n	8008218 <tcp_process+0x6b4>
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1ef      	bne.n	80081f8 <tcp_process+0x694>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	60da      	str	r2, [r3, #12]
 800821e:	4b43      	ldr	r3, [pc, #268]	; (800832c <tcp_process+0x7c8>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	220a      	movs	r2, #10
 8008228:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800822a:	4b41      	ldr	r3, [pc, #260]	; (8008330 <tcp_process+0x7cc>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]
 8008232:	4a3f      	ldr	r2, [pc, #252]	; (8008330 <tcp_process+0x7cc>)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	f003 f8e8 	bl	800b40c <tcp_timer_needed>
      }
      break;
 800823c:	e06c      	b.n	8008318 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f984 	bl	800854c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008244:	4b3b      	ldr	r3, [pc, #236]	; (8008334 <tcp_process+0x7d0>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 0310 	and.w	r3, r3, #16
 800824c:	2b00      	cmp	r3, #0
 800824e:	d065      	beq.n	800831c <tcp_process+0x7b8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008254:	4b38      	ldr	r3, [pc, #224]	; (8008338 <tcp_process+0x7d4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d15f      	bne.n	800831c <tcp_process+0x7b8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d15b      	bne.n	800831c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fe fcf3 	bl	8006c50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800826a:	4b35      	ldr	r3, [pc, #212]	; (8008340 <tcp_process+0x7dc>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	429a      	cmp	r2, r3
 8008272:	d105      	bne.n	8008280 <tcp_process+0x71c>
 8008274:	4b32      	ldr	r3, [pc, #200]	; (8008340 <tcp_process+0x7dc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	4a31      	ldr	r2, [pc, #196]	; (8008340 <tcp_process+0x7dc>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	e013      	b.n	80082a8 <tcp_process+0x744>
 8008280:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <tcp_process+0x7dc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e00c      	b.n	80082a2 <tcp_process+0x73e>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d104      	bne.n	800829c <tcp_process+0x738>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	e005      	b.n	80082a8 <tcp_process+0x744>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1ef      	bne.n	8008288 <tcp_process+0x724>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <tcp_process+0x7c8>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220a      	movs	r2, #10
 80082b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <tcp_process+0x7cc>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60da      	str	r2, [r3, #12]
 80082c2:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <tcp_process+0x7cc>)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	f003 f8a0 	bl	800b40c <tcp_timer_needed>
      }
      break;
 80082cc:	e026      	b.n	800831c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f93c 	bl	800854c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082d4:	4b17      	ldr	r3, [pc, #92]	; (8008334 <tcp_process+0x7d0>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01f      	beq.n	8008320 <tcp_process+0x7bc>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <tcp_process+0x7d4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d119      	bne.n	8008320 <tcp_process+0x7bc>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d115      	bne.n	8008320 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80082f4:	4b11      	ldr	r3, [pc, #68]	; (800833c <tcp_process+0x7d8>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f043 0310 	orr.w	r3, r3, #16
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <tcp_process+0x7d8>)
 8008300:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008302:	e00d      	b.n	8008320 <tcp_process+0x7bc>
    default:
      break;
 8008304:	bf00      	nop
 8008306:	e00c      	b.n	8008322 <tcp_process+0x7be>
      break;
 8008308:	bf00      	nop
 800830a:	e00a      	b.n	8008322 <tcp_process+0x7be>
      break;
 800830c:	bf00      	nop
 800830e:	e008      	b.n	8008322 <tcp_process+0x7be>
      break;
 8008310:	bf00      	nop
 8008312:	e006      	b.n	8008322 <tcp_process+0x7be>
      break;
 8008314:	bf00      	nop
 8008316:	e004      	b.n	8008322 <tcp_process+0x7be>
      break;
 8008318:	bf00      	nop
 800831a:	e002      	b.n	8008322 <tcp_process+0x7be>
      break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <tcp_process+0x7be>
      break;
 8008320:	bf00      	nop
  }
  return ERR_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3724      	adds	r7, #36	; 0x24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd90      	pop	{r4, r7, pc}
 800832c:	2000688c 	.word	0x2000688c
 8008330:	200068a0 	.word	0x200068a0
 8008334:	200000fc 	.word	0x200000fc
 8008338:	200000f4 	.word	0x200000f4
 800833c:	200000fd 	.word	0x200000fd
 8008340:	20006890 	.word	0x20006890

08008344 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d106      	bne.n	8008362 <tcp_oos_insert_segment+0x1e>
 8008354:	4b3b      	ldr	r3, [pc, #236]	; (8008444 <tcp_oos_insert_segment+0x100>)
 8008356:	f240 421f 	movw	r2, #1055	; 0x41f
 800835a:	493b      	ldr	r1, [pc, #236]	; (8008448 <tcp_oos_insert_segment+0x104>)
 800835c:	483b      	ldr	r0, [pc, #236]	; (800844c <tcp_oos_insert_segment+0x108>)
 800835e:	f006 fa1b 	bl	800e798 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	899b      	ldrh	r3, [r3, #12]
 8008368:	b29b      	uxth	r3, r3
 800836a:	4618      	mov	r0, r3
 800836c:	f7fb faac 	bl	80038c8 <lwip_htons>
 8008370:	4603      	mov	r3, r0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d028      	beq.n	80083ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800837c:	6838      	ldr	r0, [r7, #0]
 800837e:	f7fe f97f 	bl	8006680 <tcp_segs_free>
    next = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	603b      	str	r3, [r7, #0]
 8008386:	e056      	b.n	8008436 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	899b      	ldrh	r3, [r3, #12]
 800838e:	b29b      	uxth	r3, r3
 8008390:	4618      	mov	r0, r3
 8008392:	f7fb fa99 	bl	80038c8 <lwip_htons>
 8008396:	4603      	mov	r3, r0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00d      	beq.n	80083be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	899b      	ldrh	r3, [r3, #12]
 80083a8:	b29c      	uxth	r4, r3
 80083aa:	2001      	movs	r0, #1
 80083ac:	f7fb fa8c 	bl	80038c8 <lwip_htons>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	4322      	orrs	r2, r4
 80083ba:	b292      	uxth	r2, r2
 80083bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7fe f96e 	bl	80066aa <tcp_seg_free>
    while (next &&
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	891b      	ldrh	r3, [r3, #8]
 80083d8:	461a      	mov	r2, r3
 80083da:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <tcp_oos_insert_segment+0x10c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	441a      	add	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	8909      	ldrh	r1, [r1, #8]
 80083ea:	440b      	add	r3, r1
 80083ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	daca      	bge.n	8008388 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01e      	beq.n	8008436 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	891b      	ldrh	r3, [r3, #8]
 80083fc:	461a      	mov	r2, r3
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <tcp_oos_insert_segment+0x10c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	441a      	add	r2, r3
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800840c:	2b00      	cmp	r3, #0
 800840e:	dd12      	ble.n	8008436 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	b29a      	uxth	r2, r3
 8008418:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <tcp_oos_insert_segment+0x10c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	b29a      	uxth	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	891b      	ldrh	r3, [r3, #8]
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f7fc fb77 	bl	8004b24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]
}
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}
 8008444:	08010a78 	.word	0x08010a78
 8008448:	08010d38 	.word	0x08010d38
 800844c:	08010ac4 	.word	0x08010ac4
 8008450:	200000f0 	.word	0x200000f0

08008454 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008454:	b5b0      	push	{r4, r5, r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008462:	e03e      	b.n	80084e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fc fd64 	bl	8004f40 <pbuf_clen>
 8008478:	4603      	mov	r3, r0
 800847a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008482:	8a7a      	ldrh	r2, [r7, #18]
 8008484:	429a      	cmp	r2, r3
 8008486:	d906      	bls.n	8008496 <tcp_free_acked_segments+0x42>
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <tcp_free_acked_segments+0xe0>)
 800848a:	f240 4257 	movw	r2, #1111	; 0x457
 800848e:	492a      	ldr	r1, [pc, #168]	; (8008538 <tcp_free_acked_segments+0xe4>)
 8008490:	482a      	ldr	r0, [pc, #168]	; (800853c <tcp_free_acked_segments+0xe8>)
 8008492:	f006 f981 	bl	800e798 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800849c:	8a7b      	ldrh	r3, [r7, #18]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	891a      	ldrh	r2, [r3, #8]
 80084ac:	4b24      	ldr	r3, [pc, #144]	; (8008540 <tcp_free_acked_segments+0xec>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <tcp_free_acked_segments+0xec>)
 80084b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80084b8:	6978      	ldr	r0, [r7, #20]
 80084ba:	f7fe f8f6 	bl	80066aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <tcp_free_acked_segments+0x8e>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d106      	bne.n	80084e2 <tcp_free_acked_segments+0x8e>
 80084d4:	4b17      	ldr	r3, [pc, #92]	; (8008534 <tcp_free_acked_segments+0xe0>)
 80084d6:	f240 4261 	movw	r2, #1121	; 0x461
 80084da:	491a      	ldr	r1, [pc, #104]	; (8008544 <tcp_free_acked_segments+0xf0>)
 80084dc:	4817      	ldr	r0, [pc, #92]	; (800853c <tcp_free_acked_segments+0xe8>)
 80084de:	f006 f95b 	bl	800e798 <iprintf>
  while (seg_list != NULL &&
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d020      	beq.n	800852a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fb f9ff 	bl	80038f2 <lwip_htonl>
 80084f4:	4604      	mov	r4, r0
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	891b      	ldrh	r3, [r3, #8]
 80084fa:	461d      	mov	r5, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	899b      	ldrh	r3, [r3, #12]
 8008502:	b29b      	uxth	r3, r3
 8008504:	4618      	mov	r0, r3
 8008506:	f7fb f9df 	bl	80038c8 <lwip_htons>
 800850a:	4603      	mov	r3, r0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <tcp_free_acked_segments+0xc6>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <tcp_free_acked_segments+0xc8>
 800851a:	2300      	movs	r3, #0
 800851c:	442b      	add	r3, r5
 800851e:	18e2      	adds	r2, r4, r3
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <tcp_free_acked_segments+0xf4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008526:	2b00      	cmp	r3, #0
 8008528:	dd9c      	ble.n	8008464 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800852a:	68bb      	ldr	r3, [r7, #8]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bdb0      	pop	{r4, r5, r7, pc}
 8008534:	08010a78 	.word	0x08010a78
 8008538:	08010d60 	.word	0x08010d60
 800853c:	08010ac4 	.word	0x08010ac4
 8008540:	200000f8 	.word	0x200000f8
 8008544:	08010d88 	.word	0x08010d88
 8008548:	200000f4 	.word	0x200000f4

0800854c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800854c:	b5b0      	push	{r4, r5, r7, lr}
 800854e:	b094      	sub	sp, #80	; 0x50
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <tcp_receive+0x20>
 800855e:	4ba6      	ldr	r3, [pc, #664]	; (80087f8 <tcp_receive+0x2ac>)
 8008560:	f240 427b 	movw	r2, #1147	; 0x47b
 8008564:	49a5      	ldr	r1, [pc, #660]	; (80087fc <tcp_receive+0x2b0>)
 8008566:	48a6      	ldr	r0, [pc, #664]	; (8008800 <tcp_receive+0x2b4>)
 8008568:	f006 f916 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7d1b      	ldrb	r3, [r3, #20]
 8008570:	2b03      	cmp	r3, #3
 8008572:	d806      	bhi.n	8008582 <tcp_receive+0x36>
 8008574:	4ba0      	ldr	r3, [pc, #640]	; (80087f8 <tcp_receive+0x2ac>)
 8008576:	f240 427c 	movw	r2, #1148	; 0x47c
 800857a:	49a2      	ldr	r1, [pc, #648]	; (8008804 <tcp_receive+0x2b8>)
 800857c:	48a0      	ldr	r0, [pc, #640]	; (8008800 <tcp_receive+0x2b4>)
 800857e:	f006 f90b 	bl	800e798 <iprintf>

  if (flags & TCP_ACK) {
 8008582:	4ba1      	ldr	r3, [pc, #644]	; (8008808 <tcp_receive+0x2bc>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 8263 	beq.w	8008a56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859c:	4413      	add	r3, r2
 800859e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a4:	4b99      	ldr	r3, [pc, #612]	; (800880c <tcp_receive+0x2c0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	db1b      	blt.n	80085e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085b2:	4b96      	ldr	r3, [pc, #600]	; (800880c <tcp_receive+0x2c0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d106      	bne.n	80085c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085be:	4b94      	ldr	r3, [pc, #592]	; (8008810 <tcp_receive+0x2c4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	db0e      	blt.n	80085e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085cc:	4b90      	ldr	r3, [pc, #576]	; (8008810 <tcp_receive+0x2c4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d125      	bne.n	8008620 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085d4:	4b8f      	ldr	r3, [pc, #572]	; (8008814 <tcp_receive+0x2c8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	89db      	ldrh	r3, [r3, #14]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d91c      	bls.n	8008620 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80085e6:	4b8b      	ldr	r3, [pc, #556]	; (8008814 <tcp_receive+0x2c8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	89db      	ldrh	r3, [r3, #14]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008600:	429a      	cmp	r2, r3
 8008602:	d205      	bcs.n	8008610 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008610:	4b7e      	ldr	r3, [pc, #504]	; (800880c <tcp_receive+0x2c0>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008618:	4b7d      	ldr	r3, [pc, #500]	; (8008810 <tcp_receive+0x2c4>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008620:	4b7b      	ldr	r3, [pc, #492]	; (8008810 <tcp_receive+0x2c4>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	dc58      	bgt.n	80086e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800862e:	4b7a      	ldr	r3, [pc, #488]	; (8008818 <tcp_receive+0x2cc>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d14b      	bne.n	80086ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008640:	4413      	add	r3, r2
 8008642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008644:	429a      	cmp	r2, r3
 8008646:	d142      	bne.n	80086ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800864e:	2b00      	cmp	r3, #0
 8008650:	db3d      	blt.n	80086ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008656:	4b6e      	ldr	r3, [pc, #440]	; (8008810 <tcp_receive+0x2c4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d137      	bne.n	80086ce <tcp_receive+0x182>
              found_dupack = 1;
 800865e:	2301      	movs	r3, #1
 8008660:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008668:	2bff      	cmp	r3, #255	; 0xff
 800866a:	d007      	beq.n	800867c <tcp_receive+0x130>
                ++pcb->dupacks;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008672:	3301      	adds	r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008682:	2b03      	cmp	r3, #3
 8008684:	d91b      	bls.n	80086be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008690:	4413      	add	r3, r2
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800869a:	429a      	cmp	r2, r3
 800869c:	d30a      	bcc.n	80086b4 <tcp_receive+0x168>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086a8:	4413      	add	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80086b2:	e004      	b.n	80086be <tcp_receive+0x172>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d902      	bls.n	80086ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 fb41 	bl	800ad50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80086ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 8160 	bne.w	8008996 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086de:	e15a      	b.n	8008996 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086e0:	4b4b      	ldr	r3, [pc, #300]	; (8008810 <tcp_receive+0x2c4>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f2c0 814d 	blt.w	800898c <tcp_receive+0x440>
 80086f2:	4b47      	ldr	r3, [pc, #284]	; (8008810 <tcp_receive+0x2c4>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f300 8145 	bgt.w	800898c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8b5b      	ldrh	r3, [r3, #26]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d010      	beq.n	8008730 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	8b5b      	ldrh	r3, [r3, #26]
 8008712:	f023 0304 	bic.w	r3, r3, #4
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800873e:	10db      	asrs	r3, r3, #3
 8008740:	b21b      	sxth	r3, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	4413      	add	r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	b21a      	sxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008758:	4b2d      	ldr	r3, [pc, #180]	; (8008810 <tcp_receive+0x2c4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	b29a      	uxth	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	b29b      	uxth	r3, r3
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <tcp_receive+0x2c4>)
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	2b03      	cmp	r3, #3
 800877e:	f240 8096 	bls.w	80088ae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800878e:	429a      	cmp	r2, r3
 8008790:	d244      	bcs.n	800881c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	8b5b      	ldrh	r3, [r3, #26]
 8008796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <tcp_receive+0x256>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <tcp_receive+0x258>
 80087a2:	2302      	movs	r3, #2
 80087a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80087a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087b2:	fb12 f303 	smulbb	r3, r2, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087ba:	4293      	cmp	r3, r2
 80087bc:	bf28      	it	cs
 80087be:	4613      	movcs	r3, r2
 80087c0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087ca:	4413      	add	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d309      	bcc.n	80087ec <tcp_receive+0x2a0>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087e0:	4413      	add	r3, r2
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80087ea:	e060      	b.n	80088ae <tcp_receive+0x362>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80087f6:	e05a      	b.n	80088ae <tcp_receive+0x362>
 80087f8:	08010a78 	.word	0x08010a78
 80087fc:	08010da8 	.word	0x08010da8
 8008800:	08010ac4 	.word	0x08010ac4
 8008804:	08010dc4 	.word	0x08010dc4
 8008808:	200000fc 	.word	0x200000fc
 800880c:	200000f0 	.word	0x200000f0
 8008810:	200000f4 	.word	0x200000f4
 8008814:	200000e0 	.word	0x200000e0
 8008818:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008824:	4413      	add	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800882e:	429a      	cmp	r2, r3
 8008830:	d309      	bcc.n	8008846 <tcp_receive+0x2fa>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800883a:	4413      	add	r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008844:	e004      	b.n	8008850 <tcp_receive+0x304>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800885c:	429a      	cmp	r2, r3
 800885e:	d326      	bcc.n	80088ae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008880:	4413      	add	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800888a:	429a      	cmp	r2, r3
 800888c:	d30a      	bcc.n	80088a4 <tcp_receive+0x358>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008898:	4413      	add	r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80088a2:	e004      	b.n	80088ae <tcp_receive+0x362>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b6:	4a98      	ldr	r2, [pc, #608]	; (8008b18 <tcp_receive+0x5cc>)
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fdcb 	bl	8008454 <tcp_free_acked_segments>
 80088be:	4602      	mov	r2, r0
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088cc:	4a93      	ldr	r2, [pc, #588]	; (8008b1c <tcp_receive+0x5d0>)
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fdc0 	bl	8008454 <tcp_free_acked_segments>
 80088d4:	4602      	mov	r2, r0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80088ea:	e002      	b.n	80088f2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800890e:	4b84      	ldr	r3, [pc, #528]	; (8008b20 <tcp_receive+0x5d4>)
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	4413      	add	r3, r2
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8b5b      	ldrh	r3, [r3, #26]
 8008920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008924:	2b00      	cmp	r3, #0
 8008926:	d035      	beq.n	8008994 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892c:	2b00      	cmp	r3, #0
 800892e:	d118      	bne.n	8008962 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00c      	beq.n	8008952 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4618      	mov	r0, r3
 8008946:	f7fa ffd4 	bl	80038f2 <lwip_htonl>
 800894a:	4603      	mov	r3, r0
 800894c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800894e:	2b00      	cmp	r3, #0
 8008950:	dc20      	bgt.n	8008994 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	8b5b      	ldrh	r3, [r3, #26]
 8008956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008960:	e018      	b.n	8008994 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	4618      	mov	r0, r3
 8008970:	f7fa ffbf 	bl	80038f2 <lwip_htonl>
 8008974:	4603      	mov	r3, r0
 8008976:	1ae3      	subs	r3, r4, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	dc0b      	bgt.n	8008994 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8b5b      	ldrh	r3, [r3, #26]
 8008980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800898a:	e003      	b.n	8008994 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f002 fbcd 	bl	800b12c <tcp_send_empty_ack>
 8008992:	e000      	b.n	8008996 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008994:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	2b00      	cmp	r3, #0
 800899c:	d05b      	beq.n	8008a56 <tcp_receive+0x50a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a2:	4b60      	ldr	r3, [pc, #384]	; (8008b24 <tcp_receive+0x5d8>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da54      	bge.n	8008a56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089ac:	4b5e      	ldr	r3, [pc, #376]	; (8008b28 <tcp_receive+0x5dc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80089c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80089ca:	10db      	asrs	r3, r3, #3
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089e4:	4413      	add	r3, r2
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	b21a      	sxth	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80089ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da05      	bge.n	8008a02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80089f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089fa:	425b      	negs	r3, r3
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008a02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a0c:	109b      	asrs	r3, r3, #2
 8008a0e:	b21b      	sxth	r3, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a26:	4413      	add	r3, r2
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b21a      	sxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a36:	10db      	asrs	r3, r3, #3
 8008a38:	b21b      	sxth	r3, r3
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4413      	add	r3, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	b21a      	sxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a56:	4b35      	ldr	r3, [pc, #212]	; (8008b2c <tcp_receive+0x5e0>)
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 84e1 	beq.w	8009422 <tcp_receive+0xed6>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7d1b      	ldrb	r3, [r3, #20]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	f200 84dc 	bhi.w	8009422 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a6e:	4b30      	ldr	r3, [pc, #192]	; (8008b30 <tcp_receive+0x5e4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f2c0 808e 	blt.w	8008b98 <tcp_receive+0x64c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a80:	4b2a      	ldr	r3, [pc, #168]	; (8008b2c <tcp_receive+0x5e0>)
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <tcp_receive+0x5e4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	440b      	add	r3, r1
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	3301      	adds	r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f300 8081 	bgt.w	8008b98 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008a96:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <tcp_receive+0x5e8>)
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aa0:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <tcp_receive+0x5e4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008aa8:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <tcp_receive+0x5e8>)
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <tcp_receive+0x572>
 8008ab0:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <tcp_receive+0x5ec>)
 8008ab2:	f240 5294 	movw	r2, #1428	; 0x594
 8008ab6:	4921      	ldr	r1, [pc, #132]	; (8008b3c <tcp_receive+0x5f0>)
 8008ab8:	4821      	ldr	r0, [pc, #132]	; (8008b40 <tcp_receive+0x5f4>)
 8008aba:	f005 fe6d 	bl	800e798 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d906      	bls.n	8008ad6 <tcp_receive+0x58a>
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <tcp_receive+0x5ec>)
 8008aca:	f240 5295 	movw	r2, #1429	; 0x595
 8008ace:	491d      	ldr	r1, [pc, #116]	; (8008b44 <tcp_receive+0x5f8>)
 8008ad0:	481b      	ldr	r0, [pc, #108]	; (8008b40 <tcp_receive+0x5f4>)
 8008ad2:	f005 fe61 	bl	800e798 <iprintf>
      off = (u16_t)off32;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <tcp_receive+0x5e8>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	891b      	ldrh	r3, [r3, #8]
 8008ae2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d906      	bls.n	8008af8 <tcp_receive+0x5ac>
 8008aea:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <tcp_receive+0x5ec>)
 8008aec:	f240 5297 	movw	r2, #1431	; 0x597
 8008af0:	4915      	ldr	r1, [pc, #84]	; (8008b48 <tcp_receive+0x5fc>)
 8008af2:	4813      	ldr	r0, [pc, #76]	; (8008b40 <tcp_receive+0x5f4>)
 8008af4:	f005 fe50 	bl	800e798 <iprintf>
      inseg.len -= off;
 8008af8:	4b0e      	ldr	r3, [pc, #56]	; (8008b34 <tcp_receive+0x5e8>)
 8008afa:	891a      	ldrh	r2, [r3, #8]
 8008afc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <tcp_receive+0x5e8>)
 8008b06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <tcp_receive+0x5e8>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	891a      	ldrh	r2, [r3, #8]
 8008b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008b16:	e029      	b.n	8008b6c <tcp_receive+0x620>
 8008b18:	08010de0 	.word	0x08010de0
 8008b1c:	08010de8 	.word	0x08010de8
 8008b20:	200000f8 	.word	0x200000f8
 8008b24:	200000f4 	.word	0x200000f4
 8008b28:	20006894 	.word	0x20006894
 8008b2c:	200000fa 	.word	0x200000fa
 8008b30:	200000f0 	.word	0x200000f0
 8008b34:	200000d0 	.word	0x200000d0
 8008b38:	08010a78 	.word	0x08010a78
 8008b3c:	08010df0 	.word	0x08010df0
 8008b40:	08010ac4 	.word	0x08010ac4
 8008b44:	08010e00 	.word	0x08010e00
 8008b48:	08010e10 	.word	0x08010e10
        off -= p->len;
 8008b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b4e:	895b      	ldrh	r3, [r3, #10]
 8008b50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008b5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b62:	2200      	movs	r2, #0
 8008b64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6e:	895b      	ldrh	r3, [r3, #10]
 8008b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d8e9      	bhi.n	8008b4c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008b78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008b80:	f7fc f8d0 	bl	8004d24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	4a91      	ldr	r2, [pc, #580]	; (8008dd0 <tcp_receive+0x884>)
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	4b91      	ldr	r3, [pc, #580]	; (8008dd4 <tcp_receive+0x888>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4a8f      	ldr	r2, [pc, #572]	; (8008dd0 <tcp_receive+0x884>)
 8008b92:	6812      	ldr	r2, [r2, #0]
 8008b94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b96:	e00d      	b.n	8008bb4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008b98:	4b8d      	ldr	r3, [pc, #564]	; (8008dd0 <tcp_receive+0x884>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da06      	bge.n	8008bb4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8b5b      	ldrh	r3, [r3, #26]
 8008baa:	f043 0302 	orr.w	r3, r3, #2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008bb4:	4b86      	ldr	r3, [pc, #536]	; (8008dd0 <tcp_receive+0x884>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f2c0 842a 	blt.w	8009418 <tcp_receive+0xecc>
 8008bc4:	4b82      	ldr	r3, [pc, #520]	; (8008dd0 <tcp_receive+0x884>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008bd0:	440b      	add	r3, r1
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f300 841e 	bgt.w	8009418 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008be0:	4b7b      	ldr	r3, [pc, #492]	; (8008dd0 <tcp_receive+0x884>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	f040 829a 	bne.w	800911e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008bea:	4b7a      	ldr	r3, [pc, #488]	; (8008dd4 <tcp_receive+0x888>)
 8008bec:	891c      	ldrh	r4, [r3, #8]
 8008bee:	4b79      	ldr	r3, [pc, #484]	; (8008dd4 <tcp_receive+0x888>)
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	899b      	ldrh	r3, [r3, #12]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fa fe66 	bl	80038c8 <lwip_htons>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <tcp_receive+0x6c0>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <tcp_receive+0x6c2>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4423      	add	r3, r4
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	4b71      	ldr	r3, [pc, #452]	; (8008dd8 <tcp_receive+0x88c>)
 8008c14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c1a:	4b6f      	ldr	r3, [pc, #444]	; (8008dd8 <tcp_receive+0x88c>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d275      	bcs.n	8008d0e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c22:	4b6c      	ldr	r3, [pc, #432]	; (8008dd4 <tcp_receive+0x888>)
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	899b      	ldrh	r3, [r3, #12]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fa fe4c 	bl	80038c8 <lwip_htons>
 8008c30:	4603      	mov	r3, r0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01f      	beq.n	8008c7c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008c3c:	4b65      	ldr	r3, [pc, #404]	; (8008dd4 <tcp_receive+0x888>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	899b      	ldrh	r3, [r3, #12]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	b21b      	sxth	r3, r3
 8008c46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c4a:	b21c      	sxth	r4, r3
 8008c4c:	4b61      	ldr	r3, [pc, #388]	; (8008dd4 <tcp_receive+0x888>)
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	899b      	ldrh	r3, [r3, #12]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fa fe37 	bl	80038c8 <lwip_htons>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fa fe2e 	bl	80038c8 <lwip_htons>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	b21b      	sxth	r3, r3
 8008c70:	4323      	orrs	r3, r4
 8008c72:	b21a      	sxth	r2, r3
 8008c74:	4b57      	ldr	r3, [pc, #348]	; (8008dd4 <tcp_receive+0x888>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c80:	4b54      	ldr	r3, [pc, #336]	; (8008dd4 <tcp_receive+0x888>)
 8008c82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c84:	4b53      	ldr	r3, [pc, #332]	; (8008dd4 <tcp_receive+0x888>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	899b      	ldrh	r3, [r3, #12]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa fe1b 	bl	80038c8 <lwip_htons>
 8008c92:	4603      	mov	r3, r0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <tcp_receive+0x75e>
            inseg.len -= 1;
 8008c9e:	4b4d      	ldr	r3, [pc, #308]	; (8008dd4 <tcp_receive+0x888>)
 8008ca0:	891b      	ldrh	r3, [r3, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	4b4b      	ldr	r3, [pc, #300]	; (8008dd4 <tcp_receive+0x888>)
 8008ca8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008caa:	4b4a      	ldr	r3, [pc, #296]	; (8008dd4 <tcp_receive+0x888>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	4a49      	ldr	r2, [pc, #292]	; (8008dd4 <tcp_receive+0x888>)
 8008cb0:	8912      	ldrh	r2, [r2, #8]
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fb ff35 	bl	8004b24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008cba:	4b46      	ldr	r3, [pc, #280]	; (8008dd4 <tcp_receive+0x888>)
 8008cbc:	891c      	ldrh	r4, [r3, #8]
 8008cbe:	4b45      	ldr	r3, [pc, #276]	; (8008dd4 <tcp_receive+0x888>)
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	899b      	ldrh	r3, [r3, #12]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fa fdfe 	bl	80038c8 <lwip_htons>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <tcp_receive+0x790>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <tcp_receive+0x792>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4423      	add	r3, r4
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	4b3d      	ldr	r3, [pc, #244]	; (8008dd8 <tcp_receive+0x88c>)
 8008ce4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ce6:	4b3c      	ldr	r3, [pc, #240]	; (8008dd8 <tcp_receive+0x88c>)
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	4b38      	ldr	r3, [pc, #224]	; (8008dd0 <tcp_receive+0x884>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	441a      	add	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008cfa:	440b      	add	r3, r1
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d006      	beq.n	8008d0e <tcp_receive+0x7c2>
 8008d00:	4b36      	ldr	r3, [pc, #216]	; (8008ddc <tcp_receive+0x890>)
 8008d02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008d06:	4936      	ldr	r1, [pc, #216]	; (8008de0 <tcp_receive+0x894>)
 8008d08:	4836      	ldr	r0, [pc, #216]	; (8008de4 <tcp_receive+0x898>)
 8008d0a:	f005 fd45 	bl	800e798 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80e7 	beq.w	8008ee6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d18:	4b2e      	ldr	r3, [pc, #184]	; (8008dd4 <tcp_receive+0x888>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	899b      	ldrh	r3, [r3, #12]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fa fdd1 	bl	80038c8 <lwip_htons>
 8008d26:	4603      	mov	r3, r0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d32:	e00a      	b.n	8008d4a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7fd fcb0 	bl	80066aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f0      	bne.n	8008d34 <tcp_receive+0x7e8>
 8008d52:	e0c8      	b.n	8008ee6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008d5a:	e052      	b.n	8008e02 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	899b      	ldrh	r3, [r3, #12]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fa fdaf 	bl	80038c8 <lwip_htons>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d03d      	beq.n	8008df2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008d76:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <tcp_receive+0x888>)
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	899b      	ldrh	r3, [r3, #12]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fa fda2 	bl	80038c8 <lwip_htons>
 8008d84:	4603      	mov	r3, r0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d130      	bne.n	8008df2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008d90:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <tcp_receive+0x888>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	899b      	ldrh	r3, [r3, #12]
 8008d96:	b29c      	uxth	r4, r3
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f7fa fd95 	bl	80038c8 <lwip_htons>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <tcp_receive+0x888>)
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	4322      	orrs	r2, r4
 8008da8:	b292      	uxth	r2, r2
 8008daa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <tcp_receive+0x888>)
 8008dae:	891c      	ldrh	r4, [r3, #8]
 8008db0:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <tcp_receive+0x888>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fa fd85 	bl	80038c8 <lwip_htons>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00e      	beq.n	8008de8 <tcp_receive+0x89c>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e00d      	b.n	8008dea <tcp_receive+0x89e>
 8008dce:	bf00      	nop
 8008dd0:	200000f0 	.word	0x200000f0
 8008dd4:	200000d0 	.word	0x200000d0
 8008dd8:	200000fa 	.word	0x200000fa
 8008ddc:	08010a78 	.word	0x08010a78
 8008de0:	08010e20 	.word	0x08010e20
 8008de4:	08010ac4 	.word	0x08010ac4
 8008de8:	2300      	movs	r3, #0
 8008dea:	4423      	add	r3, r4
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	4b98      	ldr	r3, [pc, #608]	; (8009050 <tcp_receive+0xb04>)
 8008df0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008dfc:	6938      	ldr	r0, [r7, #16]
 8008dfe:	f7fd fc54 	bl	80066aa <tcp_seg_free>
            while (next &&
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00e      	beq.n	8008e26 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e08:	4b91      	ldr	r3, [pc, #580]	; (8009050 <tcp_receive+0xb04>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4b91      	ldr	r3, [pc, #580]	; (8009054 <tcp_receive+0xb08>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	441a      	add	r2, r3
 8008e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e1c:	8909      	ldrh	r1, [r1, #8]
 8008e1e:	440b      	add	r3, r1
 8008e20:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da9a      	bge.n	8008d5c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d059      	beq.n	8008ee0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008e2c:	4b88      	ldr	r3, [pc, #544]	; (8009050 <tcp_receive+0xb04>)
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b88      	ldr	r3, [pc, #544]	; (8009054 <tcp_receive+0xb08>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	441a      	add	r2, r3
 8008e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dd4d      	ble.n	8008ee0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	4b81      	ldr	r3, [pc, #516]	; (8009054 <tcp_receive+0xb08>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	4b80      	ldr	r3, [pc, #512]	; (8009058 <tcp_receive+0xb0c>)
 8008e58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e5a:	4b7f      	ldr	r3, [pc, #508]	; (8009058 <tcp_receive+0xb0c>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	899b      	ldrh	r3, [r3, #12]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fa fd30 	bl	80038c8 <lwip_htons>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <tcp_receive+0x934>
                inseg.len -= 1;
 8008e74:	4b78      	ldr	r3, [pc, #480]	; (8009058 <tcp_receive+0xb0c>)
 8008e76:	891b      	ldrh	r3, [r3, #8]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	4b76      	ldr	r3, [pc, #472]	; (8009058 <tcp_receive+0xb0c>)
 8008e7e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008e80:	4b75      	ldr	r3, [pc, #468]	; (8009058 <tcp_receive+0xb0c>)
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	4a74      	ldr	r2, [pc, #464]	; (8009058 <tcp_receive+0xb0c>)
 8008e86:	8912      	ldrh	r2, [r2, #8]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fb fe4a 	bl	8004b24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008e90:	4b71      	ldr	r3, [pc, #452]	; (8009058 <tcp_receive+0xb0c>)
 8008e92:	891c      	ldrh	r4, [r3, #8]
 8008e94:	4b70      	ldr	r3, [pc, #448]	; (8009058 <tcp_receive+0xb0c>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	899b      	ldrh	r3, [r3, #12]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fa fd13 	bl	80038c8 <lwip_htons>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <tcp_receive+0x966>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <tcp_receive+0x968>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4423      	add	r3, r4
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	4b65      	ldr	r3, [pc, #404]	; (8009050 <tcp_receive+0xb04>)
 8008eba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008ebc:	4b64      	ldr	r3, [pc, #400]	; (8009050 <tcp_receive+0xb04>)
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	4b64      	ldr	r3, [pc, #400]	; (8009054 <tcp_receive+0xb08>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	441a      	add	r2, r3
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d006      	beq.n	8008ee0 <tcp_receive+0x994>
 8008ed2:	4b62      	ldr	r3, [pc, #392]	; (800905c <tcp_receive+0xb10>)
 8008ed4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008ed8:	4961      	ldr	r1, [pc, #388]	; (8009060 <tcp_receive+0xb14>)
 8008eda:	4862      	ldr	r0, [pc, #392]	; (8009064 <tcp_receive+0xb18>)
 8008edc:	f005 fc5c 	bl	800e798 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ee4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008ee6:	4b5a      	ldr	r3, [pc, #360]	; (8009050 <tcp_receive+0xb04>)
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	4b59      	ldr	r3, [pc, #356]	; (8009054 <tcp_receive+0xb08>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	441a      	add	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008efa:	4b55      	ldr	r3, [pc, #340]	; (8009050 <tcp_receive+0xb04>)
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d206      	bcs.n	8008f10 <tcp_receive+0x9c4>
 8008f02:	4b56      	ldr	r3, [pc, #344]	; (800905c <tcp_receive+0xb10>)
 8008f04:	f240 6207 	movw	r2, #1543	; 0x607
 8008f08:	4957      	ldr	r1, [pc, #348]	; (8009068 <tcp_receive+0xb1c>)
 8008f0a:	4856      	ldr	r0, [pc, #344]	; (8009064 <tcp_receive+0xb18>)
 8008f0c:	f005 fc44 	bl	800e798 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f14:	4b4e      	ldr	r3, [pc, #312]	; (8009050 <tcp_receive+0xb04>)
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fc fe9d 	bl	8005c60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f26:	4b4c      	ldr	r3, [pc, #304]	; (8009058 <tcp_receive+0xb0c>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	891b      	ldrh	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d006      	beq.n	8008f3e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008f30:	4b49      	ldr	r3, [pc, #292]	; (8009058 <tcp_receive+0xb0c>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	4a4d      	ldr	r2, [pc, #308]	; (800906c <tcp_receive+0xb20>)
 8008f36:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f38:	4b47      	ldr	r3, [pc, #284]	; (8009058 <tcp_receive+0xb0c>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f3e:	4b46      	ldr	r3, [pc, #280]	; (8009058 <tcp_receive+0xb0c>)
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	899b      	ldrh	r3, [r3, #12]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fa fcbe 	bl	80038c8 <lwip_htons>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 80b8 	beq.w	80090ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008f5a:	4b45      	ldr	r3, [pc, #276]	; (8009070 <tcp_receive+0xb24>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f043 0320 	orr.w	r3, r3, #32
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	4b42      	ldr	r3, [pc, #264]	; (8009070 <tcp_receive+0xb24>)
 8008f66:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008f68:	e0af      	b.n	80090ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4a36      	ldr	r2, [pc, #216]	; (8009054 <tcp_receive+0xb08>)
 8008f7a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	891b      	ldrh	r3, [r3, #8]
 8008f80:	461c      	mov	r4, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	899b      	ldrh	r3, [r3, #12]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fa fc9c 	bl	80038c8 <lwip_htons>
 8008f90:	4603      	mov	r3, r0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <tcp_receive+0xa54>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <tcp_receive+0xa56>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	191a      	adds	r2, r3, r4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	441a      	add	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb2:	461c      	mov	r4, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	891b      	ldrh	r3, [r3, #8]
 8008fb8:	461d      	mov	r5, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	899b      	ldrh	r3, [r3, #12]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fa fc80 	bl	80038c8 <lwip_htons>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f003 0303 	and.w	r3, r3, #3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <tcp_receive+0xa8c>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <tcp_receive+0xa8e>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	442b      	add	r3, r5
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	d206      	bcs.n	8008fee <tcp_receive+0xaa2>
 8008fe0:	4b1e      	ldr	r3, [pc, #120]	; (800905c <tcp_receive+0xb10>)
 8008fe2:	f240 622b 	movw	r2, #1579	; 0x62b
 8008fe6:	4923      	ldr	r1, [pc, #140]	; (8009074 <tcp_receive+0xb28>)
 8008fe8:	481e      	ldr	r0, [pc, #120]	; (8009064 <tcp_receive+0xb18>)
 8008fea:	f005 fbd5 	bl	800e798 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	891b      	ldrh	r3, [r3, #8]
 8008ff2:	461c      	mov	r4, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	899b      	ldrh	r3, [r3, #12]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fa fc63 	bl	80038c8 <lwip_htons>
 8009002:	4603      	mov	r3, r0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <tcp_receive+0xac6>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <tcp_receive+0xac8>
 8009012:	2300      	movs	r3, #0
 8009014:	1919      	adds	r1, r3, r4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800901a:	b28b      	uxth	r3, r1
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fc fe1b 	bl	8005c60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	891b      	ldrh	r3, [r3, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d028      	beq.n	8009086 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009034:	4b0d      	ldr	r3, [pc, #52]	; (800906c <tcp_receive+0xb20>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01d      	beq.n	8009078 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <tcp_receive+0xb20>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f7fb ffb4 	bl	8004fb4 <pbuf_cat>
 800904c:	e018      	b.n	8009080 <tcp_receive+0xb34>
 800904e:	bf00      	nop
 8009050:	200000fa 	.word	0x200000fa
 8009054:	200000f0 	.word	0x200000f0
 8009058:	200000d0 	.word	0x200000d0
 800905c:	08010a78 	.word	0x08010a78
 8009060:	08010e58 	.word	0x08010e58
 8009064:	08010ac4 	.word	0x08010ac4
 8009068:	08010e94 	.word	0x08010e94
 800906c:	20000100 	.word	0x20000100
 8009070:	200000fd 	.word	0x200000fd
 8009074:	08010eb4 	.word	0x08010eb4
            } else {
              recv_data = cseg->p;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4a70      	ldr	r2, [pc, #448]	; (8009240 <tcp_receive+0xcf4>)
 800907e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	899b      	ldrh	r3, [r3, #12]
 800908c:	b29b      	uxth	r3, r3
 800908e:	4618      	mov	r0, r3
 8009090:	f7fa fc1a 	bl	80038c8 <lwip_htons>
 8009094:	4603      	mov	r3, r0
 8009096:	b2db      	uxtb	r3, r3
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00d      	beq.n	80090bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80090a0:	4b68      	ldr	r3, [pc, #416]	; (8009244 <tcp_receive+0xcf8>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f043 0320 	orr.w	r3, r3, #32
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	4b66      	ldr	r3, [pc, #408]	; (8009244 <tcp_receive+0xcf8>)
 80090ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7d1b      	ldrb	r3, [r3, #20]
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d102      	bne.n	80090bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2207      	movs	r2, #7
 80090ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80090c4:	68b8      	ldr	r0, [r7, #8]
 80090c6:	f7fd faf0 	bl	80066aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d008      	beq.n	80090e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80090de:	429a      	cmp	r2, r3
 80090e0:	f43f af43 	beq.w	8008f6a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	8b5b      	ldrh	r3, [r3, #26]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00e      	beq.n	800910e <tcp_receive+0xbc2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	835a      	strh	r2, [r3, #26]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8b5b      	ldrh	r3, [r3, #26]
 8009102:	f043 0302 	orr.w	r3, r3, #2
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800910c:	e188      	b.n	8009420 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8b5b      	ldrh	r3, [r3, #26]
 8009112:	f043 0301 	orr.w	r3, r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800911c:	e180      	b.n	8009420 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009126:	4848      	ldr	r0, [pc, #288]	; (8009248 <tcp_receive+0xcfc>)
 8009128:	f7fd faf6 	bl	8006718 <tcp_seg_copy>
 800912c:	4602      	mov	r2, r0
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	675a      	str	r2, [r3, #116]	; 0x74
 8009132:	e16d      	b.n	8009410 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913c:	63bb      	str	r3, [r7, #56]	; 0x38
 800913e:	e157      	b.n	80093f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	4b41      	ldr	r3, [pc, #260]	; (800924c <tcp_receive+0xd00>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	429a      	cmp	r2, r3
 800914c:	d11d      	bne.n	800918a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800914e:	4b3e      	ldr	r3, [pc, #248]	; (8009248 <tcp_receive+0xcfc>)
 8009150:	891a      	ldrh	r2, [r3, #8]
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	891b      	ldrh	r3, [r3, #8]
 8009156:	429a      	cmp	r2, r3
 8009158:	f240 814f 	bls.w	80093fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800915c:	483a      	ldr	r0, [pc, #232]	; (8009248 <tcp_receive+0xcfc>)
 800915e:	f7fd fadb 	bl	8006718 <tcp_seg_copy>
 8009162:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8149 	beq.w	80093fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800916c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	e002      	b.n	8009180 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	f7ff f8de 	bl	8008344 <tcp_oos_insert_segment>
                }
                break;
 8009188:	e139      	b.n	80093fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	2b00      	cmp	r3, #0
 800918e:	d117      	bne.n	80091c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009190:	4b2e      	ldr	r3, [pc, #184]	; (800924c <tcp_receive+0xd00>)
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	da57      	bge.n	8009250 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091a0:	4829      	ldr	r0, [pc, #164]	; (8009248 <tcp_receive+0xcfc>)
 80091a2:	f7fd fab9 	bl	8006718 <tcp_seg_copy>
 80091a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8129 	beq.w	8009402 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80091b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091b8:	69b8      	ldr	r0, [r7, #24]
 80091ba:	f7ff f8c3 	bl	8008344 <tcp_oos_insert_segment>
                  }
                  break;
 80091be:	e120      	b.n	8009402 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80091c0:	4b22      	ldr	r3, [pc, #136]	; (800924c <tcp_receive+0xd00>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	db3e      	blt.n	8009250 <tcp_receive+0xd04>
 80091d2:	4b1e      	ldr	r3, [pc, #120]	; (800924c <tcp_receive+0xd00>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	3301      	adds	r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc35      	bgt.n	8009250 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091e4:	4818      	ldr	r0, [pc, #96]	; (8009248 <tcp_receive+0xcfc>)
 80091e6:	f7fd fa97 	bl	8006718 <tcp_seg_copy>
 80091ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8109 	beq.w	8009406 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fc:	8912      	ldrh	r2, [r2, #8]
 80091fe:	441a      	add	r2, r3
 8009200:	4b12      	ldr	r3, [pc, #72]	; (800924c <tcp_receive+0xd00>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	dd12      	ble.n	8009230 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800920a:	4b10      	ldr	r3, [pc, #64]	; (800924c <tcp_receive+0xd00>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	b29a      	uxth	r2, r3
 8009210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b29b      	uxth	r3, r3
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	b29a      	uxth	r2, r3
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009226:	891b      	ldrh	r3, [r3, #8]
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fb fc7a 	bl	8004b24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009236:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009238:	69f8      	ldr	r0, [r7, #28]
 800923a:	f7ff f883 	bl	8008344 <tcp_oos_insert_segment>
                  }
                  break;
 800923e:	e0e2      	b.n	8009406 <tcp_receive+0xeba>
 8009240:	20000100 	.word	0x20000100
 8009244:	200000fd 	.word	0x200000fd
 8009248:	200000d0 	.word	0x200000d0
 800924c:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 80c6 	bne.w	80093ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800925e:	4b80      	ldr	r3, [pc, #512]	; (8009460 <tcp_receive+0xf14>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800926a:	2b00      	cmp	r3, #0
 800926c:	f340 80bd 	ble.w	80093ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	899b      	ldrh	r3, [r3, #12]
 8009276:	b29b      	uxth	r3, r3
 8009278:	4618      	mov	r0, r3
 800927a:	f7fa fb25 	bl	80038c8 <lwip_htons>
 800927e:	4603      	mov	r3, r0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 80bf 	bne.w	800940a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800928c:	4875      	ldr	r0, [pc, #468]	; (8009464 <tcp_receive+0xf18>)
 800928e:	f7fd fa43 	bl	8006718 <tcp_seg_copy>
 8009292:	4602      	mov	r2, r0
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 80b6 	beq.w	800940e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092aa:	8912      	ldrh	r2, [r2, #8]
 80092ac:	441a      	add	r2, r3
 80092ae:	4b6c      	ldr	r3, [pc, #432]	; (8009460 <tcp_receive+0xf14>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd12      	ble.n	80092de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092b8:	4b69      	ldr	r3, [pc, #420]	; (8009460 <tcp_receive+0xf14>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	b29a      	uxth	r2, r3
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	891b      	ldrh	r3, [r3, #8]
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f7fb fc23 	bl	8004b24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80092de:	4b62      	ldr	r3, [pc, #392]	; (8009468 <tcp_receive+0xf1c>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	4b5e      	ldr	r3, [pc, #376]	; (8009460 <tcp_receive+0xf14>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80092f2:	440b      	add	r3, r1
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f340 8089 	ble.w	800940e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	899b      	ldrh	r3, [r3, #12]
 8009304:	b29b      	uxth	r3, r3
 8009306:	4618      	mov	r0, r3
 8009308:	f7fa fade 	bl	80038c8 <lwip_htons>
 800930c:	4603      	mov	r3, r0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d022      	beq.n	800935e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	899b      	ldrh	r3, [r3, #12]
 8009320:	b29b      	uxth	r3, r3
 8009322:	b21b      	sxth	r3, r3
 8009324:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009328:	b21c      	sxth	r4, r3
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	b29b      	uxth	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fac7 	bl	80038c8 <lwip_htons>
 800933a:	4603      	mov	r3, r0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	b29b      	uxth	r3, r3
 8009340:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009344:	b29b      	uxth	r3, r3
 8009346:	4618      	mov	r0, r3
 8009348:	f7fa fabe 	bl	80038c8 <lwip_htons>
 800934c:	4603      	mov	r3, r0
 800934e:	b21b      	sxth	r3, r3
 8009350:	4323      	orrs	r3, r4
 8009352:	b21a      	sxth	r2, r3
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	b292      	uxth	r2, r2
 800935c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009368:	4413      	add	r3, r2
 800936a:	b299      	uxth	r1, r3
 800936c:	4b3c      	ldr	r3, [pc, #240]	; (8009460 <tcp_receive+0xf14>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	b29a      	uxth	r2, r3
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	1a8a      	subs	r2, r1, r2
 8009378:	b292      	uxth	r2, r2
 800937a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	891b      	ldrh	r3, [r3, #8]
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fb fbca 	bl	8004b24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	891c      	ldrh	r4, [r3, #8]
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	899b      	ldrh	r3, [r3, #12]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fa fa91 	bl	80038c8 <lwip_htons>
 80093a6:	4603      	mov	r3, r0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <tcp_receive+0xe6a>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e000      	b.n	80093b8 <tcp_receive+0xe6c>
 80093b6:	2300      	movs	r3, #0
 80093b8:	4423      	add	r3, r4
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	4b2a      	ldr	r3, [pc, #168]	; (8009468 <tcp_receive+0xf1c>)
 80093be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093c0:	4b29      	ldr	r3, [pc, #164]	; (8009468 <tcp_receive+0xf1c>)
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	4b26      	ldr	r3, [pc, #152]	; (8009460 <tcp_receive+0xf14>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	441a      	add	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093d4:	440b      	add	r3, r1
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d019      	beq.n	800940e <tcp_receive+0xec2>
 80093da:	4b24      	ldr	r3, [pc, #144]	; (800946c <tcp_receive+0xf20>)
 80093dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80093e0:	4923      	ldr	r1, [pc, #140]	; (8009470 <tcp_receive+0xf24>)
 80093e2:	4824      	ldr	r0, [pc, #144]	; (8009474 <tcp_receive+0xf28>)
 80093e4:	f005 f9d8 	bl	800e798 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80093e8:	e011      	b.n	800940e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f47f aea4 	bne.w	8009140 <tcp_receive+0xbf4>
 80093f8:	e00a      	b.n	8009410 <tcp_receive+0xec4>
                break;
 80093fa:	bf00      	nop
 80093fc:	e008      	b.n	8009410 <tcp_receive+0xec4>
                break;
 80093fe:	bf00      	nop
 8009400:	e006      	b.n	8009410 <tcp_receive+0xec4>
                  break;
 8009402:	bf00      	nop
 8009404:	e004      	b.n	8009410 <tcp_receive+0xec4>
                  break;
 8009406:	bf00      	nop
 8009408:	e002      	b.n	8009410 <tcp_receive+0xec4>
                  break;
 800940a:	bf00      	nop
 800940c:	e000      	b.n	8009410 <tcp_receive+0xec4>
                break;
 800940e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fe8b 	bl	800b12c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009416:	e003      	b.n	8009420 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fe87 	bl	800b12c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800941e:	e01a      	b.n	8009456 <tcp_receive+0xf0a>
 8009420:	e019      	b.n	8009456 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <tcp_receive+0xf14>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	db0a      	blt.n	8009446 <tcp_receive+0xefa>
 8009430:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <tcp_receive+0xf14>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800943c:	440b      	add	r3, r1
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	3301      	adds	r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	dd07      	ble.n	8009456 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8b5b      	ldrh	r3, [r3, #26]
 800944a:	f043 0302 	orr.w	r3, r3, #2
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009454:	e7ff      	b.n	8009456 <tcp_receive+0xf0a>
 8009456:	bf00      	nop
 8009458:	3750      	adds	r7, #80	; 0x50
 800945a:	46bd      	mov	sp, r7
 800945c:	bdb0      	pop	{r4, r5, r7, pc}
 800945e:	bf00      	nop
 8009460:	200000f0 	.word	0x200000f0
 8009464:	200000d0 	.word	0x200000d0
 8009468:	200000fa 	.word	0x200000fa
 800946c:	08010a78 	.word	0x08010a78
 8009470:	08010e20 	.word	0x08010e20
 8009474:	08010ac4 	.word	0x08010ac4

08009478 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800947e:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <tcp_get_next_optbyte+0x5c>)
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	b291      	uxth	r1, r2
 8009486:	4a13      	ldr	r2, [pc, #76]	; (80094d4 <tcp_get_next_optbyte+0x5c>)
 8009488:	8011      	strh	r1, [r2, #0]
 800948a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800948c:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <tcp_get_next_optbyte+0x60>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <tcp_get_next_optbyte+0x26>
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <tcp_get_next_optbyte+0x64>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	88fa      	ldrh	r2, [r7, #6]
 800949a:	429a      	cmp	r2, r3
 800949c:	d208      	bcs.n	80094b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <tcp_get_next_optbyte+0x68>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3314      	adds	r3, #20
 80094a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	4413      	add	r3, r2
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	e00b      	b.n	80094c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <tcp_get_next_optbyte+0x64>)
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <tcp_get_next_optbyte+0x60>)
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	797b      	ldrb	r3, [r7, #5]
 80094c4:	4413      	add	r3, r2
 80094c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	200000ec 	.word	0x200000ec
 80094d8:	200000e8 	.word	0x200000e8
 80094dc:	200000e6 	.word	0x200000e6
 80094e0:	200000e0 	.word	0x200000e0

080094e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <tcp_parseopt+0x1c>
 80094f2:	4b32      	ldr	r3, [pc, #200]	; (80095bc <tcp_parseopt+0xd8>)
 80094f4:	f240 727d 	movw	r2, #1917	; 0x77d
 80094f8:	4931      	ldr	r1, [pc, #196]	; (80095c0 <tcp_parseopt+0xdc>)
 80094fa:	4832      	ldr	r0, [pc, #200]	; (80095c4 <tcp_parseopt+0xe0>)
 80094fc:	f005 f94c 	bl	800e798 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009500:	4b31      	ldr	r3, [pc, #196]	; (80095c8 <tcp_parseopt+0xe4>)
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d055      	beq.n	80095b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009508:	4b30      	ldr	r3, [pc, #192]	; (80095cc <tcp_parseopt+0xe8>)
 800950a:	2200      	movs	r2, #0
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	e045      	b.n	800959c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009510:	f7ff ffb2 	bl	8009478 <tcp_get_next_optbyte>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d006      	beq.n	800952c <tcp_parseopt+0x48>
 800951e:	2b02      	cmp	r3, #2
 8009520:	dc2b      	bgt.n	800957a <tcp_parseopt+0x96>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d041      	beq.n	80095aa <tcp_parseopt+0xc6>
 8009526:	2b01      	cmp	r3, #1
 8009528:	d127      	bne.n	800957a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800952a:	e037      	b.n	800959c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800952c:	f7ff ffa4 	bl	8009478 <tcp_get_next_optbyte>
 8009530:	4603      	mov	r3, r0
 8009532:	2b04      	cmp	r3, #4
 8009534:	d13b      	bne.n	80095ae <tcp_parseopt+0xca>
 8009536:	4b25      	ldr	r3, [pc, #148]	; (80095cc <tcp_parseopt+0xe8>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	3301      	adds	r3, #1
 800953c:	4a22      	ldr	r2, [pc, #136]	; (80095c8 <tcp_parseopt+0xe4>)
 800953e:	8812      	ldrh	r2, [r2, #0]
 8009540:	4293      	cmp	r3, r2
 8009542:	da34      	bge.n	80095ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009544:	f7ff ff98 	bl	8009478 <tcp_get_next_optbyte>
 8009548:	4603      	mov	r3, r0
 800954a:	b29b      	uxth	r3, r3
 800954c:	021b      	lsls	r3, r3, #8
 800954e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009550:	f7ff ff92 	bl	8009478 <tcp_get_next_optbyte>
 8009554:	4603      	mov	r3, r0
 8009556:	b29a      	uxth	r2, r3
 8009558:	89bb      	ldrh	r3, [r7, #12]
 800955a:	4313      	orrs	r3, r2
 800955c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800955e:	89bb      	ldrh	r3, [r7, #12]
 8009560:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009564:	d804      	bhi.n	8009570 <tcp_parseopt+0x8c>
 8009566:	89bb      	ldrh	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <tcp_parseopt+0x8c>
 800956c:	89ba      	ldrh	r2, [r7, #12]
 800956e:	e001      	b.n	8009574 <tcp_parseopt+0x90>
 8009570:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009578:	e010      	b.n	800959c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800957a:	f7ff ff7d 	bl	8009478 <tcp_get_next_optbyte>
 800957e:	4603      	mov	r3, r0
 8009580:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d914      	bls.n	80095b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009588:	7afb      	ldrb	r3, [r7, #11]
 800958a:	b29a      	uxth	r2, r3
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <tcp_parseopt+0xe8>)
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	4413      	add	r3, r2
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b02      	subs	r3, #2
 8009596:	b29a      	uxth	r2, r3
 8009598:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <tcp_parseopt+0xe8>)
 800959a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800959c:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <tcp_parseopt+0xe8>)
 800959e:	881a      	ldrh	r2, [r3, #0]
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <tcp_parseopt+0xe4>)
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3b3      	bcc.n	8009510 <tcp_parseopt+0x2c>
 80095a8:	e004      	b.n	80095b4 <tcp_parseopt+0xd0>
          return;
 80095aa:	bf00      	nop
 80095ac:	e002      	b.n	80095b4 <tcp_parseopt+0xd0>
            return;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <tcp_parseopt+0xd0>
            return;
 80095b2:	bf00      	nop
      }
    }
  }
}
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08010a78 	.word	0x08010a78
 80095c0:	08010edc 	.word	0x08010edc
 80095c4:	08010ac4 	.word	0x08010ac4
 80095c8:	200000e4 	.word	0x200000e4
 80095cc:	200000ec 	.word	0x200000ec

080095d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <tcp_trigger_input_pcb_close+0x1c>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f043 0310 	orr.w	r3, r3, #16
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	4b03      	ldr	r3, [pc, #12]	; (80095ec <tcp_trigger_input_pcb_close+0x1c>)
 80095e0:	701a      	strb	r2, [r3, #0]
}
 80095e2:	bf00      	nop
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	200000fd 	.word	0x200000fd

080095f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <tcp_route+0x28>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	7a1b      	ldrb	r3, [r3, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d006      	beq.n	8009618 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	7a1b      	ldrb	r3, [r3, #8]
 800960e:	4618      	mov	r0, r3
 8009610:	f7fb f8ae 	bl	8004770 <netif_get_by_index>
 8009614:	4603      	mov	r3, r0
 8009616:	e003      	b.n	8009620 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f003 fe8f 	bl	800d33c <ip4_route>
 800961e:	4603      	mov	r3, r0
  }
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009628:	b590      	push	{r4, r7, lr}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d105      	bne.n	800964a <tcp_create_segment+0x22>
 800963e:	4b44      	ldr	r3, [pc, #272]	; (8009750 <tcp_create_segment+0x128>)
 8009640:	22a3      	movs	r2, #163	; 0xa3
 8009642:	4944      	ldr	r1, [pc, #272]	; (8009754 <tcp_create_segment+0x12c>)
 8009644:	4844      	ldr	r0, [pc, #272]	; (8009758 <tcp_create_segment+0x130>)
 8009646:	f005 f8a7 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d105      	bne.n	800965c <tcp_create_segment+0x34>
 8009650:	4b3f      	ldr	r3, [pc, #252]	; (8009750 <tcp_create_segment+0x128>)
 8009652:	22a4      	movs	r2, #164	; 0xa4
 8009654:	4941      	ldr	r1, [pc, #260]	; (800975c <tcp_create_segment+0x134>)
 8009656:	4840      	ldr	r0, [pc, #256]	; (8009758 <tcp_create_segment+0x130>)
 8009658:	f005 f89e 	bl	800e798 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800965c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800966a:	2003      	movs	r0, #3
 800966c:	f7fa fd82 	bl	8004174 <memp_malloc>
 8009670:	6138      	str	r0, [r7, #16]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d104      	bne.n	8009682 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f7fb fbd9 	bl	8004e30 <pbuf_free>
    return NULL;
 800967e:	2300      	movs	r3, #0
 8009680:	e061      	b.n	8009746 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009688:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	891a      	ldrh	r2, [r3, #8]
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	b29b      	uxth	r3, r3
 800969e:	429a      	cmp	r2, r3
 80096a0:	d205      	bcs.n	80096ae <tcp_create_segment+0x86>
 80096a2:	4b2b      	ldr	r3, [pc, #172]	; (8009750 <tcp_create_segment+0x128>)
 80096a4:	22b0      	movs	r2, #176	; 0xb0
 80096a6:	492e      	ldr	r1, [pc, #184]	; (8009760 <tcp_create_segment+0x138>)
 80096a8:	482b      	ldr	r0, [pc, #172]	; (8009758 <tcp_create_segment+0x130>)
 80096aa:	f005 f875 	bl	800e798 <iprintf>
  seg->len = p->tot_len - optlen;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	891a      	ldrh	r2, [r3, #8]
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80096be:	2114      	movs	r1, #20
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f7fb fb1f 	bl	8004d04 <pbuf_add_header>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f7fc ffec 	bl	80066aa <tcp_seg_free>
    return NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e037      	b.n	8009746 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8ada      	ldrh	r2, [r3, #22]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	68dc      	ldr	r4, [r3, #12]
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fa f8ed 	bl	80038c8 <lwip_htons>
 80096ee:	4603      	mov	r3, r0
 80096f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8b1a      	ldrh	r2, [r3, #24]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	68dc      	ldr	r4, [r3, #12]
 80096fa:	4610      	mov	r0, r2
 80096fc:	f7fa f8e4 	bl	80038c8 <lwip_htons>
 8009700:	4603      	mov	r3, r0
 8009702:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	68dc      	ldr	r4, [r3, #12]
 8009708:	6838      	ldr	r0, [r7, #0]
 800970a:	f7fa f8f2 	bl	80038f2 <lwip_htonl>
 800970e:	4603      	mov	r3, r0
 8009710:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	089b      	lsrs	r3, r3, #2
 8009716:	b2db      	uxtb	r3, r3
 8009718:	b29b      	uxth	r3, r3
 800971a:	3305      	adds	r3, #5
 800971c:	b29b      	uxth	r3, r3
 800971e:	031b      	lsls	r3, r3, #12
 8009720:	b29a      	uxth	r2, r3
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	b29b      	uxth	r3, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	68dc      	ldr	r4, [r3, #12]
 800972e:	4610      	mov	r0, r2
 8009730:	f7fa f8ca 	bl	80038c8 <lwip_htons>
 8009734:	4603      	mov	r3, r0
 8009736:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	749a      	strb	r2, [r3, #18]
 8009740:	2200      	movs	r2, #0
 8009742:	74da      	strb	r2, [r3, #19]
  return seg;
 8009744:	693b      	ldr	r3, [r7, #16]
}
 8009746:	4618      	mov	r0, r3
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	bd90      	pop	{r4, r7, pc}
 800974e:	bf00      	nop
 8009750:	08010ef8 	.word	0x08010ef8
 8009754:	08010f2c 	.word	0x08010f2c
 8009758:	08010f4c 	.word	0x08010f4c
 800975c:	08010f74 	.word	0x08010f74
 8009760:	08010f98 	.word	0x08010f98

08009764 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	607b      	str	r3, [r7, #4]
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]
 8009770:	460b      	mov	r3, r1
 8009772:	81bb      	strh	r3, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009778:	89bb      	ldrh	r3, [r7, #12]
 800977a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <tcp_pbuf_prealloc+0x2a>
 8009782:	4b30      	ldr	r3, [pc, #192]	; (8009844 <tcp_pbuf_prealloc+0xe0>)
 8009784:	22e8      	movs	r2, #232	; 0xe8
 8009786:	4930      	ldr	r1, [pc, #192]	; (8009848 <tcp_pbuf_prealloc+0xe4>)
 8009788:	4830      	ldr	r0, [pc, #192]	; (800984c <tcp_pbuf_prealloc+0xe8>)
 800978a:	f005 f805 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <tcp_pbuf_prealloc+0x3c>
 8009794:	4b2b      	ldr	r3, [pc, #172]	; (8009844 <tcp_pbuf_prealloc+0xe0>)
 8009796:	22e9      	movs	r2, #233	; 0xe9
 8009798:	492d      	ldr	r1, [pc, #180]	; (8009850 <tcp_pbuf_prealloc+0xec>)
 800979a:	482c      	ldr	r0, [pc, #176]	; (800984c <tcp_pbuf_prealloc+0xe8>)
 800979c:	f004 fffc 	bl	800e798 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80097a0:	89ba      	ldrh	r2, [r7, #12]
 80097a2:	897b      	ldrh	r3, [r7, #10]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d221      	bcs.n	80097ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80097a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d111      	bne.n	80097d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	8b5b      	ldrh	r3, [r3, #26]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d115      	bne.n	80097ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80097c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d009      	beq.n	80097ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80097d8:	89bb      	ldrh	r3, [r7, #12]
 80097da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80097de:	f023 0203 	bic.w	r2, r3, #3
 80097e2:	897b      	ldrh	r3, [r7, #10]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bf28      	it	cs
 80097e8:	4613      	movcs	r3, r2
 80097ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80097ec:	8af9      	ldrh	r1, [r7, #22]
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fb f837 	bl	8004868 <pbuf_alloc>
 80097fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	e019      	b.n	800983a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d006      	beq.n	800981c <tcp_pbuf_prealloc+0xb8>
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <tcp_pbuf_prealloc+0xe0>)
 8009810:	f240 120b 	movw	r2, #267	; 0x10b
 8009814:	490f      	ldr	r1, [pc, #60]	; (8009854 <tcp_pbuf_prealloc+0xf0>)
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <tcp_pbuf_prealloc+0xe8>)
 8009818:	f004 ffbe 	bl	800e798 <iprintf>
  *oversize = p->len - length;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	895a      	ldrh	r2, [r3, #10]
 8009820:	89bb      	ldrh	r3, [r7, #12]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	b29a      	uxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	89ba      	ldrh	r2, [r7, #12]
 800982e:	811a      	strh	r2, [r3, #8]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	891a      	ldrh	r2, [r3, #8]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	815a      	strh	r2, [r3, #10]
  return p;
 8009838:	693b      	ldr	r3, [r7, #16]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	08010ef8 	.word	0x08010ef8
 8009848:	08010fb0 	.word	0x08010fb0
 800984c:	08010f4c 	.word	0x08010f4c
 8009850:	08010fd4 	.word	0x08010fd4
 8009854:	08010ff4 	.word	0x08010ff4

08009858 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <tcp_write_checks+0x20>
 800986a:	4b33      	ldr	r3, [pc, #204]	; (8009938 <tcp_write_checks+0xe0>)
 800986c:	f240 1233 	movw	r2, #307	; 0x133
 8009870:	4932      	ldr	r1, [pc, #200]	; (800993c <tcp_write_checks+0xe4>)
 8009872:	4833      	ldr	r0, [pc, #204]	; (8009940 <tcp_write_checks+0xe8>)
 8009874:	f004 ff90 	bl	800e798 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7d1b      	ldrb	r3, [r3, #20]
 800987c:	2b04      	cmp	r3, #4
 800987e:	d00e      	beq.n	800989e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009884:	2b07      	cmp	r3, #7
 8009886:	d00a      	beq.n	800989e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800988c:	2b02      	cmp	r3, #2
 800988e:	d006      	beq.n	800989e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009894:	2b03      	cmp	r3, #3
 8009896:	d002      	beq.n	800989e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009898:	f06f 030a 	mvn.w	r3, #10
 800989c:	e048      	b.n	8009930 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800989e:	887b      	ldrh	r3, [r7, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <tcp_write_checks+0x50>
    return ERR_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e043      	b.n	8009930 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098ae:	887a      	ldrh	r2, [r7, #2]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d909      	bls.n	80098c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8b5b      	ldrh	r3, [r3, #26]
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80098c2:	f04f 33ff 	mov.w	r3, #4294967295
 80098c6:	e033      	b.n	8009930 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d909      	bls.n	80098e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	8b5b      	ldrh	r3, [r3, #26]
 80098d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	e024      	b.n	8009930 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00f      	beq.n	8009910 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d11a      	bne.n	800992e <tcp_write_checks+0xd6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d116      	bne.n	800992e <tcp_write_checks+0xd6>
 8009900:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <tcp_write_checks+0xe0>)
 8009902:	f240 1255 	movw	r2, #341	; 0x155
 8009906:	490f      	ldr	r1, [pc, #60]	; (8009944 <tcp_write_checks+0xec>)
 8009908:	480d      	ldr	r0, [pc, #52]	; (8009940 <tcp_write_checks+0xe8>)
 800990a:	f004 ff45 	bl	800e798 <iprintf>
 800990e:	e00e      	b.n	800992e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009914:	2b00      	cmp	r3, #0
 8009916:	d103      	bne.n	8009920 <tcp_write_checks+0xc8>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <tcp_write_checks+0xd6>
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <tcp_write_checks+0xe0>)
 8009922:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8009926:	4908      	ldr	r1, [pc, #32]	; (8009948 <tcp_write_checks+0xf0>)
 8009928:	4805      	ldr	r0, [pc, #20]	; (8009940 <tcp_write_checks+0xe8>)
 800992a:	f004 ff35 	bl	800e798 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	08010ef8 	.word	0x08010ef8
 800993c:	08011008 	.word	0x08011008
 8009940:	08010f4c 	.word	0x08010f4c
 8009944:	08011028 	.word	0x08011028
 8009948:	08011064 	.word	0x08011064

0800994c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b09b      	sub	sp, #108	; 0x6c
 8009950:	af04      	add	r7, sp, #16
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4611      	mov	r1, r2
 8009958:	461a      	mov	r2, r3
 800995a:	460b      	mov	r3, r1
 800995c:	80fb      	strh	r3, [r7, #6]
 800995e:	4613      	mov	r3, r2
 8009960:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	653b      	str	r3, [r7, #80]	; 0x50
 800996a:	2300      	movs	r3, #0
 800996c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800996e:	2300      	movs	r3, #0
 8009970:	64bb      	str	r3, [r7, #72]	; 0x48
 8009972:	2300      	movs	r3, #0
 8009974:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009976:	2300      	movs	r3, #0
 8009978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <tcp_write+0x5c>
 8009994:	4ba4      	ldr	r3, [pc, #656]	; (8009c28 <tcp_write+0x2dc>)
 8009996:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800999a:	49a4      	ldr	r1, [pc, #656]	; (8009c2c <tcp_write+0x2e0>)
 800999c:	48a4      	ldr	r0, [pc, #656]	; (8009c30 <tcp_write+0x2e4>)
 800999e:	f004 fefb 	bl	800e798 <iprintf>
 80099a2:	f06f 030f 	mvn.w	r3, #15
 80099a6:	e32a      	b.n	8009ffe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b6:	4293      	cmp	r3, r2
 80099b8:	bf28      	it	cs
 80099ba:	4613      	movcs	r3, r2
 80099bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80099be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <tcp_write+0x7e>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c8:	e000      	b.n	80099cc <tcp_write+0x80>
 80099ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d109      	bne.n	80099e8 <tcp_write+0x9c>
 80099d4:	4b94      	ldr	r3, [pc, #592]	; (8009c28 <tcp_write+0x2dc>)
 80099d6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80099da:	4996      	ldr	r1, [pc, #600]	; (8009c34 <tcp_write+0x2e8>)
 80099dc:	4894      	ldr	r0, [pc, #592]	; (8009c30 <tcp_write+0x2e4>)
 80099de:	f004 fedb 	bl	800e798 <iprintf>
 80099e2:	f06f 030f 	mvn.w	r3, #15
 80099e6:	e30a      	b.n	8009ffe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f7ff ff33 	bl	8009858 <tcp_write_checks>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80099f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <tcp_write+0xba>
    return err;
 8009a00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009a04:	e2fb      	b.n	8009ffe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80f6 	beq.w	8009c0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a24:	653b      	str	r3, [r7, #80]	; 0x50
 8009a26:	e002      	b.n	8009a2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f8      	bne.n	8009a28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a38:	7a9b      	ldrb	r3, [r3, #10]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009a44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a48:	891b      	ldrh	r3, [r3, #8]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	8c3b      	ldrh	r3, [r7, #32]
 8009a4e:	440b      	add	r3, r1
 8009a50:	429a      	cmp	r2, r3
 8009a52:	da06      	bge.n	8009a62 <tcp_write+0x116>
 8009a54:	4b74      	ldr	r3, [pc, #464]	; (8009c28 <tcp_write+0x2dc>)
 8009a56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009a5a:	4977      	ldr	r1, [pc, #476]	; (8009c38 <tcp_write+0x2ec>)
 8009a5c:	4874      	ldr	r0, [pc, #464]	; (8009c30 <tcp_write+0x2e4>)
 8009a5e:	f004 fe9b 	bl	800e798 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a64:	891a      	ldrh	r2, [r3, #8]
 8009a66:	8c3b      	ldrh	r3, [r7, #32]
 8009a68:	4413      	add	r3, r2
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009a7a:	8a7b      	ldrh	r3, [r7, #18]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d026      	beq.n	8009ace <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009a80:	8a7b      	ldrh	r3, [r7, #18]
 8009a82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d206      	bcs.n	8009a96 <tcp_write+0x14a>
 8009a88:	4b67      	ldr	r3, [pc, #412]	; (8009c28 <tcp_write+0x2dc>)
 8009a8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009a8e:	496b      	ldr	r1, [pc, #428]	; (8009c3c <tcp_write+0x2f0>)
 8009a90:	4867      	ldr	r0, [pc, #412]	; (8009c30 <tcp_write+0x2e4>)
 8009a92:	f004 fe81 	bl	800e798 <iprintf>
      seg = last_unsent;
 8009a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009a9a:	8a7b      	ldrh	r3, [r7, #18]
 8009a9c:	88fa      	ldrh	r2, [r7, #6]
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	bf28      	it	cs
 8009aa2:	4613      	movcs	r3, r2
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	bf28      	it	cs
 8009aac:	4613      	movcs	r3, r2
 8009aae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009ab0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ab4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009abc:	8a7a      	ldrh	r2, [r7, #18]
 8009abe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009ace:	8a7b      	ldrh	r3, [r7, #18]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <tcp_write+0x1a0>
 8009ad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ad8:	88fb      	ldrh	r3, [r7, #6]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d006      	beq.n	8009aec <tcp_write+0x1a0>
 8009ade:	4b52      	ldr	r3, [pc, #328]	; (8009c28 <tcp_write+0x2dc>)
 8009ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ae4:	4956      	ldr	r1, [pc, #344]	; (8009c40 <tcp_write+0x2f4>)
 8009ae6:	4852      	ldr	r0, [pc, #328]	; (8009c30 <tcp_write+0x2e4>)
 8009ae8:	f004 fe56 	bl	800e798 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009aec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	f080 8167 	bcs.w	8009dc6 <tcp_write+0x47a>
 8009af8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 8163 	beq.w	8009dc6 <tcp_write+0x47a>
 8009b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b02:	891b      	ldrh	r3, [r3, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 815e 	beq.w	8009dc6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009b0a:	88fa      	ldrh	r2, [r7, #6]
 8009b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b10:	1ad2      	subs	r2, r2, r3
 8009b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b14:	4293      	cmp	r3, r2
 8009b16:	bfa8      	it	ge
 8009b18:	4613      	movge	r3, r2
 8009b1a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b1e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009b20:	797b      	ldrb	r3, [r7, #5]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d027      	beq.n	8009b7a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009b2a:	f107 0012 	add.w	r0, r7, #18
 8009b2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009b30:	8bf9      	ldrh	r1, [r7, #30]
 8009b32:	2301      	movs	r3, #1
 8009b34:	9302      	str	r3, [sp, #8]
 8009b36:	797b      	ldrb	r3, [r7, #5]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7ff fe0f 	bl	8009764 <tcp_pbuf_prealloc>
 8009b46:	6578      	str	r0, [r7, #84]	; 0x54
 8009b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8225 	beq.w	8009f9a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b52:	6858      	ldr	r0, [r3, #4]
 8009b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	8bfa      	ldrh	r2, [r7, #30]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	f004 fe04 	bl	800e76c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009b64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b66:	f7fb f9eb 	bl	8004f40 <pbuf_clen>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b72:	4413      	add	r3, r2
 8009b74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b78:	e041      	b.n	8009bfe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b80:	e002      	b.n	8009b88 <tcp_write+0x23c>
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	637b      	str	r3, [r7, #52]	; 0x34
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f8      	bne.n	8009b82 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b92:	7b1b      	ldrb	r3, [r3, #12]
 8009b94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d115      	bne.n	8009bc8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ba2:	8952      	ldrh	r2, [r2, #10]
 8009ba4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d10d      	bne.n	8009bc8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d006      	beq.n	8009bc2 <tcp_write+0x276>
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <tcp_write+0x2dc>)
 8009bb6:	f240 2231 	movw	r2, #561	; 0x231
 8009bba:	4922      	ldr	r1, [pc, #136]	; (8009c44 <tcp_write+0x2f8>)
 8009bbc:	481c      	ldr	r0, [pc, #112]	; (8009c30 <tcp_write+0x2e4>)
 8009bbe:	f004 fdeb 	bl	800e798 <iprintf>
          extendlen = seglen;
 8009bc2:	8bfb      	ldrh	r3, [r7, #30]
 8009bc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009bc6:	e01a      	b.n	8009bfe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009bc8:	8bfb      	ldrh	r3, [r7, #30]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4619      	mov	r1, r3
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f7fa fe4a 	bl	8004868 <pbuf_alloc>
 8009bd4:	6578      	str	r0, [r7, #84]	; 0x54
 8009bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 81e0 	beq.w	8009f9e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8009bde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	441a      	add	r2, r3
 8009be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009bea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bec:	f7fb f9a8 	bl	8004f40 <pbuf_clen>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009bfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009c02:	8bfb      	ldrh	r3, [r7, #30]
 8009c04:	4413      	add	r3, r2
 8009c06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009c0a:	e0dc      	b.n	8009dc6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80d7 	beq.w	8009dc6 <tcp_write+0x47a>
 8009c18:	4b03      	ldr	r3, [pc, #12]	; (8009c28 <tcp_write+0x2dc>)
 8009c1a:	f240 224a 	movw	r2, #586	; 0x24a
 8009c1e:	490a      	ldr	r1, [pc, #40]	; (8009c48 <tcp_write+0x2fc>)
 8009c20:	4803      	ldr	r0, [pc, #12]	; (8009c30 <tcp_write+0x2e4>)
 8009c22:	f004 fdb9 	bl	800e798 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009c26:	e0ce      	b.n	8009dc6 <tcp_write+0x47a>
 8009c28:	08010ef8 	.word	0x08010ef8
 8009c2c:	08011098 	.word	0x08011098
 8009c30:	08010f4c 	.word	0x08010f4c
 8009c34:	080110b0 	.word	0x080110b0
 8009c38:	080110e4 	.word	0x080110e4
 8009c3c:	080110fc 	.word	0x080110fc
 8009c40:	0801111c 	.word	0x0801111c
 8009c44:	0801113c 	.word	0x0801113c
 8009c48:	08011168 	.word	0x08011168
    struct pbuf *p;
    u16_t left = len - pos;
 8009c4c:	88fa      	ldrh	r2, [r7, #6]
 8009c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8009c56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009c62:	8b7a      	ldrh	r2, [r7, #26]
 8009c64:	8bbb      	ldrh	r3, [r7, #28]
 8009c66:	4293      	cmp	r3, r2
 8009c68:	bf28      	it	cs
 8009c6a:	4613      	movcs	r3, r2
 8009c6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009c6e:	797b      	ldrb	r3, [r7, #5]
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d036      	beq.n	8009ce6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009c78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	8b3b      	ldrh	r3, [r7, #24]
 8009c80:	4413      	add	r3, r2
 8009c82:	b299      	uxth	r1, r3
 8009c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bf0c      	ite	eq
 8009c8a:	2301      	moveq	r3, #1
 8009c8c:	2300      	movne	r3, #0
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	f107 0012 	add.w	r0, r7, #18
 8009c94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	797b      	ldrb	r3, [r7, #5]
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2036      	movs	r0, #54	; 0x36
 8009ca4:	f7ff fd5e 	bl	8009764 <tcp_pbuf_prealloc>
 8009ca8:	6338      	str	r0, [r7, #48]	; 0x30
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8178 	beq.w	8009fa2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	895b      	ldrh	r3, [r3, #10]
 8009cb6:	8b3a      	ldrh	r2, [r7, #24]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d906      	bls.n	8009cca <tcp_write+0x37e>
 8009cbc:	4b8c      	ldr	r3, [pc, #560]	; (8009ef0 <tcp_write+0x5a4>)
 8009cbe:	f240 2266 	movw	r2, #614	; 0x266
 8009cc2:	498c      	ldr	r1, [pc, #560]	; (8009ef4 <tcp_write+0x5a8>)
 8009cc4:	488c      	ldr	r0, [pc, #560]	; (8009ef8 <tcp_write+0x5ac>)
 8009cc6:	f004 fd67 	bl	800e798 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009cd2:	18d0      	adds	r0, r2, r3
 8009cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	4413      	add	r3, r2
 8009cdc:	8b3a      	ldrh	r2, [r7, #24]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	f004 fd44 	bl	800e76c <memcpy>
 8009ce4:	e02f      	b.n	8009d46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009ce6:	8a7b      	ldrh	r3, [r7, #18]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d006      	beq.n	8009cfa <tcp_write+0x3ae>
 8009cec:	4b80      	ldr	r3, [pc, #512]	; (8009ef0 <tcp_write+0x5a4>)
 8009cee:	f240 2271 	movw	r2, #625	; 0x271
 8009cf2:	4982      	ldr	r1, [pc, #520]	; (8009efc <tcp_write+0x5b0>)
 8009cf4:	4880      	ldr	r0, [pc, #512]	; (8009ef8 <tcp_write+0x5ac>)
 8009cf6:	f004 fd4f 	bl	800e798 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009cfa:	8b3b      	ldrh	r3, [r7, #24]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	4619      	mov	r1, r3
 8009d00:	2036      	movs	r0, #54	; 0x36
 8009d02:	f7fa fdb1 	bl	8004868 <pbuf_alloc>
 8009d06:	6178      	str	r0, [r7, #20]
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 814b 	beq.w	8009fa6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8009d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	441a      	add	r2, r3
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d26:	4619      	mov	r1, r3
 8009d28:	2036      	movs	r0, #54	; 0x36
 8009d2a:	f7fa fd9d 	bl	8004868 <pbuf_alloc>
 8009d2e:	6338      	str	r0, [r7, #48]	; 0x30
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8009d36:	6978      	ldr	r0, [r7, #20]
 8009d38:	f7fb f87a 	bl	8004e30 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009d3c:	e136      	b.n	8009fac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009d3e:	6979      	ldr	r1, [r7, #20]
 8009d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d42:	f7fb f937 	bl	8004fb4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8009d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d48:	f7fb f8fa 	bl	8004f40 <pbuf_clen>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d54:	4413      	add	r3, r2
 8009d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8009d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d903      	bls.n	8009d6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d64:	f7fb f864 	bl	8004e30 <pbuf_free>
      goto memerr;
 8009d68:	e120      	b.n	8009fac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d72:	441a      	add	r2, r3
 8009d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff fc51 	bl	8009628 <tcp_create_segment>
 8009d86:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 810d 	beq.w	8009faa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <tcp_write+0x450>
      queue = seg;
 8009d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d98:	647b      	str	r3, [r7, #68]	; 0x44
 8009d9a:	e00c      	b.n	8009db6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <tcp_write+0x464>
 8009da2:	4b53      	ldr	r3, [pc, #332]	; (8009ef0 <tcp_write+0x5a4>)
 8009da4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009da8:	4955      	ldr	r1, [pc, #340]	; (8009f00 <tcp_write+0x5b4>)
 8009daa:	4853      	ldr	r0, [pc, #332]	; (8009ef8 <tcp_write+0x5ac>)
 8009dac:	f004 fcf4 	bl	800e798 <iprintf>
      prev_seg->next = seg;
 8009db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009db4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8009dba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009dbe:	8b3b      	ldrh	r3, [r7, #24]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8009dc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	f4ff af3d 	bcc.w	8009c4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009dd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d02c      	beq.n	8009e32 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dde:	e01e      	b.n	8009e1e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	891a      	ldrh	r2, [r3, #8]
 8009de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009de6:	4413      	add	r3, r2
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d110      	bne.n	8009e18 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dfc:	8952      	ldrh	r2, [r2, #10]
 8009dfe:	4413      	add	r3, r2
 8009e00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f004 fcb1 	bl	800e76c <memcpy>
        p->len += oversize_used;
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	895a      	ldrh	r2, [r3, #10]
 8009e0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e10:	4413      	add	r3, r2
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1dd      	bne.n	8009de0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8009e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e26:	891a      	ldrh	r2, [r3, #8]
 8009e28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e2a:	4413      	add	r3, r2
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e30:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009e32:	8a7a      	ldrh	r2, [r7, #18]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8009e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d018      	beq.n	8009e72 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <tcp_write+0x508>
 8009e46:	4b2a      	ldr	r3, [pc, #168]	; (8009ef0 <tcp_write+0x5a4>)
 8009e48:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8009e4c:	492d      	ldr	r1, [pc, #180]	; (8009f04 <tcp_write+0x5b8>)
 8009e4e:	482a      	ldr	r0, [pc, #168]	; (8009ef8 <tcp_write+0x5ac>)
 8009e50:	f004 fca2 	bl	800e798 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fb f8aa 	bl	8004fb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e62:	891a      	ldrh	r2, [r3, #8]
 8009e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e66:	891b      	ldrh	r3, [r3, #8]
 8009e68:	4413      	add	r3, r2
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e6e:	811a      	strh	r2, [r3, #8]
 8009e70:	e037      	b.n	8009ee2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8009e72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d034      	beq.n	8009ee2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <tcp_write+0x53a>
 8009e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <tcp_write+0x548>
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <tcp_write+0x5a4>)
 8009e88:	f240 22e6 	movw	r2, #742	; 0x2e6
 8009e8c:	491e      	ldr	r1, [pc, #120]	; (8009f08 <tcp_write+0x5bc>)
 8009e8e:	481a      	ldr	r0, [pc, #104]	; (8009ef8 <tcp_write+0x5ac>)
 8009e90:	f004 fc82 	bl	800e798 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e9a:	e009      	b.n	8009eb0 <tcp_write+0x564>
      p->tot_len += extendlen;
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	891a      	ldrh	r2, [r3, #8]
 8009ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ea2:	4413      	add	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1f1      	bne.n	8009e9c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	891a      	ldrh	r2, [r3, #8]
 8009ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ebe:	4413      	add	r3, r2
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	895a      	ldrh	r2, [r3, #10]
 8009eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ecc:	4413      	add	r3, r2
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed6:	891a      	ldrh	r2, [r3, #8]
 8009ed8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009eda:	4413      	add	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d111      	bne.n	8009f0c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009eec:	66da      	str	r2, [r3, #108]	; 0x6c
 8009eee:	e010      	b.n	8009f12 <tcp_write+0x5c6>
 8009ef0:	08010ef8 	.word	0x08010ef8
 8009ef4:	08011198 	.word	0x08011198
 8009ef8:	08010f4c 	.word	0x08010f4c
 8009efc:	080111d8 	.word	0x080111d8
 8009f00:	080111e8 	.word	0x080111e8
 8009f04:	080111fc 	.word	0x080111fc
 8009f08:	08011234 	.word	0x08011234
  } else {
    last_unsent->next = queue;
 8009f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f10:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f16:	88fb      	ldrh	r3, [r7, #6]
 8009f18:	441a      	add	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009f24:	88fb      	ldrh	r3, [r7, #6]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009f36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00e      	beq.n	8009f62 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <tcp_write+0x616>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <tcp_write+0x616>
 8009f54:	4b2c      	ldr	r3, [pc, #176]	; (800a008 <tcp_write+0x6bc>)
 8009f56:	f240 3212 	movw	r2, #786	; 0x312
 8009f5a:	492c      	ldr	r1, [pc, #176]	; (800a00c <tcp_write+0x6c0>)
 8009f5c:	482c      	ldr	r0, [pc, #176]	; (800a010 <tcp_write+0x6c4>)
 8009f5e:	f004 fc1b 	bl	800e798 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8009f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d016      	beq.n	8009f96 <tcp_write+0x64a>
 8009f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d012      	beq.n	8009f96 <tcp_write+0x64a>
 8009f70:	797b      	ldrb	r3, [r7, #5]
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10d      	bne.n	8009f96 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	899b      	ldrh	r3, [r3, #12]
 8009f80:	b29c      	uxth	r4, r3
 8009f82:	2008      	movs	r0, #8
 8009f84:	f7f9 fca0 	bl	80038c8 <lwip_htons>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4322      	orrs	r2, r4
 8009f92:	b292      	uxth	r2, r2
 8009f94:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	e031      	b.n	8009ffe <tcp_write+0x6b2>
          goto memerr;
 8009f9a:	bf00      	nop
 8009f9c:	e006      	b.n	8009fac <tcp_write+0x660>
            goto memerr;
 8009f9e:	bf00      	nop
 8009fa0:	e004      	b.n	8009fac <tcp_write+0x660>
        goto memerr;
 8009fa2:	bf00      	nop
 8009fa4:	e002      	b.n	8009fac <tcp_write+0x660>
        goto memerr;
 8009fa6:	bf00      	nop
 8009fa8:	e000      	b.n	8009fac <tcp_write+0x660>
      goto memerr;
 8009faa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	8b5b      	ldrh	r3, [r3, #26]
 8009fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8009fc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fc2:	f7fa ff35 	bl	8004e30 <pbuf_free>
  }
  if (queue != NULL) {
 8009fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8009fcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009fce:	f7fc fb57 	bl	8006680 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00e      	beq.n	8009ffa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <tcp_write+0x6ae>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <tcp_write+0x6ae>
 8009fec:	4b06      	ldr	r3, [pc, #24]	; (800a008 <tcp_write+0x6bc>)
 8009fee:	f240 3227 	movw	r2, #807	; 0x327
 8009ff2:	4906      	ldr	r1, [pc, #24]	; (800a00c <tcp_write+0x6c0>)
 8009ff4:	4806      	ldr	r0, [pc, #24]	; (800a010 <tcp_write+0x6c4>)
 8009ff6:	f004 fbcf 	bl	800e798 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	375c      	adds	r7, #92	; 0x5c
 800a002:	46bd      	mov	sp, r7
 800a004:	bd90      	pop	{r4, r7, pc}
 800a006:	bf00      	nop
 800a008:	08010ef8 	.word	0x08010ef8
 800a00c:	0801126c 	.word	0x0801126c
 800a010:	08010f4c 	.word	0x08010f4c

0800a014 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b08b      	sub	sp, #44	; 0x2c
 800a018:	af02      	add	r7, sp, #8
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <tcp_split_unsent_seg+0x2c>
 800a032:	4b95      	ldr	r3, [pc, #596]	; (800a288 <tcp_split_unsent_seg+0x274>)
 800a034:	f240 324b 	movw	r2, #843	; 0x34b
 800a038:	4994      	ldr	r1, [pc, #592]	; (800a28c <tcp_split_unsent_seg+0x278>)
 800a03a:	4895      	ldr	r0, [pc, #596]	; (800a290 <tcp_split_unsent_seg+0x27c>)
 800a03c:	f004 fbac 	bl	800e798 <iprintf>

  useg = pcb->unsent;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a044:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	e116      	b.n	800a280 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a052:	887b      	ldrh	r3, [r7, #2]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a058:	4b8b      	ldr	r3, [pc, #556]	; (800a288 <tcp_split_unsent_seg+0x274>)
 800a05a:	f240 3253 	movw	r2, #851	; 0x353
 800a05e:	498d      	ldr	r1, [pc, #564]	; (800a294 <tcp_split_unsent_seg+0x280>)
 800a060:	488b      	ldr	r0, [pc, #556]	; (800a290 <tcp_split_unsent_seg+0x27c>)
 800a062:	f004 fb99 	bl	800e798 <iprintf>
    return ERR_VAL;
 800a066:	f06f 0305 	mvn.w	r3, #5
 800a06a:	e109      	b.n	800a280 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	891b      	ldrh	r3, [r3, #8]
 800a070:	887a      	ldrh	r2, [r7, #2]
 800a072:	429a      	cmp	r2, r3
 800a074:	d301      	bcc.n	800a07a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	e102      	b.n	800a280 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a07e:	887a      	ldrh	r2, [r7, #2]
 800a080:	429a      	cmp	r2, r3
 800a082:	d906      	bls.n	800a092 <tcp_split_unsent_seg+0x7e>
 800a084:	4b80      	ldr	r3, [pc, #512]	; (800a288 <tcp_split_unsent_seg+0x274>)
 800a086:	f240 325b 	movw	r2, #859	; 0x35b
 800a08a:	4983      	ldr	r1, [pc, #524]	; (800a298 <tcp_split_unsent_seg+0x284>)
 800a08c:	4880      	ldr	r0, [pc, #512]	; (800a290 <tcp_split_unsent_seg+0x27c>)
 800a08e:	f004 fb83 	bl	800e798 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	891b      	ldrh	r3, [r3, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d106      	bne.n	800a0a8 <tcp_split_unsent_seg+0x94>
 800a09a:	4b7b      	ldr	r3, [pc, #492]	; (800a288 <tcp_split_unsent_seg+0x274>)
 800a09c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a0a0:	497e      	ldr	r1, [pc, #504]	; (800a29c <tcp_split_unsent_seg+0x288>)
 800a0a2:	487b      	ldr	r0, [pc, #492]	; (800a290 <tcp_split_unsent_seg+0x27c>)
 800a0a4:	f004 fb78 	bl	800e798 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	7a9b      	ldrb	r3, [r3, #10]
 800a0ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	891a      	ldrh	r2, [r3, #8]
 800a0be:	887b      	ldrh	r3, [r7, #2]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	89bb      	ldrh	r3, [r7, #12]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	2036      	movs	r0, #54	; 0x36
 800a0d6:	f7fa fbc7 	bl	8004868 <pbuf_alloc>
 800a0da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80b7 	beq.w	800a252 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	891a      	ldrh	r2, [r3, #8]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	891b      	ldrh	r3, [r3, #8]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	887b      	ldrh	r3, [r7, #2]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	6858      	ldr	r0, [r3, #4]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	18d1      	adds	r1, r2, r3
 800a104:	897b      	ldrh	r3, [r7, #10]
 800a106:	89ba      	ldrh	r2, [r7, #12]
 800a108:	f7fb f88c 	bl	8005224 <pbuf_copy_partial>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	89bb      	ldrh	r3, [r7, #12]
 800a112:	4293      	cmp	r3, r2
 800a114:	f040 809f 	bne.w	800a256 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	899b      	ldrh	r3, [r3, #12]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	4618      	mov	r0, r3
 800a122:	f7f9 fbd1 	bl	80038c8 <lwip_htons>
 800a126:	4603      	mov	r3, r0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a12e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a130:	2300      	movs	r3, #0
 800a132:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a134:	7efb      	ldrb	r3, [r7, #27]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a13e:	7efb      	ldrb	r3, [r7, #27]
 800a140:	f023 0308 	bic.w	r3, r3, #8
 800a144:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a146:	7ebb      	ldrb	r3, [r7, #26]
 800a148:	f043 0308 	orr.w	r3, r3, #8
 800a14c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a14e:	7efb      	ldrb	r3, [r7, #27]
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a158:	7efb      	ldrb	r3, [r7, #27]
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a160:	7ebb      	ldrb	r3, [r7, #26]
 800a162:	f043 0301 	orr.w	r3, r3, #1
 800a166:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f9 fbbf 	bl	80038f2 <lwip_htonl>
 800a174:	4602      	mov	r2, r0
 800a176:	887b      	ldrh	r3, [r7, #2]
 800a178:	18d1      	adds	r1, r2, r3
 800a17a:	7eba      	ldrb	r2, [r7, #26]
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	460b      	mov	r3, r1
 800a182:	6939      	ldr	r1, [r7, #16]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff fa4f 	bl	8009628 <tcp_create_segment>
 800a18a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d063      	beq.n	800a25a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	f7fa fed2 	bl	8004f40 <pbuf_clen>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	6858      	ldr	r0, [r3, #4]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	891a      	ldrh	r2, [r3, #8]
 800a1ba:	89bb      	ldrh	r3, [r7, #12]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f7fa fcaf 	bl	8004b24 <pbuf_realloc>
  useg->len -= remainder;
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	891a      	ldrh	r2, [r3, #8]
 800a1ca:	89bb      	ldrh	r3, [r7, #12]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	899b      	ldrh	r3, [r3, #12]
 800a1da:	b29c      	uxth	r4, r3
 800a1dc:	7efb      	ldrb	r3, [r7, #27]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f9 fb71 	bl	80038c8 <lwip_htons>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	4322      	orrs	r2, r4
 800a1f0:	b292      	uxth	r2, r2
 800a1f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fa fea1 	bl	8004f40 <pbuf_clen>
 800a1fe:	4603      	mov	r3, r0
 800a200:	461a      	mov	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a208:	4413      	add	r3, r2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fa fe92 	bl	8004f40 <pbuf_clen>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a226:	4413      	add	r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d103      	bne.n	800a24e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	e016      	b.n	800a280 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a252:	bf00      	nop
 800a254:	e002      	b.n	800a25c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a256:	bf00      	nop
 800a258:	e000      	b.n	800a25c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a25a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d006      	beq.n	800a270 <tcp_split_unsent_seg+0x25c>
 800a262:	4b09      	ldr	r3, [pc, #36]	; (800a288 <tcp_split_unsent_seg+0x274>)
 800a264:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a268:	490d      	ldr	r1, [pc, #52]	; (800a2a0 <tcp_split_unsent_seg+0x28c>)
 800a26a:	4809      	ldr	r0, [pc, #36]	; (800a290 <tcp_split_unsent_seg+0x27c>)
 800a26c:	f004 fa94 	bl	800e798 <iprintf>
  if (p != NULL) {
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f7fa fdda 	bl	8004e30 <pbuf_free>
  }

  return ERR_MEM;
 800a27c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a280:	4618      	mov	r0, r3
 800a282:	3724      	adds	r7, #36	; 0x24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd90      	pop	{r4, r7, pc}
 800a288:	08010ef8 	.word	0x08010ef8
 800a28c:	0801128c 	.word	0x0801128c
 800a290:	08010f4c 	.word	0x08010f4c
 800a294:	080112b0 	.word	0x080112b0
 800a298:	080112d4 	.word	0x080112d4
 800a29c:	080112e4 	.word	0x080112e4
 800a2a0:	080112f4 	.word	0x080112f4

0800a2a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <tcp_send_fin+0x1c>
 800a2b2:	4b21      	ldr	r3, [pc, #132]	; (800a338 <tcp_send_fin+0x94>)
 800a2b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a2b8:	4920      	ldr	r1, [pc, #128]	; (800a33c <tcp_send_fin+0x98>)
 800a2ba:	4821      	ldr	r0, [pc, #132]	; (800a340 <tcp_send_fin+0x9c>)
 800a2bc:	f004 fa6c 	bl	800e798 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d02e      	beq.n	800a326 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	e002      	b.n	800a2d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1f8      	bne.n	800a2d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	899b      	ldrh	r3, [r3, #12]
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7f9 faee 	bl	80038c8 <lwip_htons>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	f003 0307 	and.w	r3, r3, #7
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d116      	bne.n	800a326 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	899b      	ldrh	r3, [r3, #12]
 800a2fe:	b29c      	uxth	r4, r3
 800a300:	2001      	movs	r0, #1
 800a302:	f7f9 fae1 	bl	80038c8 <lwip_htons>
 800a306:	4603      	mov	r3, r0
 800a308:	461a      	mov	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	4322      	orrs	r2, r4
 800a310:	b292      	uxth	r2, r2
 800a312:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8b5b      	ldrh	r3, [r3, #26]
 800a318:	f043 0320 	orr.w	r3, r3, #32
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e004      	b.n	800a330 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a326:	2101      	movs	r1, #1
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f80b 	bl	800a344 <tcp_enqueue_flags>
 800a32e:	4603      	mov	r3, r0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	bd90      	pop	{r4, r7, pc}
 800a338:	08010ef8 	.word	0x08010ef8
 800a33c:	08011300 	.word	0x08011300
 800a340:	08010f4c 	.word	0x08010f4c

0800a344 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08a      	sub	sp, #40	; 0x28
 800a348:	af02      	add	r7, sp, #8
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <tcp_enqueue_flags+0x2c>
 800a362:	4b67      	ldr	r3, [pc, #412]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a364:	f240 4211 	movw	r2, #1041	; 0x411
 800a368:	4966      	ldr	r1, [pc, #408]	; (800a504 <tcp_enqueue_flags+0x1c0>)
 800a36a:	4867      	ldr	r0, [pc, #412]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a36c:	f004 fa14 	bl	800e798 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <tcp_enqueue_flags+0x40>
 800a376:	4b62      	ldr	r3, [pc, #392]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a378:	f240 4213 	movw	r2, #1043	; 0x413
 800a37c:	4963      	ldr	r1, [pc, #396]	; (800a50c <tcp_enqueue_flags+0x1c8>)
 800a37e:	4862      	ldr	r0, [pc, #392]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a380:	f004 fa0a 	bl	800e798 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a38e:	2301      	movs	r3, #1
 800a390:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a392:	7ffb      	ldrb	r3, [r7, #31]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	b2db      	uxtb	r3, r3
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	2036      	movs	r0, #54	; 0x36
 800a3aa:	f7fa fa5d 	bl	8004868 <pbuf_alloc>
 800a3ae:	6138      	str	r0, [r7, #16]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	8b5b      	ldrh	r3, [r3, #26]
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	e095      	b.n	800a4f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	895a      	ldrh	r2, [r3, #10]
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d206      	bcs.n	800a3e4 <tcp_enqueue_flags+0xa0>
 800a3d6:	4b4a      	ldr	r3, [pc, #296]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a3d8:	f240 4239 	movw	r2, #1081	; 0x439
 800a3dc:	494c      	ldr	r1, [pc, #304]	; (800a510 <tcp_enqueue_flags+0x1cc>)
 800a3de:	484a      	ldr	r0, [pc, #296]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a3e0:	f004 f9da 	bl	800e798 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	7ffb      	ldrb	r3, [r7, #31]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	6939      	ldr	r1, [r7, #16]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff f918 	bl	8009628 <tcp_create_segment>
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d109      	bne.n	800a414 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8b5b      	ldrh	r3, [r3, #26]
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a40e:	f04f 33ff 	mov.w	r3, #4294967295
 800a412:	e070      	b.n	800a4f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <tcp_enqueue_flags+0xea>
 800a420:	4b37      	ldr	r3, [pc, #220]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a422:	f240 4242 	movw	r2, #1090	; 0x442
 800a426:	493b      	ldr	r1, [pc, #236]	; (800a514 <tcp_enqueue_flags+0x1d0>)
 800a428:	4837      	ldr	r0, [pc, #220]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a42a:	f004 f9b5 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	891b      	ldrh	r3, [r3, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <tcp_enqueue_flags+0x100>
 800a436:	4b32      	ldr	r3, [pc, #200]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a438:	f240 4243 	movw	r2, #1091	; 0x443
 800a43c:	4936      	ldr	r1, [pc, #216]	; (800a518 <tcp_enqueue_flags+0x1d4>)
 800a43e:	4832      	ldr	r0, [pc, #200]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a440:	f004 f9aa 	bl	800e798 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d103      	bne.n	800a454 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	66da      	str	r2, [r3, #108]	; 0x6c
 800a452:	e00d      	b.n	800a470 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e002      	b.n	800a462 <tcp_enqueue_flags+0x11e>
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1f8      	bne.n	800a45c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d104      	bne.n	800a48c <tcp_enqueue_flags+0x148>
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	8b5b      	ldrh	r3, [r3, #26]
 800a4a4:	f043 0320 	orr.w	r3, r3, #32
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fa fd44 	bl	8004f40 <pbuf_clen>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a4c2:	4413      	add	r3, r2
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00e      	beq.n	800a4f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <tcp_enqueue_flags+0x1b0>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <tcp_enqueue_flags+0x1b0>
 800a4e6:	4b06      	ldr	r3, [pc, #24]	; (800a500 <tcp_enqueue_flags+0x1bc>)
 800a4e8:	f240 4265 	movw	r2, #1125	; 0x465
 800a4ec:	490b      	ldr	r1, [pc, #44]	; (800a51c <tcp_enqueue_flags+0x1d8>)
 800a4ee:	4806      	ldr	r0, [pc, #24]	; (800a508 <tcp_enqueue_flags+0x1c4>)
 800a4f0:	f004 f952 	bl	800e798 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08010ef8 	.word	0x08010ef8
 800a504:	0801131c 	.word	0x0801131c
 800a508:	08010f4c 	.word	0x08010f4c
 800a50c:	08011374 	.word	0x08011374
 800a510:	08011394 	.word	0x08011394
 800a514:	080113d0 	.word	0x080113d0
 800a518:	080113e8 	.word	0x080113e8
 800a51c:	08011414 	.word	0x08011414

0800a520 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a520:	b5b0      	push	{r4, r5, r7, lr}
 800a522:	b08a      	sub	sp, #40	; 0x28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <tcp_output+0x1c>
 800a52e:	4b9e      	ldr	r3, [pc, #632]	; (800a7a8 <tcp_output+0x288>)
 800a530:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a534:	499d      	ldr	r1, [pc, #628]	; (800a7ac <tcp_output+0x28c>)
 800a536:	489e      	ldr	r0, [pc, #632]	; (800a7b0 <tcp_output+0x290>)
 800a538:	f004 f92e 	bl	800e798 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7d1b      	ldrb	r3, [r3, #20]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d106      	bne.n	800a552 <tcp_output+0x32>
 800a544:	4b98      	ldr	r3, [pc, #608]	; (800a7a8 <tcp_output+0x288>)
 800a546:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a54a:	499a      	ldr	r1, [pc, #616]	; (800a7b4 <tcp_output+0x294>)
 800a54c:	4898      	ldr	r0, [pc, #608]	; (800a7b0 <tcp_output+0x290>)
 800a54e:	f004 f923 	bl	800e798 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a552:	4b99      	ldr	r3, [pc, #612]	; (800a7b8 <tcp_output+0x298>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d101      	bne.n	800a560 <tcp_output+0x40>
    return ERR_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e1ce      	b.n	800a8fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a56c:	4293      	cmp	r3, r2
 800a56e:	bf28      	it	cs
 800a570:	4613      	movcs	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8b5b      	ldrh	r3, [r3, #26]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 81aa 	beq.w	800a8e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fdcb 	bl	800b12c <tcp_send_empty_ack>
 800a596:	4603      	mov	r3, r0
 800a598:	e1b1      	b.n	800a8fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff f824 	bl	80095f0 <tcp_route>
 800a5a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <tcp_output+0x96>
    return ERR_RTE;
 800a5b0:	f06f 0303 	mvn.w	r3, #3
 800a5b4:	e1a3      	b.n	800a8fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <tcp_output+0xa4>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d111      	bne.n	800a5e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <tcp_output+0xb0>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	e000      	b.n	800a5d2 <tcp_output+0xb2>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <tcp_output+0xc0>
      return ERR_RTE;
 800a5da:	f06f 0303 	mvn.w	r3, #3
 800a5de:	e18e      	b.n	800a8fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f9 f97f 	bl	80038f2 <lwip_htonl>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fe:	8912      	ldrh	r2, [r2, #8]
 800a600:	4413      	add	r3, r2
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	429a      	cmp	r2, r3
 800a606:	d227      	bcs.n	800a658 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a60e:	461a      	mov	r2, r3
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	4293      	cmp	r3, r2
 800a614:	d114      	bne.n	800a640 <tcp_output+0x120>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d110      	bne.n	800a640 <tcp_output+0x120>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	8b5b      	ldrh	r3, [r3, #26]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 814d 	beq.w	800a8e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fd6c 	bl	800b12c <tcp_send_empty_ack>
 800a654:	4603      	mov	r3, r0
 800a656:	e152      	b.n	800a8fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a664:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 811c 	beq.w	800a8a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a66e:	e002      	b.n	800a676 <tcp_output+0x156>
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	623b      	str	r3, [r7, #32]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1f8      	bne.n	800a670 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a67e:	e112      	b.n	800a8a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	899b      	ldrh	r3, [r3, #12]
 800a686:	b29b      	uxth	r3, r3
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f9 f91d 	bl	80038c8 <lwip_htons>
 800a68e:	4603      	mov	r3, r0
 800a690:	b2db      	uxtb	r3, r3
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	d006      	beq.n	800a6a8 <tcp_output+0x188>
 800a69a:	4b43      	ldr	r3, [pc, #268]	; (800a7a8 <tcp_output+0x288>)
 800a69c:	f240 5236 	movw	r2, #1334	; 0x536
 800a6a0:	4946      	ldr	r1, [pc, #280]	; (800a7bc <tcp_output+0x29c>)
 800a6a2:	4843      	ldr	r0, [pc, #268]	; (800a7b0 <tcp_output+0x290>)
 800a6a4:	f004 f878 	bl	800e798 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01f      	beq.n	800a6f0 <tcp_output+0x1d0>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	8b5b      	ldrh	r3, [r3, #26]
 800a6b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d119      	bne.n	800a6f0 <tcp_output+0x1d0>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <tcp_output+0x1bc>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d110      	bne.n	800a6f0 <tcp_output+0x1d0>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d2:	891a      	ldrh	r2, [r3, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d209      	bcs.n	800a6f0 <tcp_output+0x1d0>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <tcp_output+0x1d0>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6ec:	2b08      	cmp	r3, #8
 800a6ee:	d901      	bls.n	800a6f4 <tcp_output+0x1d4>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <tcp_output+0x1d6>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8b5b      	ldrh	r3, [r3, #26]
 800a6fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80e4 	beq.w	800a8d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	7d1b      	ldrb	r3, [r3, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d00d      	beq.n	800a72c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	899b      	ldrh	r3, [r3, #12]
 800a716:	b29c      	uxth	r4, r3
 800a718:	2010      	movs	r0, #16
 800a71a:	f7f9 f8d5 	bl	80038c8 <lwip_htons>
 800a71e:	4603      	mov	r3, r0
 800a720:	461a      	mov	r2, r3
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	4322      	orrs	r2, r4
 800a728:	b292      	uxth	r2, r2
 800a72a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a732:	f000 f909 	bl	800a948 <tcp_output_segment>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d009      	beq.n	800a756 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	8b5b      	ldrh	r3, [r3, #26]
 800a746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	835a      	strh	r2, [r3, #26]
      return err;
 800a750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a754:	e0d3      	b.n	800a8fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	7d1b      	ldrb	r3, [r3, #20]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d006      	beq.n	800a774 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	8b5b      	ldrh	r3, [r3, #26]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f9 f8b9 	bl	80038f2 <lwip_htonl>
 800a780:	4604      	mov	r4, r0
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	891b      	ldrh	r3, [r3, #8]
 800a786:	461d      	mov	r5, r3
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	899b      	ldrh	r3, [r3, #12]
 800a78e:	b29b      	uxth	r3, r3
 800a790:	4618      	mov	r0, r3
 800a792:	f7f9 f899 	bl	80038c8 <lwip_htons>
 800a796:	4603      	mov	r3, r0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <tcp_output+0x2a0>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e00d      	b.n	800a7c2 <tcp_output+0x2a2>
 800a7a6:	bf00      	nop
 800a7a8:	08010ef8 	.word	0x08010ef8
 800a7ac:	0801143c 	.word	0x0801143c
 800a7b0:	08010f4c 	.word	0x08010f4c
 800a7b4:	08011454 	.word	0x08011454
 800a7b8:	200068a4 	.word	0x200068a4
 800a7bc:	0801147c 	.word	0x0801147c
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	442b      	add	r3, r5
 800a7c4:	4423      	add	r3, r4
 800a7c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da02      	bge.n	800a7da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	891b      	ldrh	r3, [r3, #8]
 800a7de:	461c      	mov	r4, r3
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	899b      	ldrh	r3, [r3, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f9 f86d 	bl	80038c8 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <tcp_output+0x2de>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e000      	b.n	800a800 <tcp_output+0x2e0>
 800a7fe:	2300      	movs	r3, #0
 800a800:	4423      	add	r3, r4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d049      	beq.n	800a89a <tcp_output+0x37a>
      seg->next = NULL;
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <tcp_output+0x300>
        pcb->unacked = seg;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a818:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	623b      	str	r3, [r7, #32]
 800a81e:	e03f      	b.n	800a8a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	4618      	mov	r0, r3
 800a828:	f7f9 f863 	bl	80038f2 <lwip_htonl>
 800a82c:	4604      	mov	r4, r0
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	4618      	mov	r0, r3
 800a836:	f7f9 f85c 	bl	80038f2 <lwip_htonl>
 800a83a:	4603      	mov	r3, r0
 800a83c:	1ae3      	subs	r3, r4, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da24      	bge.n	800a88c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3370      	adds	r3, #112	; 0x70
 800a846:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a848:	e002      	b.n	800a850 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d011      	beq.n	800a87c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4618      	mov	r0, r3
 800a862:	f7f9 f846 	bl	80038f2 <lwip_htonl>
 800a866:	4604      	mov	r4, r0
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f9 f83f 	bl	80038f2 <lwip_htonl>
 800a874:	4603      	mov	r3, r0
 800a876:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dbe6      	blt.n	800a84a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e009      	b.n	800a8a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a890:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	623b      	str	r3, [r7, #32]
 800a898:	e002      	b.n	800a8a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a89a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a89c:	f7fb ff05 	bl	80066aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d012      	beq.n	800a8d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7f9 f81d 	bl	80038f2 <lwip_htonl>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c2:	8912      	ldrh	r2, [r2, #8]
 800a8c4:	4413      	add	r3, r2
  while (seg != NULL &&
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	f4bf aed9 	bcs.w	800a680 <tcp_output+0x160>
 800a8ce:	e000      	b.n	800a8d2 <tcp_output+0x3b2>
      break;
 800a8d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d108      	bne.n	800a8ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a8e2:	e004      	b.n	800a8ee <tcp_output+0x3ce>
    goto output_done;
 800a8e4:	bf00      	nop
 800a8e6:	e002      	b.n	800a8ee <tcp_output+0x3ce>
    goto output_done;
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a8ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8b5b      	ldrh	r3, [r3, #26]
 800a8f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3728      	adds	r7, #40	; 0x28
 800a902:	46bd      	mov	sp, r7
 800a904:	bdb0      	pop	{r4, r5, r7, pc}
 800a906:	bf00      	nop

0800a908 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <tcp_output_segment_busy+0x1c>
 800a916:	4b09      	ldr	r3, [pc, #36]	; (800a93c <tcp_output_segment_busy+0x34>)
 800a918:	f240 529a 	movw	r2, #1434	; 0x59a
 800a91c:	4908      	ldr	r1, [pc, #32]	; (800a940 <tcp_output_segment_busy+0x38>)
 800a91e:	4809      	ldr	r0, [pc, #36]	; (800a944 <tcp_output_segment_busy+0x3c>)
 800a920:	f003 ff3a 	bl	800e798 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	7b9b      	ldrb	r3, [r3, #14]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d001      	beq.n	800a932 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	08010ef8 	.word	0x08010ef8
 800a940:	08011494 	.word	0x08011494
 800a944:	08010f4c 	.word	0x08010f4c

0800a948 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a948:	b5b0      	push	{r4, r5, r7, lr}
 800a94a:	b08c      	sub	sp, #48	; 0x30
 800a94c:	af04      	add	r7, sp, #16
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <tcp_output_segment+0x20>
 800a95a:	4b63      	ldr	r3, [pc, #396]	; (800aae8 <tcp_output_segment+0x1a0>)
 800a95c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a960:	4962      	ldr	r1, [pc, #392]	; (800aaec <tcp_output_segment+0x1a4>)
 800a962:	4863      	ldr	r0, [pc, #396]	; (800aaf0 <tcp_output_segment+0x1a8>)
 800a964:	f003 ff18 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <tcp_output_segment+0x34>
 800a96e:	4b5e      	ldr	r3, [pc, #376]	; (800aae8 <tcp_output_segment+0x1a0>)
 800a970:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a974:	495f      	ldr	r1, [pc, #380]	; (800aaf4 <tcp_output_segment+0x1ac>)
 800a976:	485e      	ldr	r0, [pc, #376]	; (800aaf0 <tcp_output_segment+0x1a8>)
 800a978:	f003 ff0e 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <tcp_output_segment+0x48>
 800a982:	4b59      	ldr	r3, [pc, #356]	; (800aae8 <tcp_output_segment+0x1a0>)
 800a984:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a988:	495b      	ldr	r1, [pc, #364]	; (800aaf8 <tcp_output_segment+0x1b0>)
 800a98a:	4859      	ldr	r0, [pc, #356]	; (800aaf0 <tcp_output_segment+0x1a8>)
 800a98c:	f003 ff04 	bl	800e798 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff ffb9 	bl	800a908 <tcp_output_segment_busy>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	e09f      	b.n	800aae0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68dc      	ldr	r4, [r3, #12]
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f7f8 ffa2 	bl	80038f2 <lwip_htonl>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68dc      	ldr	r4, [r3, #12]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7f8 ff84 	bl	80038c8 <lwip_htons>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a9cc:	441a      	add	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	3314      	adds	r3, #20
 800a9d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	7a9b      	ldrb	r3, [r3, #10]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d015      	beq.n	800aa12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a9f2:	f7fc fa37 	bl	8006e64 <tcp_eff_send_mss_netif>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a9fa:	8b7b      	ldrh	r3, [r7, #26]
 800a9fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f8 ff76 	bl	80038f2 <lwip_htonl>
 800aa06:	4602      	mov	r2, r0
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da02      	bge.n	800aa22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800aa2a:	4b34      	ldr	r3, [pc, #208]	; (800aafc <tcp_output_segment+0x1b4>)
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f8 ff5a 	bl	80038f2 <lwip_htonl>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	8959      	ldrh	r1, [r3, #10]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	8b3a      	ldrh	r2, [r7, #24]
 800aa5e:	1a8a      	subs	r2, r1, r2
 800aa60:	b292      	uxth	r2, r2
 800aa62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	8919      	ldrh	r1, [r3, #8]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	8b3a      	ldrh	r2, [r7, #24]
 800aa70:	1a8a      	subs	r2, r1, r2
 800aa72:	b292      	uxth	r2, r2
 800aa74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	68d2      	ldr	r2, [r2, #12]
 800aa7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	741a      	strb	r2, [r3, #16]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	f103 0214 	add.w	r2, r3, #20
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	7a9b      	ldrb	r3, [r3, #10]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	4413      	add	r3, r2
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d006      	beq.n	800aab4 <tcp_output_segment+0x16c>
 800aaa6:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <tcp_output_segment+0x1a0>)
 800aaa8:	f240 621c 	movw	r2, #1564	; 0x61c
 800aaac:	4914      	ldr	r1, [pc, #80]	; (800ab00 <tcp_output_segment+0x1b8>)
 800aaae:	4810      	ldr	r0, [pc, #64]	; (800aaf0 <tcp_output_segment+0x1a8>)
 800aab0:	f003 fe72 	bl	800e798 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6858      	ldr	r0, [r3, #4]
 800aab8:	68b9      	ldr	r1, [r7, #8]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	1d1c      	adds	r4, r3, #4
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	7add      	ldrb	r5, [r3, #11]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	7a9b      	ldrb	r3, [r3, #10]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	9202      	str	r2, [sp, #8]
 800aaca:	2206      	movs	r2, #6
 800aacc:	9201      	str	r2, [sp, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	462b      	mov	r3, r5
 800aad2:	4622      	mov	r2, r4
 800aad4:	f002 fdf0 	bl	800d6b8 <ip4_output_if>
 800aad8:	4603      	mov	r3, r0
 800aada:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800aadc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3720      	adds	r7, #32
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bdb0      	pop	{r4, r5, r7, pc}
 800aae8:	08010ef8 	.word	0x08010ef8
 800aaec:	080114bc 	.word	0x080114bc
 800aaf0:	08010f4c 	.word	0x08010f4c
 800aaf4:	080114dc 	.word	0x080114dc
 800aaf8:	080114fc 	.word	0x080114fc
 800aafc:	20006894 	.word	0x20006894
 800ab00:	08011520 	.word	0x08011520

0800ab04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <tcp_rexmit_rto_prepare+0x1c>
 800ab12:	4b31      	ldr	r3, [pc, #196]	; (800abd8 <tcp_rexmit_rto_prepare+0xd4>)
 800ab14:	f240 6263 	movw	r2, #1635	; 0x663
 800ab18:	4930      	ldr	r1, [pc, #192]	; (800abdc <tcp_rexmit_rto_prepare+0xd8>)
 800ab1a:	4831      	ldr	r0, [pc, #196]	; (800abe0 <tcp_rexmit_rto_prepare+0xdc>)
 800ab1c:	f003 fe3c 	bl	800e798 <iprintf>

  if (pcb->unacked == NULL) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ab28:	f06f 0305 	mvn.w	r3, #5
 800ab2c:	e050      	b.n	800abd0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e00b      	b.n	800ab4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7ff fee6 	bl	800a908 <tcp_output_segment_busy>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ab42:	f06f 0305 	mvn.w	r3, #5
 800ab46:	e043      	b.n	800abd0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1ef      	bne.n	800ab36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f7ff fed6 	bl	800a908 <tcp_output_segment_busy>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d002      	beq.n	800ab68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ab62:	f06f 0305 	mvn.w	r3, #5
 800ab66:	e033      	b.n	800abd0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8b5b      	ldrh	r3, [r3, #26]
 800ab82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f8 fead 	bl	80038f2 <lwip_htonl>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	891b      	ldrh	r3, [r3, #8]
 800ab9e:	461d      	mov	r5, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	899b      	ldrh	r3, [r3, #12]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f8 fe8d 	bl	80038c8 <lwip_htons>
 800abae:	4603      	mov	r3, r0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <tcp_rexmit_rto_prepare+0xba>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <tcp_rexmit_rto_prepare+0xbc>
 800abbe:	2300      	movs	r3, #0
 800abc0:	442b      	add	r3, r5
 800abc2:	18e2      	adds	r2, r4, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bdb0      	pop	{r4, r5, r7, pc}
 800abd8:	08010ef8 	.word	0x08010ef8
 800abdc:	08011534 	.word	0x08011534
 800abe0:	08010f4c 	.word	0x08010f4c

0800abe4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <tcp_rexmit_rto_commit+0x1c>
 800abf2:	4b0d      	ldr	r3, [pc, #52]	; (800ac28 <tcp_rexmit_rto_commit+0x44>)
 800abf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800abf8:	490c      	ldr	r1, [pc, #48]	; (800ac2c <tcp_rexmit_rto_commit+0x48>)
 800abfa:	480d      	ldr	r0, [pc, #52]	; (800ac30 <tcp_rexmit_rto_commit+0x4c>)
 800abfc:	f003 fdcc 	bl	800e798 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac06:	2bff      	cmp	r3, #255	; 0xff
 800ac08:	d007      	beq.n	800ac1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac10:	3301      	adds	r3, #1
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fc80 	bl	800a520 <tcp_output>
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	08010ef8 	.word	0x08010ef8
 800ac2c:	08011558 	.word	0x08011558
 800ac30:	08010f4c 	.word	0x08010f4c

0800ac34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <tcp_rexmit_rto+0x1c>
 800ac42:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <tcp_rexmit_rto+0x38>)
 800ac44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ac48:	4909      	ldr	r1, [pc, #36]	; (800ac70 <tcp_rexmit_rto+0x3c>)
 800ac4a:	480a      	ldr	r0, [pc, #40]	; (800ac74 <tcp_rexmit_rto+0x40>)
 800ac4c:	f003 fda4 	bl	800e798 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ff57 	bl	800ab04 <tcp_rexmit_rto_prepare>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ffc1 	bl	800abe4 <tcp_rexmit_rto_commit>
  }
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	08010ef8 	.word	0x08010ef8
 800ac70:	0801157c 	.word	0x0801157c
 800ac74:	08010f4c 	.word	0x08010f4c

0800ac78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <tcp_rexmit+0x1c>
 800ac86:	4b2f      	ldr	r3, [pc, #188]	; (800ad44 <tcp_rexmit+0xcc>)
 800ac88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ac8c:	492e      	ldr	r1, [pc, #184]	; (800ad48 <tcp_rexmit+0xd0>)
 800ac8e:	482f      	ldr	r0, [pc, #188]	; (800ad4c <tcp_rexmit+0xd4>)
 800ac90:	f003 fd82 	bl	800e798 <iprintf>

  if (pcb->unacked == NULL) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ac9c:	f06f 0305 	mvn.w	r3, #5
 800aca0:	e04c      	b.n	800ad3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800aca8:	68b8      	ldr	r0, [r7, #8]
 800acaa:	f7ff fe2d 	bl	800a908 <tcp_output_segment_busy>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800acb4:	f06f 0305 	mvn.w	r3, #5
 800acb8:	e040      	b.n	800ad3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	336c      	adds	r3, #108	; 0x6c
 800acc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800acc8:	e002      	b.n	800acd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d011      	beq.n	800acfc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7f8 fe06 	bl	80038f2 <lwip_htonl>
 800ace6:	4604      	mov	r4, r0
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f8 fdff 	bl	80038f2 <lwip_htonl>
 800acf4:	4603      	mov	r3, r0
 800acf6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dbe6      	blt.n	800acca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d103      	bne.n	800ad1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad20:	2bff      	cmp	r3, #255	; 0xff
 800ad22:	d007      	beq.n	800ad34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd90      	pop	{r4, r7, pc}
 800ad44:	08010ef8 	.word	0x08010ef8
 800ad48:	08011598 	.word	0x08011598
 800ad4c:	08010f4c 	.word	0x08010f4c

0800ad50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <tcp_rexmit_fast+0x1c>
 800ad5e:	4b2a      	ldr	r3, [pc, #168]	; (800ae08 <tcp_rexmit_fast+0xb8>)
 800ad60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ad64:	4929      	ldr	r1, [pc, #164]	; (800ae0c <tcp_rexmit_fast+0xbc>)
 800ad66:	482a      	ldr	r0, [pc, #168]	; (800ae10 <tcp_rexmit_fast+0xc0>)
 800ad68:	f003 fd16 	bl	800e798 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d044      	beq.n	800adfe <tcp_rexmit_fast+0xae>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	8b5b      	ldrh	r3, [r3, #26]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d13e      	bne.n	800adfe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7ff ff79 	bl	800ac78 <tcp_rexmit>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d138      	bne.n	800adfe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	bf28      	it	cs
 800ad9c:	4613      	movcs	r3, r2
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	0fda      	lsrs	r2, r3, #31
 800ada2:	4413      	add	r3, r2
 800ada4:	105b      	asrs	r3, r3, #1
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d206      	bcs.n	800adce <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800add8:	4619      	mov	r1, r3
 800adda:	0049      	lsls	r1, r1, #1
 800addc:	440b      	add	r3, r1
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4413      	add	r3, r2
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8b5b      	ldrh	r3, [r3, #26]
 800adee:	f043 0304 	orr.w	r3, r3, #4
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	08010ef8 	.word	0x08010ef8
 800ae0c:	080115b0 	.word	0x080115b0
 800ae10:	08010f4c 	.word	0x08010f4c

0800ae14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	607b      	str	r3, [r7, #4]
 800ae1e:	460b      	mov	r3, r1
 800ae20:	817b      	strh	r3, [r7, #10]
 800ae22:	4613      	mov	r3, r2
 800ae24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae26:	897a      	ldrh	r2, [r7, #10]
 800ae28:	893b      	ldrh	r3, [r7, #8]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	3314      	adds	r3, #20
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae36:	4619      	mov	r1, r3
 800ae38:	2022      	movs	r0, #34	; 0x22
 800ae3a:	f7f9 fd15 	bl	8004868 <pbuf_alloc>
 800ae3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d04d      	beq.n	800aee2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae46:	897b      	ldrh	r3, [r7, #10]
 800ae48:	3313      	adds	r3, #19
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	8952      	ldrh	r2, [r2, #10]
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	db06      	blt.n	800ae60 <tcp_output_alloc_header_common+0x4c>
 800ae52:	4b26      	ldr	r3, [pc, #152]	; (800aeec <tcp_output_alloc_header_common+0xd8>)
 800ae54:	f240 7223 	movw	r2, #1827	; 0x723
 800ae58:	4925      	ldr	r1, [pc, #148]	; (800aef0 <tcp_output_alloc_header_common+0xdc>)
 800ae5a:	4826      	ldr	r0, [pc, #152]	; (800aef4 <tcp_output_alloc_header_common+0xe0>)
 800ae5c:	f003 fc9c 	bl	800e798 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ae66:	8c3b      	ldrh	r3, [r7, #32]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f8 fd2d 	bl	80038c8 <lwip_htons>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ae76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7f8 fd25 	bl	80038c8 <lwip_htons>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	461a      	mov	r2, r3
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7f8 fd30 	bl	80038f2 <lwip_htonl>
 800ae92:	4602      	mov	r2, r0
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae98:	897b      	ldrh	r3, [r7, #10]
 800ae9a:	089b      	lsrs	r3, r3, #2
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3305      	adds	r3, #5
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	031b      	lsls	r3, r3, #12
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	4313      	orrs	r3, r2
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f8 fd09 	bl	80038c8 <lwip_htons>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	461a      	mov	r2, r3
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aebe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7f8 fd01 	bl	80038c8 <lwip_htons>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2200      	movs	r2, #0
 800aed2:	741a      	strb	r2, [r3, #16]
 800aed4:	2200      	movs	r2, #0
 800aed6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	2200      	movs	r2, #0
 800aedc:	749a      	strb	r2, [r3, #18]
 800aede:	2200      	movs	r2, #0
 800aee0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800aee2:	697b      	ldr	r3, [r7, #20]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	08010ef8 	.word	0x08010ef8
 800aef0:	080115d0 	.word	0x080115d0
 800aef4:	08010f4c 	.word	0x08010f4c

0800aef8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800aef8:	b5b0      	push	{r4, r5, r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af04      	add	r7, sp, #16
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	607b      	str	r3, [r7, #4]
 800af02:	460b      	mov	r3, r1
 800af04:	817b      	strh	r3, [r7, #10]
 800af06:	4613      	mov	r3, r2
 800af08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <tcp_output_alloc_header+0x26>
 800af10:	4b15      	ldr	r3, [pc, #84]	; (800af68 <tcp_output_alloc_header+0x70>)
 800af12:	f240 7242 	movw	r2, #1858	; 0x742
 800af16:	4915      	ldr	r1, [pc, #84]	; (800af6c <tcp_output_alloc_header+0x74>)
 800af18:	4815      	ldr	r0, [pc, #84]	; (800af70 <tcp_output_alloc_header+0x78>)
 800af1a:	f003 fc3d 	bl	800e798 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	8adb      	ldrh	r3, [r3, #22]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	8b12      	ldrh	r2, [r2, #24]
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800af2e:	893d      	ldrh	r5, [r7, #8]
 800af30:	897c      	ldrh	r4, [r7, #10]
 800af32:	9103      	str	r1, [sp, #12]
 800af34:	2110      	movs	r1, #16
 800af36:	9102      	str	r1, [sp, #8]
 800af38:	9201      	str	r2, [sp, #4]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	462a      	mov	r2, r5
 800af40:	4621      	mov	r1, r4
 800af42:	f7ff ff67 	bl	800ae14 <tcp_output_alloc_header_common>
 800af46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d006      	beq.n	800af5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800af56:	441a      	add	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800af5c:	697b      	ldr	r3, [r7, #20]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bdb0      	pop	{r4, r5, r7, pc}
 800af66:	bf00      	nop
 800af68:	08010ef8 	.word	0x08010ef8
 800af6c:	08011600 	.word	0x08011600
 800af70:	08010f4c 	.word	0x08010f4c

0800af74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4611      	mov	r1, r2
 800af80:	461a      	mov	r2, r3
 800af82:	460b      	mov	r3, r1
 800af84:	71fb      	strb	r3, [r7, #7]
 800af86:	4613      	mov	r3, r2
 800af88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d106      	bne.n	800afa2 <tcp_output_fill_options+0x2e>
 800af94:	4b13      	ldr	r3, [pc, #76]	; (800afe4 <tcp_output_fill_options+0x70>)
 800af96:	f240 7256 	movw	r2, #1878	; 0x756
 800af9a:	4913      	ldr	r1, [pc, #76]	; (800afe8 <tcp_output_fill_options+0x74>)
 800af9c:	4813      	ldr	r0, [pc, #76]	; (800afec <tcp_output_fill_options+0x78>)
 800af9e:	f003 fbfb 	bl	800e798 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	3314      	adds	r3, #20
 800afac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	f103 0214 	add.w	r2, r3, #20
 800afb4:	8bfb      	ldrh	r3, [r7, #30]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4619      	mov	r1, r3
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	f003 0304 	and.w	r3, r3, #4
 800afc2:	440b      	add	r3, r1
 800afc4:	4413      	add	r3, r2
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d006      	beq.n	800afda <tcp_output_fill_options+0x66>
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <tcp_output_fill_options+0x70>)
 800afce:	f240 7275 	movw	r2, #1909	; 0x775
 800afd2:	4907      	ldr	r1, [pc, #28]	; (800aff0 <tcp_output_fill_options+0x7c>)
 800afd4:	4805      	ldr	r0, [pc, #20]	; (800afec <tcp_output_fill_options+0x78>)
 800afd6:	f003 fbdf 	bl	800e798 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800afda:	bf00      	nop
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	08010ef8 	.word	0x08010ef8
 800afe8:	08011628 	.word	0x08011628
 800afec:	08010f4c 	.word	0x08010f4c
 800aff0:	08011520 	.word	0x08011520

0800aff4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af04      	add	r7, sp, #16
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d106      	bne.n	800b016 <tcp_output_control_segment+0x22>
 800b008:	4b1c      	ldr	r3, [pc, #112]	; (800b07c <tcp_output_control_segment+0x88>)
 800b00a:	f240 7287 	movw	r2, #1927	; 0x787
 800b00e:	491c      	ldr	r1, [pc, #112]	; (800b080 <tcp_output_control_segment+0x8c>)
 800b010:	481c      	ldr	r0, [pc, #112]	; (800b084 <tcp_output_control_segment+0x90>)
 800b012:	f003 fbc1 	bl	800e798 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7fe fae8 	bl	80095f0 <tcp_route>
 800b020:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b028:	23fc      	movs	r3, #252	; 0xfc
 800b02a:	75fb      	strb	r3, [r7, #23]
 800b02c:	e01c      	b.n	800b068 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d006      	beq.n	800b042 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	7adb      	ldrb	r3, [r3, #11]
 800b038:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	7a9b      	ldrb	r3, [r3, #10]
 800b03e:	757b      	strb	r3, [r7, #21]
 800b040:	e003      	b.n	800b04a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b042:	23ff      	movs	r3, #255	; 0xff
 800b044:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b04a:	7dba      	ldrb	r2, [r7, #22]
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	2306      	movs	r3, #6
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	7d7b      	ldrb	r3, [r7, #21]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4613      	mov	r3, r2
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	68b8      	ldr	r0, [r7, #8]
 800b060:	f002 fb2a 	bl	800d6b8 <ip4_output_if>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f7f9 fee1 	bl	8004e30 <pbuf_free>
  return err;
 800b06e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	08010ef8 	.word	0x08010ef8
 800b080:	08011650 	.word	0x08011650
 800b084:	08010f4c 	.word	0x08010f4c

0800b088 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b08b      	sub	sp, #44	; 0x2c
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <tcp_rst+0x22>
 800b09c:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <tcp_rst+0x94>)
 800b09e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b0a2:	491f      	ldr	r1, [pc, #124]	; (800b120 <tcp_rst+0x98>)
 800b0a4:	481f      	ldr	r0, [pc, #124]	; (800b124 <tcp_rst+0x9c>)
 800b0a6:	f003 fb77 	bl	800e798 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <tcp_rst+0x36>
 800b0b0:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <tcp_rst+0x94>)
 800b0b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b0b6:	491c      	ldr	r1, [pc, #112]	; (800b128 <tcp_rst+0xa0>)
 800b0b8:	481a      	ldr	r0, [pc, #104]	; (800b124 <tcp_rst+0x9c>)
 800b0ba:	f003 fb6d 	bl	800e798 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b0c2:	f246 0308 	movw	r3, #24584	; 0x6008
 800b0c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	b29c      	uxth	r4, r3
 800b0cc:	68b8      	ldr	r0, [r7, #8]
 800b0ce:	f7f8 fc10 	bl	80038f2 <lwip_htonl>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	8abb      	ldrh	r3, [r7, #20]
 800b0d6:	9303      	str	r3, [sp, #12]
 800b0d8:	2314      	movs	r3, #20
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7ff fe92 	bl	800ae14 <tcp_output_alloc_header_common>
 800b0f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00c      	beq.n	800b112 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	6939      	ldr	r1, [r7, #16]
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff ff38 	bl	800af74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	6939      	ldr	r1, [r7, #16]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff ff72 	bl	800aff4 <tcp_output_control_segment>
 800b110:	e000      	b.n	800b114 <tcp_rst+0x8c>
    return;
 800b112:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08010ef8 	.word	0x08010ef8
 800b120:	0801167c 	.word	0x0801167c
 800b124:	08010f4c 	.word	0x08010f4c
 800b128:	08011698 	.word	0x08011698

0800b12c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <tcp_send_empty_ack+0x24>
 800b142:	4b28      	ldr	r3, [pc, #160]	; (800b1e4 <tcp_send_empty_ack+0xb8>)
 800b144:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b148:	4927      	ldr	r1, [pc, #156]	; (800b1e8 <tcp_send_empty_ack+0xbc>)
 800b14a:	4828      	ldr	r0, [pc, #160]	; (800b1ec <tcp_send_empty_ack+0xc0>)
 800b14c:	f003 fb24 	bl	800e798 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b150:	7dfb      	ldrb	r3, [r7, #23]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 0304 	and.w	r3, r3, #4
 800b15a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b15c:	7d7b      	ldrb	r3, [r7, #21]
 800b15e:	b29c      	uxth	r4, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b164:	4618      	mov	r0, r3
 800b166:	f7f8 fbc4 	bl	80038f2 <lwip_htonl>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2200      	movs	r2, #0
 800b16e:	4621      	mov	r1, r4
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff fec1 	bl	800aef8 <tcp_output_alloc_header>
 800b176:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8b5b      	ldrh	r3, [r3, #26]
 800b182:	f043 0303 	orr.w	r3, r3, #3
 800b186:	b29a      	uxth	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b18c:	f06f 0301 	mvn.w	r3, #1
 800b190:	e023      	b.n	800b1da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b192:	7dbb      	ldrb	r3, [r7, #22]
 800b194:	7dfa      	ldrb	r2, [r7, #23]
 800b196:	6939      	ldr	r1, [r7, #16]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff feeb 	bl	800af74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	6939      	ldr	r1, [r7, #16]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff ff24 	bl	800aff4 <tcp_output_control_segment>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d007      	beq.n	800b1c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8b5b      	ldrh	r3, [r3, #26]
 800b1bc:	f043 0303 	orr.w	r3, r3, #3
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	835a      	strh	r2, [r3, #26]
 800b1c6:	e006      	b.n	800b1d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	8b5b      	ldrh	r3, [r3, #26]
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	371c      	adds	r7, #28
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd90      	pop	{r4, r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	08010ef8 	.word	0x08010ef8
 800b1e8:	080116b4 	.word	0x080116b4
 800b1ec:	08010f4c 	.word	0x08010f4c

0800b1f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <tcp_keepalive+0x20>
 800b202:	4b18      	ldr	r3, [pc, #96]	; (800b264 <tcp_keepalive+0x74>)
 800b204:	f640 0224 	movw	r2, #2084	; 0x824
 800b208:	4917      	ldr	r1, [pc, #92]	; (800b268 <tcp_keepalive+0x78>)
 800b20a:	4818      	ldr	r0, [pc, #96]	; (800b26c <tcp_keepalive+0x7c>)
 800b20c:	f003 fac4 	bl	800e798 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	b29c      	uxth	r4, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b218:	3b01      	subs	r3, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f8 fb69 	bl	80038f2 <lwip_htonl>
 800b220:	4603      	mov	r3, r0
 800b222:	2200      	movs	r2, #0
 800b224:	4621      	mov	r1, r4
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff fe66 	bl	800aef8 <tcp_output_alloc_header>
 800b22c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d102      	bne.n	800b23a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
 800b238:	e010      	b.n	800b25c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	2200      	movs	r2, #0
 800b23e:	6939      	ldr	r1, [r7, #16]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fe97 	bl	800af74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	6939      	ldr	r1, [r7, #16]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fed0 	bl	800aff4 <tcp_output_control_segment>
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	371c      	adds	r7, #28
 800b260:	46bd      	mov	sp, r7
 800b262:	bd90      	pop	{r4, r7, pc}
 800b264:	08010ef8 	.word	0x08010ef8
 800b268:	080116d4 	.word	0x080116d4
 800b26c:	08010f4c 	.word	0x08010f4c

0800b270 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b08b      	sub	sp, #44	; 0x2c
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b278:	2300      	movs	r3, #0
 800b27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <tcp_zero_window_probe+0x22>
 800b284:	4b4c      	ldr	r3, [pc, #304]	; (800b3b8 <tcp_zero_window_probe+0x148>)
 800b286:	f640 024f 	movw	r2, #2127	; 0x84f
 800b28a:	494c      	ldr	r1, [pc, #304]	; (800b3bc <tcp_zero_window_probe+0x14c>)
 800b28c:	484c      	ldr	r0, [pc, #304]	; (800b3c0 <tcp_zero_window_probe+0x150>)
 800b28e:	f003 fa83 	bl	800e798 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b296:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	e086      	b.n	800b3b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b2a8:	2bff      	cmp	r3, #255	; 0xff
 800b2aa:	d007      	beq.n	800b2bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	899b      	ldrh	r3, [r3, #12]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f8 faff 	bl	80038c8 <lwip_htons>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <tcp_zero_window_probe+0x72>
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	891b      	ldrh	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <tcp_zero_window_probe+0x72>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <tcp_zero_window_probe+0x74>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b2e6:	7ffb      	ldrb	r3, [r7, #31]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bf0c      	ite	eq
 800b2ec:	2301      	moveq	r3, #1
 800b2ee:	2300      	movne	r3, #0
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2f8:	b299      	uxth	r1, r3
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	8bba      	ldrh	r2, [r7, #28]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff fdf8 	bl	800aef8 <tcp_output_alloc_header>
 800b308:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b310:	f04f 33ff 	mov.w	r3, #4294967295
 800b314:	e04c      	b.n	800b3b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b31c:	7ffb      	ldrb	r3, [r7, #31]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d011      	beq.n	800b346 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	899b      	ldrh	r3, [r3, #12]
 800b326:	b29b      	uxth	r3, r3
 800b328:	b21b      	sxth	r3, r3
 800b32a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b32e:	b21c      	sxth	r4, r3
 800b330:	2011      	movs	r0, #17
 800b332:	f7f8 fac9 	bl	80038c8 <lwip_htons>
 800b336:	4603      	mov	r3, r0
 800b338:	b21b      	sxth	r3, r3
 800b33a:	4323      	orrs	r3, r4
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	b29a      	uxth	r2, r3
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	819a      	strh	r2, [r3, #12]
 800b344:	e010      	b.n	800b368 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	3314      	adds	r3, #20
 800b34c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	6858      	ldr	r0, [r3, #4]
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	891a      	ldrh	r2, [r3, #8]
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	891b      	ldrh	r3, [r3, #8]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	b29b      	uxth	r3, r3
 800b360:	2201      	movs	r2, #1
 800b362:	6939      	ldr	r1, [r7, #16]
 800b364:	f7f9 ff5e 	bl	8005224 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f8 fabf 	bl	80038f2 <lwip_htonl>
 800b374:	4603      	mov	r3, r0
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	da02      	bge.n	800b38c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b390:	2200      	movs	r2, #0
 800b392:	69b9      	ldr	r1, [r7, #24]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff fded 	bl	800af74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	69b9      	ldr	r1, [r7, #24]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fe26 	bl	800aff4 <tcp_output_control_segment>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	372c      	adds	r7, #44	; 0x2c
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}
 800b3b8:	08010ef8 	.word	0x08010ef8
 800b3bc:	080116f0 	.word	0x080116f0
 800b3c0:	08010f4c 	.word	0x08010f4c

0800b3c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b3cc:	f7fa f818 	bl	8005400 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <tcpip_tcp_timer+0x38>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d103      	bne.n	800b3e0 <tcpip_tcp_timer+0x1c>
 800b3d8:	4b09      	ldr	r3, [pc, #36]	; (800b400 <tcpip_tcp_timer+0x3c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d005      	beq.n	800b3ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4908      	ldr	r1, [pc, #32]	; (800b404 <tcpip_tcp_timer+0x40>)
 800b3e4:	20fa      	movs	r0, #250	; 0xfa
 800b3e6:	f000 f8f3 	bl	800b5d0 <sys_timeout>
 800b3ea:	e003      	b.n	800b3f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <tcpip_tcp_timer+0x44>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	601a      	str	r2, [r3, #0]
  }
}
 800b3f2:	bf00      	nop
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20006890 	.word	0x20006890
 800b400:	200068a0 	.word	0x200068a0
 800b404:	0800b3c5 	.word	0x0800b3c5
 800b408:	2000010c 	.word	0x2000010c

0800b40c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <tcp_timer_needed+0x30>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10f      	bne.n	800b438 <tcp_timer_needed+0x2c>
 800b418:	4b09      	ldr	r3, [pc, #36]	; (800b440 <tcp_timer_needed+0x34>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <tcp_timer_needed+0x1c>
 800b420:	4b08      	ldr	r3, [pc, #32]	; (800b444 <tcp_timer_needed+0x38>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b428:	4b04      	ldr	r3, [pc, #16]	; (800b43c <tcp_timer_needed+0x30>)
 800b42a:	2201      	movs	r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b42e:	2200      	movs	r2, #0
 800b430:	4905      	ldr	r1, [pc, #20]	; (800b448 <tcp_timer_needed+0x3c>)
 800b432:	20fa      	movs	r0, #250	; 0xfa
 800b434:	f000 f8cc 	bl	800b5d0 <sys_timeout>
  }
}
 800b438:	bf00      	nop
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2000010c 	.word	0x2000010c
 800b440:	20006890 	.word	0x20006890
 800b444:	200068a0 	.word	0x200068a0
 800b448:	0800b3c5 	.word	0x0800b3c5

0800b44c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b458:	2006      	movs	r0, #6
 800b45a:	f7f8 fe8b 	bl	8004174 <memp_malloc>
 800b45e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d109      	bne.n	800b47a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d151      	bne.n	800b510 <sys_timeout_abs+0xc4>
 800b46c:	4b2a      	ldr	r3, [pc, #168]	; (800b518 <sys_timeout_abs+0xcc>)
 800b46e:	22be      	movs	r2, #190	; 0xbe
 800b470:	492a      	ldr	r1, [pc, #168]	; (800b51c <sys_timeout_abs+0xd0>)
 800b472:	482b      	ldr	r0, [pc, #172]	; (800b520 <sys_timeout_abs+0xd4>)
 800b474:	f003 f990 	bl	800e798 <iprintf>
    return;
 800b478:	e04a      	b.n	800b510 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <sys_timeout_abs+0xd8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d103      	bne.n	800b4a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b49a:	4a22      	ldr	r2, [pc, #136]	; (800b524 <sys_timeout_abs+0xd8>)
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6013      	str	r3, [r2, #0]
    return;
 800b4a0:	e037      	b.n	800b512 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	4b1f      	ldr	r3, [pc, #124]	; (800b524 <sys_timeout_abs+0xd8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	0fdb      	lsrs	r3, r3, #31
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d007      	beq.n	800b4ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b4ba:	4b1a      	ldr	r3, [pc, #104]	; (800b524 <sys_timeout_abs+0xd8>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b4c2:	4a18      	ldr	r2, [pc, #96]	; (800b524 <sys_timeout_abs+0xd8>)
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	e023      	b.n	800b512 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b4ca:	4b16      	ldr	r3, [pc, #88]	; (800b524 <sys_timeout_abs+0xd8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e01a      	b.n	800b508 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00b      	beq.n	800b4f2 <sys_timeout_abs+0xa6>
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	0fdb      	lsrs	r3, r3, #31
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d007      	beq.n	800b502 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	601a      	str	r2, [r3, #0]
        break;
 800b500:	e007      	b.n	800b512 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e1      	bne.n	800b4d2 <sys_timeout_abs+0x86>
 800b50e:	e000      	b.n	800b512 <sys_timeout_abs+0xc6>
    return;
 800b510:	bf00      	nop
      }
    }
  }
}
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	08011714 	.word	0x08011714
 800b51c:	08011748 	.word	0x08011748
 800b520:	08011788 	.word	0x08011788
 800b524:	20000104 	.word	0x20000104

0800b528 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	4798      	blx	r3

  now = sys_now();
 800b53a:	f7f8 f937 	bl	80037ac <sys_now>
 800b53e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <lwip_cyclic_timer+0x5c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4413      	add	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	0fdb      	lsrs	r3, r3, #31
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d009      	beq.n	800b572 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	4413      	add	r3, r2
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	4907      	ldr	r1, [pc, #28]	; (800b588 <lwip_cyclic_timer+0x60>)
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff ff6e 	bl	800b44c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b570:	e004      	b.n	800b57c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	4904      	ldr	r1, [pc, #16]	; (800b588 <lwip_cyclic_timer+0x60>)
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff ff68 	bl	800b44c <sys_timeout_abs>
}
 800b57c:	bf00      	nop
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000108 	.word	0x20000108
 800b588:	0800b529 	.word	0x0800b529

0800b58c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b592:	2301      	movs	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	e00e      	b.n	800b5b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b598:	4a0b      	ldr	r2, [pc, #44]	; (800b5c8 <sys_timeouts_init+0x3c>)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <sys_timeouts_init+0x3c>)
 800b5a6:	4413      	add	r3, r2
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4908      	ldr	r1, [pc, #32]	; (800b5cc <sys_timeouts_init+0x40>)
 800b5ac:	f000 f810 	bl	800b5d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d9ed      	bls.n	800b598 <sys_timeouts_init+0xc>
  }
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	080122ec 	.word	0x080122ec
 800b5cc:	0800b529 	.word	0x0800b529

0800b5d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e2:	d306      	bcc.n	800b5f2 <sys_timeout+0x22>
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <sys_timeout+0x40>)
 800b5e6:	f240 1229 	movw	r2, #297	; 0x129
 800b5ea:	490a      	ldr	r1, [pc, #40]	; (800b614 <sys_timeout+0x44>)
 800b5ec:	480a      	ldr	r0, [pc, #40]	; (800b618 <sys_timeout+0x48>)
 800b5ee:	f003 f8d3 	bl	800e798 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b5f2:	f7f8 f8db 	bl	80037ac <sys_now>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	68b9      	ldr	r1, [r7, #8]
 800b602:	6978      	ldr	r0, [r7, #20]
 800b604:	f7ff ff22 	bl	800b44c <sys_timeout_abs>
#endif
}
 800b608:	bf00      	nop
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	08011714 	.word	0x08011714
 800b614:	080117b0 	.word	0x080117b0
 800b618:	08011788 	.word	0x08011788

0800b61c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b622:	f7f8 f8c3 	bl	80037ac <sys_now>
 800b626:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b628:	4b1a      	ldr	r3, [pc, #104]	; (800b694 <sys_check_timeouts+0x78>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <sys_check_timeouts+0x1a>
 800b632:	f7f9 f8c3 	bl	80047bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b636:	4b18      	ldr	r3, [pc, #96]	; (800b698 <sys_check_timeouts+0x7c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d022      	beq.n	800b688 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	0fdb      	lsrs	r3, r3, #31
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d11a      	bne.n	800b68c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a0f      	ldr	r2, [pc, #60]	; (800b698 <sys_check_timeouts+0x7c>)
 800b65c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	4a0b      	ldr	r2, [pc, #44]	; (800b69c <sys_check_timeouts+0x80>)
 800b670:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	2006      	movs	r0, #6
 800b676:	f7f8 fdc9 	bl	800420c <memp_free>
    if (handler != NULL) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0d3      	beq.n	800b628 <sys_check_timeouts+0xc>
      handler(arg);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6838      	ldr	r0, [r7, #0]
 800b684:	4798      	blx	r3
  do {
 800b686:	e7cf      	b.n	800b628 <sys_check_timeouts+0xc>
      return;
 800b688:	bf00      	nop
 800b68a:	e000      	b.n	800b68e <sys_check_timeouts+0x72>
      return;
 800b68c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20006888 	.word	0x20006888
 800b698:	20000104 	.word	0x20000104
 800b69c:	20000108 	.word	0x20000108

0800b6a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6a4:	f003 f890 	bl	800e7c8 <rand>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	4b01      	ldr	r3, [pc, #4]	; (800b6c0 <udp_init+0x20>)
 800b6ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20000010 	.word	0x20000010

0800b6c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b6ce:	4b17      	ldr	r3, [pc, #92]	; (800b72c <udp_new_port+0x68>)
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	b291      	uxth	r1, r2
 800b6d6:	4a15      	ldr	r2, [pc, #84]	; (800b72c <udp_new_port+0x68>)
 800b6d8:	8011      	strh	r1, [r2, #0]
 800b6da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d103      	bne.n	800b6ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b6e2:	4b12      	ldr	r3, [pc, #72]	; (800b72c <udp_new_port+0x68>)
 800b6e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b6e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6ea:	4b11      	ldr	r3, [pc, #68]	; (800b730 <udp_new_port+0x6c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	e011      	b.n	800b716 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	8a5a      	ldrh	r2, [r3, #18]
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <udp_new_port+0x68>)
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d108      	bne.n	800b710 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b6fe:	88fb      	ldrh	r3, [r7, #6]
 800b700:	3301      	adds	r3, #1
 800b702:	80fb      	strh	r3, [r7, #6]
 800b704:	88fb      	ldrh	r3, [r7, #6]
 800b706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b70a:	d3e0      	bcc.n	800b6ce <udp_new_port+0xa>
        return 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	e007      	b.n	800b720 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	603b      	str	r3, [r7, #0]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1ea      	bne.n	800b6f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b71c:	4b03      	ldr	r3, [pc, #12]	; (800b72c <udp_new_port+0x68>)
 800b71e:	881b      	ldrh	r3, [r3, #0]
}
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	20000010 	.word	0x20000010
 800b730:	200068a8 	.word	0x200068a8

0800b734 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4613      	mov	r3, r2
 800b740:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d105      	bne.n	800b754 <udp_input_local_match+0x20>
 800b748:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <udp_input_local_match+0xb4>)
 800b74a:	2287      	movs	r2, #135	; 0x87
 800b74c:	4927      	ldr	r1, [pc, #156]	; (800b7ec <udp_input_local_match+0xb8>)
 800b74e:	4828      	ldr	r0, [pc, #160]	; (800b7f0 <udp_input_local_match+0xbc>)
 800b750:	f003 f822 	bl	800e798 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d105      	bne.n	800b766 <udp_input_local_match+0x32>
 800b75a:	4b23      	ldr	r3, [pc, #140]	; (800b7e8 <udp_input_local_match+0xb4>)
 800b75c:	2288      	movs	r2, #136	; 0x88
 800b75e:	4925      	ldr	r1, [pc, #148]	; (800b7f4 <udp_input_local_match+0xc0>)
 800b760:	4823      	ldr	r0, [pc, #140]	; (800b7f0 <udp_input_local_match+0xbc>)
 800b762:	f003 f819 	bl	800e798 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	7a1b      	ldrb	r3, [r3, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00b      	beq.n	800b786 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	7a1a      	ldrb	r2, [r3, #8]
 800b772:	4b21      	ldr	r3, [pc, #132]	; (800b7f8 <udp_input_local_match+0xc4>)
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b77a:	3301      	adds	r3, #1
 800b77c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b77e:	429a      	cmp	r2, r3
 800b780:	d001      	beq.n	800b786 <udp_input_local_match+0x52>
    return 0;
 800b782:	2300      	movs	r3, #0
 800b784:	e02b      	b.n	800b7de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d018      	beq.n	800b7be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d013      	beq.n	800b7ba <udp_input_local_match+0x86>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b79a:	4b17      	ldr	r3, [pc, #92]	; (800b7f8 <udp_input_local_match+0xc4>)
 800b79c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a2:	d00a      	beq.n	800b7ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <udp_input_local_match+0xc4>)
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	405a      	eors	r2, r3
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d110      	bne.n	800b7dc <udp_input_local_match+0xa8>
          return 1;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e00f      	b.n	800b7de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d009      	beq.n	800b7d8 <udp_input_local_match+0xa4>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d005      	beq.n	800b7d8 <udp_input_local_match+0xa4>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <udp_input_local_match+0xc4>)
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d101      	bne.n	800b7dc <udp_input_local_match+0xa8>
        return 1;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	080117fc 	.word	0x080117fc
 800b7ec:	0801182c 	.word	0x0801182c
 800b7f0:	08011850 	.word	0x08011850
 800b7f4:	08011878 	.word	0x08011878
 800b7f8:	2000334c 	.word	0x2000334c

0800b7fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b08d      	sub	sp, #52	; 0x34
 800b800:	af02      	add	r7, sp, #8
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d105      	bne.n	800b81c <udp_input+0x20>
 800b810:	4b7c      	ldr	r3, [pc, #496]	; (800ba04 <udp_input+0x208>)
 800b812:	22cf      	movs	r2, #207	; 0xcf
 800b814:	497c      	ldr	r1, [pc, #496]	; (800ba08 <udp_input+0x20c>)
 800b816:	487d      	ldr	r0, [pc, #500]	; (800ba0c <udp_input+0x210>)
 800b818:	f002 ffbe 	bl	800e798 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d105      	bne.n	800b82e <udp_input+0x32>
 800b822:	4b78      	ldr	r3, [pc, #480]	; (800ba04 <udp_input+0x208>)
 800b824:	22d0      	movs	r2, #208	; 0xd0
 800b826:	497a      	ldr	r1, [pc, #488]	; (800ba10 <udp_input+0x214>)
 800b828:	4878      	ldr	r0, [pc, #480]	; (800ba0c <udp_input+0x210>)
 800b82a:	f002 ffb5 	bl	800e798 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	895b      	ldrh	r3, [r3, #10]
 800b832:	2b07      	cmp	r3, #7
 800b834:	d803      	bhi.n	800b83e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7f9 fafa 	bl	8004e30 <pbuf_free>
    goto end;
 800b83c:	e0de      	b.n	800b9fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b844:	4b73      	ldr	r3, [pc, #460]	; (800ba14 <udp_input+0x218>)
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	4a72      	ldr	r2, [pc, #456]	; (800ba14 <udp_input+0x218>)
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	4611      	mov	r1, r2
 800b84e:	4618      	mov	r0, r3
 800b850:	f002 f80a 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800b854:	4603      	mov	r3, r0
 800b856:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f8 f832 	bl	80038c8 <lwip_htons>
 800b864:	4603      	mov	r3, r0
 800b866:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	885b      	ldrh	r3, [r3, #2]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4618      	mov	r0, r3
 800b870:	f7f8 f82a 	bl	80038c8 <lwip_htons>
 800b874:	4603      	mov	r3, r0
 800b876:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b87c:	2300      	movs	r3, #0
 800b87e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b884:	4b64      	ldr	r3, [pc, #400]	; (800ba18 <udp_input+0x21c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
 800b88a:	e054      	b.n	800b936 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	8a5b      	ldrh	r3, [r3, #18]
 800b890:	89fa      	ldrh	r2, [r7, #14]
 800b892:	429a      	cmp	r2, r3
 800b894:	d14a      	bne.n	800b92c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b896:	7cfb      	ldrb	r3, [r7, #19]
 800b898:	461a      	mov	r2, r3
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b89e:	f7ff ff49 	bl	800b734 <udp_input_local_match>
 800b8a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d041      	beq.n	800b92c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	7c1b      	ldrb	r3, [r3, #16]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11d      	bne.n	800b8f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	61fb      	str	r3, [r7, #28]
 800b8be:	e017      	b.n	800b8f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b8c0:	7cfb      	ldrb	r3, [r7, #19]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d014      	beq.n	800b8f0 <udp_input+0xf4>
 800b8c6:	4b53      	ldr	r3, [pc, #332]	; (800ba14 <udp_input+0x218>)
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d10f      	bne.n	800b8f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d008      	beq.n	800b8f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d101      	bne.n	800b8f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	8a9b      	ldrh	r3, [r3, #20]
 800b8f4:	8a3a      	ldrh	r2, [r7, #16]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d118      	bne.n	800b92c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	4b43      	ldr	r3, [pc, #268]	; (800ba14 <udp_input+0x218>)
 800b908:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d10e      	bne.n	800b92c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d014      	beq.n	800b93e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b91c:	4b3e      	ldr	r3, [pc, #248]	; (800ba18 <udp_input+0x21c>)
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b924:	4a3c      	ldr	r2, [pc, #240]	; (800ba18 <udp_input+0x21c>)
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b92a:	e008      	b.n	800b93e <udp_input+0x142>
      }
    }

    prev = pcb;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1a7      	bne.n	800b88c <udp_input+0x90>
 800b93c:	e000      	b.n	800b940 <udp_input+0x144>
        break;
 800b93e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <udp_input+0x14e>
    pcb = uncon_pcb;
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <udp_input+0x15a>
    for_us = 1;
 800b950:	2301      	movs	r3, #1
 800b952:	76fb      	strb	r3, [r7, #27]
 800b954:	e00a      	b.n	800b96c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	3304      	adds	r3, #4
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <udp_input+0x218>)
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	bf0c      	ite	eq
 800b964:	2301      	moveq	r3, #1
 800b966:	2300      	movne	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b96c:	7efb      	ldrb	r3, [r7, #27]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d041      	beq.n	800b9f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b972:	2108      	movs	r1, #8
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7f9 f9d5 	bl	8004d24 <pbuf_remove_header>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b980:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <udp_input+0x208>)
 800b982:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b986:	4925      	ldr	r1, [pc, #148]	; (800ba1c <udp_input+0x220>)
 800b988:	4820      	ldr	r0, [pc, #128]	; (800ba0c <udp_input+0x210>)
 800b98a:	f002 ff05 	bl	800e798 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7f9 fa4e 	bl	8004e30 <pbuf_free>
      goto end;
 800b994:	e032      	b.n	800b9fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d012      	beq.n	800b9c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00a      	beq.n	800b9ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	699c      	ldr	r4, [r3, #24]
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	69d8      	ldr	r0, [r3, #28]
 800b9ac:	8a3b      	ldrh	r3, [r7, #16]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ba20 <udp_input+0x224>)
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b9b8:	e021      	b.n	800b9fe <udp_input+0x202>
        pbuf_free(p);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7f9 fa38 	bl	8004e30 <pbuf_free>
        goto end;
 800b9c0:	e01c      	b.n	800b9fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b9c2:	7cfb      	ldrb	r3, [r7, #19]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d112      	bne.n	800b9ee <udp_input+0x1f2>
 800b9c8:	4b12      	ldr	r3, [pc, #72]	; (800ba14 <udp_input+0x218>)
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d0:	2be0      	cmp	r3, #224	; 0xe0
 800b9d2:	d00c      	beq.n	800b9ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <udp_input+0x218>)
 800b9d6:	899b      	ldrh	r3, [r3, #12]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	b21b      	sxth	r3, r3
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7f9 fa12 	bl	8004e0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b9e6:	2103      	movs	r1, #3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f001 fc1d 	bl	800d228 <icmp_dest_unreach>
      pbuf_free(p);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f9 fa1e 	bl	8004e30 <pbuf_free>
  return;
 800b9f4:	e003      	b.n	800b9fe <udp_input+0x202>
    pbuf_free(p);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7f9 fa1a 	bl	8004e30 <pbuf_free>
  return;
 800b9fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b9fe:	372c      	adds	r7, #44	; 0x2c
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd90      	pop	{r4, r7, pc}
 800ba04:	080117fc 	.word	0x080117fc
 800ba08:	080118a0 	.word	0x080118a0
 800ba0c:	08011850 	.word	0x08011850
 800ba10:	080118b8 	.word	0x080118b8
 800ba14:	2000334c 	.word	0x2000334c
 800ba18:	200068a8 	.word	0x200068a8
 800ba1c:	080118d4 	.word	0x080118d4
 800ba20:	2000335c 	.word	0x2000335c

0800ba24 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d109      	bne.n	800ba48 <udp_send+0x24>
 800ba34:	4b11      	ldr	r3, [pc, #68]	; (800ba7c <udp_send+0x58>)
 800ba36:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ba3a:	4911      	ldr	r1, [pc, #68]	; (800ba80 <udp_send+0x5c>)
 800ba3c:	4811      	ldr	r0, [pc, #68]	; (800ba84 <udp_send+0x60>)
 800ba3e:	f002 feab 	bl	800e798 <iprintf>
 800ba42:	f06f 030f 	mvn.w	r3, #15
 800ba46:	e015      	b.n	800ba74 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <udp_send+0x3e>
 800ba4e:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <udp_send+0x58>)
 800ba50:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ba54:	490c      	ldr	r1, [pc, #48]	; (800ba88 <udp_send+0x64>)
 800ba56:	480b      	ldr	r0, [pc, #44]	; (800ba84 <udp_send+0x60>)
 800ba58:	f002 fe9e 	bl	800e798 <iprintf>
 800ba5c:	f06f 030f 	mvn.w	r3, #15
 800ba60:	e008      	b.n	800ba74 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	1d1a      	adds	r2, r3, #4
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8a9b      	ldrh	r3, [r3, #20]
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f80d 	bl	800ba8c <udp_sendto>
 800ba72:	4603      	mov	r3, r0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	080117fc 	.word	0x080117fc
 800ba80:	080118f0 	.word	0x080118f0
 800ba84:	08011850 	.word	0x08011850
 800ba88:	08011908 	.word	0x08011908

0800ba8c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d109      	bne.n	800bab4 <udp_sendto+0x28>
 800baa0:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <udp_sendto+0xa4>)
 800baa2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800baa6:	4923      	ldr	r1, [pc, #140]	; (800bb34 <udp_sendto+0xa8>)
 800baa8:	4823      	ldr	r0, [pc, #140]	; (800bb38 <udp_sendto+0xac>)
 800baaa:	f002 fe75 	bl	800e798 <iprintf>
 800baae:	f06f 030f 	mvn.w	r3, #15
 800bab2:	e038      	b.n	800bb26 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d109      	bne.n	800bace <udp_sendto+0x42>
 800baba:	4b1d      	ldr	r3, [pc, #116]	; (800bb30 <udp_sendto+0xa4>)
 800babc:	f240 2219 	movw	r2, #537	; 0x219
 800bac0:	491e      	ldr	r1, [pc, #120]	; (800bb3c <udp_sendto+0xb0>)
 800bac2:	481d      	ldr	r0, [pc, #116]	; (800bb38 <udp_sendto+0xac>)
 800bac4:	f002 fe68 	bl	800e798 <iprintf>
 800bac8:	f06f 030f 	mvn.w	r3, #15
 800bacc:	e02b      	b.n	800bb26 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d109      	bne.n	800bae8 <udp_sendto+0x5c>
 800bad4:	4b16      	ldr	r3, [pc, #88]	; (800bb30 <udp_sendto+0xa4>)
 800bad6:	f240 221a 	movw	r2, #538	; 0x21a
 800bada:	4919      	ldr	r1, [pc, #100]	; (800bb40 <udp_sendto+0xb4>)
 800badc:	4816      	ldr	r0, [pc, #88]	; (800bb38 <udp_sendto+0xac>)
 800bade:	f002 fe5b 	bl	800e798 <iprintf>
 800bae2:	f06f 030f 	mvn.w	r3, #15
 800bae6:	e01e      	b.n	800bb26 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	7a1b      	ldrb	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	7a1b      	ldrb	r3, [r3, #8]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7f8 fe3b 	bl	8004770 <netif_get_by_index>
 800bafa:	6178      	str	r0, [r7, #20]
 800bafc:	e003      	b.n	800bb06 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f001 fc1c 	bl	800d33c <ip4_route>
 800bb04:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bb0c:	f06f 0303 	mvn.w	r3, #3
 800bb10:	e009      	b.n	800bb26 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bb12:	887a      	ldrh	r2, [r7, #2]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	68b9      	ldr	r1, [r7, #8]
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 f810 	bl	800bb44 <udp_sendto_if>
 800bb24:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	080117fc 	.word	0x080117fc
 800bb34:	08011920 	.word	0x08011920
 800bb38:	08011850 	.word	0x08011850
 800bb3c:	08011938 	.word	0x08011938
 800bb40:	08011954 	.word	0x08011954

0800bb44 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d109      	bne.n	800bb6c <udp_sendto_if+0x28>
 800bb58:	4b2e      	ldr	r3, [pc, #184]	; (800bc14 <udp_sendto_if+0xd0>)
 800bb5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb5e:	492e      	ldr	r1, [pc, #184]	; (800bc18 <udp_sendto_if+0xd4>)
 800bb60:	482e      	ldr	r0, [pc, #184]	; (800bc1c <udp_sendto_if+0xd8>)
 800bb62:	f002 fe19 	bl	800e798 <iprintf>
 800bb66:	f06f 030f 	mvn.w	r3, #15
 800bb6a:	e04f      	b.n	800bc0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <udp_sendto_if+0x42>
 800bb72:	4b28      	ldr	r3, [pc, #160]	; (800bc14 <udp_sendto_if+0xd0>)
 800bb74:	f240 2281 	movw	r2, #641	; 0x281
 800bb78:	4929      	ldr	r1, [pc, #164]	; (800bc20 <udp_sendto_if+0xdc>)
 800bb7a:	4828      	ldr	r0, [pc, #160]	; (800bc1c <udp_sendto_if+0xd8>)
 800bb7c:	f002 fe0c 	bl	800e798 <iprintf>
 800bb80:	f06f 030f 	mvn.w	r3, #15
 800bb84:	e042      	b.n	800bc0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <udp_sendto_if+0x5c>
 800bb8c:	4b21      	ldr	r3, [pc, #132]	; (800bc14 <udp_sendto_if+0xd0>)
 800bb8e:	f240 2282 	movw	r2, #642	; 0x282
 800bb92:	4924      	ldr	r1, [pc, #144]	; (800bc24 <udp_sendto_if+0xe0>)
 800bb94:	4821      	ldr	r0, [pc, #132]	; (800bc1c <udp_sendto_if+0xd8>)
 800bb96:	f002 fdff 	bl	800e798 <iprintf>
 800bb9a:	f06f 030f 	mvn.w	r3, #15
 800bb9e:	e035      	b.n	800bc0c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d109      	bne.n	800bbba <udp_sendto_if+0x76>
 800bba6:	4b1b      	ldr	r3, [pc, #108]	; (800bc14 <udp_sendto_if+0xd0>)
 800bba8:	f240 2283 	movw	r2, #643	; 0x283
 800bbac:	491e      	ldr	r1, [pc, #120]	; (800bc28 <udp_sendto_if+0xe4>)
 800bbae:	481b      	ldr	r0, [pc, #108]	; (800bc1c <udp_sendto_if+0xd8>)
 800bbb0:	f002 fdf2 	bl	800e798 <iprintf>
 800bbb4:	f06f 030f 	mvn.w	r3, #15
 800bbb8:	e028      	b.n	800bc0c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d009      	beq.n	800bbd4 <udp_sendto_if+0x90>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbd0:	2be0      	cmp	r3, #224	; 0xe0
 800bbd2:	d103      	bne.n	800bbdc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	617b      	str	r3, [r7, #20]
 800bbda:	e00b      	b.n	800bbf4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d002      	beq.n	800bbf0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bbea:	f06f 0303 	mvn.w	r3, #3
 800bbee:	e00d      	b.n	800bc0c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bbf4:	887a      	ldrh	r2, [r7, #2]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f000 f811 	bl	800bc2c <udp_sendto_if_src>
 800bc0a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3718      	adds	r7, #24
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	080117fc 	.word	0x080117fc
 800bc18:	08011970 	.word	0x08011970
 800bc1c:	08011850 	.word	0x08011850
 800bc20:	0801198c 	.word	0x0801198c
 800bc24:	080119a8 	.word	0x080119a8
 800bc28:	080119c8 	.word	0x080119c8

0800bc2c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08c      	sub	sp, #48	; 0x30
 800bc30:	af04      	add	r7, sp, #16
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <udp_sendto_if_src+0x28>
 800bc40:	4b65      	ldr	r3, [pc, #404]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bc42:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bc46:	4965      	ldr	r1, [pc, #404]	; (800bddc <udp_sendto_if_src+0x1b0>)
 800bc48:	4865      	ldr	r0, [pc, #404]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bc4a:	f002 fda5 	bl	800e798 <iprintf>
 800bc4e:	f06f 030f 	mvn.w	r3, #15
 800bc52:	e0bc      	b.n	800bdce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <udp_sendto_if_src+0x42>
 800bc5a:	4b5f      	ldr	r3, [pc, #380]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bc5c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bc60:	4960      	ldr	r1, [pc, #384]	; (800bde4 <udp_sendto_if_src+0x1b8>)
 800bc62:	485f      	ldr	r0, [pc, #380]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bc64:	f002 fd98 	bl	800e798 <iprintf>
 800bc68:	f06f 030f 	mvn.w	r3, #15
 800bc6c:	e0af      	b.n	800bdce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d109      	bne.n	800bc88 <udp_sendto_if_src+0x5c>
 800bc74:	4b58      	ldr	r3, [pc, #352]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bc76:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bc7a:	495b      	ldr	r1, [pc, #364]	; (800bde8 <udp_sendto_if_src+0x1bc>)
 800bc7c:	4858      	ldr	r0, [pc, #352]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bc7e:	f002 fd8b 	bl	800e798 <iprintf>
 800bc82:	f06f 030f 	mvn.w	r3, #15
 800bc86:	e0a2      	b.n	800bdce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <udp_sendto_if_src+0x76>
 800bc8e:	4b52      	ldr	r3, [pc, #328]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bc90:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bc94:	4955      	ldr	r1, [pc, #340]	; (800bdec <udp_sendto_if_src+0x1c0>)
 800bc96:	4852      	ldr	r0, [pc, #328]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bc98:	f002 fd7e 	bl	800e798 <iprintf>
 800bc9c:	f06f 030f 	mvn.w	r3, #15
 800bca0:	e095      	b.n	800bdce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d109      	bne.n	800bcbc <udp_sendto_if_src+0x90>
 800bca8:	4b4b      	ldr	r3, [pc, #300]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bcaa:	f240 22d5 	movw	r2, #725	; 0x2d5
 800bcae:	4950      	ldr	r1, [pc, #320]	; (800bdf0 <udp_sendto_if_src+0x1c4>)
 800bcb0:	484b      	ldr	r0, [pc, #300]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bcb2:	f002 fd71 	bl	800e798 <iprintf>
 800bcb6:	f06f 030f 	mvn.w	r3, #15
 800bcba:	e088      	b.n	800bdce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	8a5b      	ldrh	r3, [r3, #18]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10f      	bne.n	800bce4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bcc4:	68f9      	ldr	r1, [r7, #12]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8a5b      	ldrh	r3, [r3, #18]
 800bcca:	461a      	mov	r2, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f893 	bl	800bdf8 <udp_bind>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bcd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bcde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bce2:	e074      	b.n	800bdce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	891b      	ldrh	r3, [r3, #8]
 800bce8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d902      	bls.n	800bcf6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	e06b      	b.n	800bdce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bcf6:	2108      	movs	r1, #8
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f7f9 f803 	bl	8004d04 <pbuf_add_header>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d015      	beq.n	800bd30 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bd04:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd08:	2108      	movs	r1, #8
 800bd0a:	2022      	movs	r0, #34	; 0x22
 800bd0c:	f7f8 fdac 	bl	8004868 <pbuf_alloc>
 800bd10:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	e057      	b.n	800bdce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	891b      	ldrh	r3, [r3, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	69f8      	ldr	r0, [r7, #28]
 800bd2a:	f7f9 f999 	bl	8005060 <pbuf_chain>
 800bd2e:	e001      	b.n	800bd34 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	895b      	ldrh	r3, [r3, #10]
 800bd38:	2b07      	cmp	r3, #7
 800bd3a:	d806      	bhi.n	800bd4a <udp_sendto_if_src+0x11e>
 800bd3c:	4b26      	ldr	r3, [pc, #152]	; (800bdd8 <udp_sendto_if_src+0x1ac>)
 800bd3e:	f240 320d 	movw	r2, #781	; 0x30d
 800bd42:	492c      	ldr	r1, [pc, #176]	; (800bdf4 <udp_sendto_if_src+0x1c8>)
 800bd44:	4826      	ldr	r0, [pc, #152]	; (800bde0 <udp_sendto_if_src+0x1b4>)
 800bd46:	f002 fd27 	bl	800e798 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8a5b      	ldrh	r3, [r3, #18]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f7 fdb7 	bl	80038c8 <lwip_htons>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bd62:	887b      	ldrh	r3, [r7, #2]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7f7 fdaf 	bl	80038c8 <lwip_htons>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2200      	movs	r2, #0
 800bd76:	719a      	strb	r2, [r3, #6]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	891b      	ldrh	r3, [r3, #8]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f7 fda1 	bl	80038c8 <lwip_htons>
 800bd86:	4603      	mov	r3, r0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bd8e:	2311      	movs	r3, #17
 800bd90:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	7adb      	ldrb	r3, [r3, #11]
 800bd96:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	7a9b      	ldrb	r3, [r3, #10]
 800bd9c:	7cb9      	ldrb	r1, [r7, #18]
 800bd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda0:	9202      	str	r2, [sp, #8]
 800bda2:	7cfa      	ldrb	r2, [r7, #19]
 800bda4:	9201      	str	r2, [sp, #4]
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdae:	69f8      	ldr	r0, [r7, #28]
 800bdb0:	f001 fcac 	bl	800d70c <ip4_output_if_src>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bdb8:	69fa      	ldr	r2, [r7, #28]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d004      	beq.n	800bdca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bdc0:	69f8      	ldr	r0, [r7, #28]
 800bdc2:	f7f9 f835 	bl	8004e30 <pbuf_free>
    q = NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bdca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	080117fc 	.word	0x080117fc
 800bddc:	080119e8 	.word	0x080119e8
 800bde0:	08011850 	.word	0x08011850
 800bde4:	08011a08 	.word	0x08011a08
 800bde8:	08011a28 	.word	0x08011a28
 800bdec:	08011a4c 	.word	0x08011a4c
 800bdf0:	08011a70 	.word	0x08011a70
 800bdf4:	08011a94 	.word	0x08011a94

0800bdf8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800be0c:	4b39      	ldr	r3, [pc, #228]	; (800bef4 <udp_bind+0xfc>)
 800be0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d109      	bne.n	800be2a <udp_bind+0x32>
 800be16:	4b38      	ldr	r3, [pc, #224]	; (800bef8 <udp_bind+0x100>)
 800be18:	f240 32b7 	movw	r2, #951	; 0x3b7
 800be1c:	4937      	ldr	r1, [pc, #220]	; (800befc <udp_bind+0x104>)
 800be1e:	4838      	ldr	r0, [pc, #224]	; (800bf00 <udp_bind+0x108>)
 800be20:	f002 fcba 	bl	800e798 <iprintf>
 800be24:	f06f 030f 	mvn.w	r3, #15
 800be28:	e060      	b.n	800beec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be2e:	4b35      	ldr	r3, [pc, #212]	; (800bf04 <udp_bind+0x10c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e009      	b.n	800be4a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d102      	bne.n	800be44 <udp_bind+0x4c>
      rebind = 1;
 800be3e:	2301      	movs	r3, #1
 800be40:	74fb      	strb	r3, [r7, #19]
      break;
 800be42:	e005      	b.n	800be50 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f2      	bne.n	800be36 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800be50:	88fb      	ldrh	r3, [r7, #6]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d109      	bne.n	800be6a <udp_bind+0x72>
    port = udp_new_port();
 800be56:	f7ff fc35 	bl	800b6c4 <udp_new_port>
 800be5a:	4603      	mov	r3, r0
 800be5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800be5e:	88fb      	ldrh	r3, [r7, #6]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d12c      	bne.n	800bebe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800be64:	f06f 0307 	mvn.w	r3, #7
 800be68:	e040      	b.n	800beec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be6a:	4b26      	ldr	r3, [pc, #152]	; (800bf04 <udp_bind+0x10c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e022      	b.n	800beb8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	429a      	cmp	r2, r3
 800be78:	d01b      	beq.n	800beb2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	8a5b      	ldrh	r3, [r3, #18]
 800be7e:	88fa      	ldrh	r2, [r7, #6]
 800be80:	429a      	cmp	r2, r3
 800be82:	d116      	bne.n	800beb2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d00d      	beq.n	800beac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <udp_bind+0xb4>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d006      	beq.n	800beac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800be9e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800beac:	f06f 0307 	mvn.w	r3, #7
 800beb0:	e01c      	b.n	800beec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d9      	bne.n	800be72 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <udp_bind+0xd2>
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	e000      	b.n	800becc <udp_bind+0xd4>
 800beca:	2300      	movs	r3, #0
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	88fa      	ldrh	r2, [r7, #6]
 800bed4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bed6:	7cfb      	ldrb	r3, [r7, #19]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d106      	bne.n	800beea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bedc:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <udp_bind+0x10c>)
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bee4:	4a07      	ldr	r2, [pc, #28]	; (800bf04 <udp_bind+0x10c>)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3718      	adds	r7, #24
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	08012304 	.word	0x08012304
 800bef8:	080117fc 	.word	0x080117fc
 800befc:	08011ac4 	.word	0x08011ac4
 800bf00:	08011850 	.word	0x08011850
 800bf04:	200068a8 	.word	0x200068a8

0800bf08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d109      	bne.n	800bf30 <udp_connect+0x28>
 800bf1c:	4b2c      	ldr	r3, [pc, #176]	; (800bfd0 <udp_connect+0xc8>)
 800bf1e:	f240 4235 	movw	r2, #1077	; 0x435
 800bf22:	492c      	ldr	r1, [pc, #176]	; (800bfd4 <udp_connect+0xcc>)
 800bf24:	482c      	ldr	r0, [pc, #176]	; (800bfd8 <udp_connect+0xd0>)
 800bf26:	f002 fc37 	bl	800e798 <iprintf>
 800bf2a:	f06f 030f 	mvn.w	r3, #15
 800bf2e:	e04b      	b.n	800bfc8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d109      	bne.n	800bf4a <udp_connect+0x42>
 800bf36:	4b26      	ldr	r3, [pc, #152]	; (800bfd0 <udp_connect+0xc8>)
 800bf38:	f240 4236 	movw	r2, #1078	; 0x436
 800bf3c:	4927      	ldr	r1, [pc, #156]	; (800bfdc <udp_connect+0xd4>)
 800bf3e:	4826      	ldr	r0, [pc, #152]	; (800bfd8 <udp_connect+0xd0>)
 800bf40:	f002 fc2a 	bl	800e798 <iprintf>
 800bf44:	f06f 030f 	mvn.w	r3, #15
 800bf48:	e03e      	b.n	800bfc8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8a5b      	ldrh	r3, [r3, #18]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10f      	bne.n	800bf72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bf52:	68f9      	ldr	r1, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	8a5b      	ldrh	r3, [r3, #18]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff ff4c 	bl	800bdf8 <udp_bind>
 800bf60:	4603      	mov	r3, r0
 800bf62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bf64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <udp_connect+0x6a>
      return err;
 800bf6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf70:	e02a      	b.n	800bfc8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <udp_connect+0x76>
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	e000      	b.n	800bf80 <udp_connect+0x78>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	88fa      	ldrh	r2, [r7, #6]
 800bf88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	7c1b      	ldrb	r3, [r3, #16]
 800bf8e:	f043 0304 	orr.w	r3, r3, #4
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bf98:	4b11      	ldr	r3, [pc, #68]	; (800bfe0 <udp_connect+0xd8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	e008      	b.n	800bfb2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d101      	bne.n	800bfac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e00d      	b.n	800bfc8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f3      	bne.n	800bfa0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bfb8:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <udp_connect+0xd8>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bfc0:	4a07      	ldr	r2, [pc, #28]	; (800bfe0 <udp_connect+0xd8>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	080117fc 	.word	0x080117fc
 800bfd4:	08011adc 	.word	0x08011adc
 800bfd8:	08011850 	.word	0x08011850
 800bfdc:	08011af8 	.word	0x08011af8
 800bfe0:	200068a8 	.word	0x200068a8

0800bfe4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d107      	bne.n	800c002 <udp_disconnect+0x1e>
 800bff2:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <udp_disconnect+0x44>)
 800bff4:	f240 426a 	movw	r2, #1130	; 0x46a
 800bff8:	490c      	ldr	r1, [pc, #48]	; (800c02c <udp_disconnect+0x48>)
 800bffa:	480d      	ldr	r0, [pc, #52]	; (800c030 <udp_disconnect+0x4c>)
 800bffc:	f002 fbcc 	bl	800e798 <iprintf>
 800c000:	e00f      	b.n	800c022 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7c1b      	ldrb	r3, [r3, #16]
 800c018:	f023 0304 	bic.w	r3, r3, #4
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	741a      	strb	r2, [r3, #16]
}
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	080117fc 	.word	0x080117fc
 800c02c:	08011b14 	.word	0x08011b14
 800c030:	08011850 	.word	0x08011850

0800c034 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d107      	bne.n	800c056 <udp_recv+0x22>
 800c046:	4b08      	ldr	r3, [pc, #32]	; (800c068 <udp_recv+0x34>)
 800c048:	f240 428a 	movw	r2, #1162	; 0x48a
 800c04c:	4907      	ldr	r1, [pc, #28]	; (800c06c <udp_recv+0x38>)
 800c04e:	4808      	ldr	r0, [pc, #32]	; (800c070 <udp_recv+0x3c>)
 800c050:	f002 fba2 	bl	800e798 <iprintf>
 800c054:	e005      	b.n	800c062 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	61da      	str	r2, [r3, #28]
}
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	080117fc 	.word	0x080117fc
 800c06c:	08011b30 	.word	0x08011b30
 800c070:	08011850 	.word	0x08011850

0800c074 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d107      	bne.n	800c092 <udp_remove+0x1e>
 800c082:	4b19      	ldr	r3, [pc, #100]	; (800c0e8 <udp_remove+0x74>)
 800c084:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c088:	4918      	ldr	r1, [pc, #96]	; (800c0ec <udp_remove+0x78>)
 800c08a:	4819      	ldr	r0, [pc, #100]	; (800c0f0 <udp_remove+0x7c>)
 800c08c:	f002 fb84 	bl	800e798 <iprintf>
 800c090:	e026      	b.n	800c0e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c092:	4b18      	ldr	r3, [pc, #96]	; (800c0f4 <udp_remove+0x80>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d105      	bne.n	800c0a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c09c:	4b15      	ldr	r3, [pc, #84]	; (800c0f4 <udp_remove+0x80>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	4a14      	ldr	r2, [pc, #80]	; (800c0f4 <udp_remove+0x80>)
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	e017      	b.n	800c0d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c0a8:	4b12      	ldr	r3, [pc, #72]	; (800c0f4 <udp_remove+0x80>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	e010      	b.n	800c0d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d009      	beq.n	800c0cc <udp_remove+0x58>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d104      	bne.n	800c0cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68da      	ldr	r2, [r3, #12]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	60da      	str	r2, [r3, #12]
        break;
 800c0ca:	e005      	b.n	800c0d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1eb      	bne.n	800c0b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c0d8:	6879      	ldr	r1, [r7, #4]
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f7f8 f896 	bl	800420c <memp_free>
}
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	080117fc 	.word	0x080117fc
 800c0ec:	08011b48 	.word	0x08011b48
 800c0f0:	08011850 	.word	0x08011850
 800c0f4:	200068a8 	.word	0x200068a8

0800c0f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c0fe:	2000      	movs	r0, #0
 800c100:	f7f8 f838 	bl	8004174 <memp_malloc>
 800c104:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d007      	beq.n	800c11c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c10c:	2220      	movs	r2, #32
 800c10e:	2100      	movs	r1, #0
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f002 fb39 	bl	800e788 <memset>
    pcb->ttl = UDP_TTL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	22ff      	movs	r2, #255	; 0xff
 800c11a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c11c:	687b      	ldr	r3, [r7, #4]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d01e      	beq.n	800c176 <udp_netif_ip_addr_changed+0x4e>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01a      	beq.n	800c176 <udp_netif_ip_addr_changed+0x4e>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d017      	beq.n	800c176 <udp_netif_ip_addr_changed+0x4e>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d013      	beq.n	800c176 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c14e:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <udp_netif_ip_addr_changed+0x5c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	e00c      	b.n	800c170 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d103      	bne.n	800c16a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1ef      	bne.n	800c156 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c176:	bf00      	nop
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200068a8 	.word	0x200068a8

0800c188 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c190:	4915      	ldr	r1, [pc, #84]	; (800c1e8 <etharp_free_entry+0x60>)
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	4613      	mov	r3, r2
 800c196:	005b      	lsls	r3, r3, #1
 800c198:	4413      	add	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	440b      	add	r3, r1
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d013      	beq.n	800c1cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c1a4:	4910      	ldr	r1, [pc, #64]	; (800c1e8 <etharp_free_entry+0x60>)
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7f8 fe3b 	bl	8004e30 <pbuf_free>
    arp_table[i].q = NULL;
 800c1ba:	490b      	ldr	r1, [pc, #44]	; (800c1e8 <etharp_free_entry+0x60>)
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	440b      	add	r3, r1
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c1cc:	4906      	ldr	r1, [pc, #24]	; (800c1e8 <etharp_free_entry+0x60>)
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	440b      	add	r3, r1
 800c1da:	3314      	adds	r3, #20
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20000110 	.word	0x20000110

0800c1ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	607b      	str	r3, [r7, #4]
 800c1f6:	e096      	b.n	800c326 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c1f8:	494f      	ldr	r1, [pc, #316]	; (800c338 <etharp_tmr+0x14c>)
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	4413      	add	r3, r2
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	440b      	add	r3, r1
 800c206:	3314      	adds	r3, #20
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8086 	beq.w	800c320 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c214:	4948      	ldr	r1, [pc, #288]	; (800c338 <etharp_tmr+0x14c>)
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	4613      	mov	r3, r2
 800c21a:	005b      	lsls	r3, r3, #1
 800c21c:	4413      	add	r3, r2
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	440b      	add	r3, r1
 800c222:	3312      	adds	r3, #18
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	3301      	adds	r3, #1
 800c228:	b298      	uxth	r0, r3
 800c22a:	4943      	ldr	r1, [pc, #268]	; (800c338 <etharp_tmr+0x14c>)
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	440b      	add	r3, r1
 800c238:	3312      	adds	r3, #18
 800c23a:	4602      	mov	r2, r0
 800c23c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c23e:	493e      	ldr	r1, [pc, #248]	; (800c338 <etharp_tmr+0x14c>)
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	4413      	add	r3, r2
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	440b      	add	r3, r1
 800c24c:	3312      	adds	r3, #18
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c254:	d215      	bcs.n	800c282 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c256:	4938      	ldr	r1, [pc, #224]	; (800c338 <etharp_tmr+0x14c>)
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	4413      	add	r3, r2
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	440b      	add	r3, r1
 800c264:	3314      	adds	r3, #20
 800c266:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d10e      	bne.n	800c28a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c26c:	4932      	ldr	r1, [pc, #200]	; (800c338 <etharp_tmr+0x14c>)
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4613      	mov	r3, r2
 800c272:	005b      	lsls	r3, r3, #1
 800c274:	4413      	add	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	440b      	add	r3, r1
 800c27a:	3312      	adds	r3, #18
 800c27c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d903      	bls.n	800c28a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff ff80 	bl	800c188 <etharp_free_entry>
 800c288:	e04a      	b.n	800c320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c28a:	492b      	ldr	r1, [pc, #172]	; (800c338 <etharp_tmr+0x14c>)
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	4413      	add	r3, r2
 800c294:	00db      	lsls	r3, r3, #3
 800c296:	440b      	add	r3, r1
 800c298:	3314      	adds	r3, #20
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d10a      	bne.n	800c2b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c2a0:	4925      	ldr	r1, [pc, #148]	; (800c338 <etharp_tmr+0x14c>)
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3314      	adds	r3, #20
 800c2b0:	2204      	movs	r2, #4
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e034      	b.n	800c320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c2b6:	4920      	ldr	r1, [pc, #128]	; (800c338 <etharp_tmr+0x14c>)
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	d10a      	bne.n	800c2e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c2cc:	491a      	ldr	r1, [pc, #104]	; (800c338 <etharp_tmr+0x14c>)
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	440b      	add	r3, r1
 800c2da:	3314      	adds	r3, #20
 800c2dc:	2202      	movs	r2, #2
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	e01e      	b.n	800c320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c2e2:	4915      	ldr	r1, [pc, #84]	; (800c338 <etharp_tmr+0x14c>)
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3314      	adds	r3, #20
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d113      	bne.n	800c320 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c2f8:	490f      	ldr	r1, [pc, #60]	; (800c338 <etharp_tmr+0x14c>)
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	440b      	add	r3, r1
 800c306:	3308      	adds	r3, #8
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	4613      	mov	r3, r2
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	4413      	add	r3, r2
 800c312:	00db      	lsls	r3, r3, #3
 800c314:	4a08      	ldr	r2, [pc, #32]	; (800c338 <etharp_tmr+0x14c>)
 800c316:	4413      	add	r3, r2
 800c318:	3304      	adds	r3, #4
 800c31a:	4619      	mov	r1, r3
 800c31c:	f000 fe6e 	bl	800cffc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3301      	adds	r3, #1
 800c324:	607b      	str	r3, [r7, #4]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b09      	cmp	r3, #9
 800c32a:	f77f af65 	ble.w	800c1f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	20000110 	.word	0x20000110

0800c33c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08a      	sub	sp, #40	; 0x28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	460b      	mov	r3, r1
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c34a:	230a      	movs	r3, #10
 800c34c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c34e:	230a      	movs	r3, #10
 800c350:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c352:	230a      	movs	r3, #10
 800c354:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c35a:	230a      	movs	r3, #10
 800c35c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	83bb      	strh	r3, [r7, #28]
 800c362:	2300      	movs	r3, #0
 800c364:	837b      	strh	r3, [r7, #26]
 800c366:	2300      	movs	r3, #0
 800c368:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c36a:	2300      	movs	r3, #0
 800c36c:	843b      	strh	r3, [r7, #32]
 800c36e:	e0ae      	b.n	800c4ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c374:	49a6      	ldr	r1, [pc, #664]	; (800c610 <etharp_find_entry+0x2d4>)
 800c376:	4613      	mov	r3, r2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	4413      	add	r3, r2
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	440b      	add	r3, r1
 800c380:	3314      	adds	r3, #20
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c386:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c38a:	2b0a      	cmp	r3, #10
 800c38c:	d105      	bne.n	800c39a <etharp_find_entry+0x5e>
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c394:	8c3b      	ldrh	r3, [r7, #32]
 800c396:	847b      	strh	r3, [r7, #34]	; 0x22
 800c398:	e095      	b.n	800c4c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 8092 	beq.w	800c4c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d009      	beq.n	800c3bc <etharp_find_entry+0x80>
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d806      	bhi.n	800c3bc <etharp_find_entry+0x80>
 800c3ae:	4b99      	ldr	r3, [pc, #612]	; (800c614 <etharp_find_entry+0x2d8>)
 800c3b0:	f240 1223 	movw	r2, #291	; 0x123
 800c3b4:	4998      	ldr	r1, [pc, #608]	; (800c618 <etharp_find_entry+0x2dc>)
 800c3b6:	4899      	ldr	r0, [pc, #612]	; (800c61c <etharp_find_entry+0x2e0>)
 800c3b8:	f002 f9ee 	bl	800e798 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d020      	beq.n	800c404 <etharp_find_entry+0xc8>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6819      	ldr	r1, [r3, #0]
 800c3c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3ca:	4891      	ldr	r0, [pc, #580]	; (800c610 <etharp_find_entry+0x2d4>)
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	005b      	lsls	r3, r3, #1
 800c3d0:	4413      	add	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	4403      	add	r3, r0
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4299      	cmp	r1, r3
 800c3dc:	d112      	bne.n	800c404 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00c      	beq.n	800c3fe <etharp_find_entry+0xc2>
 800c3e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3e8:	4989      	ldr	r1, [pc, #548]	; (800c610 <etharp_find_entry+0x2d4>)
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	4413      	add	r3, r2
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d102      	bne.n	800c404 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c3fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c402:	e100      	b.n	800c606 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d140      	bne.n	800c48c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c40a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c40e:	4980      	ldr	r1, [pc, #512]	; (800c610 <etharp_find_entry+0x2d4>)
 800c410:	4613      	mov	r3, r2
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	4413      	add	r3, r2
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	440b      	add	r3, r1
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d01a      	beq.n	800c456 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c424:	497a      	ldr	r1, [pc, #488]	; (800c610 <etharp_find_entry+0x2d4>)
 800c426:	4613      	mov	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	440b      	add	r3, r1
 800c430:	3312      	adds	r3, #18
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	8bba      	ldrh	r2, [r7, #28]
 800c436:	429a      	cmp	r2, r3
 800c438:	d845      	bhi.n	800c4c6 <etharp_find_entry+0x18a>
            old_queue = i;
 800c43a:	8c3b      	ldrh	r3, [r7, #32]
 800c43c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c43e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c442:	4973      	ldr	r1, [pc, #460]	; (800c610 <etharp_find_entry+0x2d4>)
 800c444:	4613      	mov	r3, r2
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	4413      	add	r3, r2
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	440b      	add	r3, r1
 800c44e:	3312      	adds	r3, #18
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	83bb      	strh	r3, [r7, #28]
 800c454:	e037      	b.n	800c4c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c45a:	496d      	ldr	r1, [pc, #436]	; (800c610 <etharp_find_entry+0x2d4>)
 800c45c:	4613      	mov	r3, r2
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	4413      	add	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	440b      	add	r3, r1
 800c466:	3312      	adds	r3, #18
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	8b7a      	ldrh	r2, [r7, #26]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d82a      	bhi.n	800c4c6 <etharp_find_entry+0x18a>
            old_pending = i;
 800c470:	8c3b      	ldrh	r3, [r7, #32]
 800c472:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c478:	4965      	ldr	r1, [pc, #404]	; (800c610 <etharp_find_entry+0x2d4>)
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	440b      	add	r3, r1
 800c484:	3312      	adds	r3, #18
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	837b      	strh	r3, [r7, #26]
 800c48a:	e01c      	b.n	800c4c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d919      	bls.n	800c4c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c496:	495e      	ldr	r1, [pc, #376]	; (800c610 <etharp_find_entry+0x2d4>)
 800c498:	4613      	mov	r3, r2
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	4413      	add	r3, r2
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	440b      	add	r3, r1
 800c4a2:	3312      	adds	r3, #18
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	8b3a      	ldrh	r2, [r7, #24]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d80c      	bhi.n	800c4c6 <etharp_find_entry+0x18a>
            old_stable = i;
 800c4ac:	8c3b      	ldrh	r3, [r7, #32]
 800c4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c4b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4b4:	4956      	ldr	r1, [pc, #344]	; (800c610 <etharp_find_entry+0x2d4>)
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	440b      	add	r3, r1
 800c4c0:	3312      	adds	r3, #18
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4c6:	8c3b      	ldrh	r3, [r7, #32]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	843b      	strh	r3, [r7, #32]
 800c4ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4d2:	2b09      	cmp	r3, #9
 800c4d4:	f77f af4c 	ble.w	800c370 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	f003 0302 	and.w	r3, r3, #2
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d108      	bne.n	800c4f4 <etharp_find_entry+0x1b8>
 800c4e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4e6:	2b0a      	cmp	r3, #10
 800c4e8:	d107      	bne.n	800c4fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c4ea:	7afb      	ldrb	r3, [r7, #11]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f8:	e085      	b.n	800c606 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c4fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4fe:	2b09      	cmp	r3, #9
 800c500:	dc02      	bgt.n	800c508 <etharp_find_entry+0x1cc>
    i = empty;
 800c502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c504:	843b      	strh	r3, [r7, #32]
 800c506:	e039      	b.n	800c57c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c508:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c50c:	2b09      	cmp	r3, #9
 800c50e:	dc14      	bgt.n	800c53a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c512:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c518:	493d      	ldr	r1, [pc, #244]	; (800c610 <etharp_find_entry+0x2d4>)
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	440b      	add	r3, r1
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d018      	beq.n	800c55c <etharp_find_entry+0x220>
 800c52a:	4b3a      	ldr	r3, [pc, #232]	; (800c614 <etharp_find_entry+0x2d8>)
 800c52c:	f240 126d 	movw	r2, #365	; 0x16d
 800c530:	493b      	ldr	r1, [pc, #236]	; (800c620 <etharp_find_entry+0x2e4>)
 800c532:	483a      	ldr	r0, [pc, #232]	; (800c61c <etharp_find_entry+0x2e0>)
 800c534:	f002 f930 	bl	800e798 <iprintf>
 800c538:	e010      	b.n	800c55c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c53a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c53e:	2b09      	cmp	r3, #9
 800c540:	dc02      	bgt.n	800c548 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c544:	843b      	strh	r3, [r7, #32]
 800c546:	e009      	b.n	800c55c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c548:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	dc02      	bgt.n	800c556 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c550:	8bfb      	ldrh	r3, [r7, #30]
 800c552:	843b      	strh	r3, [r7, #32]
 800c554:	e002      	b.n	800c55c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
 800c55a:	e054      	b.n	800c606 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c55c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c560:	2b09      	cmp	r3, #9
 800c562:	dd06      	ble.n	800c572 <etharp_find_entry+0x236>
 800c564:	4b2b      	ldr	r3, [pc, #172]	; (800c614 <etharp_find_entry+0x2d8>)
 800c566:	f240 127f 	movw	r2, #383	; 0x17f
 800c56a:	492e      	ldr	r1, [pc, #184]	; (800c624 <etharp_find_entry+0x2e8>)
 800c56c:	482b      	ldr	r0, [pc, #172]	; (800c61c <etharp_find_entry+0x2e0>)
 800c56e:	f002 f913 	bl	800e798 <iprintf>
    etharp_free_entry(i);
 800c572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff fe06 	bl	800c188 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c57c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c580:	2b09      	cmp	r3, #9
 800c582:	dd06      	ble.n	800c592 <etharp_find_entry+0x256>
 800c584:	4b23      	ldr	r3, [pc, #140]	; (800c614 <etharp_find_entry+0x2d8>)
 800c586:	f240 1283 	movw	r2, #387	; 0x183
 800c58a:	4926      	ldr	r1, [pc, #152]	; (800c624 <etharp_find_entry+0x2e8>)
 800c58c:	4823      	ldr	r0, [pc, #140]	; (800c61c <etharp_find_entry+0x2e0>)
 800c58e:	f002 f903 	bl	800e798 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c596:	491e      	ldr	r1, [pc, #120]	; (800c610 <etharp_find_entry+0x2d4>)
 800c598:	4613      	mov	r3, r2
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	4413      	add	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	440b      	add	r3, r1
 800c5a2:	3314      	adds	r3, #20
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d006      	beq.n	800c5b8 <etharp_find_entry+0x27c>
 800c5aa:	4b1a      	ldr	r3, [pc, #104]	; (800c614 <etharp_find_entry+0x2d8>)
 800c5ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c5b0:	491d      	ldr	r1, [pc, #116]	; (800c628 <etharp_find_entry+0x2ec>)
 800c5b2:	481a      	ldr	r0, [pc, #104]	; (800c61c <etharp_find_entry+0x2e0>)
 800c5b4:	f002 f8f0 	bl	800e798 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6819      	ldr	r1, [r3, #0]
 800c5c6:	4812      	ldr	r0, [pc, #72]	; (800c610 <etharp_find_entry+0x2d4>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	4403      	add	r3, r0
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c5d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5da:	490d      	ldr	r1, [pc, #52]	; (800c610 <etharp_find_entry+0x2d4>)
 800c5dc:	4613      	mov	r3, r2
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	4413      	add	r3, r2
 800c5e2:	00db      	lsls	r3, r3, #3
 800c5e4:	440b      	add	r3, r1
 800c5e6:	3312      	adds	r3, #18
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c5ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5f0:	4907      	ldr	r1, [pc, #28]	; (800c610 <etharp_find_entry+0x2d4>)
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	005b      	lsls	r3, r3, #1
 800c5f6:	4413      	add	r3, r2
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	440b      	add	r3, r1
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3728      	adds	r7, #40	; 0x28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	20000110 	.word	0x20000110
 800c614:	08011b60 	.word	0x08011b60
 800c618:	08011b98 	.word	0x08011b98
 800c61c:	08011bd8 	.word	0x08011bd8
 800c620:	08011c00 	.word	0x08011c00
 800c624:	08011c18 	.word	0x08011c18
 800c628:	08011c2c 	.word	0x08011c2c

0800c62c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af02      	add	r7, sp, #8
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c640:	2b06      	cmp	r3, #6
 800c642:	d006      	beq.n	800c652 <etharp_update_arp_entry+0x26>
 800c644:	4b48      	ldr	r3, [pc, #288]	; (800c768 <etharp_update_arp_entry+0x13c>)
 800c646:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c64a:	4948      	ldr	r1, [pc, #288]	; (800c76c <etharp_update_arp_entry+0x140>)
 800c64c:	4848      	ldr	r0, [pc, #288]	; (800c770 <etharp_update_arp_entry+0x144>)
 800c64e:	f002 f8a3 	bl	800e798 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d012      	beq.n	800c67e <etharp_update_arp_entry+0x52>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00e      	beq.n	800c67e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68f9      	ldr	r1, [r7, #12]
 800c666:	4618      	mov	r0, r3
 800c668:	f001 f8fe 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800c66c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d105      	bne.n	800c67e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c67a:	2be0      	cmp	r3, #224	; 0xe0
 800c67c:	d102      	bne.n	800c684 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c67e:	f06f 030f 	mvn.w	r3, #15
 800c682:	e06c      	b.n	800c75e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	4619      	mov	r1, r3
 800c68a:	68b8      	ldr	r0, [r7, #8]
 800c68c:	f7ff fe56 	bl	800c33c <etharp_find_entry>
 800c690:	4603      	mov	r3, r0
 800c692:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c694:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	da02      	bge.n	800c6a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c69c:	8afb      	ldrh	r3, [r7, #22]
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	e05d      	b.n	800c75e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c6a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6a6:	4933      	ldr	r1, [pc, #204]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	4413      	add	r3, r2
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3314      	adds	r3, #20
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c6b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6bc:	492d      	ldr	r1, [pc, #180]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c6be:	4613      	mov	r3, r2
 800c6c0:	005b      	lsls	r3, r3, #1
 800c6c2:	4413      	add	r3, r2
 800c6c4:	00db      	lsls	r3, r3, #3
 800c6c6:	440b      	add	r3, r1
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c6ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	3308      	adds	r3, #8
 800c6dc:	4a25      	ldr	r2, [pc, #148]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c6de:	4413      	add	r3, r2
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	6879      	ldr	r1, [r7, #4]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f002 f840 	bl	800e76c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c6ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6f0:	4920      	ldr	r1, [pc, #128]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3312      	adds	r3, #18
 800c6fe:	2200      	movs	r2, #0
 800c700:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c706:	491b      	ldr	r1, [pc, #108]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c708:	4613      	mov	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	4413      	add	r3, r2
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	440b      	add	r3, r1
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d021      	beq.n	800c75c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c718:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c71c:	4915      	ldr	r1, [pc, #84]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c71e:	4613      	mov	r3, r2
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	4413      	add	r3, r2
 800c724:	00db      	lsls	r3, r3, #3
 800c726:	440b      	add	r3, r1
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c72c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c730:	4910      	ldr	r1, [pc, #64]	; (800c774 <etharp_update_arp_entry+0x148>)
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	440b      	add	r3, r1
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6939      	ldr	r1, [r7, #16]
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f001 ff91 	bl	800e678 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c756:	6938      	ldr	r0, [r7, #16]
 800c758:	f7f8 fb6a 	bl	8004e30 <pbuf_free>
  }
  return ERR_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	08011b60 	.word	0x08011b60
 800c76c:	08011c58 	.word	0x08011c58
 800c770:	08011bd8 	.word	0x08011bd8
 800c774:	20000110 	.word	0x20000110

0800c778 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c780:	2300      	movs	r3, #0
 800c782:	60fb      	str	r3, [r7, #12]
 800c784:	e01e      	b.n	800c7c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c786:	4913      	ldr	r1, [pc, #76]	; (800c7d4 <etharp_cleanup_netif+0x5c>)
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4613      	mov	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3314      	adds	r3, #20
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c79a:	7afb      	ldrb	r3, [r7, #11]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00e      	beq.n	800c7be <etharp_cleanup_netif+0x46>
 800c7a0:	490c      	ldr	r1, [pc, #48]	; (800c7d4 <etharp_cleanup_netif+0x5c>)
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	440b      	add	r3, r1
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d102      	bne.n	800c7be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff fce5 	bl	800c188 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	dddd      	ble.n	800c786 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c7ca:	bf00      	nop
 800c7cc:	bf00      	nop
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000110 	.word	0x20000110

0800c7d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c7d8:	b5b0      	push	{r4, r5, r7, lr}
 800c7da:	b08a      	sub	sp, #40	; 0x28
 800c7dc:	af04      	add	r7, sp, #16
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d107      	bne.n	800c7f8 <etharp_input+0x20>
 800c7e8:	4b3d      	ldr	r3, [pc, #244]	; (800c8e0 <etharp_input+0x108>)
 800c7ea:	f240 228a 	movw	r2, #650	; 0x28a
 800c7ee:	493d      	ldr	r1, [pc, #244]	; (800c8e4 <etharp_input+0x10c>)
 800c7f0:	483d      	ldr	r0, [pc, #244]	; (800c8e8 <etharp_input+0x110>)
 800c7f2:	f001 ffd1 	bl	800e798 <iprintf>
 800c7f6:	e06f      	b.n	800c8d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	b29b      	uxth	r3, r3
 800c804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c808:	d10c      	bne.n	800c824 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c80e:	2b06      	cmp	r3, #6
 800c810:	d108      	bne.n	800c824 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c816:	2b04      	cmp	r3, #4
 800c818:	d104      	bne.n	800c824 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	885b      	ldrh	r3, [r3, #2]
 800c81e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c820:	2b08      	cmp	r3, #8
 800c822:	d003      	beq.n	800c82c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7f8 fb03 	bl	8004e30 <pbuf_free>
    return;
 800c82a:	e055      	b.n	800c8d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	330e      	adds	r3, #14
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	3318      	adds	r3, #24
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	3304      	adds	r3, #4
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <etharp_input+0x74>
    for_us = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	75fb      	strb	r3, [r7, #23]
 800c84a:	e009      	b.n	800c860 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	3304      	adds	r3, #4
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	bf0c      	ite	eq
 800c858:	2301      	moveq	r3, #1
 800c85a:	2300      	movne	r3, #0
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f103 0208 	add.w	r2, r3, #8
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <etharp_input+0x98>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e000      	b.n	800c872 <etharp_input+0x9a>
 800c870:	2302      	movs	r3, #2
 800c872:	f107 010c 	add.w	r1, r7, #12
 800c876:	6838      	ldr	r0, [r7, #0]
 800c878:	f7ff fed8 	bl	800c62c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	88db      	ldrh	r3, [r3, #6]
 800c880:	b29b      	uxth	r3, r3
 800c882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c886:	d003      	beq.n	800c890 <etharp_input+0xb8>
 800c888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c88c:	d01e      	beq.n	800c8cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c88e:	e020      	b.n	800c8d2 <etharp_input+0xfa>
      if (for_us) {
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d01c      	beq.n	800c8d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c8b0:	2102      	movs	r1, #2
 800c8b2:	9103      	str	r1, [sp, #12]
 800c8b4:	f107 010c 	add.w	r1, r7, #12
 800c8b8:	9102      	str	r1, [sp, #8]
 800c8ba:	9201      	str	r2, [sp, #4]
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	462b      	mov	r3, r5
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4601      	mov	r1, r0
 800c8c4:	6838      	ldr	r0, [r7, #0]
 800c8c6:	f000 faeb 	bl	800cea0 <etharp_raw>
      break;
 800c8ca:	e001      	b.n	800c8d0 <etharp_input+0xf8>
      break;
 800c8cc:	bf00      	nop
 800c8ce:	e000      	b.n	800c8d2 <etharp_input+0xfa>
      break;
 800c8d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7f8 faac 	bl	8004e30 <pbuf_free>
}
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	08011b60 	.word	0x08011b60
 800c8e4:	08011cb0 	.word	0x08011cb0
 800c8e8:	08011bd8 	.word	0x08011bd8

0800c8ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	4944      	ldr	r1, [pc, #272]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c8fe:	4613      	mov	r3, r2
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	4413      	add	r3, r2
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	440b      	add	r3, r1
 800c908:	3314      	adds	r3, #20
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d806      	bhi.n	800c91e <etharp_output_to_arp_index+0x32>
 800c910:	4b40      	ldr	r3, [pc, #256]	; (800ca14 <etharp_output_to_arp_index+0x128>)
 800c912:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c916:	4940      	ldr	r1, [pc, #256]	; (800ca18 <etharp_output_to_arp_index+0x12c>)
 800c918:	4840      	ldr	r0, [pc, #256]	; (800ca1c <etharp_output_to_arp_index+0x130>)
 800c91a:	f001 ff3d 	bl	800e798 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c91e:	79fa      	ldrb	r2, [r7, #7]
 800c920:	493b      	ldr	r1, [pc, #236]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c922:	4613      	mov	r3, r2
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	4413      	add	r3, r2
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	440b      	add	r3, r1
 800c92c:	3314      	adds	r3, #20
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b02      	cmp	r3, #2
 800c932:	d153      	bne.n	800c9dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c934:	79fa      	ldrb	r2, [r7, #7]
 800c936:	4936      	ldr	r1, [pc, #216]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c938:	4613      	mov	r3, r2
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	4413      	add	r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	440b      	add	r3, r1
 800c942:	3312      	adds	r3, #18
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c94a:	d919      	bls.n	800c980 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c94c:	79fa      	ldrb	r2, [r7, #7]
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	4a2e      	ldr	r2, [pc, #184]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c958:	4413      	add	r3, r2
 800c95a:	3304      	adds	r3, #4
 800c95c:	4619      	mov	r1, r3
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f000 fb4c 	bl	800cffc <etharp_request>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d138      	bne.n	800c9dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c96a:	79fa      	ldrb	r2, [r7, #7]
 800c96c:	4928      	ldr	r1, [pc, #160]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c96e:	4613      	mov	r3, r2
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	440b      	add	r3, r1
 800c978:	3314      	adds	r3, #20
 800c97a:	2203      	movs	r2, #3
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	e02d      	b.n	800c9dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c980:	79fa      	ldrb	r2, [r7, #7]
 800c982:	4923      	ldr	r1, [pc, #140]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c984:	4613      	mov	r3, r2
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	4413      	add	r3, r2
 800c98a:	00db      	lsls	r3, r3, #3
 800c98c:	440b      	add	r3, r1
 800c98e:	3312      	adds	r3, #18
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c996:	d321      	bcc.n	800c9dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c998:	79fa      	ldrb	r2, [r7, #7]
 800c99a:	4613      	mov	r3, r2
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	4413      	add	r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	4a1b      	ldr	r2, [pc, #108]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c9a4:	4413      	add	r3, r2
 800c9a6:	1d19      	adds	r1, r3, #4
 800c9a8:	79fa      	ldrb	r2, [r7, #7]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c9b6:	4413      	add	r3, r2
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 fafb 	bl	800cfb8 <etharp_request_dst>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d109      	bne.n	800c9dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9c8:	79fa      	ldrb	r2, [r7, #7]
 800c9ca:	4911      	ldr	r1, [pc, #68]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	440b      	add	r3, r1
 800c9d6:	3314      	adds	r3, #20
 800c9d8:	2203      	movs	r2, #3
 800c9da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c9e2:	79fa      	ldrb	r2, [r7, #7]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	3308      	adds	r3, #8
 800c9ee:	4a08      	ldr	r2, [pc, #32]	; (800ca10 <etharp_output_to_arp_index+0x124>)
 800c9f0:	4413      	add	r3, r2
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9f8:	9200      	str	r2, [sp, #0]
 800c9fa:	460a      	mov	r2, r1
 800c9fc:	68b9      	ldr	r1, [r7, #8]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 fe3a 	bl	800e678 <ethernet_output>
 800ca04:	4603      	mov	r3, r0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20000110 	.word	0x20000110
 800ca14:	08011b60 	.word	0x08011b60
 800ca18:	08011cd0 	.word	0x08011cd0
 800ca1c:	08011bd8 	.word	0x08011bd8

0800ca20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08a      	sub	sp, #40	; 0x28
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <etharp_output+0x24>
 800ca36:	4b73      	ldr	r3, [pc, #460]	; (800cc04 <etharp_output+0x1e4>)
 800ca38:	f240 321e 	movw	r2, #798	; 0x31e
 800ca3c:	4972      	ldr	r1, [pc, #456]	; (800cc08 <etharp_output+0x1e8>)
 800ca3e:	4873      	ldr	r0, [pc, #460]	; (800cc0c <etharp_output+0x1ec>)
 800ca40:	f001 feaa 	bl	800e798 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d106      	bne.n	800ca58 <etharp_output+0x38>
 800ca4a:	4b6e      	ldr	r3, [pc, #440]	; (800cc04 <etharp_output+0x1e4>)
 800ca4c:	f240 321f 	movw	r2, #799	; 0x31f
 800ca50:	496f      	ldr	r1, [pc, #444]	; (800cc10 <etharp_output+0x1f0>)
 800ca52:	486e      	ldr	r0, [pc, #440]	; (800cc0c <etharp_output+0x1ec>)
 800ca54:	f001 fea0 	bl	800e798 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <etharp_output+0x4c>
 800ca5e:	4b69      	ldr	r3, [pc, #420]	; (800cc04 <etharp_output+0x1e4>)
 800ca60:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ca64:	496b      	ldr	r1, [pc, #428]	; (800cc14 <etharp_output+0x1f4>)
 800ca66:	4869      	ldr	r0, [pc, #420]	; (800cc0c <etharp_output+0x1ec>)
 800ca68:	f001 fe96 	bl	800e798 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68f9      	ldr	r1, [r7, #12]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 fef8 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d002      	beq.n	800ca84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca7e:	4b66      	ldr	r3, [pc, #408]	; (800cc18 <etharp_output+0x1f8>)
 800ca80:	61fb      	str	r3, [r7, #28]
 800ca82:	e0af      	b.n	800cbe4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca8c:	2be0      	cmp	r3, #224	; 0xe0
 800ca8e:	d118      	bne.n	800cac2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ca90:	2301      	movs	r3, #1
 800ca92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ca94:	2300      	movs	r3, #0
 800ca96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ca98:	235e      	movs	r3, #94	; 0x5e
 800ca9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3302      	adds	r3, #2
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3303      	adds	r3, #3
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800caba:	f107 0310 	add.w	r3, r7, #16
 800cabe:	61fb      	str	r3, [r7, #28]
 800cac0:	e090      	b.n	800cbe4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3304      	adds	r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	405a      	eors	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3308      	adds	r3, #8
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4013      	ands	r3, r2
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d012      	beq.n	800cb00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cae0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d00b      	beq.n	800cb00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	330c      	adds	r3, #12
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	330c      	adds	r3, #12
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	e002      	b.n	800cb00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cafa:	f06f 0303 	mvn.w	r3, #3
 800cafe:	e07d      	b.n	800cbfc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb00:	4b46      	ldr	r3, [pc, #280]	; (800cc1c <etharp_output+0x1fc>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	4619      	mov	r1, r3
 800cb06:	4a46      	ldr	r2, [pc, #280]	; (800cc20 <etharp_output+0x200>)
 800cb08:	460b      	mov	r3, r1
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	440b      	add	r3, r1
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	3314      	adds	r3, #20
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d925      	bls.n	800cb66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb1a:	4b40      	ldr	r3, [pc, #256]	; (800cc1c <etharp_output+0x1fc>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4a3f      	ldr	r2, [pc, #252]	; (800cc20 <etharp_output+0x200>)
 800cb22:	460b      	mov	r3, r1
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	440b      	add	r3, r1
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	4413      	add	r3, r2
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d117      	bne.n	800cb66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	4b38      	ldr	r3, [pc, #224]	; (800cc1c <etharp_output+0x1fc>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	4937      	ldr	r1, [pc, #220]	; (800cc20 <etharp_output+0x200>)
 800cb42:	4603      	mov	r3, r0
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	4403      	add	r3, r0
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	440b      	add	r3, r1
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d108      	bne.n	800cb66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cb54:	4b31      	ldr	r3, [pc, #196]	; (800cc1c <etharp_output+0x1fc>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7ff fec5 	bl	800c8ec <etharp_output_to_arp_index>
 800cb62:	4603      	mov	r3, r0
 800cb64:	e04a      	b.n	800cbfc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb66:	2300      	movs	r3, #0
 800cb68:	75fb      	strb	r3, [r7, #23]
 800cb6a:	e031      	b.n	800cbd0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb6c:	7dfa      	ldrb	r2, [r7, #23]
 800cb6e:	492c      	ldr	r1, [pc, #176]	; (800cc20 <etharp_output+0x200>)
 800cb70:	4613      	mov	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	440b      	add	r3, r1
 800cb7a:	3314      	adds	r3, #20
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d923      	bls.n	800cbca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cb82:	7dfa      	ldrb	r2, [r7, #23]
 800cb84:	4926      	ldr	r1, [pc, #152]	; (800cc20 <etharp_output+0x200>)
 800cb86:	4613      	mov	r3, r2
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	440b      	add	r3, r1
 800cb90:	3308      	adds	r3, #8
 800cb92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d117      	bne.n	800cbca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	6819      	ldr	r1, [r3, #0]
 800cb9e:	7dfa      	ldrb	r2, [r7, #23]
 800cba0:	481f      	ldr	r0, [pc, #124]	; (800cc20 <etharp_output+0x200>)
 800cba2:	4613      	mov	r3, r2
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	4413      	add	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	4403      	add	r3, r0
 800cbac:	3304      	adds	r3, #4
 800cbae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cbb0:	4299      	cmp	r1, r3
 800cbb2:	d10a      	bne.n	800cbca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cbb4:	4a19      	ldr	r2, [pc, #100]	; (800cc1c <etharp_output+0x1fc>)
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
 800cbb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cbba:	7dfb      	ldrb	r3, [r7, #23]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	68b9      	ldr	r1, [r7, #8]
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f7ff fe93 	bl	800c8ec <etharp_output_to_arp_index>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	e018      	b.n	800cbfc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	75fb      	strb	r3, [r7, #23]
 800cbd0:	7dfb      	ldrb	r3, [r7, #23]
 800cbd2:	2b09      	cmp	r3, #9
 800cbd4:	d9ca      	bls.n	800cb6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	69b9      	ldr	r1, [r7, #24]
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 f822 	bl	800cc24 <etharp_query>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	e00b      	b.n	800cbfc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cbea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	68b9      	ldr	r1, [r7, #8]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f001 fd3f 	bl	800e678 <ethernet_output>
 800cbfa:	4603      	mov	r3, r0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3720      	adds	r7, #32
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	08011b60 	.word	0x08011b60
 800cc08:	08011cb0 	.word	0x08011cb0
 800cc0c:	08011bd8 	.word	0x08011bd8
 800cc10:	08011d00 	.word	0x08011d00
 800cc14:	08011ca0 	.word	0x08011ca0
 800cc18:	08012308 	.word	0x08012308
 800cc1c:	20000200 	.word	0x20000200
 800cc20:	20000110 	.word	0x20000110

0800cc24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08c      	sub	sp, #48	; 0x30
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3326      	adds	r3, #38	; 0x26
 800cc34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cc36:	23ff      	movs	r3, #255	; 0xff
 800cc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68f9      	ldr	r1, [r7, #12]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fe0e 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10c      	bne.n	800cc6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc5a:	2be0      	cmp	r3, #224	; 0xe0
 800cc5c:	d006      	beq.n	800cc6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc6c:	f06f 030f 	mvn.w	r3, #15
 800cc70:	e101      	b.n	800ce76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	2101      	movs	r1, #1
 800cc76:	68b8      	ldr	r0, [r7, #8]
 800cc78:	f7ff fb60 	bl	800c33c <etharp_find_entry>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cc80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	da02      	bge.n	800cc8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cc88:	8a7b      	ldrh	r3, [r7, #18]
 800cc8a:	b25b      	sxtb	r3, r3
 800cc8c:	e0f3      	b.n	800ce76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cc8e:	8a7b      	ldrh	r3, [r7, #18]
 800cc90:	2b7e      	cmp	r3, #126	; 0x7e
 800cc92:	d906      	bls.n	800cca2 <etharp_query+0x7e>
 800cc94:	4b7a      	ldr	r3, [pc, #488]	; (800ce80 <etharp_query+0x25c>)
 800cc96:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cc9a:	497a      	ldr	r1, [pc, #488]	; (800ce84 <etharp_query+0x260>)
 800cc9c:	487a      	ldr	r0, [pc, #488]	; (800ce88 <etharp_query+0x264>)
 800cc9e:	f001 fd7b 	bl	800e798 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cca2:	8a7b      	ldrh	r3, [r7, #18]
 800cca4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cca6:	7c7a      	ldrb	r2, [r7, #17]
 800cca8:	4978      	ldr	r1, [pc, #480]	; (800ce8c <etharp_query+0x268>)
 800ccaa:	4613      	mov	r3, r2
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	440b      	add	r3, r1
 800ccb4:	3314      	adds	r3, #20
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d115      	bne.n	800cce8 <etharp_query+0xc4>
    is_new_entry = 1;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ccc0:	7c7a      	ldrb	r2, [r7, #17]
 800ccc2:	4972      	ldr	r1, [pc, #456]	; (800ce8c <etharp_query+0x268>)
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	3314      	adds	r3, #20
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ccd4:	7c7a      	ldrb	r2, [r7, #17]
 800ccd6:	496d      	ldr	r1, [pc, #436]	; (800ce8c <etharp_query+0x268>)
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	440b      	add	r3, r1
 800cce2:	3308      	adds	r3, #8
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cce8:	7c7a      	ldrb	r2, [r7, #17]
 800ccea:	4968      	ldr	r1, [pc, #416]	; (800ce8c <etharp_query+0x268>)
 800ccec:	4613      	mov	r3, r2
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	4413      	add	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d011      	beq.n	800cd22 <etharp_query+0xfe>
 800ccfe:	7c7a      	ldrb	r2, [r7, #17]
 800cd00:	4962      	ldr	r1, [pc, #392]	; (800ce8c <etharp_query+0x268>)
 800cd02:	4613      	mov	r3, r2
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4413      	add	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d806      	bhi.n	800cd22 <etharp_query+0xfe>
 800cd14:	4b5a      	ldr	r3, [pc, #360]	; (800ce80 <etharp_query+0x25c>)
 800cd16:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cd1a:	495d      	ldr	r1, [pc, #372]	; (800ce90 <etharp_query+0x26c>)
 800cd1c:	485a      	ldr	r0, [pc, #360]	; (800ce88 <etharp_query+0x264>)
 800cd1e:	f001 fd3b 	bl	800e798 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cd22:	6a3b      	ldr	r3, [r7, #32]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <etharp_query+0x10a>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10c      	bne.n	800cd48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 f963 	bl	800cffc <etharp_request>
 800cd36:	4603      	mov	r3, r0
 800cd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <etharp_query+0x124>
      return result;
 800cd42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd46:	e096      	b.n	800ce76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d106      	bne.n	800cd5c <etharp_query+0x138>
 800cd4e:	4b4c      	ldr	r3, [pc, #304]	; (800ce80 <etharp_query+0x25c>)
 800cd50:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cd54:	494f      	ldr	r1, [pc, #316]	; (800ce94 <etharp_query+0x270>)
 800cd56:	484c      	ldr	r0, [pc, #304]	; (800ce88 <etharp_query+0x264>)
 800cd58:	f001 fd1e 	bl	800e798 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cd5c:	7c7a      	ldrb	r2, [r7, #17]
 800cd5e:	494b      	ldr	r1, [pc, #300]	; (800ce8c <etharp_query+0x268>)
 800cd60:	4613      	mov	r3, r2
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	4413      	add	r3, r2
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	440b      	add	r3, r1
 800cd6a:	3314      	adds	r3, #20
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d917      	bls.n	800cda2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cd72:	4a49      	ldr	r2, [pc, #292]	; (800ce98 <etharp_query+0x274>)
 800cd74:	7c7b      	ldrb	r3, [r7, #17]
 800cd76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cd78:	7c7a      	ldrb	r2, [r7, #17]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	3308      	adds	r3, #8
 800cd84:	4a41      	ldr	r2, [pc, #260]	; (800ce8c <etharp_query+0x268>)
 800cd86:	4413      	add	r3, r2
 800cd88:	3304      	adds	r3, #4
 800cd8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd8e:	9200      	str	r2, [sp, #0]
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f001 fc6f 	bl	800e678 <ethernet_output>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cda0:	e067      	b.n	800ce72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cda2:	7c7a      	ldrb	r2, [r7, #17]
 800cda4:	4939      	ldr	r1, [pc, #228]	; (800ce8c <etharp_query+0x268>)
 800cda6:	4613      	mov	r3, r2
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	4413      	add	r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	440b      	add	r3, r1
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d15c      	bne.n	800ce72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cdc0:	e01c      	b.n	800cdfc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	895a      	ldrh	r2, [r3, #10]
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	891b      	ldrh	r3, [r3, #8]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d10a      	bne.n	800cde4 <etharp_query+0x1c0>
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d006      	beq.n	800cde4 <etharp_query+0x1c0>
 800cdd6:	4b2a      	ldr	r3, [pc, #168]	; (800ce80 <etharp_query+0x25c>)
 800cdd8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cddc:	492f      	ldr	r1, [pc, #188]	; (800ce9c <etharp_query+0x278>)
 800cdde:	482a      	ldr	r0, [pc, #168]	; (800ce88 <etharp_query+0x264>)
 800cde0:	f001 fcda 	bl	800e798 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	7b1b      	ldrb	r3, [r3, #12]
 800cde8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <etharp_query+0x1d2>
        copy_needed = 1;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	61bb      	str	r3, [r7, #24]
        break;
 800cdf4:	e005      	b.n	800ce02 <etharp_query+0x1de>
      }
      p = p->next;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1df      	bne.n	800cdc2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ce0e:	200e      	movs	r0, #14
 800ce10:	f7f8 fa7a 	bl	8005308 <pbuf_clone>
 800ce14:	61f8      	str	r0, [r7, #28]
 800ce16:	e004      	b.n	800ce22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ce1c:	69f8      	ldr	r0, [r7, #28]
 800ce1e:	f7f8 f8a7 	bl	8004f70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d021      	beq.n	800ce6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ce28:	7c7a      	ldrb	r2, [r7, #17]
 800ce2a:	4918      	ldr	r1, [pc, #96]	; (800ce8c <etharp_query+0x268>)
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	4413      	add	r3, r2
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	440b      	add	r3, r1
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00a      	beq.n	800ce52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ce3c:	7c7a      	ldrb	r2, [r7, #17]
 800ce3e:	4913      	ldr	r1, [pc, #76]	; (800ce8c <etharp_query+0x268>)
 800ce40:	4613      	mov	r3, r2
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	4413      	add	r3, r2
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	440b      	add	r3, r1
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f7 ffef 	bl	8004e30 <pbuf_free>
      }
      arp_table[i].q = p;
 800ce52:	7c7a      	ldrb	r2, [r7, #17]
 800ce54:	490d      	ldr	r1, [pc, #52]	; (800ce8c <etharp_query+0x268>)
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	440b      	add	r3, r1
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce6a:	e002      	b.n	800ce72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ce6c:	23ff      	movs	r3, #255	; 0xff
 800ce6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ce72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3728      	adds	r7, #40	; 0x28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08011b60 	.word	0x08011b60
 800ce84:	08011d0c 	.word	0x08011d0c
 800ce88:	08011bd8 	.word	0x08011bd8
 800ce8c:	20000110 	.word	0x20000110
 800ce90:	08011d1c 	.word	0x08011d1c
 800ce94:	08011d00 	.word	0x08011d00
 800ce98:	20000200 	.word	0x20000200
 800ce9c:	08011d44 	.word	0x08011d44

0800cea0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08a      	sub	sp, #40	; 0x28
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d106      	bne.n	800cec6 <etharp_raw+0x26>
 800ceb8:	4b3a      	ldr	r3, [pc, #232]	; (800cfa4 <etharp_raw+0x104>)
 800ceba:	f240 4257 	movw	r2, #1111	; 0x457
 800cebe:	493a      	ldr	r1, [pc, #232]	; (800cfa8 <etharp_raw+0x108>)
 800cec0:	483a      	ldr	r0, [pc, #232]	; (800cfac <etharp_raw+0x10c>)
 800cec2:	f001 fc69 	bl	800e798 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cec6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ceca:	211c      	movs	r1, #28
 800cecc:	200e      	movs	r0, #14
 800cece:	f7f7 fccb 	bl	8004868 <pbuf_alloc>
 800ced2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ceda:	f04f 33ff 	mov.w	r3, #4294967295
 800cede:	e05d      	b.n	800cf9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	895b      	ldrh	r3, [r3, #10]
 800cee4:	2b1b      	cmp	r3, #27
 800cee6:	d806      	bhi.n	800cef6 <etharp_raw+0x56>
 800cee8:	4b2e      	ldr	r3, [pc, #184]	; (800cfa4 <etharp_raw+0x104>)
 800ceea:	f240 4262 	movw	r2, #1122	; 0x462
 800ceee:	4930      	ldr	r1, [pc, #192]	; (800cfb0 <etharp_raw+0x110>)
 800cef0:	482e      	ldr	r0, [pc, #184]	; (800cfac <etharp_raw+0x10c>)
 800cef2:	f001 fc51 	bl	800e798 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cefc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f6 fce2 	bl	80038c8 <lwip_htons>
 800cf04:	4603      	mov	r3, r0
 800cf06:	461a      	mov	r2, r3
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf12:	2b06      	cmp	r3, #6
 800cf14:	d006      	beq.n	800cf24 <etharp_raw+0x84>
 800cf16:	4b23      	ldr	r3, [pc, #140]	; (800cfa4 <etharp_raw+0x104>)
 800cf18:	f240 4269 	movw	r2, #1129	; 0x469
 800cf1c:	4925      	ldr	r1, [pc, #148]	; (800cfb4 <etharp_raw+0x114>)
 800cf1e:	4823      	ldr	r0, [pc, #140]	; (800cfac <etharp_raw+0x10c>)
 800cf20:	f001 fc3a 	bl	800e798 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	3308      	adds	r3, #8
 800cf28:	2206      	movs	r2, #6
 800cf2a:	6839      	ldr	r1, [r7, #0]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f001 fc1d 	bl	800e76c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	3312      	adds	r3, #18
 800cf36:	2206      	movs	r2, #6
 800cf38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f001 fc16 	bl	800e76c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	330e      	adds	r3, #14
 800cf44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf46:	6812      	ldr	r2, [r2, #0]
 800cf48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	3318      	adds	r3, #24
 800cf4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf50:	6812      	ldr	r2, [r2, #0]
 800cf52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f042 0201 	orr.w	r2, r2, #1
 800cf60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f042 0208 	orr.w	r2, r2, #8
 800cf6a:	709a      	strb	r2, [r3, #2]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	2206      	movs	r2, #6
 800cf74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2204      	movs	r2, #4
 800cf7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cf7c:	f640 0306 	movw	r3, #2054	; 0x806
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	69b9      	ldr	r1, [r7, #24]
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f001 fb75 	bl	800e678 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cf8e:	69b8      	ldr	r0, [r7, #24]
 800cf90:	f7f7 ff4e 	bl	8004e30 <pbuf_free>
  p = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cf98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3720      	adds	r7, #32
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	08011b60 	.word	0x08011b60
 800cfa8:	08011cb0 	.word	0x08011cb0
 800cfac:	08011bd8 	.word	0x08011bd8
 800cfb0:	08011d60 	.word	0x08011d60
 800cfb4:	08011d94 	.word	0x08011d94

0800cfb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	9203      	str	r2, [sp, #12]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	9202      	str	r2, [sp, #8]
 800cfdc:	4a06      	ldr	r2, [pc, #24]	; (800cff8 <etharp_request_dst+0x40>)
 800cfde:	9201      	str	r2, [sp, #4]
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f7ff ff5a 	bl	800cea0 <etharp_raw>
 800cfec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	08012310 	.word	0x08012310

0800cffc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d006:	4a05      	ldr	r2, [pc, #20]	; (800d01c <etharp_request+0x20>)
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff ffd4 	bl	800cfb8 <etharp_request_dst>
 800d010:	4603      	mov	r3, r0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	08012308 	.word	0x08012308

0800d020 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08e      	sub	sp, #56	; 0x38
 800d024:	af04      	add	r7, sp, #16
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d02a:	4b79      	ldr	r3, [pc, #484]	; (800d210 <icmp_input+0x1f0>)
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	f003 030f 	and.w	r3, r3, #15
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d042:	2b13      	cmp	r3, #19
 800d044:	f240 80cd 	bls.w	800d1e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	2b03      	cmp	r3, #3
 800d04e:	f240 80ca 	bls.w	800d1e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d05c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 80b7 	beq.w	800d1d4 <icmp_input+0x1b4>
 800d066:	2b08      	cmp	r3, #8
 800d068:	f040 80b7 	bne.w	800d1da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d06c:	4b69      	ldr	r3, [pc, #420]	; (800d214 <icmp_input+0x1f4>)
 800d06e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d070:	4b67      	ldr	r3, [pc, #412]	; (800d210 <icmp_input+0x1f0>)
 800d072:	695b      	ldr	r3, [r3, #20]
 800d074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d078:	2be0      	cmp	r3, #224	; 0xe0
 800d07a:	f000 80bb 	beq.w	800d1f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d07e:	4b64      	ldr	r3, [pc, #400]	; (800d210 <icmp_input+0x1f0>)
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	4a63      	ldr	r2, [pc, #396]	; (800d210 <icmp_input+0x1f0>)
 800d084:	6812      	ldr	r2, [r2, #0]
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fbed 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	f040 80b1 	bne.w	800d1f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	891b      	ldrh	r3, [r3, #8]
 800d09a:	2b07      	cmp	r3, #7
 800d09c:	f240 80a5 	bls.w	800d1ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d0a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0a2:	330e      	adds	r3, #14
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7f7 fe2c 	bl	8004d04 <pbuf_add_header>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d04b      	beq.n	800d14a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	891a      	ldrh	r2, [r3, #8]
 800d0b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0b8:	4413      	add	r3, r2
 800d0ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	891b      	ldrh	r3, [r3, #8]
 800d0c0:	8b7a      	ldrh	r2, [r7, #26]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	f0c0 809a 	bcc.w	800d1fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d0c8:	8b7b      	ldrh	r3, [r7, #26]
 800d0ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	200e      	movs	r0, #14
 800d0d2:	f7f7 fbc9 	bl	8004868 <pbuf_alloc>
 800d0d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 8090 	beq.w	800d200 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	895b      	ldrh	r3, [r3, #10]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d203      	bcs.n	800d0f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d0ee:	6978      	ldr	r0, [r7, #20]
 800d0f0:	f7f7 fe9e 	bl	8004e30 <pbuf_free>
          goto icmperr;
 800d0f4:	e085      	b.n	800d202 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d0fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 fb34 	bl	800e76c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d106:	4619      	mov	r1, r3
 800d108:	6978      	ldr	r0, [r7, #20]
 800d10a:	f7f7 fe0b 	bl	8004d24 <pbuf_remove_header>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d009      	beq.n	800d128 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d114:	4b40      	ldr	r3, [pc, #256]	; (800d218 <icmp_input+0x1f8>)
 800d116:	22b6      	movs	r2, #182	; 0xb6
 800d118:	4940      	ldr	r1, [pc, #256]	; (800d21c <icmp_input+0x1fc>)
 800d11a:	4841      	ldr	r0, [pc, #260]	; (800d220 <icmp_input+0x200>)
 800d11c:	f001 fb3c 	bl	800e798 <iprintf>
          pbuf_free(r);
 800d120:	6978      	ldr	r0, [r7, #20]
 800d122:	f7f7 fe85 	bl	8004e30 <pbuf_free>
          goto icmperr;
 800d126:	e06c      	b.n	800d202 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	6978      	ldr	r0, [r7, #20]
 800d12c:	f7f7 ffa8 	bl	8005080 <pbuf_copy>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d136:	6978      	ldr	r0, [r7, #20]
 800d138:	f7f7 fe7a 	bl	8004e30 <pbuf_free>
          goto icmperr;
 800d13c:	e061      	b.n	800d202 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7f7 fe76 	bl	8004e30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	607b      	str	r3, [r7, #4]
 800d148:	e00f      	b.n	800d16a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d14a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d14c:	330e      	adds	r3, #14
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7f7 fde7 	bl	8004d24 <pbuf_remove_header>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d006      	beq.n	800d16a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d15c:	4b2e      	ldr	r3, [pc, #184]	; (800d218 <icmp_input+0x1f8>)
 800d15e:	22c7      	movs	r2, #199	; 0xc7
 800d160:	4930      	ldr	r1, [pc, #192]	; (800d224 <icmp_input+0x204>)
 800d162:	482f      	ldr	r0, [pc, #188]	; (800d220 <icmp_input+0x200>)
 800d164:	f001 fb18 	bl	800e798 <iprintf>
          goto icmperr;
 800d168:	e04b      	b.n	800d202 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7f7 fdc5 	bl	8004d04 <pbuf_add_header>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d12b      	bne.n	800d1d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d18e:	4b20      	ldr	r3, [pc, #128]	; (800d210 <icmp_input+0x1f0>)
 800d190:	691a      	ldr	r2, [r3, #16]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	2200      	movs	r2, #0
 800d19a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	709a      	strb	r2, [r3, #2]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	22ff      	movs	r2, #255	; 0xff
 800d1aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	729a      	strb	r2, [r3, #10]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	9302      	str	r3, [sp, #8]
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	23ff      	movs	r3, #255	; 0xff
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	69f9      	ldr	r1, [r7, #28]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fa75 	bl	800d6b8 <ip4_output_if>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d1d2:	e001      	b.n	800d1d8 <icmp_input+0x1b8>
      break;
 800d1d4:	bf00      	nop
 800d1d6:	e000      	b.n	800d1da <icmp_input+0x1ba>
      break;
 800d1d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7f7 fe28 	bl	8004e30 <pbuf_free>
  return;
 800d1e0:	e013      	b.n	800d20a <icmp_input+0x1ea>
    goto lenerr;
 800d1e2:	bf00      	nop
 800d1e4:	e002      	b.n	800d1ec <icmp_input+0x1cc>
    goto lenerr;
 800d1e6:	bf00      	nop
 800d1e8:	e000      	b.n	800d1ec <icmp_input+0x1cc>
        goto lenerr;
 800d1ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7f7 fe1f 	bl	8004e30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d1f2:	e00a      	b.n	800d20a <icmp_input+0x1ea>
        goto icmperr;
 800d1f4:	bf00      	nop
 800d1f6:	e004      	b.n	800d202 <icmp_input+0x1e2>
        goto icmperr;
 800d1f8:	bf00      	nop
 800d1fa:	e002      	b.n	800d202 <icmp_input+0x1e2>
          goto icmperr;
 800d1fc:	bf00      	nop
 800d1fe:	e000      	b.n	800d202 <icmp_input+0x1e2>
          goto icmperr;
 800d200:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7f7 fe14 	bl	8004e30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d208:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d20a:	3728      	adds	r7, #40	; 0x28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	2000334c 	.word	0x2000334c
 800d214:	20003360 	.word	0x20003360
 800d218:	08011dd8 	.word	0x08011dd8
 800d21c:	08011e10 	.word	0x08011e10
 800d220:	08011e48 	.word	0x08011e48
 800d224:	08011e70 	.word	0x08011e70

0800d228 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	461a      	mov	r2, r3
 800d238:	2103      	movs	r1, #3
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f814 	bl	800d268 <icmp_send_response>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	461a      	mov	r2, r3
 800d258:	210b      	movs	r1, #11
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f804 	bl	800d268 <icmp_send_response>
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08c      	sub	sp, #48	; 0x30
 800d26c:	af04      	add	r7, sp, #16
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
 800d274:	4613      	mov	r3, r2
 800d276:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d278:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d27c:	2124      	movs	r1, #36	; 0x24
 800d27e:	2022      	movs	r0, #34	; 0x22
 800d280:	f7f7 faf2 	bl	8004868 <pbuf_alloc>
 800d284:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d04c      	beq.n	800d326 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	2b23      	cmp	r3, #35	; 0x23
 800d292:	d806      	bhi.n	800d2a2 <icmp_send_response+0x3a>
 800d294:	4b26      	ldr	r3, [pc, #152]	; (800d330 <icmp_send_response+0xc8>)
 800d296:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d29a:	4926      	ldr	r1, [pc, #152]	; (800d334 <icmp_send_response+0xcc>)
 800d29c:	4826      	ldr	r0, [pc, #152]	; (800d338 <icmp_send_response+0xd0>)
 800d29e:	f001 fa7b 	bl	800e798 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	78fa      	ldrb	r2, [r7, #3]
 800d2b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	78ba      	ldrb	r2, [r7, #2]
 800d2b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	711a      	strb	r2, [r3, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	719a      	strb	r2, [r3, #6]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	f103 0008 	add.w	r0, r3, #8
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	221c      	movs	r2, #28
 800d2dc:	4619      	mov	r1, r3
 800d2de:	f001 fa45 	bl	800e76c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 f825 	bl	800d33c <ip4_route>
 800d2f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d011      	beq.n	800d31e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	709a      	strb	r2, [r3, #2]
 800d300:	2200      	movs	r2, #0
 800d302:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d304:	f107 020c 	add.w	r2, r7, #12
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	9302      	str	r3, [sp, #8]
 800d30c:	2301      	movs	r3, #1
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	2300      	movs	r3, #0
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	23ff      	movs	r3, #255	; 0xff
 800d316:	2100      	movs	r1, #0
 800d318:	69f8      	ldr	r0, [r7, #28]
 800d31a:	f000 f9cd 	bl	800d6b8 <ip4_output_if>
  }
  pbuf_free(q);
 800d31e:	69f8      	ldr	r0, [r7, #28]
 800d320:	f7f7 fd86 	bl	8004e30 <pbuf_free>
 800d324:	e000      	b.n	800d328 <icmp_send_response+0xc0>
    return;
 800d326:	bf00      	nop
}
 800d328:	3720      	adds	r7, #32
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	08011dd8 	.word	0x08011dd8
 800d334:	08011ea4 	.word	0x08011ea4
 800d338:	08011e48 	.word	0x08011e48

0800d33c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d344:	4b33      	ldr	r3, [pc, #204]	; (800d414 <ip4_route+0xd8>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e036      	b.n	800d3ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d02b      	beq.n	800d3b4 <ip4_route+0x78>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d362:	089b      	lsrs	r3, r3, #2
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d022      	beq.n	800d3b4 <ip4_route+0x78>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3304      	adds	r3, #4
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01d      	beq.n	800d3b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3304      	adds	r3, #4
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	405a      	eors	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3308      	adds	r3, #8
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4013      	ands	r3, r2
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	e038      	b.n	800d406 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d108      	bne.n	800d3b4 <ip4_route+0x78>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	330c      	adds	r3, #12
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d101      	bne.n	800d3b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	e028      	b.n	800d406 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1c5      	bne.n	800d34c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3c0:	4b15      	ldr	r3, [pc, #84]	; (800d418 <ip4_route+0xdc>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d01a      	beq.n	800d3fe <ip4_route+0xc2>
 800d3c8:	4b13      	ldr	r3, [pc, #76]	; (800d418 <ip4_route+0xdc>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d012      	beq.n	800d3fe <ip4_route+0xc2>
 800d3d8:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <ip4_route+0xdc>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00a      	beq.n	800d3fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d3e8:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <ip4_route+0xdc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d3fc:	d101      	bne.n	800d402 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	e001      	b.n	800d406 <ip4_route+0xca>
  }

  return netif_default;
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <ip4_route+0xdc>)
 800d404:	681b      	ldr	r3, [r3, #0]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	20006880 	.word	0x20006880
 800d418:	20006884 	.word	0x20006884

0800d41c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d016      	beq.n	800d462 <ip4_input_accept+0x46>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3304      	adds	r3, #4
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d011      	beq.n	800d462 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d43e:	4b0b      	ldr	r3, [pc, #44]	; (800d46c <ip4_input_accept+0x50>)
 800d440:	695a      	ldr	r2, [r3, #20]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	3304      	adds	r3, #4
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d008      	beq.n	800d45e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d44c:	4b07      	ldr	r3, [pc, #28]	; (800d46c <ip4_input_accept+0x50>)
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	6879      	ldr	r1, [r7, #4]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 fa08 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800d458:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	2000334c 	.word	0x2000334c

0800d470 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	091b      	lsrs	r3, r3, #4
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b04      	cmp	r3, #4
 800d48a:	d004      	beq.n	800d496 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7f7 fccf 	bl	8004e30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	e107      	b.n	800d6a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f003 030f 	and.w	r3, r3, #15
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f6 fa0b 	bl	80038c8 <lwip_htons>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	891b      	ldrh	r3, [r3, #8]
 800d4ba:	89ba      	ldrh	r2, [r7, #12]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d204      	bcs.n	800d4ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d4c0:	89bb      	ldrh	r3, [r7, #12]
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7f7 fb2d 	bl	8004b24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	895b      	ldrh	r3, [r3, #10]
 800d4ce:	89fa      	ldrh	r2, [r7, #14]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d807      	bhi.n	800d4e4 <ip4_input+0x74>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	891b      	ldrh	r3, [r3, #8]
 800d4d8:	89ba      	ldrh	r2, [r7, #12]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d802      	bhi.n	800d4e4 <ip4_input+0x74>
 800d4de:	89fb      	ldrh	r3, [r7, #14]
 800d4e0:	2b13      	cmp	r3, #19
 800d4e2:	d804      	bhi.n	800d4ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7f7 fca3 	bl	8004e30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e0db      	b.n	800d6a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	4a6f      	ldr	r2, [pc, #444]	; (800d6b0 <ip4_input+0x240>)
 800d4f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	4a6d      	ldr	r2, [pc, #436]	; (800d6b0 <ip4_input+0x240>)
 800d4fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d4fe:	4b6c      	ldr	r3, [pc, #432]	; (800d6b0 <ip4_input+0x240>)
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d506:	2be0      	cmp	r3, #224	; 0xe0
 800d508:	d112      	bne.n	800d530 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <ip4_input+0xba>
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	3304      	adds	r3, #4
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <ip4_input+0xba>
      netif = inp;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	613b      	str	r3, [r7, #16]
 800d528:	e02a      	b.n	800d580 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	613b      	str	r3, [r7, #16]
 800d52e:	e027      	b.n	800d580 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d530:	6838      	ldr	r0, [r7, #0]
 800d532:	f7ff ff73 	bl	800d41c <ip4_input_accept>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <ip4_input+0xd2>
      netif = inp;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	613b      	str	r3, [r7, #16]
 800d540:	e01e      	b.n	800d580 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d546:	4b5a      	ldr	r3, [pc, #360]	; (800d6b0 <ip4_input+0x240>)
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b7f      	cmp	r3, #127	; 0x7f
 800d54e:	d017      	beq.n	800d580 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d550:	4b58      	ldr	r3, [pc, #352]	; (800d6b4 <ip4_input+0x244>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	613b      	str	r3, [r7, #16]
 800d556:	e00e      	b.n	800d576 <ip4_input+0x106>
          if (netif == inp) {
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d006      	beq.n	800d56e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d560:	6938      	ldr	r0, [r7, #16]
 800d562:	f7ff ff5b 	bl	800d41c <ip4_input_accept>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d108      	bne.n	800d57e <ip4_input+0x10e>
 800d56c:	e000      	b.n	800d570 <ip4_input+0x100>
            continue;
 800d56e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1ed      	bne.n	800d558 <ip4_input+0xe8>
 800d57c:	e000      	b.n	800d580 <ip4_input+0x110>
            break;
 800d57e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d580:	4b4b      	ldr	r3, [pc, #300]	; (800d6b0 <ip4_input+0x240>)
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	4618      	mov	r0, r3
 800d588:	f000 f96e 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d105      	bne.n	800d59e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d592:	4b47      	ldr	r3, [pc, #284]	; (800d6b0 <ip4_input+0x240>)
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d59a:	2be0      	cmp	r3, #224	; 0xe0
 800d59c:	d104      	bne.n	800d5a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7f7 fc46 	bl	8004e30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e07e      	b.n	800d6a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d104      	bne.n	800d5b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7f7 fc3e 	bl	8004e30 <pbuf_free>
    return ERR_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	e076      	b.n	800d6a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	88db      	ldrh	r3, [r3, #6]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fc92 	bl	800def4 <ip4_reass>
 800d5d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <ip4_input+0x16c>
      return ERR_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	e064      	b.n	800d6a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d5e2:	4a33      	ldr	r2, [pc, #204]	; (800d6b0 <ip4_input+0x240>)
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d5e8:	4a31      	ldr	r2, [pc, #196]	; (800d6b0 <ip4_input+0x240>)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d5ee:	4a30      	ldr	r2, [pc, #192]	; (800d6b0 <ip4_input+0x240>)
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	f003 030f 	and.w	r3, r3, #15
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	b2db      	uxtb	r3, r3
 800d602:	b29a      	uxth	r2, r3
 800d604:	4b2a      	ldr	r3, [pc, #168]	; (800d6b0 <ip4_input+0x240>)
 800d606:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d608:	89fb      	ldrh	r3, [r7, #14]
 800d60a:	4619      	mov	r1, r3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7f7 fb89 	bl	8004d24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	7a5b      	ldrb	r3, [r3, #9]
 800d616:	2b11      	cmp	r3, #17
 800d618:	d006      	beq.n	800d628 <ip4_input+0x1b8>
 800d61a:	2b11      	cmp	r3, #17
 800d61c:	dc13      	bgt.n	800d646 <ip4_input+0x1d6>
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d00c      	beq.n	800d63c <ip4_input+0x1cc>
 800d622:	2b06      	cmp	r3, #6
 800d624:	d005      	beq.n	800d632 <ip4_input+0x1c2>
 800d626:	e00e      	b.n	800d646 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7fe f8e6 	bl	800b7fc <udp_input>
        break;
 800d630:	e026      	b.n	800d680 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7f9 fcd3 	bl	8006fe0 <tcp_input>
        break;
 800d63a:	e021      	b.n	800d680 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff fcee 	bl	800d020 <icmp_input>
        break;
 800d644:	e01c      	b.n	800d680 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d646:	4b1a      	ldr	r3, [pc, #104]	; (800d6b0 <ip4_input+0x240>)
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	6939      	ldr	r1, [r7, #16]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f90b 	bl	800d868 <ip4_addr_isbroadcast_u32>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10f      	bne.n	800d678 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d658:	4b15      	ldr	r3, [pc, #84]	; (800d6b0 <ip4_input+0x240>)
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d660:	2be0      	cmp	r3, #224	; 0xe0
 800d662:	d009      	beq.n	800d678 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7f7 fbcd 	bl	8004e0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d670:	2102      	movs	r1, #2
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fdd8 	bl	800d228 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7f7 fbd9 	bl	8004e30 <pbuf_free>
        break;
 800d67e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d680:	4b0b      	ldr	r3, [pc, #44]	; (800d6b0 <ip4_input+0x240>)
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d686:	4b0a      	ldr	r3, [pc, #40]	; (800d6b0 <ip4_input+0x240>)
 800d688:	2200      	movs	r2, #0
 800d68a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d68c:	4b08      	ldr	r3, [pc, #32]	; (800d6b0 <ip4_input+0x240>)
 800d68e:	2200      	movs	r2, #0
 800d690:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d692:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <ip4_input+0x240>)
 800d694:	2200      	movs	r2, #0
 800d696:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d698:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <ip4_input+0x240>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d69e:	4b04      	ldr	r3, [pc, #16]	; (800d6b0 <ip4_input+0x240>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	2000334c 	.word	0x2000334c
 800d6b4:	20006880 	.word	0x20006880

0800d6b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08a      	sub	sp, #40	; 0x28
 800d6bc:	af04      	add	r7, sp, #16
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d009      	beq.n	800d6e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <ip4_output_if+0x26>
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d6e4:	78fa      	ldrb	r2, [r7, #3]
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	9302      	str	r3, [sp, #8]
 800d6ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6f4:	9300      	str	r3, [sp, #0]
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	6979      	ldr	r1, [r7, #20]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f000 f805 	bl	800d70c <ip4_output_if_src>
 800d702:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	7b9b      	ldrb	r3, [r3, #14]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d006      	beq.n	800d730 <ip4_output_if_src+0x24>
 800d722:	4b4b      	ldr	r3, [pc, #300]	; (800d850 <ip4_output_if_src+0x144>)
 800d724:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d728:	494a      	ldr	r1, [pc, #296]	; (800d854 <ip4_output_if_src+0x148>)
 800d72a:	484b      	ldr	r0, [pc, #300]	; (800d858 <ip4_output_if_src+0x14c>)
 800d72c:	f001 f834 	bl	800e798 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d060      	beq.n	800d7f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d736:	2314      	movs	r3, #20
 800d738:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d73a:	2114      	movs	r1, #20
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7f7 fae1 	bl	8004d04 <pbuf_add_header>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d002      	beq.n	800d74e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d748:	f06f 0301 	mvn.w	r3, #1
 800d74c:	e07c      	b.n	800d848 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	895b      	ldrh	r3, [r3, #10]
 800d758:	2b13      	cmp	r3, #19
 800d75a:	d806      	bhi.n	800d76a <ip4_output_if_src+0x5e>
 800d75c:	4b3c      	ldr	r3, [pc, #240]	; (800d850 <ip4_output_if_src+0x144>)
 800d75e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d762:	493e      	ldr	r1, [pc, #248]	; (800d85c <ip4_output_if_src+0x150>)
 800d764:	483c      	ldr	r0, [pc, #240]	; (800d858 <ip4_output_if_src+0x14c>)
 800d766:	f001 f817 	bl	800e798 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	78fa      	ldrb	r2, [r7, #3]
 800d76e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d776:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d780:	8b7b      	ldrh	r3, [r7, #26]
 800d782:	089b      	lsrs	r3, r3, #2
 800d784:	b29b      	uxth	r3, r3
 800d786:	b2db      	uxtb	r3, r3
 800d788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d798:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	891b      	ldrh	r3, [r3, #8]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f6 f892 	bl	80038c8 <lwip_htons>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	719a      	strb	r2, [r3, #6]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d7b6:	4b2a      	ldr	r3, [pc, #168]	; (800d860 <ip4_output_if_src+0x154>)
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7f6 f884 	bl	80038c8 <lwip_htons>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d7c8:	4b25      	ldr	r3, [pc, #148]	; (800d860 <ip4_output_if_src+0x154>)
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	4b23      	ldr	r3, [pc, #140]	; (800d860 <ip4_output_if_src+0x154>)
 800d7d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d104      	bne.n	800d7e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d7da:	4b22      	ldr	r3, [pc, #136]	; (800d864 <ip4_output_if_src+0x158>)
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	60da      	str	r2, [r3, #12]
 800d7e2:	e003      	b.n	800d7ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	729a      	strb	r2, [r3, #10]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	72da      	strb	r2, [r3, #11]
 800d7f6:	e00f      	b.n	800d818 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	895b      	ldrh	r3, [r3, #10]
 800d7fc:	2b13      	cmp	r3, #19
 800d7fe:	d802      	bhi.n	800d806 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d800:	f06f 0301 	mvn.w	r3, #1
 800d804:	e020      	b.n	800d848 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d812:	f107 0314 	add.w	r3, r7, #20
 800d816:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00c      	beq.n	800d83a <ip4_output_if_src+0x12e>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	891a      	ldrh	r2, [r3, #8]
 800d824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d828:	429a      	cmp	r2, r3
 800d82a:	d906      	bls.n	800d83a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f000 fd4d 	bl	800e2d0 <ip4_frag>
 800d836:	4603      	mov	r3, r0
 800d838:	e006      	b.n	800d848 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	695b      	ldr	r3, [r3, #20]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	68f9      	ldr	r1, [r7, #12]
 800d842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d844:	4798      	blx	r3
 800d846:	4603      	mov	r3, r0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	08011ed0 	.word	0x08011ed0
 800d854:	08011f04 	.word	0x08011f04
 800d858:	08011f10 	.word	0x08011f10
 800d85c:	08011f38 	.word	0x08011f38
 800d860:	20000202 	.word	0x20000202
 800d864:	08012304 	.word	0x08012304

0800d868 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87c:	d002      	beq.n	800d884 <ip4_addr_isbroadcast_u32+0x1c>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d101      	bne.n	800d888 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d884:	2301      	movs	r3, #1
 800d886:	e02a      	b.n	800d8de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d896:	2300      	movs	r3, #0
 800d898:	e021      	b.n	800d8de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	3304      	adds	r3, #4
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d101      	bne.n	800d8aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e019      	b.n	800d8de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	405a      	eors	r2, r3
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10d      	bne.n	800d8dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	43da      	mvns	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d101      	bne.n	800d8dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e000      	b.n	800d8de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d8dc:	2300      	movs	r3, #0
  }
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
	...

0800d8ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d8f6:	4b12      	ldr	r3, [pc, #72]	; (800d940 <ip_reass_tmr+0x54>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d8fc:	e018      	b.n	800d930 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	7fdb      	ldrb	r3, [r3, #31]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00b      	beq.n	800d91e <ip_reass_tmr+0x32>
      r->timer--;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	7fdb      	ldrb	r3, [r3, #31]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	e008      	b.n	800d930 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f80a 	bl	800d944 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1e3      	bne.n	800d8fe <ip_reass_tmr+0x12>
    }
  }
}
 800d936:	bf00      	nop
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20000204 	.word	0x20000204

0800d944 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	429a      	cmp	r2, r3
 800d958:	d105      	bne.n	800d966 <ip_reass_free_complete_datagram+0x22>
 800d95a:	4b45      	ldr	r3, [pc, #276]	; (800da70 <ip_reass_free_complete_datagram+0x12c>)
 800d95c:	22ab      	movs	r2, #171	; 0xab
 800d95e:	4945      	ldr	r1, [pc, #276]	; (800da74 <ip_reass_free_complete_datagram+0x130>)
 800d960:	4845      	ldr	r0, [pc, #276]	; (800da78 <ip_reass_free_complete_datagram+0x134>)
 800d962:	f000 ff19 	bl	800e798 <iprintf>
  if (prev != NULL) {
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00a      	beq.n	800d982 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	429a      	cmp	r2, r3
 800d974:	d005      	beq.n	800d982 <ip_reass_free_complete_datagram+0x3e>
 800d976:	4b3e      	ldr	r3, [pc, #248]	; (800da70 <ip_reass_free_complete_datagram+0x12c>)
 800d978:	22ad      	movs	r2, #173	; 0xad
 800d97a:	4940      	ldr	r1, [pc, #256]	; (800da7c <ip_reass_free_complete_datagram+0x138>)
 800d97c:	483e      	ldr	r0, [pc, #248]	; (800da78 <ip_reass_free_complete_datagram+0x134>)
 800d97e:	f000 ff0b 	bl	800e798 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	889b      	ldrh	r3, [r3, #4]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	2b00      	cmp	r3, #0
 800d992:	d12a      	bne.n	800d9ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	6858      	ldr	r0, [r3, #4]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	2214      	movs	r2, #20
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f000 fedd 	bl	800e76c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	69b8      	ldr	r0, [r7, #24]
 800d9b6:	f7ff fc47 	bl	800d248 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d9ba:	69b8      	ldr	r0, [r7, #24]
 800d9bc:	f7f7 fac0 	bl	8004f40 <pbuf_clen>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d9c4:	8bfa      	ldrh	r2, [r7, #30]
 800d9c6:	8a7b      	ldrh	r3, [r7, #18]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ce:	db05      	blt.n	800d9dc <ip_reass_free_complete_datagram+0x98>
 800d9d0:	4b27      	ldr	r3, [pc, #156]	; (800da70 <ip_reass_free_complete_datagram+0x12c>)
 800d9d2:	22bc      	movs	r2, #188	; 0xbc
 800d9d4:	492a      	ldr	r1, [pc, #168]	; (800da80 <ip_reass_free_complete_datagram+0x13c>)
 800d9d6:	4828      	ldr	r0, [pc, #160]	; (800da78 <ip_reass_free_complete_datagram+0x134>)
 800d9d8:	f000 fede 	bl	800e798 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d9dc:	8bfa      	ldrh	r2, [r7, #30]
 800d9de:	8a7b      	ldrh	r3, [r7, #18]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d9e4:	69b8      	ldr	r0, [r7, #24]
 800d9e6:	f7f7 fa23 	bl	8004e30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d9f0:	e01f      	b.n	800da32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7f7 fa9c 	bl	8004f40 <pbuf_clen>
 800da08:	4603      	mov	r3, r0
 800da0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800da0c:	8bfa      	ldrh	r2, [r7, #30]
 800da0e:	8a7b      	ldrh	r3, [r7, #18]
 800da10:	4413      	add	r3, r2
 800da12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da16:	db05      	blt.n	800da24 <ip_reass_free_complete_datagram+0xe0>
 800da18:	4b15      	ldr	r3, [pc, #84]	; (800da70 <ip_reass_free_complete_datagram+0x12c>)
 800da1a:	22cc      	movs	r2, #204	; 0xcc
 800da1c:	4918      	ldr	r1, [pc, #96]	; (800da80 <ip_reass_free_complete_datagram+0x13c>)
 800da1e:	4816      	ldr	r0, [pc, #88]	; (800da78 <ip_reass_free_complete_datagram+0x134>)
 800da20:	f000 feba 	bl	800e798 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800da24:	8bfa      	ldrh	r2, [r7, #30]
 800da26:	8a7b      	ldrh	r3, [r7, #18]
 800da28:	4413      	add	r3, r2
 800da2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7f7 f9ff 	bl	8004e30 <pbuf_free>
  while (p != NULL) {
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1dc      	bne.n	800d9f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f8c2 	bl	800dbc4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800da40:	4b10      	ldr	r3, [pc, #64]	; (800da84 <ip_reass_free_complete_datagram+0x140>)
 800da42:	881b      	ldrh	r3, [r3, #0]
 800da44:	8bfa      	ldrh	r2, [r7, #30]
 800da46:	429a      	cmp	r2, r3
 800da48:	d905      	bls.n	800da56 <ip_reass_free_complete_datagram+0x112>
 800da4a:	4b09      	ldr	r3, [pc, #36]	; (800da70 <ip_reass_free_complete_datagram+0x12c>)
 800da4c:	22d2      	movs	r2, #210	; 0xd2
 800da4e:	490e      	ldr	r1, [pc, #56]	; (800da88 <ip_reass_free_complete_datagram+0x144>)
 800da50:	4809      	ldr	r0, [pc, #36]	; (800da78 <ip_reass_free_complete_datagram+0x134>)
 800da52:	f000 fea1 	bl	800e798 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <ip_reass_free_complete_datagram+0x140>)
 800da58:	881a      	ldrh	r2, [r3, #0]
 800da5a:	8bfb      	ldrh	r3, [r7, #30]
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	b29a      	uxth	r2, r3
 800da60:	4b08      	ldr	r3, [pc, #32]	; (800da84 <ip_reass_free_complete_datagram+0x140>)
 800da62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800da64:	8bfb      	ldrh	r3, [r7, #30]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3720      	adds	r7, #32
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	08011f68 	.word	0x08011f68
 800da74:	08011fa4 	.word	0x08011fa4
 800da78:	08011fb0 	.word	0x08011fb0
 800da7c:	08011fd8 	.word	0x08011fd8
 800da80:	08011fec 	.word	0x08011fec
 800da84:	20000208 	.word	0x20000208
 800da88:	0801200c 	.word	0x0801200c

0800da8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800da96:	2300      	movs	r3, #0
 800da98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800daaa:	4b28      	ldr	r3, [pc, #160]	; (800db4c <ip_reass_remove_oldest_datagram+0xc0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dab0:	e030      	b.n	800db14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	695a      	ldr	r2, [r3, #20]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d10c      	bne.n	800dad8 <ip_reass_remove_oldest_datagram+0x4c>
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	699a      	ldr	r2, [r3, #24]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d106      	bne.n	800dad8 <ip_reass_remove_oldest_datagram+0x4c>
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	899a      	ldrh	r2, [r3, #12]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	889b      	ldrh	r3, [r3, #4]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d014      	beq.n	800db02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	3301      	adds	r3, #1
 800dadc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d104      	bne.n	800daee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	61bb      	str	r3, [r7, #24]
 800daec:	e009      	b.n	800db02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	7fda      	ldrb	r2, [r3, #31]
 800daf2:	6a3b      	ldr	r3, [r7, #32]
 800daf4:	7fdb      	ldrb	r3, [r3, #31]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d803      	bhi.n	800db02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800db02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1cb      	bne.n	800dab2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d008      	beq.n	800db32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800db20:	69b9      	ldr	r1, [r7, #24]
 800db22:	6a38      	ldr	r0, [r7, #32]
 800db24:	f7ff ff0e 	bl	800d944 <ip_reass_free_complete_datagram>
 800db28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	429a      	cmp	r2, r3
 800db38:	da02      	bge.n	800db40 <ip_reass_remove_oldest_datagram+0xb4>
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	dcac      	bgt.n	800da9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800db40:	697b      	ldr	r3, [r7, #20]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3728      	adds	r7, #40	; 0x28
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	20000204 	.word	0x20000204

0800db50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db5a:	2004      	movs	r0, #4
 800db5c:	f7f6 fb0a 	bl	8004174 <memp_malloc>
 800db60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d110      	bne.n	800db8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff ff8e 	bl	800da8c <ip_reass_remove_oldest_datagram>
 800db70:	4602      	mov	r2, r0
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	4293      	cmp	r3, r2
 800db76:	dc03      	bgt.n	800db80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db78:	2004      	movs	r0, #4
 800db7a:	f7f6 fafb 	bl	8004174 <memp_malloc>
 800db7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800db86:	2300      	movs	r3, #0
 800db88:	e016      	b.n	800dbb8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800db8a:	2220      	movs	r2, #32
 800db8c:	2100      	movs	r1, #0
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 fdfa 	bl	800e788 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	220f      	movs	r2, #15
 800db98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800db9a:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <ip_reass_enqueue_new_datagram+0x70>)
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dba2:	4a07      	ldr	r2, [pc, #28]	; (800dbc0 <ip_reass_enqueue_new_datagram+0x70>)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	2214      	movs	r2, #20
 800dbae:	6879      	ldr	r1, [r7, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 fddb 	bl	800e76c <memcpy>
  return ipr;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	20000204 	.word	0x20000204

0800dbc4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dbce:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <ip_reass_dequeue_datagram+0x4c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d104      	bne.n	800dbe2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a0c      	ldr	r2, [pc, #48]	; (800dc10 <ip_reass_dequeue_datagram+0x4c>)
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	e00d      	b.n	800dbfe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d106      	bne.n	800dbf6 <ip_reass_dequeue_datagram+0x32>
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <ip_reass_dequeue_datagram+0x50>)
 800dbea:	f240 1245 	movw	r2, #325	; 0x145
 800dbee:	490a      	ldr	r1, [pc, #40]	; (800dc18 <ip_reass_dequeue_datagram+0x54>)
 800dbf0:	480a      	ldr	r0, [pc, #40]	; (800dc1c <ip_reass_dequeue_datagram+0x58>)
 800dbf2:	f000 fdd1 	bl	800e798 <iprintf>
    prev->next = ipr->next;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	2004      	movs	r0, #4
 800dc02:	f7f6 fb03 	bl	800420c <memp_free>
}
 800dc06:	bf00      	nop
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	20000204 	.word	0x20000204
 800dc14:	08011f68 	.word	0x08011f68
 800dc18:	08012030 	.word	0x08012030
 800dc1c:	08011fb0 	.word	0x08011fb0

0800dc20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b08c      	sub	sp, #48	; 0x30
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dc30:	2301      	movs	r3, #1
 800dc32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	885b      	ldrh	r3, [r3, #2]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7f5 fe41 	bl	80038c8 <lwip_htons>
 800dc46:	4603      	mov	r3, r0
 800dc48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	f003 030f 	and.w	r3, r3, #15
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dc58:	7e7b      	ldrb	r3, [r7, #25]
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	8b7a      	ldrh	r2, [r7, #26]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d202      	bcs.n	800dc68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295
 800dc66:	e135      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dc68:	7e7b      	ldrb	r3, [r7, #25]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	8b7a      	ldrh	r2, [r7, #26]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	88db      	ldrh	r3, [r3, #6]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f5 fe25 	bl	80038c8 <lwip_htons>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	2200      	movs	r2, #0
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	2200      	movs	r2, #0
 800dc98:	705a      	strb	r2, [r3, #1]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	709a      	strb	r2, [r3, #2]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	8afa      	ldrh	r2, [r7, #22]
 800dca6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dca8:	8afa      	ldrh	r2, [r7, #22]
 800dcaa:	8b7b      	ldrh	r3, [r7, #26]
 800dcac:	4413      	add	r3, r2
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	88db      	ldrh	r3, [r3, #6]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	8afa      	ldrh	r2, [r7, #22]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d902      	bls.n	800dcc6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc4:	e106      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
 800dccc:	e068      	b.n	800dda0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	889b      	ldrh	r3, [r3, #4]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	889b      	ldrh	r3, [r3, #4]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d235      	bcs.n	800dd50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dce8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d020      	beq.n	800dd32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	889b      	ldrh	r3, [r3, #4]
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	88db      	ldrh	r3, [r3, #6]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d307      	bcc.n	800dd10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	88db      	ldrh	r3, [r3, #6]
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	889b      	ldrh	r3, [r3, #4]
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d902      	bls.n	800dd16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd10:	f04f 33ff 	mov.w	r3, #4294967295
 800dd14:	e0de      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	88db      	ldrh	r3, [r3, #6]
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd24:	889b      	ldrh	r3, [r3, #4]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d03d      	beq.n	800dda8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dd30:	e03a      	b.n	800dda8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	88db      	ldrh	r3, [r3, #6]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	889b      	ldrh	r3, [r3, #4]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d902      	bls.n	800dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd42:	f04f 33ff 	mov.w	r3, #4294967295
 800dd46:	e0c5      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	605a      	str	r2, [r3, #4]
      break;
 800dd4e:	e02b      	b.n	800dda8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	889b      	ldrh	r3, [r3, #4]
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	889b      	ldrh	r3, [r3, #4]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d102      	bne.n	800dd66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd60:	f04f 33ff 	mov.w	r3, #4294967295
 800dd64:	e0b6      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	889b      	ldrh	r3, [r3, #4]
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	88db      	ldrh	r3, [r3, #6]
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d202      	bcs.n	800dd7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd76:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7a:	e0ab      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	88db      	ldrh	r3, [r3, #6]
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	889b      	ldrh	r3, [r3, #4]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d001      	beq.n	800dd96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d193      	bne.n	800dcce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dda6:	e000      	b.n	800ddaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dda8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d12d      	bne.n	800de0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01c      	beq.n	800ddf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	88db      	ldrh	r3, [r3, #6]
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	889b      	ldrh	r3, [r3, #4]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d906      	bls.n	800ddd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ddc6:	4b45      	ldr	r3, [pc, #276]	; (800dedc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ddc8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ddcc:	4944      	ldr	r1, [pc, #272]	; (800dee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ddce:	4845      	ldr	r0, [pc, #276]	; (800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ddd0:	f000 fce2 	bl	800e798 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ddd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	88db      	ldrh	r3, [r3, #6]
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	889b      	ldrh	r3, [r3, #4]
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d010      	beq.n	800de0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	623b      	str	r3, [r7, #32]
 800ddee:	e00d      	b.n	800de0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ddf8:	4b38      	ldr	r3, [pc, #224]	; (800dedc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ddfa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ddfe:	493a      	ldr	r1, [pc, #232]	; (800dee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800de00:	4838      	ldr	r0, [pc, #224]	; (800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de02:	f000 fcc9 	bl	800e798 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d105      	bne.n	800de1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	7f9b      	ldrb	r3, [r3, #30]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d059      	beq.n	800ded2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800de1e:	6a3b      	ldr	r3, [r7, #32]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d04f      	beq.n	800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d006      	beq.n	800de3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	889b      	ldrh	r3, [r3, #4]
 800de34:	b29b      	uxth	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	623b      	str	r3, [r7, #32]
 800de3e:	e041      	b.n	800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800de4a:	e012      	b.n	800de72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800de52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de54:	88db      	ldrh	r3, [r3, #6]
 800de56:	b29a      	uxth	r2, r3
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5a:	889b      	ldrh	r3, [r3, #4]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	429a      	cmp	r2, r3
 800de60:	d002      	beq.n	800de68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	623b      	str	r3, [r7, #32]
            break;
 800de66:	e007      	b.n	800de78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800de6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	2b00      	cmp	r3, #0
 800de76:	d1e9      	bne.n	800de4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d022      	beq.n	800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800de86:	4b15      	ldr	r3, [pc, #84]	; (800dedc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de88:	f240 12df 	movw	r2, #479	; 0x1df
 800de8c:	4917      	ldr	r1, [pc, #92]	; (800deec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800de8e:	4815      	ldr	r0, [pc, #84]	; (800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de90:	f000 fc82 	bl	800e798 <iprintf>
          LWIP_ASSERT("sanity check",
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d106      	bne.n	800deae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dea0:	4b0e      	ldr	r3, [pc, #56]	; (800dedc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dea2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dea6:	4911      	ldr	r1, [pc, #68]	; (800deec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dea8:	480e      	ldr	r0, [pc, #56]	; (800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800deaa:	f000 fc75 	bl	800e798 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800deae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d006      	beq.n	800dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800deb6:	4b09      	ldr	r3, [pc, #36]	; (800dedc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800deb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800debc:	490c      	ldr	r1, [pc, #48]	; (800def0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800debe:	4809      	ldr	r0, [pc, #36]	; (800dee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dec0:	f000 fc6a 	bl	800e798 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	bf14      	ite	ne
 800deca:	2301      	movne	r3, #1
 800decc:	2300      	moveq	r3, #0
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	e000      	b.n	800ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3730      	adds	r7, #48	; 0x30
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	08011f68 	.word	0x08011f68
 800dee0:	0801204c 	.word	0x0801204c
 800dee4:	08011fb0 	.word	0x08011fb0
 800dee8:	0801206c 	.word	0x0801206c
 800deec:	080120a4 	.word	0x080120a4
 800def0:	080120b4 	.word	0x080120b4

0800def4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08e      	sub	sp, #56	; 0x38
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800df02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b14      	cmp	r3, #20
 800df12:	f040 8167 	bne.w	800e1e4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	88db      	ldrh	r3, [r3, #6]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7f5 fcd3 	bl	80038c8 <lwip_htons>
 800df22:	4603      	mov	r3, r0
 800df24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df28:	b29b      	uxth	r3, r3
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	885b      	ldrh	r3, [r3, #2]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4618      	mov	r0, r3
 800df36:	f7f5 fcc7 	bl	80038c8 <lwip_htons>
 800df3a:	4603      	mov	r3, r0
 800df3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	f003 030f 	and.w	r3, r3, #15
 800df46:	b2db      	uxtb	r3, r3
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800df4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df52:	b29b      	uxth	r3, r3
 800df54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df56:	429a      	cmp	r2, r3
 800df58:	f0c0 8146 	bcc.w	800e1e8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800df5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df60:	b29b      	uxth	r3, r3
 800df62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7f6 ffe9 	bl	8004f40 <pbuf_clen>
 800df6e:	4603      	mov	r3, r0
 800df70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800df72:	4b9f      	ldr	r3, [pc, #636]	; (800e1f0 <ip4_reass+0x2fc>)
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	8c3b      	ldrh	r3, [r7, #32]
 800df7a:	4413      	add	r3, r2
 800df7c:	2b0a      	cmp	r3, #10
 800df7e:	dd10      	ble.n	800dfa2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df80:	8c3b      	ldrh	r3, [r7, #32]
 800df82:	4619      	mov	r1, r3
 800df84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df86:	f7ff fd81 	bl	800da8c <ip_reass_remove_oldest_datagram>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f000 812d 	beq.w	800e1ec <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800df92:	4b97      	ldr	r3, [pc, #604]	; (800e1f0 <ip4_reass+0x2fc>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	461a      	mov	r2, r3
 800df98:	8c3b      	ldrh	r3, [r7, #32]
 800df9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800df9c:	2b0a      	cmp	r3, #10
 800df9e:	f300 8125 	bgt.w	800e1ec <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dfa2:	4b94      	ldr	r3, [pc, #592]	; (800e1f4 <ip4_reass+0x300>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfa8:	e015      	b.n	800dfd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfac:	695a      	ldr	r2, [r3, #20]
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d10c      	bne.n	800dfd0 <ip4_reass+0xdc>
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	699a      	ldr	r2, [r3, #24]
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d106      	bne.n	800dfd0 <ip4_reass+0xdc>
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	899a      	ldrh	r2, [r3, #12]
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	889b      	ldrh	r3, [r3, #4]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d006      	beq.n	800dfde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1e6      	bne.n	800dfaa <ip4_reass+0xb6>
 800dfdc:	e000      	b.n	800dfe0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dfde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d109      	bne.n	800dffa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dfe6:	8c3b      	ldrh	r3, [r7, #32]
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfec:	f7ff fdb0 	bl	800db50 <ip_reass_enqueue_new_datagram>
 800dff0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d11c      	bne.n	800e032 <ip4_reass+0x13e>
      goto nullreturn;
 800dff8:	e109      	b.n	800e20e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	88db      	ldrh	r3, [r3, #6]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	4618      	mov	r0, r3
 800e002:	f7f5 fc61 	bl	80038c8 <lwip_htons>
 800e006:	4603      	mov	r3, r0
 800e008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d110      	bne.n	800e032 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e012:	89db      	ldrh	r3, [r3, #14]
 800e014:	4618      	mov	r0, r3
 800e016:	f7f5 fc57 	bl	80038c8 <lwip_htons>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e020:	2b00      	cmp	r3, #0
 800e022:	d006      	beq.n	800e032 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	3308      	adds	r3, #8
 800e028:	2214      	movs	r2, #20
 800e02a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e02c:	4618      	mov	r0, r3
 800e02e:	f000 fb9d 	bl	800e76c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	88db      	ldrh	r3, [r3, #6]
 800e036:	b29b      	uxth	r3, r3
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	bf0c      	ite	eq
 800e040:	2301      	moveq	r3, #1
 800e042:	2300      	movne	r3, #0
 800e044:	b2db      	uxtb	r3, r3
 800e046:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00e      	beq.n	800e06c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e04e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e052:	4413      	add	r3, r2
 800e054:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e056:	8b7a      	ldrh	r2, [r7, #26]
 800e058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e05a:	429a      	cmp	r2, r3
 800e05c:	f0c0 80a0 	bcc.w	800e1a0 <ip4_reass+0x2ac>
 800e060:	8b7b      	ldrh	r3, [r7, #26]
 800e062:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e066:	4293      	cmp	r3, r2
 800e068:	f200 809a 	bhi.w	800e1a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e06c:	69fa      	ldr	r2, [r7, #28]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e072:	f7ff fdd5 	bl	800dc20 <ip_reass_chain_frag_into_datagram_and_validate>
 800e076:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07e:	f000 8091 	beq.w	800e1a4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e082:	4b5b      	ldr	r3, [pc, #364]	; (800e1f0 <ip4_reass+0x2fc>)
 800e084:	881a      	ldrh	r2, [r3, #0]
 800e086:	8c3b      	ldrh	r3, [r7, #32]
 800e088:	4413      	add	r3, r2
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	4b58      	ldr	r3, [pc, #352]	; (800e1f0 <ip4_reass+0x2fc>)
 800e08e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00d      	beq.n	800e0b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e096:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e09a:	4413      	add	r3, r2
 800e09c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	8a7a      	ldrh	r2, [r7, #18]
 800e0a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	7f9b      	ldrb	r3, [r3, #30]
 800e0a8:	f043 0301 	orr.w	r3, r3, #1
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d171      	bne.n	800e19c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ba:	8b9b      	ldrh	r3, [r3, #28]
 800e0bc:	3314      	adds	r3, #20
 800e0be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	3308      	adds	r3, #8
 800e0d6:	2214      	movs	r2, #20
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0dc:	f000 fb46 	bl	800e76c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e0e0:	8a3b      	ldrh	r3, [r7, #16]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7f5 fbf0 	bl	80038c8 <lwip_htons>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	719a      	strb	r2, [r3, #6]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	729a      	strb	r2, [r3, #10]
 800e100:	2200      	movs	r2, #0
 800e102:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e10a:	e00d      	b.n	800e128 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e112:	2114      	movs	r1, #20
 800e114:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e116:	f7f6 fe05 	bl	8004d24 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e11a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7f6 ff49 	bl	8004fb4 <pbuf_cat>
      r = iprh->next_pbuf;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d1ee      	bne.n	800e10c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e12e:	4b31      	ldr	r3, [pc, #196]	; (800e1f4 <ip4_reass+0x300>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e134:	429a      	cmp	r2, r3
 800e136:	d102      	bne.n	800e13e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e138:	2300      	movs	r3, #0
 800e13a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e13c:	e010      	b.n	800e160 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e13e:	4b2d      	ldr	r3, [pc, #180]	; (800e1f4 <ip4_reass+0x300>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e144:	e007      	b.n	800e156 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d006      	beq.n	800e15e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1f4      	bne.n	800e146 <ip4_reass+0x252>
 800e15c:	e000      	b.n	800e160 <ip4_reass+0x26c>
          break;
 800e15e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e164:	f7ff fd2e 	bl	800dbc4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7f6 fee9 	bl	8004f40 <pbuf_clen>
 800e16e:	4603      	mov	r3, r0
 800e170:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e172:	4b1f      	ldr	r3, [pc, #124]	; (800e1f0 <ip4_reass+0x2fc>)
 800e174:	881b      	ldrh	r3, [r3, #0]
 800e176:	8c3a      	ldrh	r2, [r7, #32]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d906      	bls.n	800e18a <ip4_reass+0x296>
 800e17c:	4b1e      	ldr	r3, [pc, #120]	; (800e1f8 <ip4_reass+0x304>)
 800e17e:	f240 229b 	movw	r2, #667	; 0x29b
 800e182:	491e      	ldr	r1, [pc, #120]	; (800e1fc <ip4_reass+0x308>)
 800e184:	481e      	ldr	r0, [pc, #120]	; (800e200 <ip4_reass+0x30c>)
 800e186:	f000 fb07 	bl	800e798 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e18a:	4b19      	ldr	r3, [pc, #100]	; (800e1f0 <ip4_reass+0x2fc>)
 800e18c:	881a      	ldrh	r2, [r3, #0]
 800e18e:	8c3b      	ldrh	r3, [r7, #32]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	b29a      	uxth	r2, r3
 800e194:	4b16      	ldr	r3, [pc, #88]	; (800e1f0 <ip4_reass+0x2fc>)
 800e196:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	e03c      	b.n	800e216 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e19c:	2300      	movs	r3, #0
 800e19e:	e03a      	b.n	800e216 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e1a0:	bf00      	nop
 800e1a2:	e000      	b.n	800e1a6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e1a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d106      	bne.n	800e1ba <ip4_reass+0x2c6>
 800e1ac:	4b12      	ldr	r3, [pc, #72]	; (800e1f8 <ip4_reass+0x304>)
 800e1ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e1b2:	4914      	ldr	r1, [pc, #80]	; (800e204 <ip4_reass+0x310>)
 800e1b4:	4812      	ldr	r0, [pc, #72]	; (800e200 <ip4_reass+0x30c>)
 800e1b6:	f000 faef 	bl	800e798 <iprintf>
  if (ipr->p == NULL) {
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d124      	bne.n	800e20c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e1c2:	4b0c      	ldr	r3, [pc, #48]	; (800e1f4 <ip4_reass+0x300>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d006      	beq.n	800e1da <ip4_reass+0x2e6>
 800e1cc:	4b0a      	ldr	r3, [pc, #40]	; (800e1f8 <ip4_reass+0x304>)
 800e1ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e1d2:	490d      	ldr	r1, [pc, #52]	; (800e208 <ip4_reass+0x314>)
 800e1d4:	480a      	ldr	r0, [pc, #40]	; (800e200 <ip4_reass+0x30c>)
 800e1d6:	f000 fadf 	bl	800e798 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e1da:	2100      	movs	r1, #0
 800e1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1de:	f7ff fcf1 	bl	800dbc4 <ip_reass_dequeue_datagram>
 800e1e2:	e014      	b.n	800e20e <ip4_reass+0x31a>
    goto nullreturn;
 800e1e4:	bf00      	nop
 800e1e6:	e012      	b.n	800e20e <ip4_reass+0x31a>
    goto nullreturn;
 800e1e8:	bf00      	nop
 800e1ea:	e010      	b.n	800e20e <ip4_reass+0x31a>
      goto nullreturn;
 800e1ec:	bf00      	nop
 800e1ee:	e00e      	b.n	800e20e <ip4_reass+0x31a>
 800e1f0:	20000208 	.word	0x20000208
 800e1f4:	20000204 	.word	0x20000204
 800e1f8:	08011f68 	.word	0x08011f68
 800e1fc:	080120d8 	.word	0x080120d8
 800e200:	08011fb0 	.word	0x08011fb0
 800e204:	080120f4 	.word	0x080120f4
 800e208:	08012100 	.word	0x08012100
  }

nullreturn:
 800e20c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7f6 fe0e 	bl	8004e30 <pbuf_free>
  return NULL;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3738      	adds	r7, #56	; 0x38
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop

0800e220 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e224:	2005      	movs	r0, #5
 800e226:	f7f5 ffa5 	bl	8004174 <memp_malloc>
 800e22a:	4603      	mov	r3, r0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e23e:	4b07      	ldr	r3, [pc, #28]	; (800e25c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e240:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e244:	4906      	ldr	r1, [pc, #24]	; (800e260 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e246:	4807      	ldr	r0, [pc, #28]	; (800e264 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e248:	f000 faa6 	bl	800e798 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e24c:	6879      	ldr	r1, [r7, #4]
 800e24e:	2005      	movs	r0, #5
 800e250:	f7f5 ffdc 	bl	800420c <memp_free>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	08011f68 	.word	0x08011f68
 800e260:	08012120 	.word	0x08012120
 800e264:	08011fb0 	.word	0x08011fb0

0800e268 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <ipfrag_free_pbuf_custom+0x20>
 800e27a:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <ipfrag_free_pbuf_custom+0x58>)
 800e27c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e280:	4910      	ldr	r1, [pc, #64]	; (800e2c4 <ipfrag_free_pbuf_custom+0x5c>)
 800e282:	4811      	ldr	r0, [pc, #68]	; (800e2c8 <ipfrag_free_pbuf_custom+0x60>)
 800e284:	f000 fa88 	bl	800e798 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d006      	beq.n	800e29e <ipfrag_free_pbuf_custom+0x36>
 800e290:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <ipfrag_free_pbuf_custom+0x58>)
 800e292:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e296:	490d      	ldr	r1, [pc, #52]	; (800e2cc <ipfrag_free_pbuf_custom+0x64>)
 800e298:	480b      	ldr	r0, [pc, #44]	; (800e2c8 <ipfrag_free_pbuf_custom+0x60>)
 800e29a:	f000 fa7d 	bl	800e798 <iprintf>
  if (pcr->original != NULL) {
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d004      	beq.n	800e2b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7f6 fdc0 	bl	8004e30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7ff ffbd 	bl	800e230 <ip_frag_free_pbuf_custom_ref>
}
 800e2b6:	bf00      	nop
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08011f68 	.word	0x08011f68
 800e2c4:	0801212c 	.word	0x0801212c
 800e2c8:	08011fb0 	.word	0x08011fb0
 800e2cc:	08012138 	.word	0x08012138

0800e2d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b094      	sub	sp, #80	; 0x50
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2e6:	3b14      	subs	r3, #20
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da00      	bge.n	800e2ee <ip4_frag+0x1e>
 800e2ec:	3307      	adds	r3, #7
 800e2ee:	10db      	asrs	r3, r3, #3
 800e2f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e2f2:	2314      	movs	r3, #20
 800e2f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	f003 030f 	and.w	r3, r3, #15
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	009b      	lsls	r3, r3, #2
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	2b14      	cmp	r3, #20
 800e310:	d002      	beq.n	800e318 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e312:	f06f 0305 	mvn.w	r3, #5
 800e316:	e110      	b.n	800e53a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	895b      	ldrh	r3, [r3, #10]
 800e31c:	2b13      	cmp	r3, #19
 800e31e:	d809      	bhi.n	800e334 <ip4_frag+0x64>
 800e320:	4b88      	ldr	r3, [pc, #544]	; (800e544 <ip4_frag+0x274>)
 800e322:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e326:	4988      	ldr	r1, [pc, #544]	; (800e548 <ip4_frag+0x278>)
 800e328:	4888      	ldr	r0, [pc, #544]	; (800e54c <ip4_frag+0x27c>)
 800e32a:	f000 fa35 	bl	800e798 <iprintf>
 800e32e:	f06f 0305 	mvn.w	r3, #5
 800e332:	e102      	b.n	800e53a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	88db      	ldrh	r3, [r3, #6]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f5 fac4 	bl	80038c8 <lwip_htons>
 800e340:	4603      	mov	r3, r0
 800e342:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e344:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e34a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e34e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	891b      	ldrh	r3, [r3, #8]
 800e35a:	3b14      	subs	r3, #20
 800e35c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e360:	e0e1      	b.n	800e526 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e362:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	b29b      	uxth	r3, r3
 800e368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e36c:	4293      	cmp	r3, r2
 800e36e:	bf28      	it	cs
 800e370:	4613      	movcs	r3, r2
 800e372:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e374:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e378:	2114      	movs	r1, #20
 800e37a:	200e      	movs	r0, #14
 800e37c:	f7f6 fa74 	bl	8004868 <pbuf_alloc>
 800e380:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 80d5 	beq.w	800e534 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	895b      	ldrh	r3, [r3, #10]
 800e38e:	2b13      	cmp	r3, #19
 800e390:	d806      	bhi.n	800e3a0 <ip4_frag+0xd0>
 800e392:	4b6c      	ldr	r3, [pc, #432]	; (800e544 <ip4_frag+0x274>)
 800e394:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e398:	496d      	ldr	r1, [pc, #436]	; (800e550 <ip4_frag+0x280>)
 800e39a:	486c      	ldr	r0, [pc, #432]	; (800e54c <ip4_frag+0x27c>)
 800e39c:	f000 f9fc 	bl	800e798 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	2214      	movs	r2, #20
 800e3a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f000 f9df 	bl	800e76c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e3b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e3ba:	e064      	b.n	800e486 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	895a      	ldrh	r2, [r3, #10]
 800e3c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	895b      	ldrh	r3, [r3, #10]
 800e3ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d906      	bls.n	800e3de <ip4_frag+0x10e>
 800e3d0:	4b5c      	ldr	r3, [pc, #368]	; (800e544 <ip4_frag+0x274>)
 800e3d2:	f240 322d 	movw	r2, #813	; 0x32d
 800e3d6:	495f      	ldr	r1, [pc, #380]	; (800e554 <ip4_frag+0x284>)
 800e3d8:	485c      	ldr	r0, [pc, #368]	; (800e54c <ip4_frag+0x27c>)
 800e3da:	f000 f9dd 	bl	800e798 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e3de:	8bfa      	ldrh	r2, [r7, #30]
 800e3e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	bf28      	it	cs
 800e3e8:	4613      	movcs	r3, r2
 800e3ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e3ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d105      	bne.n	800e402 <ip4_frag+0x132>
        poff = 0;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	60fb      	str	r3, [r7, #12]
        continue;
 800e400:	e041      	b.n	800e486 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e402:	f7ff ff0d 	bl	800e220 <ip_frag_alloc_pbuf_custom_ref>
 800e406:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d103      	bne.n	800e416 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e40e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e410:	f7f6 fd0e 	bl	8004e30 <pbuf_free>
        goto memerr;
 800e414:	e08f      	b.n	800e536 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e416:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e41c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e41e:	4413      	add	r3, r2
 800e420:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e424:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e428:	9201      	str	r2, [sp, #4]
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	4603      	mov	r3, r0
 800e42e:	2241      	movs	r2, #65	; 0x41
 800e430:	2000      	movs	r0, #0
 800e432:	f7f6 fb43 	bl	8004abc <pbuf_alloced_custom>
 800e436:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d106      	bne.n	800e44c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e43e:	69b8      	ldr	r0, [r7, #24]
 800e440:	f7ff fef6 	bl	800e230 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e446:	f7f6 fcf3 	bl	8004e30 <pbuf_free>
        goto memerr;
 800e44a:	e074      	b.n	800e536 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f7f6 fd8f 	bl	8004f70 <pbuf_ref>
      pcr->original = p;
 800e452:	69bb      	ldr	r3, [r7, #24]
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	4a3f      	ldr	r2, [pc, #252]	; (800e558 <ip4_frag+0x288>)
 800e45c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e45e:	6979      	ldr	r1, [r7, #20]
 800e460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e462:	f7f6 fda7 	bl	8004fb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e466:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e46a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d004      	beq.n	800e486 <ip4_frag+0x1b6>
        poff = 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e486:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d196      	bne.n	800e3bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e48e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e494:	4413      	add	r3, r2
 800e496:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e49c:	f1a3 0213 	sub.w	r2, r3, #19
 800e4a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	bfcc      	ite	gt
 800e4a8:	2301      	movgt	r3, #1
 800e4aa:	2300      	movle	r3, #0
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e4b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <ip4_frag+0x1f6>
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d003      	beq.n	800e4ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e4c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e4cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e4ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7f5 f9f9 	bl	80038c8 <lwip_htons>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	461a      	mov	r2, r3
 800e4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e4de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4e0:	3314      	adds	r3, #20
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7f5 f9ef 	bl	80038c8 <lwip_htons>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	729a      	strb	r2, [r3, #10]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e504:	68b8      	ldr	r0, [r7, #8]
 800e506:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e50a:	f7f6 fc91 	bl	8004e30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e50e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e512:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e51a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e51e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e520:	4413      	add	r3, r2
 800e522:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e526:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f47f af19 	bne.w	800e362 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	e002      	b.n	800e53a <ip4_frag+0x26a>
      goto memerr;
 800e534:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3748      	adds	r7, #72	; 0x48
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	08011f68 	.word	0x08011f68
 800e548:	08012144 	.word	0x08012144
 800e54c:	08011fb0 	.word	0x08011fb0
 800e550:	08012160 	.word	0x08012160
 800e554:	08012180 	.word	0x08012180
 800e558:	0800e269 	.word	0x0800e269

0800e55c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e566:	230e      	movs	r3, #14
 800e568:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	895b      	ldrh	r3, [r3, #10]
 800e56e:	2b0e      	cmp	r3, #14
 800e570:	d96e      	bls.n	800e650 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7bdb      	ldrb	r3, [r3, #15]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e580:	3301      	adds	r3, #1
 800e582:	b2da      	uxtb	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	7b1a      	ldrb	r2, [r3, #12]
 800e592:	7b5b      	ldrb	r3, [r3, #13]
 800e594:	021b      	lsls	r3, r3, #8
 800e596:	4313      	orrs	r3, r2
 800e598:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d023      	beq.n	800e5ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d10f      	bne.n	800e5ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	785b      	ldrb	r3, [r3, #1]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d11b      	bne.n	800e5ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e5ba:	2b5e      	cmp	r3, #94	; 0x5e
 800e5bc:	d117      	bne.n	800e5ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	7b5b      	ldrb	r3, [r3, #13]
 800e5c2:	f043 0310 	orr.w	r3, r3, #16
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	735a      	strb	r2, [r3, #13]
 800e5cc:	e00f      	b.n	800e5ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	2206      	movs	r2, #6
 800e5d2:	4928      	ldr	r1, [pc, #160]	; (800e674 <ethernet_input+0x118>)
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 f8bb 	bl	800e750 <memcmp>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d106      	bne.n	800e5ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7b5b      	ldrb	r3, [r3, #13]
 800e5e4:	f043 0308 	orr.w	r3, r3, #8
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e5ee:	89fb      	ldrh	r3, [r7, #14]
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d003      	beq.n	800e5fc <ethernet_input+0xa0>
 800e5f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e5f8:	d014      	beq.n	800e624 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e5fa:	e032      	b.n	800e662 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e602:	f003 0308 	and.w	r3, r3, #8
 800e606:	2b00      	cmp	r3, #0
 800e608:	d024      	beq.n	800e654 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e60a:	8afb      	ldrh	r3, [r7, #22]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7f6 fb88 	bl	8004d24 <pbuf_remove_header>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d11e      	bne.n	800e658 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7fe ff27 	bl	800d470 <ip4_input>
      break;
 800e622:	e013      	b.n	800e64c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e62a:	f003 0308 	and.w	r3, r3, #8
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d014      	beq.n	800e65c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e632:	8afb      	ldrh	r3, [r7, #22]
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7f6 fb74 	bl	8004d24 <pbuf_remove_header>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10e      	bne.n	800e660 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7fe f8c7 	bl	800c7d8 <etharp_input>
      break;
 800e64a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e64c:	2300      	movs	r3, #0
 800e64e:	e00c      	b.n	800e66a <ethernet_input+0x10e>
    goto free_and_return;
 800e650:	bf00      	nop
 800e652:	e006      	b.n	800e662 <ethernet_input+0x106>
        goto free_and_return;
 800e654:	bf00      	nop
 800e656:	e004      	b.n	800e662 <ethernet_input+0x106>
        goto free_and_return;
 800e658:	bf00      	nop
 800e65a:	e002      	b.n	800e662 <ethernet_input+0x106>
        goto free_and_return;
 800e65c:	bf00      	nop
 800e65e:	e000      	b.n	800e662 <ethernet_input+0x106>
        goto free_and_return;
 800e660:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7f6 fbe4 	bl	8004e30 <pbuf_free>
  return ERR_OK;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3718      	adds	r7, #24
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	08012308 	.word	0x08012308

0800e678 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e686:	8c3b      	ldrh	r3, [r7, #32]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7f5 f91d 	bl	80038c8 <lwip_htons>
 800e68e:	4603      	mov	r3, r0
 800e690:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e692:	210e      	movs	r1, #14
 800e694:	68b8      	ldr	r0, [r7, #8]
 800e696:	f7f6 fb35 	bl	8004d04 <pbuf_add_header>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d125      	bne.n	800e6ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	8afa      	ldrh	r2, [r7, #22]
 800e6aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	2206      	movs	r2, #6
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f000 f85a 	bl	800e76c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	3306      	adds	r3, #6
 800e6bc:	2206      	movs	r2, #6
 800e6be:	6879      	ldr	r1, [r7, #4]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 f853 	bl	800e76c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e6cc:	2b06      	cmp	r3, #6
 800e6ce:	d006      	beq.n	800e6de <ethernet_output+0x66>
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	; (800e6fc <ethernet_output+0x84>)
 800e6d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e6d6:	490a      	ldr	r1, [pc, #40]	; (800e700 <ethernet_output+0x88>)
 800e6d8:	480a      	ldr	r0, [pc, #40]	; (800e704 <ethernet_output+0x8c>)
 800e6da:	f000 f85d 	bl	800e798 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	68f8      	ldr	r0, [r7, #12]
 800e6e6:	4798      	blx	r3
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	e002      	b.n	800e6f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e6ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e6ee:	f06f 0301 	mvn.w	r3, #1
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	08012190 	.word	0x08012190
 800e700:	080121c8 	.word	0x080121c8
 800e704:	080121fc 	.word	0x080121fc

0800e708 <__libc_init_array>:
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4d0d      	ldr	r5, [pc, #52]	; (800e740 <__libc_init_array+0x38>)
 800e70c:	4c0d      	ldr	r4, [pc, #52]	; (800e744 <__libc_init_array+0x3c>)
 800e70e:	1b64      	subs	r4, r4, r5
 800e710:	10a4      	asrs	r4, r4, #2
 800e712:	2600      	movs	r6, #0
 800e714:	42a6      	cmp	r6, r4
 800e716:	d109      	bne.n	800e72c <__libc_init_array+0x24>
 800e718:	4d0b      	ldr	r5, [pc, #44]	; (800e748 <__libc_init_array+0x40>)
 800e71a:	4c0c      	ldr	r4, [pc, #48]	; (800e74c <__libc_init_array+0x44>)
 800e71c:	f001 f856 	bl	800f7cc <_init>
 800e720:	1b64      	subs	r4, r4, r5
 800e722:	10a4      	asrs	r4, r4, #2
 800e724:	2600      	movs	r6, #0
 800e726:	42a6      	cmp	r6, r4
 800e728:	d105      	bne.n	800e736 <__libc_init_array+0x2e>
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e730:	4798      	blx	r3
 800e732:	3601      	adds	r6, #1
 800e734:	e7ee      	b.n	800e714 <__libc_init_array+0xc>
 800e736:	f855 3b04 	ldr.w	r3, [r5], #4
 800e73a:	4798      	blx	r3
 800e73c:	3601      	adds	r6, #1
 800e73e:	e7f2      	b.n	800e726 <__libc_init_array+0x1e>
 800e740:	0801246c 	.word	0x0801246c
 800e744:	0801246c 	.word	0x0801246c
 800e748:	0801246c 	.word	0x0801246c
 800e74c:	08012470 	.word	0x08012470

0800e750 <memcmp>:
 800e750:	b530      	push	{r4, r5, lr}
 800e752:	3901      	subs	r1, #1
 800e754:	2400      	movs	r4, #0
 800e756:	42a2      	cmp	r2, r4
 800e758:	d101      	bne.n	800e75e <memcmp+0xe>
 800e75a:	2000      	movs	r0, #0
 800e75c:	e005      	b.n	800e76a <memcmp+0x1a>
 800e75e:	5d03      	ldrb	r3, [r0, r4]
 800e760:	3401      	adds	r4, #1
 800e762:	5d0d      	ldrb	r5, [r1, r4]
 800e764:	42ab      	cmp	r3, r5
 800e766:	d0f6      	beq.n	800e756 <memcmp+0x6>
 800e768:	1b58      	subs	r0, r3, r5
 800e76a:	bd30      	pop	{r4, r5, pc}

0800e76c <memcpy>:
 800e76c:	440a      	add	r2, r1
 800e76e:	4291      	cmp	r1, r2
 800e770:	f100 33ff 	add.w	r3, r0, #4294967295
 800e774:	d100      	bne.n	800e778 <memcpy+0xc>
 800e776:	4770      	bx	lr
 800e778:	b510      	push	{r4, lr}
 800e77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e77e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e782:	4291      	cmp	r1, r2
 800e784:	d1f9      	bne.n	800e77a <memcpy+0xe>
 800e786:	bd10      	pop	{r4, pc}

0800e788 <memset>:
 800e788:	4402      	add	r2, r0
 800e78a:	4603      	mov	r3, r0
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d100      	bne.n	800e792 <memset+0xa>
 800e790:	4770      	bx	lr
 800e792:	f803 1b01 	strb.w	r1, [r3], #1
 800e796:	e7f9      	b.n	800e78c <memset+0x4>

0800e798 <iprintf>:
 800e798:	b40f      	push	{r0, r1, r2, r3}
 800e79a:	4b0a      	ldr	r3, [pc, #40]	; (800e7c4 <iprintf+0x2c>)
 800e79c:	b513      	push	{r0, r1, r4, lr}
 800e79e:	681c      	ldr	r4, [r3, #0]
 800e7a0:	b124      	cbz	r4, 800e7ac <iprintf+0x14>
 800e7a2:	69a3      	ldr	r3, [r4, #24]
 800e7a4:	b913      	cbnz	r3, 800e7ac <iprintf+0x14>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f000 f8c4 	bl	800e934 <__sinit>
 800e7ac:	ab05      	add	r3, sp, #20
 800e7ae:	9a04      	ldr	r2, [sp, #16]
 800e7b0:	68a1      	ldr	r1, [r4, #8]
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 fa4b 	bl	800ec50 <_vfiprintf_r>
 800e7ba:	b002      	add	sp, #8
 800e7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7c0:	b004      	add	sp, #16
 800e7c2:	4770      	bx	lr
 800e7c4:	20000014 	.word	0x20000014

0800e7c8 <rand>:
 800e7c8:	4b17      	ldr	r3, [pc, #92]	; (800e828 <rand+0x60>)
 800e7ca:	b510      	push	{r4, lr}
 800e7cc:	681c      	ldr	r4, [r3, #0]
 800e7ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7d0:	b9b3      	cbnz	r3, 800e800 <rand+0x38>
 800e7d2:	2018      	movs	r0, #24
 800e7d4:	f000 f960 	bl	800ea98 <malloc>
 800e7d8:	63a0      	str	r0, [r4, #56]	; 0x38
 800e7da:	b928      	cbnz	r0, 800e7e8 <rand+0x20>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	4b13      	ldr	r3, [pc, #76]	; (800e82c <rand+0x64>)
 800e7e0:	4813      	ldr	r0, [pc, #76]	; (800e830 <rand+0x68>)
 800e7e2:	214e      	movs	r1, #78	; 0x4e
 800e7e4:	f000 f830 	bl	800e848 <__assert_func>
 800e7e8:	4a12      	ldr	r2, [pc, #72]	; (800e834 <rand+0x6c>)
 800e7ea:	4b13      	ldr	r3, [pc, #76]	; (800e838 <rand+0x70>)
 800e7ec:	e9c0 2300 	strd	r2, r3, [r0]
 800e7f0:	4b12      	ldr	r3, [pc, #72]	; (800e83c <rand+0x74>)
 800e7f2:	6083      	str	r3, [r0, #8]
 800e7f4:	230b      	movs	r3, #11
 800e7f6:	8183      	strh	r3, [r0, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e800:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e802:	480f      	ldr	r0, [pc, #60]	; (800e840 <rand+0x78>)
 800e804:	690a      	ldr	r2, [r1, #16]
 800e806:	694b      	ldr	r3, [r1, #20]
 800e808:	4c0e      	ldr	r4, [pc, #56]	; (800e844 <rand+0x7c>)
 800e80a:	4350      	muls	r0, r2
 800e80c:	fb04 0003 	mla	r0, r4, r3, r0
 800e810:	fba2 3404 	umull	r3, r4, r2, r4
 800e814:	1c5a      	adds	r2, r3, #1
 800e816:	4404      	add	r4, r0
 800e818:	f144 0000 	adc.w	r0, r4, #0
 800e81c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e820:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e824:	bd10      	pop	{r4, pc}
 800e826:	bf00      	nop
 800e828:	20000014 	.word	0x20000014
 800e82c:	0801231c 	.word	0x0801231c
 800e830:	08012333 	.word	0x08012333
 800e834:	abcd330e 	.word	0xabcd330e
 800e838:	e66d1234 	.word	0xe66d1234
 800e83c:	0005deec 	.word	0x0005deec
 800e840:	5851f42d 	.word	0x5851f42d
 800e844:	4c957f2d 	.word	0x4c957f2d

0800e848 <__assert_func>:
 800e848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e84a:	4614      	mov	r4, r2
 800e84c:	461a      	mov	r2, r3
 800e84e:	4b09      	ldr	r3, [pc, #36]	; (800e874 <__assert_func+0x2c>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4605      	mov	r5, r0
 800e854:	68d8      	ldr	r0, [r3, #12]
 800e856:	b14c      	cbz	r4, 800e86c <__assert_func+0x24>
 800e858:	4b07      	ldr	r3, [pc, #28]	; (800e878 <__assert_func+0x30>)
 800e85a:	9100      	str	r1, [sp, #0]
 800e85c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e860:	4906      	ldr	r1, [pc, #24]	; (800e87c <__assert_func+0x34>)
 800e862:	462b      	mov	r3, r5
 800e864:	f000 f8e4 	bl	800ea30 <fiprintf>
 800e868:	f000 fddc 	bl	800f424 <abort>
 800e86c:	4b04      	ldr	r3, [pc, #16]	; (800e880 <__assert_func+0x38>)
 800e86e:	461c      	mov	r4, r3
 800e870:	e7f3      	b.n	800e85a <__assert_func+0x12>
 800e872:	bf00      	nop
 800e874:	20000014 	.word	0x20000014
 800e878:	08012392 	.word	0x08012392
 800e87c:	0801239f 	.word	0x0801239f
 800e880:	080123cd 	.word	0x080123cd

0800e884 <std>:
 800e884:	2300      	movs	r3, #0
 800e886:	b510      	push	{r4, lr}
 800e888:	4604      	mov	r4, r0
 800e88a:	e9c0 3300 	strd	r3, r3, [r0]
 800e88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e892:	6083      	str	r3, [r0, #8]
 800e894:	8181      	strh	r1, [r0, #12]
 800e896:	6643      	str	r3, [r0, #100]	; 0x64
 800e898:	81c2      	strh	r2, [r0, #14]
 800e89a:	6183      	str	r3, [r0, #24]
 800e89c:	4619      	mov	r1, r3
 800e89e:	2208      	movs	r2, #8
 800e8a0:	305c      	adds	r0, #92	; 0x5c
 800e8a2:	f7ff ff71 	bl	800e788 <memset>
 800e8a6:	4b05      	ldr	r3, [pc, #20]	; (800e8bc <std+0x38>)
 800e8a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <std+0x3c>)
 800e8ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8ae:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <std+0x40>)
 800e8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8b2:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <std+0x44>)
 800e8b4:	6224      	str	r4, [r4, #32]
 800e8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	bf00      	nop
 800e8bc:	0800f1f9 	.word	0x0800f1f9
 800e8c0:	0800f21b 	.word	0x0800f21b
 800e8c4:	0800f253 	.word	0x0800f253
 800e8c8:	0800f277 	.word	0x0800f277

0800e8cc <_cleanup_r>:
 800e8cc:	4901      	ldr	r1, [pc, #4]	; (800e8d4 <_cleanup_r+0x8>)
 800e8ce:	f000 b8c1 	b.w	800ea54 <_fwalk_reent>
 800e8d2:	bf00      	nop
 800e8d4:	0800f561 	.word	0x0800f561

0800e8d8 <__sfmoreglue>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	1e4a      	subs	r2, r1, #1
 800e8dc:	2568      	movs	r5, #104	; 0x68
 800e8de:	4355      	muls	r5, r2
 800e8e0:	460e      	mov	r6, r1
 800e8e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8e6:	f000 f92f 	bl	800eb48 <_malloc_r>
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	b140      	cbz	r0, 800e900 <__sfmoreglue+0x28>
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	e9c0 1600 	strd	r1, r6, [r0]
 800e8f4:	300c      	adds	r0, #12
 800e8f6:	60a0      	str	r0, [r4, #8]
 800e8f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8fc:	f7ff ff44 	bl	800e788 <memset>
 800e900:	4620      	mov	r0, r4
 800e902:	bd70      	pop	{r4, r5, r6, pc}

0800e904 <__sfp_lock_acquire>:
 800e904:	4801      	ldr	r0, [pc, #4]	; (800e90c <__sfp_lock_acquire+0x8>)
 800e906:	f000 b8c5 	b.w	800ea94 <__retarget_lock_acquire_recursive>
 800e90a:	bf00      	nop
 800e90c:	200068b8 	.word	0x200068b8

0800e910 <__sfp_lock_release>:
 800e910:	4801      	ldr	r0, [pc, #4]	; (800e918 <__sfp_lock_release+0x8>)
 800e912:	f000 b8c0 	b.w	800ea96 <__retarget_lock_release_recursive>
 800e916:	bf00      	nop
 800e918:	200068b8 	.word	0x200068b8

0800e91c <__sinit_lock_acquire>:
 800e91c:	4801      	ldr	r0, [pc, #4]	; (800e924 <__sinit_lock_acquire+0x8>)
 800e91e:	f000 b8b9 	b.w	800ea94 <__retarget_lock_acquire_recursive>
 800e922:	bf00      	nop
 800e924:	200068b3 	.word	0x200068b3

0800e928 <__sinit_lock_release>:
 800e928:	4801      	ldr	r0, [pc, #4]	; (800e930 <__sinit_lock_release+0x8>)
 800e92a:	f000 b8b4 	b.w	800ea96 <__retarget_lock_release_recursive>
 800e92e:	bf00      	nop
 800e930:	200068b3 	.word	0x200068b3

0800e934 <__sinit>:
 800e934:	b510      	push	{r4, lr}
 800e936:	4604      	mov	r4, r0
 800e938:	f7ff fff0 	bl	800e91c <__sinit_lock_acquire>
 800e93c:	69a3      	ldr	r3, [r4, #24]
 800e93e:	b11b      	cbz	r3, 800e948 <__sinit+0x14>
 800e940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e944:	f7ff bff0 	b.w	800e928 <__sinit_lock_release>
 800e948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e94c:	6523      	str	r3, [r4, #80]	; 0x50
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <__sinit+0x68>)
 800e950:	4a13      	ldr	r2, [pc, #76]	; (800e9a0 <__sinit+0x6c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	62a2      	str	r2, [r4, #40]	; 0x28
 800e956:	42a3      	cmp	r3, r4
 800e958:	bf04      	itt	eq
 800e95a:	2301      	moveq	r3, #1
 800e95c:	61a3      	streq	r3, [r4, #24]
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 f820 	bl	800e9a4 <__sfp>
 800e964:	6060      	str	r0, [r4, #4]
 800e966:	4620      	mov	r0, r4
 800e968:	f000 f81c 	bl	800e9a4 <__sfp>
 800e96c:	60a0      	str	r0, [r4, #8]
 800e96e:	4620      	mov	r0, r4
 800e970:	f000 f818 	bl	800e9a4 <__sfp>
 800e974:	2200      	movs	r2, #0
 800e976:	60e0      	str	r0, [r4, #12]
 800e978:	2104      	movs	r1, #4
 800e97a:	6860      	ldr	r0, [r4, #4]
 800e97c:	f7ff ff82 	bl	800e884 <std>
 800e980:	68a0      	ldr	r0, [r4, #8]
 800e982:	2201      	movs	r2, #1
 800e984:	2109      	movs	r1, #9
 800e986:	f7ff ff7d 	bl	800e884 <std>
 800e98a:	68e0      	ldr	r0, [r4, #12]
 800e98c:	2202      	movs	r2, #2
 800e98e:	2112      	movs	r1, #18
 800e990:	f7ff ff78 	bl	800e884 <std>
 800e994:	2301      	movs	r3, #1
 800e996:	61a3      	str	r3, [r4, #24]
 800e998:	e7d2      	b.n	800e940 <__sinit+0xc>
 800e99a:	bf00      	nop
 800e99c:	08012318 	.word	0x08012318
 800e9a0:	0800e8cd 	.word	0x0800e8cd

0800e9a4 <__sfp>:
 800e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a6:	4607      	mov	r7, r0
 800e9a8:	f7ff ffac 	bl	800e904 <__sfp_lock_acquire>
 800e9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ea28 <__sfp+0x84>)
 800e9ae:	681e      	ldr	r6, [r3, #0]
 800e9b0:	69b3      	ldr	r3, [r6, #24]
 800e9b2:	b913      	cbnz	r3, 800e9ba <__sfp+0x16>
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	f7ff ffbd 	bl	800e934 <__sinit>
 800e9ba:	3648      	adds	r6, #72	; 0x48
 800e9bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	d503      	bpl.n	800e9cc <__sfp+0x28>
 800e9c4:	6833      	ldr	r3, [r6, #0]
 800e9c6:	b30b      	cbz	r3, 800ea0c <__sfp+0x68>
 800e9c8:	6836      	ldr	r6, [r6, #0]
 800e9ca:	e7f7      	b.n	800e9bc <__sfp+0x18>
 800e9cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9d0:	b9d5      	cbnz	r5, 800ea08 <__sfp+0x64>
 800e9d2:	4b16      	ldr	r3, [pc, #88]	; (800ea2c <__sfp+0x88>)
 800e9d4:	60e3      	str	r3, [r4, #12]
 800e9d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9da:	6665      	str	r5, [r4, #100]	; 0x64
 800e9dc:	f000 f859 	bl	800ea92 <__retarget_lock_init_recursive>
 800e9e0:	f7ff ff96 	bl	800e910 <__sfp_lock_release>
 800e9e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9ec:	6025      	str	r5, [r4, #0]
 800e9ee:	61a5      	str	r5, [r4, #24]
 800e9f0:	2208      	movs	r2, #8
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9f8:	f7ff fec6 	bl	800e788 <memset>
 800e9fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea04:	4620      	mov	r0, r4
 800ea06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea08:	3468      	adds	r4, #104	; 0x68
 800ea0a:	e7d9      	b.n	800e9c0 <__sfp+0x1c>
 800ea0c:	2104      	movs	r1, #4
 800ea0e:	4638      	mov	r0, r7
 800ea10:	f7ff ff62 	bl	800e8d8 <__sfmoreglue>
 800ea14:	4604      	mov	r4, r0
 800ea16:	6030      	str	r0, [r6, #0]
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d1d5      	bne.n	800e9c8 <__sfp+0x24>
 800ea1c:	f7ff ff78 	bl	800e910 <__sfp_lock_release>
 800ea20:	230c      	movs	r3, #12
 800ea22:	603b      	str	r3, [r7, #0]
 800ea24:	e7ee      	b.n	800ea04 <__sfp+0x60>
 800ea26:	bf00      	nop
 800ea28:	08012318 	.word	0x08012318
 800ea2c:	ffff0001 	.word	0xffff0001

0800ea30 <fiprintf>:
 800ea30:	b40e      	push	{r1, r2, r3}
 800ea32:	b503      	push	{r0, r1, lr}
 800ea34:	4601      	mov	r1, r0
 800ea36:	ab03      	add	r3, sp, #12
 800ea38:	4805      	ldr	r0, [pc, #20]	; (800ea50 <fiprintf+0x20>)
 800ea3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3e:	6800      	ldr	r0, [r0, #0]
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f000 f905 	bl	800ec50 <_vfiprintf_r>
 800ea46:	b002      	add	sp, #8
 800ea48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea4c:	b003      	add	sp, #12
 800ea4e:	4770      	bx	lr
 800ea50:	20000014 	.word	0x20000014

0800ea54 <_fwalk_reent>:
 800ea54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea58:	4606      	mov	r6, r0
 800ea5a:	4688      	mov	r8, r1
 800ea5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea60:	2700      	movs	r7, #0
 800ea62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea66:	f1b9 0901 	subs.w	r9, r9, #1
 800ea6a:	d505      	bpl.n	800ea78 <_fwalk_reent+0x24>
 800ea6c:	6824      	ldr	r4, [r4, #0]
 800ea6e:	2c00      	cmp	r4, #0
 800ea70:	d1f7      	bne.n	800ea62 <_fwalk_reent+0xe>
 800ea72:	4638      	mov	r0, r7
 800ea74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea78:	89ab      	ldrh	r3, [r5, #12]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d907      	bls.n	800ea8e <_fwalk_reent+0x3a>
 800ea7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea82:	3301      	adds	r3, #1
 800ea84:	d003      	beq.n	800ea8e <_fwalk_reent+0x3a>
 800ea86:	4629      	mov	r1, r5
 800ea88:	4630      	mov	r0, r6
 800ea8a:	47c0      	blx	r8
 800ea8c:	4307      	orrs	r7, r0
 800ea8e:	3568      	adds	r5, #104	; 0x68
 800ea90:	e7e9      	b.n	800ea66 <_fwalk_reent+0x12>

0800ea92 <__retarget_lock_init_recursive>:
 800ea92:	4770      	bx	lr

0800ea94 <__retarget_lock_acquire_recursive>:
 800ea94:	4770      	bx	lr

0800ea96 <__retarget_lock_release_recursive>:
 800ea96:	4770      	bx	lr

0800ea98 <malloc>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	; (800eaa4 <malloc+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f000 b853 	b.w	800eb48 <_malloc_r>
 800eaa2:	bf00      	nop
 800eaa4:	20000014 	.word	0x20000014

0800eaa8 <_free_r>:
 800eaa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaaa:	2900      	cmp	r1, #0
 800eaac:	d048      	beq.n	800eb40 <_free_r+0x98>
 800eaae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eab2:	9001      	str	r0, [sp, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaba:	bfb8      	it	lt
 800eabc:	18e4      	addlt	r4, r4, r3
 800eabe:	f000 fe01 	bl	800f6c4 <__malloc_lock>
 800eac2:	4a20      	ldr	r2, [pc, #128]	; (800eb44 <_free_r+0x9c>)
 800eac4:	9801      	ldr	r0, [sp, #4]
 800eac6:	6813      	ldr	r3, [r2, #0]
 800eac8:	4615      	mov	r5, r2
 800eaca:	b933      	cbnz	r3, 800eada <_free_r+0x32>
 800eacc:	6063      	str	r3, [r4, #4]
 800eace:	6014      	str	r4, [r2, #0]
 800ead0:	b003      	add	sp, #12
 800ead2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ead6:	f000 bdfb 	b.w	800f6d0 <__malloc_unlock>
 800eada:	42a3      	cmp	r3, r4
 800eadc:	d90b      	bls.n	800eaf6 <_free_r+0x4e>
 800eade:	6821      	ldr	r1, [r4, #0]
 800eae0:	1862      	adds	r2, r4, r1
 800eae2:	4293      	cmp	r3, r2
 800eae4:	bf04      	itt	eq
 800eae6:	681a      	ldreq	r2, [r3, #0]
 800eae8:	685b      	ldreq	r3, [r3, #4]
 800eaea:	6063      	str	r3, [r4, #4]
 800eaec:	bf04      	itt	eq
 800eaee:	1852      	addeq	r2, r2, r1
 800eaf0:	6022      	streq	r2, [r4, #0]
 800eaf2:	602c      	str	r4, [r5, #0]
 800eaf4:	e7ec      	b.n	800ead0 <_free_r+0x28>
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	b10b      	cbz	r3, 800eb00 <_free_r+0x58>
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d9fa      	bls.n	800eaf6 <_free_r+0x4e>
 800eb00:	6811      	ldr	r1, [r2, #0]
 800eb02:	1855      	adds	r5, r2, r1
 800eb04:	42a5      	cmp	r5, r4
 800eb06:	d10b      	bne.n	800eb20 <_free_r+0x78>
 800eb08:	6824      	ldr	r4, [r4, #0]
 800eb0a:	4421      	add	r1, r4
 800eb0c:	1854      	adds	r4, r2, r1
 800eb0e:	42a3      	cmp	r3, r4
 800eb10:	6011      	str	r1, [r2, #0]
 800eb12:	d1dd      	bne.n	800ead0 <_free_r+0x28>
 800eb14:	681c      	ldr	r4, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	6053      	str	r3, [r2, #4]
 800eb1a:	4421      	add	r1, r4
 800eb1c:	6011      	str	r1, [r2, #0]
 800eb1e:	e7d7      	b.n	800ead0 <_free_r+0x28>
 800eb20:	d902      	bls.n	800eb28 <_free_r+0x80>
 800eb22:	230c      	movs	r3, #12
 800eb24:	6003      	str	r3, [r0, #0]
 800eb26:	e7d3      	b.n	800ead0 <_free_r+0x28>
 800eb28:	6825      	ldr	r5, [r4, #0]
 800eb2a:	1961      	adds	r1, r4, r5
 800eb2c:	428b      	cmp	r3, r1
 800eb2e:	bf04      	itt	eq
 800eb30:	6819      	ldreq	r1, [r3, #0]
 800eb32:	685b      	ldreq	r3, [r3, #4]
 800eb34:	6063      	str	r3, [r4, #4]
 800eb36:	bf04      	itt	eq
 800eb38:	1949      	addeq	r1, r1, r5
 800eb3a:	6021      	streq	r1, [r4, #0]
 800eb3c:	6054      	str	r4, [r2, #4]
 800eb3e:	e7c7      	b.n	800ead0 <_free_r+0x28>
 800eb40:	b003      	add	sp, #12
 800eb42:	bd30      	pop	{r4, r5, pc}
 800eb44:	2000020c 	.word	0x2000020c

0800eb48 <_malloc_r>:
 800eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb4a:	1ccd      	adds	r5, r1, #3
 800eb4c:	f025 0503 	bic.w	r5, r5, #3
 800eb50:	3508      	adds	r5, #8
 800eb52:	2d0c      	cmp	r5, #12
 800eb54:	bf38      	it	cc
 800eb56:	250c      	movcc	r5, #12
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	db01      	blt.n	800eb62 <_malloc_r+0x1a>
 800eb5e:	42a9      	cmp	r1, r5
 800eb60:	d903      	bls.n	800eb6a <_malloc_r+0x22>
 800eb62:	230c      	movs	r3, #12
 800eb64:	6033      	str	r3, [r6, #0]
 800eb66:	2000      	movs	r0, #0
 800eb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6a:	f000 fdab 	bl	800f6c4 <__malloc_lock>
 800eb6e:	4921      	ldr	r1, [pc, #132]	; (800ebf4 <_malloc_r+0xac>)
 800eb70:	680a      	ldr	r2, [r1, #0]
 800eb72:	4614      	mov	r4, r2
 800eb74:	b99c      	cbnz	r4, 800eb9e <_malloc_r+0x56>
 800eb76:	4f20      	ldr	r7, [pc, #128]	; (800ebf8 <_malloc_r+0xb0>)
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	b923      	cbnz	r3, 800eb86 <_malloc_r+0x3e>
 800eb7c:	4621      	mov	r1, r4
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f000 fb2a 	bl	800f1d8 <_sbrk_r>
 800eb84:	6038      	str	r0, [r7, #0]
 800eb86:	4629      	mov	r1, r5
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f000 fb25 	bl	800f1d8 <_sbrk_r>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	d123      	bne.n	800ebda <_malloc_r+0x92>
 800eb92:	230c      	movs	r3, #12
 800eb94:	6033      	str	r3, [r6, #0]
 800eb96:	4630      	mov	r0, r6
 800eb98:	f000 fd9a 	bl	800f6d0 <__malloc_unlock>
 800eb9c:	e7e3      	b.n	800eb66 <_malloc_r+0x1e>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	1b5b      	subs	r3, r3, r5
 800eba2:	d417      	bmi.n	800ebd4 <_malloc_r+0x8c>
 800eba4:	2b0b      	cmp	r3, #11
 800eba6:	d903      	bls.n	800ebb0 <_malloc_r+0x68>
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	441c      	add	r4, r3
 800ebac:	6025      	str	r5, [r4, #0]
 800ebae:	e004      	b.n	800ebba <_malloc_r+0x72>
 800ebb0:	6863      	ldr	r3, [r4, #4]
 800ebb2:	42a2      	cmp	r2, r4
 800ebb4:	bf0c      	ite	eq
 800ebb6:	600b      	streq	r3, [r1, #0]
 800ebb8:	6053      	strne	r3, [r2, #4]
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f000 fd88 	bl	800f6d0 <__malloc_unlock>
 800ebc0:	f104 000b 	add.w	r0, r4, #11
 800ebc4:	1d23      	adds	r3, r4, #4
 800ebc6:	f020 0007 	bic.w	r0, r0, #7
 800ebca:	1ac2      	subs	r2, r0, r3
 800ebcc:	d0cc      	beq.n	800eb68 <_malloc_r+0x20>
 800ebce:	1a1b      	subs	r3, r3, r0
 800ebd0:	50a3      	str	r3, [r4, r2]
 800ebd2:	e7c9      	b.n	800eb68 <_malloc_r+0x20>
 800ebd4:	4622      	mov	r2, r4
 800ebd6:	6864      	ldr	r4, [r4, #4]
 800ebd8:	e7cc      	b.n	800eb74 <_malloc_r+0x2c>
 800ebda:	1cc4      	adds	r4, r0, #3
 800ebdc:	f024 0403 	bic.w	r4, r4, #3
 800ebe0:	42a0      	cmp	r0, r4
 800ebe2:	d0e3      	beq.n	800ebac <_malloc_r+0x64>
 800ebe4:	1a21      	subs	r1, r4, r0
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f000 faf6 	bl	800f1d8 <_sbrk_r>
 800ebec:	3001      	adds	r0, #1
 800ebee:	d1dd      	bne.n	800ebac <_malloc_r+0x64>
 800ebf0:	e7cf      	b.n	800eb92 <_malloc_r+0x4a>
 800ebf2:	bf00      	nop
 800ebf4:	2000020c 	.word	0x2000020c
 800ebf8:	20000210 	.word	0x20000210

0800ebfc <__sfputc_r>:
 800ebfc:	6893      	ldr	r3, [r2, #8]
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	b410      	push	{r4}
 800ec04:	6093      	str	r3, [r2, #8]
 800ec06:	da08      	bge.n	800ec1a <__sfputc_r+0x1e>
 800ec08:	6994      	ldr	r4, [r2, #24]
 800ec0a:	42a3      	cmp	r3, r4
 800ec0c:	db01      	blt.n	800ec12 <__sfputc_r+0x16>
 800ec0e:	290a      	cmp	r1, #10
 800ec10:	d103      	bne.n	800ec1a <__sfputc_r+0x1e>
 800ec12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec16:	f000 bb33 	b.w	800f280 <__swbuf_r>
 800ec1a:	6813      	ldr	r3, [r2, #0]
 800ec1c:	1c58      	adds	r0, r3, #1
 800ec1e:	6010      	str	r0, [r2, #0]
 800ec20:	7019      	strb	r1, [r3, #0]
 800ec22:	4608      	mov	r0, r1
 800ec24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <__sfputs_r>:
 800ec2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2c:	4606      	mov	r6, r0
 800ec2e:	460f      	mov	r7, r1
 800ec30:	4614      	mov	r4, r2
 800ec32:	18d5      	adds	r5, r2, r3
 800ec34:	42ac      	cmp	r4, r5
 800ec36:	d101      	bne.n	800ec3c <__sfputs_r+0x12>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e007      	b.n	800ec4c <__sfputs_r+0x22>
 800ec3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec40:	463a      	mov	r2, r7
 800ec42:	4630      	mov	r0, r6
 800ec44:	f7ff ffda 	bl	800ebfc <__sfputc_r>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d1f3      	bne.n	800ec34 <__sfputs_r+0xa>
 800ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec50 <_vfiprintf_r>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	460d      	mov	r5, r1
 800ec56:	b09d      	sub	sp, #116	; 0x74
 800ec58:	4614      	mov	r4, r2
 800ec5a:	4698      	mov	r8, r3
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	b118      	cbz	r0, 800ec68 <_vfiprintf_r+0x18>
 800ec60:	6983      	ldr	r3, [r0, #24]
 800ec62:	b90b      	cbnz	r3, 800ec68 <_vfiprintf_r+0x18>
 800ec64:	f7ff fe66 	bl	800e934 <__sinit>
 800ec68:	4b89      	ldr	r3, [pc, #548]	; (800ee90 <_vfiprintf_r+0x240>)
 800ec6a:	429d      	cmp	r5, r3
 800ec6c:	d11b      	bne.n	800eca6 <_vfiprintf_r+0x56>
 800ec6e:	6875      	ldr	r5, [r6, #4]
 800ec70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec72:	07d9      	lsls	r1, r3, #31
 800ec74:	d405      	bmi.n	800ec82 <_vfiprintf_r+0x32>
 800ec76:	89ab      	ldrh	r3, [r5, #12]
 800ec78:	059a      	lsls	r2, r3, #22
 800ec7a:	d402      	bmi.n	800ec82 <_vfiprintf_r+0x32>
 800ec7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec7e:	f7ff ff09 	bl	800ea94 <__retarget_lock_acquire_recursive>
 800ec82:	89ab      	ldrh	r3, [r5, #12]
 800ec84:	071b      	lsls	r3, r3, #28
 800ec86:	d501      	bpl.n	800ec8c <_vfiprintf_r+0x3c>
 800ec88:	692b      	ldr	r3, [r5, #16]
 800ec8a:	b9eb      	cbnz	r3, 800ecc8 <_vfiprintf_r+0x78>
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f000 fb5a 	bl	800f348 <__swsetup_r>
 800ec94:	b1c0      	cbz	r0, 800ecc8 <_vfiprintf_r+0x78>
 800ec96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec98:	07dc      	lsls	r4, r3, #31
 800ec9a:	d50e      	bpl.n	800ecba <_vfiprintf_r+0x6a>
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	b01d      	add	sp, #116	; 0x74
 800eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca6:	4b7b      	ldr	r3, [pc, #492]	; (800ee94 <_vfiprintf_r+0x244>)
 800eca8:	429d      	cmp	r5, r3
 800ecaa:	d101      	bne.n	800ecb0 <_vfiprintf_r+0x60>
 800ecac:	68b5      	ldr	r5, [r6, #8]
 800ecae:	e7df      	b.n	800ec70 <_vfiprintf_r+0x20>
 800ecb0:	4b79      	ldr	r3, [pc, #484]	; (800ee98 <_vfiprintf_r+0x248>)
 800ecb2:	429d      	cmp	r5, r3
 800ecb4:	bf08      	it	eq
 800ecb6:	68f5      	ldreq	r5, [r6, #12]
 800ecb8:	e7da      	b.n	800ec70 <_vfiprintf_r+0x20>
 800ecba:	89ab      	ldrh	r3, [r5, #12]
 800ecbc:	0598      	lsls	r0, r3, #22
 800ecbe:	d4ed      	bmi.n	800ec9c <_vfiprintf_r+0x4c>
 800ecc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecc2:	f7ff fee8 	bl	800ea96 <__retarget_lock_release_recursive>
 800ecc6:	e7e9      	b.n	800ec9c <_vfiprintf_r+0x4c>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	9309      	str	r3, [sp, #36]	; 0x24
 800eccc:	2320      	movs	r3, #32
 800ecce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecd6:	2330      	movs	r3, #48	; 0x30
 800ecd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee9c <_vfiprintf_r+0x24c>
 800ecdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ece0:	f04f 0901 	mov.w	r9, #1
 800ece4:	4623      	mov	r3, r4
 800ece6:	469a      	mov	sl, r3
 800ece8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecec:	b10a      	cbz	r2, 800ecf2 <_vfiprintf_r+0xa2>
 800ecee:	2a25      	cmp	r2, #37	; 0x25
 800ecf0:	d1f9      	bne.n	800ece6 <_vfiprintf_r+0x96>
 800ecf2:	ebba 0b04 	subs.w	fp, sl, r4
 800ecf6:	d00b      	beq.n	800ed10 <_vfiprintf_r+0xc0>
 800ecf8:	465b      	mov	r3, fp
 800ecfa:	4622      	mov	r2, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f7ff ff93 	bl	800ec2a <__sfputs_r>
 800ed04:	3001      	adds	r0, #1
 800ed06:	f000 80aa 	beq.w	800ee5e <_vfiprintf_r+0x20e>
 800ed0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed0c:	445a      	add	r2, fp
 800ed0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed10:	f89a 3000 	ldrb.w	r3, [sl]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 80a2 	beq.w	800ee5e <_vfiprintf_r+0x20e>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed24:	f10a 0a01 	add.w	sl, sl, #1
 800ed28:	9304      	str	r3, [sp, #16]
 800ed2a:	9307      	str	r3, [sp, #28]
 800ed2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed30:	931a      	str	r3, [sp, #104]	; 0x68
 800ed32:	4654      	mov	r4, sl
 800ed34:	2205      	movs	r2, #5
 800ed36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3a:	4858      	ldr	r0, [pc, #352]	; (800ee9c <_vfiprintf_r+0x24c>)
 800ed3c:	f7f1 fa48 	bl	80001d0 <memchr>
 800ed40:	9a04      	ldr	r2, [sp, #16]
 800ed42:	b9d8      	cbnz	r0, 800ed7c <_vfiprintf_r+0x12c>
 800ed44:	06d1      	lsls	r1, r2, #27
 800ed46:	bf44      	itt	mi
 800ed48:	2320      	movmi	r3, #32
 800ed4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed4e:	0713      	lsls	r3, r2, #28
 800ed50:	bf44      	itt	mi
 800ed52:	232b      	movmi	r3, #43	; 0x2b
 800ed54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed58:	f89a 3000 	ldrb.w	r3, [sl]
 800ed5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed5e:	d015      	beq.n	800ed8c <_vfiprintf_r+0x13c>
 800ed60:	9a07      	ldr	r2, [sp, #28]
 800ed62:	4654      	mov	r4, sl
 800ed64:	2000      	movs	r0, #0
 800ed66:	f04f 0c0a 	mov.w	ip, #10
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed70:	3b30      	subs	r3, #48	; 0x30
 800ed72:	2b09      	cmp	r3, #9
 800ed74:	d94e      	bls.n	800ee14 <_vfiprintf_r+0x1c4>
 800ed76:	b1b0      	cbz	r0, 800eda6 <_vfiprintf_r+0x156>
 800ed78:	9207      	str	r2, [sp, #28]
 800ed7a:	e014      	b.n	800eda6 <_vfiprintf_r+0x156>
 800ed7c:	eba0 0308 	sub.w	r3, r0, r8
 800ed80:	fa09 f303 	lsl.w	r3, r9, r3
 800ed84:	4313      	orrs	r3, r2
 800ed86:	9304      	str	r3, [sp, #16]
 800ed88:	46a2      	mov	sl, r4
 800ed8a:	e7d2      	b.n	800ed32 <_vfiprintf_r+0xe2>
 800ed8c:	9b03      	ldr	r3, [sp, #12]
 800ed8e:	1d19      	adds	r1, r3, #4
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	9103      	str	r1, [sp, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	bfbb      	ittet	lt
 800ed98:	425b      	neglt	r3, r3
 800ed9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ed9e:	9307      	strge	r3, [sp, #28]
 800eda0:	9307      	strlt	r3, [sp, #28]
 800eda2:	bfb8      	it	lt
 800eda4:	9204      	strlt	r2, [sp, #16]
 800eda6:	7823      	ldrb	r3, [r4, #0]
 800eda8:	2b2e      	cmp	r3, #46	; 0x2e
 800edaa:	d10c      	bne.n	800edc6 <_vfiprintf_r+0x176>
 800edac:	7863      	ldrb	r3, [r4, #1]
 800edae:	2b2a      	cmp	r3, #42	; 0x2a
 800edb0:	d135      	bne.n	800ee1e <_vfiprintf_r+0x1ce>
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	1d1a      	adds	r2, r3, #4
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	9203      	str	r2, [sp, #12]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bfb8      	it	lt
 800edbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800edc2:	3402      	adds	r4, #2
 800edc4:	9305      	str	r3, [sp, #20]
 800edc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eeac <_vfiprintf_r+0x25c>
 800edca:	7821      	ldrb	r1, [r4, #0]
 800edcc:	2203      	movs	r2, #3
 800edce:	4650      	mov	r0, sl
 800edd0:	f7f1 f9fe 	bl	80001d0 <memchr>
 800edd4:	b140      	cbz	r0, 800ede8 <_vfiprintf_r+0x198>
 800edd6:	2340      	movs	r3, #64	; 0x40
 800edd8:	eba0 000a 	sub.w	r0, r0, sl
 800eddc:	fa03 f000 	lsl.w	r0, r3, r0
 800ede0:	9b04      	ldr	r3, [sp, #16]
 800ede2:	4303      	orrs	r3, r0
 800ede4:	3401      	adds	r4, #1
 800ede6:	9304      	str	r3, [sp, #16]
 800ede8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edec:	482c      	ldr	r0, [pc, #176]	; (800eea0 <_vfiprintf_r+0x250>)
 800edee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800edf2:	2206      	movs	r2, #6
 800edf4:	f7f1 f9ec 	bl	80001d0 <memchr>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d03f      	beq.n	800ee7c <_vfiprintf_r+0x22c>
 800edfc:	4b29      	ldr	r3, [pc, #164]	; (800eea4 <_vfiprintf_r+0x254>)
 800edfe:	bb1b      	cbnz	r3, 800ee48 <_vfiprintf_r+0x1f8>
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	3307      	adds	r3, #7
 800ee04:	f023 0307 	bic.w	r3, r3, #7
 800ee08:	3308      	adds	r3, #8
 800ee0a:	9303      	str	r3, [sp, #12]
 800ee0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee0e:	443b      	add	r3, r7
 800ee10:	9309      	str	r3, [sp, #36]	; 0x24
 800ee12:	e767      	b.n	800ece4 <_vfiprintf_r+0x94>
 800ee14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee18:	460c      	mov	r4, r1
 800ee1a:	2001      	movs	r0, #1
 800ee1c:	e7a5      	b.n	800ed6a <_vfiprintf_r+0x11a>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	3401      	adds	r4, #1
 800ee22:	9305      	str	r3, [sp, #20]
 800ee24:	4619      	mov	r1, r3
 800ee26:	f04f 0c0a 	mov.w	ip, #10
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee30:	3a30      	subs	r2, #48	; 0x30
 800ee32:	2a09      	cmp	r2, #9
 800ee34:	d903      	bls.n	800ee3e <_vfiprintf_r+0x1ee>
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d0c5      	beq.n	800edc6 <_vfiprintf_r+0x176>
 800ee3a:	9105      	str	r1, [sp, #20]
 800ee3c:	e7c3      	b.n	800edc6 <_vfiprintf_r+0x176>
 800ee3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee42:	4604      	mov	r4, r0
 800ee44:	2301      	movs	r3, #1
 800ee46:	e7f0      	b.n	800ee2a <_vfiprintf_r+0x1da>
 800ee48:	ab03      	add	r3, sp, #12
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	462a      	mov	r2, r5
 800ee4e:	4b16      	ldr	r3, [pc, #88]	; (800eea8 <_vfiprintf_r+0x258>)
 800ee50:	a904      	add	r1, sp, #16
 800ee52:	4630      	mov	r0, r6
 800ee54:	f3af 8000 	nop.w
 800ee58:	4607      	mov	r7, r0
 800ee5a:	1c78      	adds	r0, r7, #1
 800ee5c:	d1d6      	bne.n	800ee0c <_vfiprintf_r+0x1bc>
 800ee5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee60:	07d9      	lsls	r1, r3, #31
 800ee62:	d405      	bmi.n	800ee70 <_vfiprintf_r+0x220>
 800ee64:	89ab      	ldrh	r3, [r5, #12]
 800ee66:	059a      	lsls	r2, r3, #22
 800ee68:	d402      	bmi.n	800ee70 <_vfiprintf_r+0x220>
 800ee6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee6c:	f7ff fe13 	bl	800ea96 <__retarget_lock_release_recursive>
 800ee70:	89ab      	ldrh	r3, [r5, #12]
 800ee72:	065b      	lsls	r3, r3, #25
 800ee74:	f53f af12 	bmi.w	800ec9c <_vfiprintf_r+0x4c>
 800ee78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee7a:	e711      	b.n	800eca0 <_vfiprintf_r+0x50>
 800ee7c:	ab03      	add	r3, sp, #12
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	462a      	mov	r2, r5
 800ee82:	4b09      	ldr	r3, [pc, #36]	; (800eea8 <_vfiprintf_r+0x258>)
 800ee84:	a904      	add	r1, sp, #16
 800ee86:	4630      	mov	r0, r6
 800ee88:	f000 f880 	bl	800ef8c <_printf_i>
 800ee8c:	e7e4      	b.n	800ee58 <_vfiprintf_r+0x208>
 800ee8e:	bf00      	nop
 800ee90:	080123f0 	.word	0x080123f0
 800ee94:	08012410 	.word	0x08012410
 800ee98:	080123d0 	.word	0x080123d0
 800ee9c:	08012430 	.word	0x08012430
 800eea0:	0801243a 	.word	0x0801243a
 800eea4:	00000000 	.word	0x00000000
 800eea8:	0800ec2b 	.word	0x0800ec2b
 800eeac:	08012436 	.word	0x08012436

0800eeb0 <_printf_common>:
 800eeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb4:	4616      	mov	r6, r2
 800eeb6:	4699      	mov	r9, r3
 800eeb8:	688a      	ldr	r2, [r1, #8]
 800eeba:	690b      	ldr	r3, [r1, #16]
 800eebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eec0:	4293      	cmp	r3, r2
 800eec2:	bfb8      	it	lt
 800eec4:	4613      	movlt	r3, r2
 800eec6:	6033      	str	r3, [r6, #0]
 800eec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eecc:	4607      	mov	r7, r0
 800eece:	460c      	mov	r4, r1
 800eed0:	b10a      	cbz	r2, 800eed6 <_printf_common+0x26>
 800eed2:	3301      	adds	r3, #1
 800eed4:	6033      	str	r3, [r6, #0]
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	0699      	lsls	r1, r3, #26
 800eeda:	bf42      	ittt	mi
 800eedc:	6833      	ldrmi	r3, [r6, #0]
 800eede:	3302      	addmi	r3, #2
 800eee0:	6033      	strmi	r3, [r6, #0]
 800eee2:	6825      	ldr	r5, [r4, #0]
 800eee4:	f015 0506 	ands.w	r5, r5, #6
 800eee8:	d106      	bne.n	800eef8 <_printf_common+0x48>
 800eeea:	f104 0a19 	add.w	sl, r4, #25
 800eeee:	68e3      	ldr	r3, [r4, #12]
 800eef0:	6832      	ldr	r2, [r6, #0]
 800eef2:	1a9b      	subs	r3, r3, r2
 800eef4:	42ab      	cmp	r3, r5
 800eef6:	dc26      	bgt.n	800ef46 <_printf_common+0x96>
 800eef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eefc:	1e13      	subs	r3, r2, #0
 800eefe:	6822      	ldr	r2, [r4, #0]
 800ef00:	bf18      	it	ne
 800ef02:	2301      	movne	r3, #1
 800ef04:	0692      	lsls	r2, r2, #26
 800ef06:	d42b      	bmi.n	800ef60 <_printf_common+0xb0>
 800ef08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	4638      	mov	r0, r7
 800ef10:	47c0      	blx	r8
 800ef12:	3001      	adds	r0, #1
 800ef14:	d01e      	beq.n	800ef54 <_printf_common+0xa4>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	68e5      	ldr	r5, [r4, #12]
 800ef1a:	6832      	ldr	r2, [r6, #0]
 800ef1c:	f003 0306 	and.w	r3, r3, #6
 800ef20:	2b04      	cmp	r3, #4
 800ef22:	bf08      	it	eq
 800ef24:	1aad      	subeq	r5, r5, r2
 800ef26:	68a3      	ldr	r3, [r4, #8]
 800ef28:	6922      	ldr	r2, [r4, #16]
 800ef2a:	bf0c      	ite	eq
 800ef2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef30:	2500      	movne	r5, #0
 800ef32:	4293      	cmp	r3, r2
 800ef34:	bfc4      	itt	gt
 800ef36:	1a9b      	subgt	r3, r3, r2
 800ef38:	18ed      	addgt	r5, r5, r3
 800ef3a:	2600      	movs	r6, #0
 800ef3c:	341a      	adds	r4, #26
 800ef3e:	42b5      	cmp	r5, r6
 800ef40:	d11a      	bne.n	800ef78 <_printf_common+0xc8>
 800ef42:	2000      	movs	r0, #0
 800ef44:	e008      	b.n	800ef58 <_printf_common+0xa8>
 800ef46:	2301      	movs	r3, #1
 800ef48:	4652      	mov	r2, sl
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	47c0      	blx	r8
 800ef50:	3001      	adds	r0, #1
 800ef52:	d103      	bne.n	800ef5c <_printf_common+0xac>
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5c:	3501      	adds	r5, #1
 800ef5e:	e7c6      	b.n	800eeee <_printf_common+0x3e>
 800ef60:	18e1      	adds	r1, r4, r3
 800ef62:	1c5a      	adds	r2, r3, #1
 800ef64:	2030      	movs	r0, #48	; 0x30
 800ef66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef6a:	4422      	add	r2, r4
 800ef6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef74:	3302      	adds	r3, #2
 800ef76:	e7c7      	b.n	800ef08 <_printf_common+0x58>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4622      	mov	r2, r4
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4638      	mov	r0, r7
 800ef80:	47c0      	blx	r8
 800ef82:	3001      	adds	r0, #1
 800ef84:	d0e6      	beq.n	800ef54 <_printf_common+0xa4>
 800ef86:	3601      	adds	r6, #1
 800ef88:	e7d9      	b.n	800ef3e <_printf_common+0x8e>
	...

0800ef8c <_printf_i>:
 800ef8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef90:	460c      	mov	r4, r1
 800ef92:	4691      	mov	r9, r2
 800ef94:	7e27      	ldrb	r7, [r4, #24]
 800ef96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef98:	2f78      	cmp	r7, #120	; 0x78
 800ef9a:	4680      	mov	r8, r0
 800ef9c:	469a      	mov	sl, r3
 800ef9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efa2:	d807      	bhi.n	800efb4 <_printf_i+0x28>
 800efa4:	2f62      	cmp	r7, #98	; 0x62
 800efa6:	d80a      	bhi.n	800efbe <_printf_i+0x32>
 800efa8:	2f00      	cmp	r7, #0
 800efaa:	f000 80d8 	beq.w	800f15e <_printf_i+0x1d2>
 800efae:	2f58      	cmp	r7, #88	; 0x58
 800efb0:	f000 80a3 	beq.w	800f0fa <_printf_i+0x16e>
 800efb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efbc:	e03a      	b.n	800f034 <_printf_i+0xa8>
 800efbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efc2:	2b15      	cmp	r3, #21
 800efc4:	d8f6      	bhi.n	800efb4 <_printf_i+0x28>
 800efc6:	a001      	add	r0, pc, #4	; (adr r0, 800efcc <_printf_i+0x40>)
 800efc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800efcc:	0800f025 	.word	0x0800f025
 800efd0:	0800f039 	.word	0x0800f039
 800efd4:	0800efb5 	.word	0x0800efb5
 800efd8:	0800efb5 	.word	0x0800efb5
 800efdc:	0800efb5 	.word	0x0800efb5
 800efe0:	0800efb5 	.word	0x0800efb5
 800efe4:	0800f039 	.word	0x0800f039
 800efe8:	0800efb5 	.word	0x0800efb5
 800efec:	0800efb5 	.word	0x0800efb5
 800eff0:	0800efb5 	.word	0x0800efb5
 800eff4:	0800efb5 	.word	0x0800efb5
 800eff8:	0800f145 	.word	0x0800f145
 800effc:	0800f069 	.word	0x0800f069
 800f000:	0800f127 	.word	0x0800f127
 800f004:	0800efb5 	.word	0x0800efb5
 800f008:	0800efb5 	.word	0x0800efb5
 800f00c:	0800f167 	.word	0x0800f167
 800f010:	0800efb5 	.word	0x0800efb5
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800efb5 	.word	0x0800efb5
 800f01c:	0800efb5 	.word	0x0800efb5
 800f020:	0800f12f 	.word	0x0800f12f
 800f024:	680b      	ldr	r3, [r1, #0]
 800f026:	1d1a      	adds	r2, r3, #4
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	600a      	str	r2, [r1, #0]
 800f02c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f034:	2301      	movs	r3, #1
 800f036:	e0a3      	b.n	800f180 <_printf_i+0x1f4>
 800f038:	6825      	ldr	r5, [r4, #0]
 800f03a:	6808      	ldr	r0, [r1, #0]
 800f03c:	062e      	lsls	r6, r5, #24
 800f03e:	f100 0304 	add.w	r3, r0, #4
 800f042:	d50a      	bpl.n	800f05a <_printf_i+0xce>
 800f044:	6805      	ldr	r5, [r0, #0]
 800f046:	600b      	str	r3, [r1, #0]
 800f048:	2d00      	cmp	r5, #0
 800f04a:	da03      	bge.n	800f054 <_printf_i+0xc8>
 800f04c:	232d      	movs	r3, #45	; 0x2d
 800f04e:	426d      	negs	r5, r5
 800f050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f054:	485e      	ldr	r0, [pc, #376]	; (800f1d0 <_printf_i+0x244>)
 800f056:	230a      	movs	r3, #10
 800f058:	e019      	b.n	800f08e <_printf_i+0x102>
 800f05a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f05e:	6805      	ldr	r5, [r0, #0]
 800f060:	600b      	str	r3, [r1, #0]
 800f062:	bf18      	it	ne
 800f064:	b22d      	sxthne	r5, r5
 800f066:	e7ef      	b.n	800f048 <_printf_i+0xbc>
 800f068:	680b      	ldr	r3, [r1, #0]
 800f06a:	6825      	ldr	r5, [r4, #0]
 800f06c:	1d18      	adds	r0, r3, #4
 800f06e:	6008      	str	r0, [r1, #0]
 800f070:	0628      	lsls	r0, r5, #24
 800f072:	d501      	bpl.n	800f078 <_printf_i+0xec>
 800f074:	681d      	ldr	r5, [r3, #0]
 800f076:	e002      	b.n	800f07e <_printf_i+0xf2>
 800f078:	0669      	lsls	r1, r5, #25
 800f07a:	d5fb      	bpl.n	800f074 <_printf_i+0xe8>
 800f07c:	881d      	ldrh	r5, [r3, #0]
 800f07e:	4854      	ldr	r0, [pc, #336]	; (800f1d0 <_printf_i+0x244>)
 800f080:	2f6f      	cmp	r7, #111	; 0x6f
 800f082:	bf0c      	ite	eq
 800f084:	2308      	moveq	r3, #8
 800f086:	230a      	movne	r3, #10
 800f088:	2100      	movs	r1, #0
 800f08a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f08e:	6866      	ldr	r6, [r4, #4]
 800f090:	60a6      	str	r6, [r4, #8]
 800f092:	2e00      	cmp	r6, #0
 800f094:	bfa2      	ittt	ge
 800f096:	6821      	ldrge	r1, [r4, #0]
 800f098:	f021 0104 	bicge.w	r1, r1, #4
 800f09c:	6021      	strge	r1, [r4, #0]
 800f09e:	b90d      	cbnz	r5, 800f0a4 <_printf_i+0x118>
 800f0a0:	2e00      	cmp	r6, #0
 800f0a2:	d04d      	beq.n	800f140 <_printf_i+0x1b4>
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800f0ae:	5dc7      	ldrb	r7, [r0, r7]
 800f0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0b4:	462f      	mov	r7, r5
 800f0b6:	42bb      	cmp	r3, r7
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	d9f4      	bls.n	800f0a6 <_printf_i+0x11a>
 800f0bc:	2b08      	cmp	r3, #8
 800f0be:	d10b      	bne.n	800f0d8 <_printf_i+0x14c>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	07df      	lsls	r7, r3, #31
 800f0c4:	d508      	bpl.n	800f0d8 <_printf_i+0x14c>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	6861      	ldr	r1, [r4, #4]
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	bfde      	ittt	le
 800f0ce:	2330      	movle	r3, #48	; 0x30
 800f0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f0d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f0d8:	1b92      	subs	r2, r2, r6
 800f0da:	6122      	str	r2, [r4, #16]
 800f0dc:	f8cd a000 	str.w	sl, [sp]
 800f0e0:	464b      	mov	r3, r9
 800f0e2:	aa03      	add	r2, sp, #12
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	f7ff fee2 	bl	800eeb0 <_printf_common>
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d14c      	bne.n	800f18a <_printf_i+0x1fe>
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f4:	b004      	add	sp, #16
 800f0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0fa:	4835      	ldr	r0, [pc, #212]	; (800f1d0 <_printf_i+0x244>)
 800f0fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	680e      	ldr	r6, [r1, #0]
 800f104:	061f      	lsls	r7, r3, #24
 800f106:	f856 5b04 	ldr.w	r5, [r6], #4
 800f10a:	600e      	str	r6, [r1, #0]
 800f10c:	d514      	bpl.n	800f138 <_printf_i+0x1ac>
 800f10e:	07d9      	lsls	r1, r3, #31
 800f110:	bf44      	itt	mi
 800f112:	f043 0320 	orrmi.w	r3, r3, #32
 800f116:	6023      	strmi	r3, [r4, #0]
 800f118:	b91d      	cbnz	r5, 800f122 <_printf_i+0x196>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	f023 0320 	bic.w	r3, r3, #32
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	2310      	movs	r3, #16
 800f124:	e7b0      	b.n	800f088 <_printf_i+0xfc>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	f043 0320 	orr.w	r3, r3, #32
 800f12c:	6023      	str	r3, [r4, #0]
 800f12e:	2378      	movs	r3, #120	; 0x78
 800f130:	4828      	ldr	r0, [pc, #160]	; (800f1d4 <_printf_i+0x248>)
 800f132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f136:	e7e3      	b.n	800f100 <_printf_i+0x174>
 800f138:	065e      	lsls	r6, r3, #25
 800f13a:	bf48      	it	mi
 800f13c:	b2ad      	uxthmi	r5, r5
 800f13e:	e7e6      	b.n	800f10e <_printf_i+0x182>
 800f140:	4616      	mov	r6, r2
 800f142:	e7bb      	b.n	800f0bc <_printf_i+0x130>
 800f144:	680b      	ldr	r3, [r1, #0]
 800f146:	6826      	ldr	r6, [r4, #0]
 800f148:	6960      	ldr	r0, [r4, #20]
 800f14a:	1d1d      	adds	r5, r3, #4
 800f14c:	600d      	str	r5, [r1, #0]
 800f14e:	0635      	lsls	r5, r6, #24
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	d501      	bpl.n	800f158 <_printf_i+0x1cc>
 800f154:	6018      	str	r0, [r3, #0]
 800f156:	e002      	b.n	800f15e <_printf_i+0x1d2>
 800f158:	0671      	lsls	r1, r6, #25
 800f15a:	d5fb      	bpl.n	800f154 <_printf_i+0x1c8>
 800f15c:	8018      	strh	r0, [r3, #0]
 800f15e:	2300      	movs	r3, #0
 800f160:	6123      	str	r3, [r4, #16]
 800f162:	4616      	mov	r6, r2
 800f164:	e7ba      	b.n	800f0dc <_printf_i+0x150>
 800f166:	680b      	ldr	r3, [r1, #0]
 800f168:	1d1a      	adds	r2, r3, #4
 800f16a:	600a      	str	r2, [r1, #0]
 800f16c:	681e      	ldr	r6, [r3, #0]
 800f16e:	6862      	ldr	r2, [r4, #4]
 800f170:	2100      	movs	r1, #0
 800f172:	4630      	mov	r0, r6
 800f174:	f7f1 f82c 	bl	80001d0 <memchr>
 800f178:	b108      	cbz	r0, 800f17e <_printf_i+0x1f2>
 800f17a:	1b80      	subs	r0, r0, r6
 800f17c:	6060      	str	r0, [r4, #4]
 800f17e:	6863      	ldr	r3, [r4, #4]
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	2300      	movs	r3, #0
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f188:	e7a8      	b.n	800f0dc <_printf_i+0x150>
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	4632      	mov	r2, r6
 800f18e:	4649      	mov	r1, r9
 800f190:	4640      	mov	r0, r8
 800f192:	47d0      	blx	sl
 800f194:	3001      	adds	r0, #1
 800f196:	d0ab      	beq.n	800f0f0 <_printf_i+0x164>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	079b      	lsls	r3, r3, #30
 800f19c:	d413      	bmi.n	800f1c6 <_printf_i+0x23a>
 800f19e:	68e0      	ldr	r0, [r4, #12]
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	4298      	cmp	r0, r3
 800f1a4:	bfb8      	it	lt
 800f1a6:	4618      	movlt	r0, r3
 800f1a8:	e7a4      	b.n	800f0f4 <_printf_i+0x168>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	4632      	mov	r2, r6
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	4640      	mov	r0, r8
 800f1b2:	47d0      	blx	sl
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d09b      	beq.n	800f0f0 <_printf_i+0x164>
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	68e3      	ldr	r3, [r4, #12]
 800f1bc:	9903      	ldr	r1, [sp, #12]
 800f1be:	1a5b      	subs	r3, r3, r1
 800f1c0:	42ab      	cmp	r3, r5
 800f1c2:	dcf2      	bgt.n	800f1aa <_printf_i+0x21e>
 800f1c4:	e7eb      	b.n	800f19e <_printf_i+0x212>
 800f1c6:	2500      	movs	r5, #0
 800f1c8:	f104 0619 	add.w	r6, r4, #25
 800f1cc:	e7f5      	b.n	800f1ba <_printf_i+0x22e>
 800f1ce:	bf00      	nop
 800f1d0:	08012441 	.word	0x08012441
 800f1d4:	08012452 	.word	0x08012452

0800f1d8 <_sbrk_r>:
 800f1d8:	b538      	push	{r3, r4, r5, lr}
 800f1da:	4d06      	ldr	r5, [pc, #24]	; (800f1f4 <_sbrk_r+0x1c>)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4604      	mov	r4, r0
 800f1e0:	4608      	mov	r0, r1
 800f1e2:	602b      	str	r3, [r5, #0]
 800f1e4:	f7f1 fb6c 	bl	80008c0 <_sbrk>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d102      	bne.n	800f1f2 <_sbrk_r+0x1a>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	b103      	cbz	r3, 800f1f2 <_sbrk_r+0x1a>
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	200068ac 	.word	0x200068ac

0800f1f8 <__sread>:
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f200:	f000 fa6c 	bl	800f6dc <_read_r>
 800f204:	2800      	cmp	r0, #0
 800f206:	bfab      	itete	ge
 800f208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f20a:	89a3      	ldrhlt	r3, [r4, #12]
 800f20c:	181b      	addge	r3, r3, r0
 800f20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f212:	bfac      	ite	ge
 800f214:	6563      	strge	r3, [r4, #84]	; 0x54
 800f216:	81a3      	strhlt	r3, [r4, #12]
 800f218:	bd10      	pop	{r4, pc}

0800f21a <__swrite>:
 800f21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21e:	461f      	mov	r7, r3
 800f220:	898b      	ldrh	r3, [r1, #12]
 800f222:	05db      	lsls	r3, r3, #23
 800f224:	4605      	mov	r5, r0
 800f226:	460c      	mov	r4, r1
 800f228:	4616      	mov	r6, r2
 800f22a:	d505      	bpl.n	800f238 <__swrite+0x1e>
 800f22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f230:	2302      	movs	r3, #2
 800f232:	2200      	movs	r2, #0
 800f234:	f000 f9d0 	bl	800f5d8 <_lseek_r>
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f23e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f242:	81a3      	strh	r3, [r4, #12]
 800f244:	4632      	mov	r2, r6
 800f246:	463b      	mov	r3, r7
 800f248:	4628      	mov	r0, r5
 800f24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f24e:	f000 b869 	b.w	800f324 <_write_r>

0800f252 <__sseek>:
 800f252:	b510      	push	{r4, lr}
 800f254:	460c      	mov	r4, r1
 800f256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25a:	f000 f9bd 	bl	800f5d8 <_lseek_r>
 800f25e:	1c43      	adds	r3, r0, #1
 800f260:	89a3      	ldrh	r3, [r4, #12]
 800f262:	bf15      	itete	ne
 800f264:	6560      	strne	r0, [r4, #84]	; 0x54
 800f266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f26e:	81a3      	strheq	r3, [r4, #12]
 800f270:	bf18      	it	ne
 800f272:	81a3      	strhne	r3, [r4, #12]
 800f274:	bd10      	pop	{r4, pc}

0800f276 <__sclose>:
 800f276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27a:	f000 b8db 	b.w	800f434 <_close_r>
	...

0800f280 <__swbuf_r>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	460e      	mov	r6, r1
 800f284:	4614      	mov	r4, r2
 800f286:	4605      	mov	r5, r0
 800f288:	b118      	cbz	r0, 800f292 <__swbuf_r+0x12>
 800f28a:	6983      	ldr	r3, [r0, #24]
 800f28c:	b90b      	cbnz	r3, 800f292 <__swbuf_r+0x12>
 800f28e:	f7ff fb51 	bl	800e934 <__sinit>
 800f292:	4b21      	ldr	r3, [pc, #132]	; (800f318 <__swbuf_r+0x98>)
 800f294:	429c      	cmp	r4, r3
 800f296:	d12b      	bne.n	800f2f0 <__swbuf_r+0x70>
 800f298:	686c      	ldr	r4, [r5, #4]
 800f29a:	69a3      	ldr	r3, [r4, #24]
 800f29c:	60a3      	str	r3, [r4, #8]
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	071a      	lsls	r2, r3, #28
 800f2a2:	d52f      	bpl.n	800f304 <__swbuf_r+0x84>
 800f2a4:	6923      	ldr	r3, [r4, #16]
 800f2a6:	b36b      	cbz	r3, 800f304 <__swbuf_r+0x84>
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	6820      	ldr	r0, [r4, #0]
 800f2ac:	1ac0      	subs	r0, r0, r3
 800f2ae:	6963      	ldr	r3, [r4, #20]
 800f2b0:	b2f6      	uxtb	r6, r6
 800f2b2:	4283      	cmp	r3, r0
 800f2b4:	4637      	mov	r7, r6
 800f2b6:	dc04      	bgt.n	800f2c2 <__swbuf_r+0x42>
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f000 f950 	bl	800f560 <_fflush_r>
 800f2c0:	bb30      	cbnz	r0, 800f310 <__swbuf_r+0x90>
 800f2c2:	68a3      	ldr	r3, [r4, #8]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	60a3      	str	r3, [r4, #8]
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	6022      	str	r2, [r4, #0]
 800f2ce:	701e      	strb	r6, [r3, #0]
 800f2d0:	6963      	ldr	r3, [r4, #20]
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	4283      	cmp	r3, r0
 800f2d6:	d004      	beq.n	800f2e2 <__swbuf_r+0x62>
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	07db      	lsls	r3, r3, #31
 800f2dc:	d506      	bpl.n	800f2ec <__swbuf_r+0x6c>
 800f2de:	2e0a      	cmp	r6, #10
 800f2e0:	d104      	bne.n	800f2ec <__swbuf_r+0x6c>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f000 f93b 	bl	800f560 <_fflush_r>
 800f2ea:	b988      	cbnz	r0, 800f310 <__swbuf_r+0x90>
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <__swbuf_r+0x9c>)
 800f2f2:	429c      	cmp	r4, r3
 800f2f4:	d101      	bne.n	800f2fa <__swbuf_r+0x7a>
 800f2f6:	68ac      	ldr	r4, [r5, #8]
 800f2f8:	e7cf      	b.n	800f29a <__swbuf_r+0x1a>
 800f2fa:	4b09      	ldr	r3, [pc, #36]	; (800f320 <__swbuf_r+0xa0>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	bf08      	it	eq
 800f300:	68ec      	ldreq	r4, [r5, #12]
 800f302:	e7ca      	b.n	800f29a <__swbuf_r+0x1a>
 800f304:	4621      	mov	r1, r4
 800f306:	4628      	mov	r0, r5
 800f308:	f000 f81e 	bl	800f348 <__swsetup_r>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d0cb      	beq.n	800f2a8 <__swbuf_r+0x28>
 800f310:	f04f 37ff 	mov.w	r7, #4294967295
 800f314:	e7ea      	b.n	800f2ec <__swbuf_r+0x6c>
 800f316:	bf00      	nop
 800f318:	080123f0 	.word	0x080123f0
 800f31c:	08012410 	.word	0x08012410
 800f320:	080123d0 	.word	0x080123d0

0800f324 <_write_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d07      	ldr	r5, [pc, #28]	; (800f344 <_write_r+0x20>)
 800f328:	4604      	mov	r4, r0
 800f32a:	4608      	mov	r0, r1
 800f32c:	4611      	mov	r1, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	461a      	mov	r2, r3
 800f334:	f7f1 fa73 	bl	800081e <_write>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_write_r+0x1e>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_write_r+0x1e>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	200068ac 	.word	0x200068ac

0800f348 <__swsetup_r>:
 800f348:	4b32      	ldr	r3, [pc, #200]	; (800f414 <__swsetup_r+0xcc>)
 800f34a:	b570      	push	{r4, r5, r6, lr}
 800f34c:	681d      	ldr	r5, [r3, #0]
 800f34e:	4606      	mov	r6, r0
 800f350:	460c      	mov	r4, r1
 800f352:	b125      	cbz	r5, 800f35e <__swsetup_r+0x16>
 800f354:	69ab      	ldr	r3, [r5, #24]
 800f356:	b913      	cbnz	r3, 800f35e <__swsetup_r+0x16>
 800f358:	4628      	mov	r0, r5
 800f35a:	f7ff faeb 	bl	800e934 <__sinit>
 800f35e:	4b2e      	ldr	r3, [pc, #184]	; (800f418 <__swsetup_r+0xd0>)
 800f360:	429c      	cmp	r4, r3
 800f362:	d10f      	bne.n	800f384 <__swsetup_r+0x3c>
 800f364:	686c      	ldr	r4, [r5, #4]
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f36c:	0719      	lsls	r1, r3, #28
 800f36e:	d42c      	bmi.n	800f3ca <__swsetup_r+0x82>
 800f370:	06dd      	lsls	r5, r3, #27
 800f372:	d411      	bmi.n	800f398 <__swsetup_r+0x50>
 800f374:	2309      	movs	r3, #9
 800f376:	6033      	str	r3, [r6, #0]
 800f378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f37c:	81a3      	strh	r3, [r4, #12]
 800f37e:	f04f 30ff 	mov.w	r0, #4294967295
 800f382:	e03e      	b.n	800f402 <__swsetup_r+0xba>
 800f384:	4b25      	ldr	r3, [pc, #148]	; (800f41c <__swsetup_r+0xd4>)
 800f386:	429c      	cmp	r4, r3
 800f388:	d101      	bne.n	800f38e <__swsetup_r+0x46>
 800f38a:	68ac      	ldr	r4, [r5, #8]
 800f38c:	e7eb      	b.n	800f366 <__swsetup_r+0x1e>
 800f38e:	4b24      	ldr	r3, [pc, #144]	; (800f420 <__swsetup_r+0xd8>)
 800f390:	429c      	cmp	r4, r3
 800f392:	bf08      	it	eq
 800f394:	68ec      	ldreq	r4, [r5, #12]
 800f396:	e7e6      	b.n	800f366 <__swsetup_r+0x1e>
 800f398:	0758      	lsls	r0, r3, #29
 800f39a:	d512      	bpl.n	800f3c2 <__swsetup_r+0x7a>
 800f39c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f39e:	b141      	cbz	r1, 800f3b2 <__swsetup_r+0x6a>
 800f3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3a4:	4299      	cmp	r1, r3
 800f3a6:	d002      	beq.n	800f3ae <__swsetup_r+0x66>
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff fb7d 	bl	800eaa8 <_free_r>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	6363      	str	r3, [r4, #52]	; 0x34
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	6063      	str	r3, [r4, #4]
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	6023      	str	r3, [r4, #0]
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	f043 0308 	orr.w	r3, r3, #8
 800f3c8:	81a3      	strh	r3, [r4, #12]
 800f3ca:	6923      	ldr	r3, [r4, #16]
 800f3cc:	b94b      	cbnz	r3, 800f3e2 <__swsetup_r+0x9a>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3d8:	d003      	beq.n	800f3e2 <__swsetup_r+0x9a>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f000 f931 	bl	800f644 <__smakebuf_r>
 800f3e2:	89a0      	ldrh	r0, [r4, #12]
 800f3e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3e8:	f010 0301 	ands.w	r3, r0, #1
 800f3ec:	d00a      	beq.n	800f404 <__swsetup_r+0xbc>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	60a3      	str	r3, [r4, #8]
 800f3f2:	6963      	ldr	r3, [r4, #20]
 800f3f4:	425b      	negs	r3, r3
 800f3f6:	61a3      	str	r3, [r4, #24]
 800f3f8:	6923      	ldr	r3, [r4, #16]
 800f3fa:	b943      	cbnz	r3, 800f40e <__swsetup_r+0xc6>
 800f3fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f400:	d1ba      	bne.n	800f378 <__swsetup_r+0x30>
 800f402:	bd70      	pop	{r4, r5, r6, pc}
 800f404:	0781      	lsls	r1, r0, #30
 800f406:	bf58      	it	pl
 800f408:	6963      	ldrpl	r3, [r4, #20]
 800f40a:	60a3      	str	r3, [r4, #8]
 800f40c:	e7f4      	b.n	800f3f8 <__swsetup_r+0xb0>
 800f40e:	2000      	movs	r0, #0
 800f410:	e7f7      	b.n	800f402 <__swsetup_r+0xba>
 800f412:	bf00      	nop
 800f414:	20000014 	.word	0x20000014
 800f418:	080123f0 	.word	0x080123f0
 800f41c:	08012410 	.word	0x08012410
 800f420:	080123d0 	.word	0x080123d0

0800f424 <abort>:
 800f424:	b508      	push	{r3, lr}
 800f426:	2006      	movs	r0, #6
 800f428:	f000 f992 	bl	800f750 <raise>
 800f42c:	2001      	movs	r0, #1
 800f42e:	f7f1 f9cf 	bl	80007d0 <_exit>
	...

0800f434 <_close_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d06      	ldr	r5, [pc, #24]	; (800f450 <_close_r+0x1c>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	f7f1 fa09 	bl	8000856 <_close>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d102      	bne.n	800f44e <_close_r+0x1a>
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	b103      	cbz	r3, 800f44e <_close_r+0x1a>
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	200068ac 	.word	0x200068ac

0800f454 <__sflush_r>:
 800f454:	898a      	ldrh	r2, [r1, #12]
 800f456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45a:	4605      	mov	r5, r0
 800f45c:	0710      	lsls	r0, r2, #28
 800f45e:	460c      	mov	r4, r1
 800f460:	d458      	bmi.n	800f514 <__sflush_r+0xc0>
 800f462:	684b      	ldr	r3, [r1, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	dc05      	bgt.n	800f474 <__sflush_r+0x20>
 800f468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	dc02      	bgt.n	800f474 <__sflush_r+0x20>
 800f46e:	2000      	movs	r0, #0
 800f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f476:	2e00      	cmp	r6, #0
 800f478:	d0f9      	beq.n	800f46e <__sflush_r+0x1a>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f480:	682f      	ldr	r7, [r5, #0]
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	d032      	beq.n	800f4ec <__sflush_r+0x98>
 800f486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	075a      	lsls	r2, r3, #29
 800f48c:	d505      	bpl.n	800f49a <__sflush_r+0x46>
 800f48e:	6863      	ldr	r3, [r4, #4]
 800f490:	1ac0      	subs	r0, r0, r3
 800f492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f494:	b10b      	cbz	r3, 800f49a <__sflush_r+0x46>
 800f496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f498:	1ac0      	subs	r0, r0, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	4602      	mov	r2, r0
 800f49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4a0:	6a21      	ldr	r1, [r4, #32]
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	47b0      	blx	r6
 800f4a6:	1c43      	adds	r3, r0, #1
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	d106      	bne.n	800f4ba <__sflush_r+0x66>
 800f4ac:	6829      	ldr	r1, [r5, #0]
 800f4ae:	291d      	cmp	r1, #29
 800f4b0:	d82c      	bhi.n	800f50c <__sflush_r+0xb8>
 800f4b2:	4a2a      	ldr	r2, [pc, #168]	; (800f55c <__sflush_r+0x108>)
 800f4b4:	40ca      	lsrs	r2, r1
 800f4b6:	07d6      	lsls	r6, r2, #31
 800f4b8:	d528      	bpl.n	800f50c <__sflush_r+0xb8>
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	6062      	str	r2, [r4, #4]
 800f4be:	04d9      	lsls	r1, r3, #19
 800f4c0:	6922      	ldr	r2, [r4, #16]
 800f4c2:	6022      	str	r2, [r4, #0]
 800f4c4:	d504      	bpl.n	800f4d0 <__sflush_r+0x7c>
 800f4c6:	1c42      	adds	r2, r0, #1
 800f4c8:	d101      	bne.n	800f4ce <__sflush_r+0x7a>
 800f4ca:	682b      	ldr	r3, [r5, #0]
 800f4cc:	b903      	cbnz	r3, 800f4d0 <__sflush_r+0x7c>
 800f4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800f4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4d2:	602f      	str	r7, [r5, #0]
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	d0ca      	beq.n	800f46e <__sflush_r+0x1a>
 800f4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4dc:	4299      	cmp	r1, r3
 800f4de:	d002      	beq.n	800f4e6 <__sflush_r+0x92>
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7ff fae1 	bl	800eaa8 <_free_r>
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800f4ea:	e7c1      	b.n	800f470 <__sflush_r+0x1c>
 800f4ec:	6a21      	ldr	r1, [r4, #32]
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b0      	blx	r6
 800f4f4:	1c41      	adds	r1, r0, #1
 800f4f6:	d1c7      	bne.n	800f488 <__sflush_r+0x34>
 800f4f8:	682b      	ldr	r3, [r5, #0]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0c4      	beq.n	800f488 <__sflush_r+0x34>
 800f4fe:	2b1d      	cmp	r3, #29
 800f500:	d001      	beq.n	800f506 <__sflush_r+0xb2>
 800f502:	2b16      	cmp	r3, #22
 800f504:	d101      	bne.n	800f50a <__sflush_r+0xb6>
 800f506:	602f      	str	r7, [r5, #0]
 800f508:	e7b1      	b.n	800f46e <__sflush_r+0x1a>
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f510:	81a3      	strh	r3, [r4, #12]
 800f512:	e7ad      	b.n	800f470 <__sflush_r+0x1c>
 800f514:	690f      	ldr	r7, [r1, #16]
 800f516:	2f00      	cmp	r7, #0
 800f518:	d0a9      	beq.n	800f46e <__sflush_r+0x1a>
 800f51a:	0793      	lsls	r3, r2, #30
 800f51c:	680e      	ldr	r6, [r1, #0]
 800f51e:	bf08      	it	eq
 800f520:	694b      	ldreq	r3, [r1, #20]
 800f522:	600f      	str	r7, [r1, #0]
 800f524:	bf18      	it	ne
 800f526:	2300      	movne	r3, #0
 800f528:	eba6 0807 	sub.w	r8, r6, r7
 800f52c:	608b      	str	r3, [r1, #8]
 800f52e:	f1b8 0f00 	cmp.w	r8, #0
 800f532:	dd9c      	ble.n	800f46e <__sflush_r+0x1a>
 800f534:	6a21      	ldr	r1, [r4, #32]
 800f536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f538:	4643      	mov	r3, r8
 800f53a:	463a      	mov	r2, r7
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b0      	blx	r6
 800f540:	2800      	cmp	r0, #0
 800f542:	dc06      	bgt.n	800f552 <__sflush_r+0xfe>
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295
 800f550:	e78e      	b.n	800f470 <__sflush_r+0x1c>
 800f552:	4407      	add	r7, r0
 800f554:	eba8 0800 	sub.w	r8, r8, r0
 800f558:	e7e9      	b.n	800f52e <__sflush_r+0xda>
 800f55a:	bf00      	nop
 800f55c:	20400001 	.word	0x20400001

0800f560 <_fflush_r>:
 800f560:	b538      	push	{r3, r4, r5, lr}
 800f562:	690b      	ldr	r3, [r1, #16]
 800f564:	4605      	mov	r5, r0
 800f566:	460c      	mov	r4, r1
 800f568:	b913      	cbnz	r3, 800f570 <_fflush_r+0x10>
 800f56a:	2500      	movs	r5, #0
 800f56c:	4628      	mov	r0, r5
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
 800f570:	b118      	cbz	r0, 800f57a <_fflush_r+0x1a>
 800f572:	6983      	ldr	r3, [r0, #24]
 800f574:	b90b      	cbnz	r3, 800f57a <_fflush_r+0x1a>
 800f576:	f7ff f9dd 	bl	800e934 <__sinit>
 800f57a:	4b14      	ldr	r3, [pc, #80]	; (800f5cc <_fflush_r+0x6c>)
 800f57c:	429c      	cmp	r4, r3
 800f57e:	d11b      	bne.n	800f5b8 <_fflush_r+0x58>
 800f580:	686c      	ldr	r4, [r5, #4]
 800f582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d0ef      	beq.n	800f56a <_fflush_r+0xa>
 800f58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f58c:	07d0      	lsls	r0, r2, #31
 800f58e:	d404      	bmi.n	800f59a <_fflush_r+0x3a>
 800f590:	0599      	lsls	r1, r3, #22
 800f592:	d402      	bmi.n	800f59a <_fflush_r+0x3a>
 800f594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f596:	f7ff fa7d 	bl	800ea94 <__retarget_lock_acquire_recursive>
 800f59a:	4628      	mov	r0, r5
 800f59c:	4621      	mov	r1, r4
 800f59e:	f7ff ff59 	bl	800f454 <__sflush_r>
 800f5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5a4:	07da      	lsls	r2, r3, #31
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	d4e0      	bmi.n	800f56c <_fflush_r+0xc>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	059b      	lsls	r3, r3, #22
 800f5ae:	d4dd      	bmi.n	800f56c <_fflush_r+0xc>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b2:	f7ff fa70 	bl	800ea96 <__retarget_lock_release_recursive>
 800f5b6:	e7d9      	b.n	800f56c <_fflush_r+0xc>
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <_fflush_r+0x70>)
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	d101      	bne.n	800f5c2 <_fflush_r+0x62>
 800f5be:	68ac      	ldr	r4, [r5, #8]
 800f5c0:	e7df      	b.n	800f582 <_fflush_r+0x22>
 800f5c2:	4b04      	ldr	r3, [pc, #16]	; (800f5d4 <_fflush_r+0x74>)
 800f5c4:	429c      	cmp	r4, r3
 800f5c6:	bf08      	it	eq
 800f5c8:	68ec      	ldreq	r4, [r5, #12]
 800f5ca:	e7da      	b.n	800f582 <_fflush_r+0x22>
 800f5cc:	080123f0 	.word	0x080123f0
 800f5d0:	08012410 	.word	0x08012410
 800f5d4:	080123d0 	.word	0x080123d0

0800f5d8 <_lseek_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_lseek_r+0x20>)
 800f5dc:	4604      	mov	r4, r0
 800f5de:	4608      	mov	r0, r1
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	602a      	str	r2, [r5, #0]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f7f1 f95c 	bl	80008a4 <_lseek>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_lseek_r+0x1e>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_lseek_r+0x1e>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	200068ac 	.word	0x200068ac

0800f5fc <__swhatbuf_r>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	460e      	mov	r6, r1
 800f600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f604:	2900      	cmp	r1, #0
 800f606:	b096      	sub	sp, #88	; 0x58
 800f608:	4614      	mov	r4, r2
 800f60a:	461d      	mov	r5, r3
 800f60c:	da07      	bge.n	800f61e <__swhatbuf_r+0x22>
 800f60e:	2300      	movs	r3, #0
 800f610:	602b      	str	r3, [r5, #0]
 800f612:	89b3      	ldrh	r3, [r6, #12]
 800f614:	061a      	lsls	r2, r3, #24
 800f616:	d410      	bmi.n	800f63a <__swhatbuf_r+0x3e>
 800f618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f61c:	e00e      	b.n	800f63c <__swhatbuf_r+0x40>
 800f61e:	466a      	mov	r2, sp
 800f620:	f000 f8b2 	bl	800f788 <_fstat_r>
 800f624:	2800      	cmp	r0, #0
 800f626:	dbf2      	blt.n	800f60e <__swhatbuf_r+0x12>
 800f628:	9a01      	ldr	r2, [sp, #4]
 800f62a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f62e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f632:	425a      	negs	r2, r3
 800f634:	415a      	adcs	r2, r3
 800f636:	602a      	str	r2, [r5, #0]
 800f638:	e7ee      	b.n	800f618 <__swhatbuf_r+0x1c>
 800f63a:	2340      	movs	r3, #64	; 0x40
 800f63c:	2000      	movs	r0, #0
 800f63e:	6023      	str	r3, [r4, #0]
 800f640:	b016      	add	sp, #88	; 0x58
 800f642:	bd70      	pop	{r4, r5, r6, pc}

0800f644 <__smakebuf_r>:
 800f644:	898b      	ldrh	r3, [r1, #12]
 800f646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f648:	079d      	lsls	r5, r3, #30
 800f64a:	4606      	mov	r6, r0
 800f64c:	460c      	mov	r4, r1
 800f64e:	d507      	bpl.n	800f660 <__smakebuf_r+0x1c>
 800f650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	6123      	str	r3, [r4, #16]
 800f658:	2301      	movs	r3, #1
 800f65a:	6163      	str	r3, [r4, #20]
 800f65c:	b002      	add	sp, #8
 800f65e:	bd70      	pop	{r4, r5, r6, pc}
 800f660:	ab01      	add	r3, sp, #4
 800f662:	466a      	mov	r2, sp
 800f664:	f7ff ffca 	bl	800f5fc <__swhatbuf_r>
 800f668:	9900      	ldr	r1, [sp, #0]
 800f66a:	4605      	mov	r5, r0
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7ff fa6b 	bl	800eb48 <_malloc_r>
 800f672:	b948      	cbnz	r0, 800f688 <__smakebuf_r+0x44>
 800f674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f678:	059a      	lsls	r2, r3, #22
 800f67a:	d4ef      	bmi.n	800f65c <__smakebuf_r+0x18>
 800f67c:	f023 0303 	bic.w	r3, r3, #3
 800f680:	f043 0302 	orr.w	r3, r3, #2
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	e7e3      	b.n	800f650 <__smakebuf_r+0xc>
 800f688:	4b0d      	ldr	r3, [pc, #52]	; (800f6c0 <__smakebuf_r+0x7c>)
 800f68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	6020      	str	r0, [r4, #0]
 800f690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f694:	81a3      	strh	r3, [r4, #12]
 800f696:	9b00      	ldr	r3, [sp, #0]
 800f698:	6163      	str	r3, [r4, #20]
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	6120      	str	r0, [r4, #16]
 800f69e:	b15b      	cbz	r3, 800f6b8 <__smakebuf_r+0x74>
 800f6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f000 f881 	bl	800f7ac <_isatty_r>
 800f6aa:	b128      	cbz	r0, 800f6b8 <__smakebuf_r+0x74>
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	f023 0303 	bic.w	r3, r3, #3
 800f6b2:	f043 0301 	orr.w	r3, r3, #1
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	89a0      	ldrh	r0, [r4, #12]
 800f6ba:	4305      	orrs	r5, r0
 800f6bc:	81a5      	strh	r5, [r4, #12]
 800f6be:	e7cd      	b.n	800f65c <__smakebuf_r+0x18>
 800f6c0:	0800e8cd 	.word	0x0800e8cd

0800f6c4 <__malloc_lock>:
 800f6c4:	4801      	ldr	r0, [pc, #4]	; (800f6cc <__malloc_lock+0x8>)
 800f6c6:	f7ff b9e5 	b.w	800ea94 <__retarget_lock_acquire_recursive>
 800f6ca:	bf00      	nop
 800f6cc:	200068b4 	.word	0x200068b4

0800f6d0 <__malloc_unlock>:
 800f6d0:	4801      	ldr	r0, [pc, #4]	; (800f6d8 <__malloc_unlock+0x8>)
 800f6d2:	f7ff b9e0 	b.w	800ea96 <__retarget_lock_release_recursive>
 800f6d6:	bf00      	nop
 800f6d8:	200068b4 	.word	0x200068b4

0800f6dc <_read_r>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	4d07      	ldr	r5, [pc, #28]	; (800f6fc <_read_r+0x20>)
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	4608      	mov	r0, r1
 800f6e4:	4611      	mov	r1, r2
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	602a      	str	r2, [r5, #0]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	f7f1 f87a 	bl	80007e4 <_read>
 800f6f0:	1c43      	adds	r3, r0, #1
 800f6f2:	d102      	bne.n	800f6fa <_read_r+0x1e>
 800f6f4:	682b      	ldr	r3, [r5, #0]
 800f6f6:	b103      	cbz	r3, 800f6fa <_read_r+0x1e>
 800f6f8:	6023      	str	r3, [r4, #0]
 800f6fa:	bd38      	pop	{r3, r4, r5, pc}
 800f6fc:	200068ac 	.word	0x200068ac

0800f700 <_raise_r>:
 800f700:	291f      	cmp	r1, #31
 800f702:	b538      	push	{r3, r4, r5, lr}
 800f704:	4604      	mov	r4, r0
 800f706:	460d      	mov	r5, r1
 800f708:	d904      	bls.n	800f714 <_raise_r+0x14>
 800f70a:	2316      	movs	r3, #22
 800f70c:	6003      	str	r3, [r0, #0]
 800f70e:	f04f 30ff 	mov.w	r0, #4294967295
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f716:	b112      	cbz	r2, 800f71e <_raise_r+0x1e>
 800f718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f71c:	b94b      	cbnz	r3, 800f732 <_raise_r+0x32>
 800f71e:	4620      	mov	r0, r4
 800f720:	f000 f830 	bl	800f784 <_getpid_r>
 800f724:	462a      	mov	r2, r5
 800f726:	4601      	mov	r1, r0
 800f728:	4620      	mov	r0, r4
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f000 b817 	b.w	800f760 <_kill_r>
 800f732:	2b01      	cmp	r3, #1
 800f734:	d00a      	beq.n	800f74c <_raise_r+0x4c>
 800f736:	1c59      	adds	r1, r3, #1
 800f738:	d103      	bne.n	800f742 <_raise_r+0x42>
 800f73a:	2316      	movs	r3, #22
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	2001      	movs	r0, #1
 800f740:	e7e7      	b.n	800f712 <_raise_r+0x12>
 800f742:	2400      	movs	r4, #0
 800f744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f748:	4628      	mov	r0, r5
 800f74a:	4798      	blx	r3
 800f74c:	2000      	movs	r0, #0
 800f74e:	e7e0      	b.n	800f712 <_raise_r+0x12>

0800f750 <raise>:
 800f750:	4b02      	ldr	r3, [pc, #8]	; (800f75c <raise+0xc>)
 800f752:	4601      	mov	r1, r0
 800f754:	6818      	ldr	r0, [r3, #0]
 800f756:	f7ff bfd3 	b.w	800f700 <_raise_r>
 800f75a:	bf00      	nop
 800f75c:	20000014 	.word	0x20000014

0800f760 <_kill_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	4d07      	ldr	r5, [pc, #28]	; (800f780 <_kill_r+0x20>)
 800f764:	2300      	movs	r3, #0
 800f766:	4604      	mov	r4, r0
 800f768:	4608      	mov	r0, r1
 800f76a:	4611      	mov	r1, r2
 800f76c:	602b      	str	r3, [r5, #0]
 800f76e:	f7f1 f81d 	bl	80007ac <_kill>
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	d102      	bne.n	800f77c <_kill_r+0x1c>
 800f776:	682b      	ldr	r3, [r5, #0]
 800f778:	b103      	cbz	r3, 800f77c <_kill_r+0x1c>
 800f77a:	6023      	str	r3, [r4, #0]
 800f77c:	bd38      	pop	{r3, r4, r5, pc}
 800f77e:	bf00      	nop
 800f780:	200068ac 	.word	0x200068ac

0800f784 <_getpid_r>:
 800f784:	f7f1 b80a 	b.w	800079c <_getpid>

0800f788 <_fstat_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4d07      	ldr	r5, [pc, #28]	; (800f7a8 <_fstat_r+0x20>)
 800f78c:	2300      	movs	r3, #0
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	4611      	mov	r1, r2
 800f794:	602b      	str	r3, [r5, #0]
 800f796:	f7f1 f86a 	bl	800086e <_fstat>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	d102      	bne.n	800f7a4 <_fstat_r+0x1c>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	b103      	cbz	r3, 800f7a4 <_fstat_r+0x1c>
 800f7a2:	6023      	str	r3, [r4, #0]
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop
 800f7a8:	200068ac 	.word	0x200068ac

0800f7ac <_isatty_r>:
 800f7ac:	b538      	push	{r3, r4, r5, lr}
 800f7ae:	4d06      	ldr	r5, [pc, #24]	; (800f7c8 <_isatty_r+0x1c>)
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	4608      	mov	r0, r1
 800f7b6:	602b      	str	r3, [r5, #0]
 800f7b8:	f7f1 f869 	bl	800088e <_isatty>
 800f7bc:	1c43      	adds	r3, r0, #1
 800f7be:	d102      	bne.n	800f7c6 <_isatty_r+0x1a>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	b103      	cbz	r3, 800f7c6 <_isatty_r+0x1a>
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	bd38      	pop	{r3, r4, r5, pc}
 800f7c8:	200068ac 	.word	0x200068ac

0800f7cc <_init>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	bf00      	nop
 800f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d2:	bc08      	pop	{r3}
 800f7d4:	469e      	mov	lr, r3
 800f7d6:	4770      	bx	lr

0800f7d8 <_fini>:
 800f7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7da:	bf00      	nop
 800f7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7de:	bc08      	pop	{r3}
 800f7e0:	469e      	mov	lr, r3
 800f7e2:	4770      	bx	lr
