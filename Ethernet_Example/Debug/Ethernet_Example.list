
Ethernet_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000347c  08011590  08011590  00021590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a0c  08014a0c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08014a0c  08014a0c  00024a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a14  08014a14  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a14  08014a14  00024a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a18  08014a18  00024a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08014a1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ca4  20000080  08014a9c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20006d24  08014a9c  00036d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ddac  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ad1  00000000  00000000  0005de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00063930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  00064aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6ec  00000000  00000000  00065b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e0d  00000000  00000000  00093264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c1e  00000000  00000000  000b8071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee8  00000000  00000000  00191ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011578 	.word	0x08011578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08011578 	.word	0x08011578

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LedCGIhandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
    uint32_t i = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

    if (iIndex == 0) {
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10b      	bne.n	80005c8 <LedCGIhandler+0x30>

        //turning the LED lights off
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	4824      	ldr	r0, [pc, #144]	; (8000648 <LedCGIhandler+0xb0>)
 80005b8:	f002 f954 	bl	8002864 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c2:	4821      	ldr	r0, [pc, #132]	; (8000648 <LedCGIhandler+0xb0>)
 80005c4:	f002 f94e 	bl	8002864 <HAL_GPIO_WritePin>

    }

    for (i = 0; i < iNumParams; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e033      	b.n	8000636 <LedCGIhandler+0x9e>

        if (strcmp(pcParam[i], "led") == 0)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	491c      	ldr	r1, [pc, #112]	; (800064c <LedCGIhandler+0xb4>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf8 	bl	80001d0 <strcmp>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d124      	bne.n	8000630 <LedCGIhandler+0x98>

        {

            if (strcmp(pcValue[i], "1") == 0) {
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4917      	ldr	r1, [pc, #92]	; (8000650 <LedCGIhandler+0xb8>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fdec 	bl	80001d0 <strcmp>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d106      	bne.n	800060c <LedCGIhandler+0x74>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <LedCGIhandler+0xb0>)
 8000606:	f002 f92d 	bl	8002864 <HAL_GPIO_WritePin>
 800060a:	e011      	b.n	8000630 <LedCGIhandler+0x98>
            }

            else if (strcmp(pcValue[i], "2") == 0) {
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	490f      	ldr	r1, [pc, #60]	; (8000654 <LedCGIhandler+0xbc>)
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdd9 	bl	80001d0 <strcmp>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d105      	bne.n	8000630 <LedCGIhandler+0x98>

                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <LedCGIhandler+0xb0>)
 800062c:	f002 f91a 	bl	8002864 <HAL_GPIO_WritePin>
    for (i = 0; i < iNumParams; i++) {
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	429a      	cmp	r2, r3
 800063c:	d3c7      	bcc.n	80005ce <LedCGIhandler+0x36>
            }

        }

    }
    return "/index2.html";
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <LedCGIhandler+0xc0>)
}
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40020c00 	.word	0x40020c00
 800064c:	080115ac 	.word	0x080115ac
 8000650:	080115b0 	.word	0x080115b0
 8000654:	080115b4 	.word	0x080115b4
 8000658:	080115b8 	.word	0x080115b8

0800065c <mySSIHandler>:

u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]

	if(iIndex == 0)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <mySSIHandler+0x1e>
	{
		sprintf(pcInsert,"1234 ABC");
 800066e:	4907      	ldr	r1, [pc, #28]	; (800068c <mySSIHandler+0x30>)
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f00f fdf5 	bl	8010260 <siprintf>
		return 8;
 8000676:	2308      	movs	r3, #8
 8000678:	e004      	b.n	8000684 <mySSIHandler+0x28>
	}
	else
	{
		sprintf(pcInsert,"ADC Volagte 3.300 V");
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <mySSIHandler+0x34>)
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f00f fdef 	bl	8010260 <siprintf>
		return 19;
 8000682:	2313      	movs	r3, #19
	}

	return 0;
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	080115c8 	.word	0x080115c8
 8000690:	080115d4 	.word	0x080115d4

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fca6 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f828 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f890 	bl	80007c4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006a4:	f002 fd3c 	bl	8003120 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80006a8:	f000 fa2e 	bl	8000b08 <tcp_echoserver_init>
  udp_echoserver_init();
 80006ac:	f000 fc32 	bl	8000f14 <udp_echoserver_init>
  httpd_init();
 80006b0:	f004 fcf2 	bl	8005098 <httpd_init>

  theCGItable[0] = LedCGI;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0x4c>)
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <main+0x50>)
 80006b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006bc:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(theCGItable, 1);
 80006c0:	2101      	movs	r1, #1
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <main+0x4c>)
 80006c4:	f004 fd4a 	bl	800515c <http_set_cgi_handlers>

  http_set_ssi_handler(mySSIHandler, (char const **) theSSItags, 2);
 80006c8:	2202      	movs	r2, #2
 80006ca:	4907      	ldr	r1, [pc, #28]	; (80006e8 <main+0x54>)
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <main+0x58>)
 80006ce:	f004 fd03 	bl	80050d8 <http_set_ssi_handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80006d2:	f002 fe57 	bl	8003384 <MX_LWIP_Process>
	  HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f000 fcf8 	bl	80010cc <HAL_Delay>
	  MX_LWIP_Process();
 80006dc:	e7f9      	b.n	80006d2 <main+0x3e>
 80006de:	bf00      	nop
 80006e0:	20000674 	.word	0x20000674
 80006e4:	08014340 	.word	0x08014340
 80006e8:	20000000 	.word	0x20000000
 80006ec:	0800065d 	.word	0x0800065d

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	; 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f00f fd4e 	bl	80101a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	; (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000764:	23a8      	movs	r3, #168	; 0xa8
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f88f 	bl	8002898 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f88e 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2105      	movs	r1, #5
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fae8 	bl	8002d78 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f877 	bl	80008a0 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <MX_GPIO_Init+0xd4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_GPIO_Init+0xd4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0xd8>)
 800086e:	f001 fff9 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000872:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xd8>)
 800088c:	f001 fe4e 	bl	800252c <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020c00 	.word	0x40020c00

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 fb9a 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	return 1;
 8000960:	2301      	movs	r3, #1
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_kill>:

int _kill(int pid, int sig)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <_kill+0x20>)
 8000978:	2216      	movs	r2, #22
 800097a:	601a      	str	r2, [r3, #0]
	return -1;
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20006d14 	.word	0x20006d14

08000990 <_exit>:

void _exit (int status)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ffe5 	bl	800096c <_kill>
	while (1) {}		/* Make sure we hang here */
 80009a2:	e7fe      	b.n	80009a2 <_exit+0x12>

080009a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b6:	f3af 8000 	nop.w
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
	}

return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e009      	b.n	8000a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf1      	blt.n	80009f0 <_write+0x12>
	}
	return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x16>
		heap_end = &end;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <_sbrk+0x50>)
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <_sbrk+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_sbrk+0x50>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <_sbrk+0x50>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	466a      	mov	r2, sp
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d905      	bls.n	8000ab6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <_sbrk+0x58>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	e006      	b.n	8000ac4 <_sbrk+0x44>
	}

	heap_end += incr;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <_sbrk+0x50>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <_sbrk+0x50>)
 8000ac0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	2000009c 	.word	0x2000009c
 8000ad4:	20006d28 	.word	0x20006d28
 8000ad8:	20006d14 	.word	0x20006d14

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <SystemInit+0x28>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <SystemInit+0x28>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SystemInit+0x28>)
 8000af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af6:	609a      	str	r2, [r3, #8]
#endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000b0e:	f007 fcbb 	bl	8008488 <tcp_new>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b16:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d022      	beq.n	8000b66 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2207      	movs	r2, #7
 8000b26:	4913      	ldr	r1, [pc, #76]	; (8000b74 <tcp_echoserver_init+0x6c>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f006 fc09 	bl	8007340 <tcp_bind>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10f      	bne.n	8000b5a <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	21ff      	movs	r1, #255	; 0xff
 8000b40:	4618      	mov	r0, r3
 8000b42:	f006 fcb5 	bl	80074b0 <tcp_listen_with_backlog>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b4a:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <tcp_echoserver_init+0x70>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f007 fd26 	bl	80085a4 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000b58:	e005      	b.n	8000b66 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <tcp_echoserver_init+0x68>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f005 f837 	bl	8005bd4 <memp_free>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a0 	.word	0x200000a0
 8000b74:	080148ac 	.word	0x080148ac
 8000b78:	08000b7d 	.word	0x08000b7d

08000b7c <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f007 fa89 	bl	80080a4 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000b92:	200c      	movs	r0, #12
 8000b94:	f004 fe64 	bl	8005860 <mem_malloc>
 8000b98:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d01f      	beq.n	8000be0 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000bb8:	6939      	ldr	r1, [r7, #16]
 8000bba:	68b8      	ldr	r0, [r7, #8]
 8000bbc:	f007 fc7a 	bl	80084b4 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000bc0:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <tcp_echoserver_accept+0x7c>)
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f007 fc88 	bl	80084d8 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <tcp_echoserver_accept+0x80>)
 8000bca:	68b8      	ldr	r0, [r7, #8]
 8000bcc:	f007 fcc8 	bl	8008560 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	490b      	ldr	r1, [pc, #44]	; (8000c00 <tcp_echoserver_accept+0x84>)
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f007 fcfd 	bl	80085d4 <tcp_poll>
    
    ret_err = ERR_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	e005      	b.n	8000bec <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	68b8      	ldr	r0, [r7, #8]
 8000be4:	f000 f96f 	bl	8000ec6 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000be8:	23ff      	movs	r3, #255	; 0xff
 8000bea:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08000c05 	.word	0x08000c05
 8000bfc:	08000d4d 	.word	0x08000d4d
 8000c00:	08000d71 	.word	0x08000d71

08000c04 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <tcp_echoserver_recv+0x20>
 8000c18:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <tcp_echoserver_recv+0x134>)
 8000c1a:	22ad      	movs	r2, #173	; 0xad
 8000c1c:	4947      	ldr	r1, [pc, #284]	; (8000d3c <tcp_echoserver_recv+0x138>)
 8000c1e:	4848      	ldr	r0, [pc, #288]	; (8000d40 <tcp_echoserver_recv+0x13c>)
 8000c20:	f00f fac6 	bl	80101b0 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d116      	bne.n	8000c5c <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d104      	bne.n	8000c46 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000c3c:	69b9      	ldr	r1, [r7, #24]
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f000 f941 	bl	8000ec6 <tcp_echoserver_connection_close>
 8000c44:	e007      	b.n	8000c56 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000c46:	493f      	ldr	r1, [pc, #252]	; (8000d44 <tcp_echoserver_recv+0x140>)
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f007 fc67 	bl	800851c <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f000 f8e5 	bl	8000e20 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	77fb      	strb	r3, [r7, #31]
 8000c5a:	e067      	b.n	8000d2c <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f005 fdc1 	bl	80067f8 <pbuf_free>
    }
    ret_err = err;
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	77fb      	strb	r3, [r7, #31]
 8000c7a:	e057      	b.n	8000d2c <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d114      	bne.n	8000cae <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000c90:	492c      	ldr	r1, [pc, #176]	; (8000d44 <tcp_echoserver_recv+0x140>)
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f007 fc42 	bl	800851c <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <tcp_echoserver_recv+0x144>)
 8000c9e:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000ca0:	69b9      	ldr	r1, [r7, #24]
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	f000 f8bc 	bl	8000e20 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	77fb      	strb	r3, [r7, #31]
 8000cac:	e03e      	b.n	8000d2c <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d119      	bne.n	8000cea <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10b      	bne.n	8000cd6 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <tcp_echoserver_recv+0x144>)
 8000cca:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000ccc:	69b9      	ldr	r1, [r7, #24]
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f000 f8a6 	bl	8000e20 <tcp_echoserver_send>
 8000cd4:	e006      	b.n	8000ce4 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f005 fea2 	bl	8006a28 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	77fb      	strb	r3, [r7, #31]
 8000ce8:	e020      	b.n	8000d2c <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d10e      	bne.n	8000d10 <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	891b      	ldrh	r3, [r3, #8]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f006 fcef 	bl	80076dc <tcp_recved>
    es->p = NULL;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f005 fd77 	bl	80067f8 <pbuf_free>
    ret_err = ERR_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	77fb      	strb	r3, [r7, #31]
 8000d0e:	e00d      	b.n	8000d2c <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	891b      	ldrh	r3, [r3, #8]
 8000d14:	4619      	mov	r1, r3
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f006 fce0 	bl	80076dc <tcp_recved>
    es->p = NULL;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f005 fd68 	bl	80067f8 <pbuf_free>
    ret_err = ERR_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000d2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	080115e8 	.word	0x080115e8
 8000d3c:	08011608 	.word	0x08011608
 8000d40:	08011614 	.word	0x08011614
 8000d44:	08000dd1 	.word	0x08000dd1
 8000d48:	0801163c 	.word	0x0801163c

08000d4c <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f004 fc16 	bl	8005594 <mem_free>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d017      	beq.n	8000db4 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000d8c:	490f      	ldr	r1, [pc, #60]	; (8000dcc <tcp_echoserver_poll+0x5c>)
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f007 fbc4 	bl	800851c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f000 f842 	bl	8000e20 <tcp_echoserver_send>
 8000d9c:	e007      	b.n	8000dae <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d103      	bne.n	8000dae <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f000 f88c 	bl	8000ec6 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e004      	b.n	8000dbe <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000db4:	6838      	ldr	r0, [r7, #0]
 8000db6:	f006 fab7 	bl	8007328 <tcp_abort>
    ret_err = ERR_ABRT;
 8000dba:	23f3      	movs	r3, #243	; 0xf3
 8000dbc:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08000dd1 	.word	0x08000dd1

08000dd0 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2200      	movs	r2, #0
 8000de6:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d008      	beq.n	8000e02 <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000df0:	490a      	ldr	r1, [pc, #40]	; (8000e1c <tcp_echoserver_sent+0x4c>)
 8000df2:	68b8      	ldr	r0, [r7, #8]
 8000df4:	f007 fb92 	bl	800851c <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f000 f810 	bl	8000e20 <tcp_echoserver_send>
 8000e00:	e007      	b.n	8000e12 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d103      	bne.n	8000e12 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000e0a:	6979      	ldr	r1, [r7, #20]
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f000 f85a 	bl	8000ec6 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08000dd1 	.word	0x08000dd1

08000e20 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000e2e:	e036      	b.n	8000e9e <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	6859      	ldr	r1, [r3, #4]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	895a      	ldrh	r2, [r3, #10]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f00a fa75 	bl	800b330 <tcp_write>
 8000e46:	4603      	mov	r3, r0
 8000e48:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d11d      	bne.n	8000e8e <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	895b      	ldrh	r3, [r3, #10]
 8000e56:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d004      	beq.n	8000e72 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fd63 	bl	8006938 <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000e72:	6938      	ldr	r0, [r7, #16]
 8000e74:	f005 fcc0 	bl	80067f8 <pbuf_free>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f7      	beq.n	8000e72 <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f006 fc28 	bl	80076dc <tcp_recved>
 8000e8c:	e007      	b.n	8000e9e <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e96:	d102      	bne.n	8000e9e <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10b      	bne.n	8000ebe <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d007      	beq.n	8000ebe <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	895a      	ldrh	r2, [r3, #10]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d9b8      	bls.n	8000e30 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f007 faee 	bl	80084b4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f007 fb1e 	bl	800851c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f007 faf8 	bl	80084d8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f007 fb38 	bl	8008560 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f007 fb6d 	bl	80085d4 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000f00:	6838      	ldr	r0, [r7, #0]
 8000f02:	f004 fb47 	bl	8005594 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f006 f924 	bl	8007154 <tcp_close>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000f1a:	f00c fddf 	bl	800dadc <udp_new>
 8000f1e:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d013      	beq.n	8000f4e <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000f26:	2207      	movs	r2, #7
 8000f28:	490b      	ldr	r1, [pc, #44]	; (8000f58 <udp_echoserver_init+0x44>)
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f00c fc56 	bl	800d7dc <udp_bind>
 8000f30:	4603      	mov	r3, r0
 8000f32:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4907      	ldr	r1, [pc, #28]	; (8000f5c <udp_echoserver_init+0x48>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f00c fd69 	bl	800da18 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000f46:	e002      	b.n	8000f4e <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f00c fd85 	bl	800da58 <udp_remove>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	080148ac 	.word	0x080148ac
 8000f5c:	08000f61 	.word	0x08000f61

08000f60 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000f6e:	2207      	movs	r2, #7
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f00c fcba 	bl	800d8ec <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f00c fa44 	bl	800d408 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f00c fd21 	bl	800d9c8 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f005 fc36 	bl	80067f8 <pbuf_free>
   
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f9a:	e003      	b.n	8000fa4 <LoopCopyDataInit>

08000f9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fa2:	3104      	adds	r1, #4

08000fa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000faa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fac:	d3f6      	bcc.n	8000f9c <CopyDataInit>
  ldr  r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb0:	e002      	b.n	8000fb8 <LoopFillZerobss>

08000fb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb4:	f842 3b04 	str.w	r3, [r2], #4

08000fb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fbc:	d3f9      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff fd8d 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f00f f893 	bl	80100ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fb65 	bl	8000694 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fd0:	08014a1c 	.word	0x08014a1c
  ldr  r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000fdc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000fe0:	20006d24 	.word	0x20006d24

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f931 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fc48 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f93b 	bl	80012c6 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f911 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008
 8001084:	20000010 	.word	0x20000010
 8001088:	2000000c 	.word	0x2000000c

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000010 	.word	0x20000010
 80010b0:	2000067c 	.word	0x2000067c

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000067c 	.word	0x2000067c

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000010 	.word	0x20000010

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff47 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff5c 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffb0 	bl	8001234 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80012f0:	4baa      	ldr	r3, [pc, #680]	; (800159c <HAL_ETH_Init+0x2bc>)
 80012f2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e183      	b.n	800160e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f002 f83e 	bl	800339c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b9e      	ldr	r3, [pc, #632]	; (80015a0 <HAL_ETH_Init+0x2c0>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	4a9d      	ldr	r2, [pc, #628]	; (80015a0 <HAL_ETH_Init+0x2c0>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132e:	6453      	str	r3, [r2, #68]	; 0x44
 8001330:	4b9b      	ldr	r3, [pc, #620]	; (80015a0 <HAL_ETH_Init+0x2c0>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800133c:	4b99      	ldr	r3, [pc, #612]	; (80015a4 <HAL_ETH_Init+0x2c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a98      	ldr	r2, [pc, #608]	; (80015a4 <HAL_ETH_Init+0x2c4>)
 8001342:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001346:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001348:	4b96      	ldr	r3, [pc, #600]	; (80015a4 <HAL_ETH_Init+0x2c4>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4994      	ldr	r1, [pc, #592]	; (80015a4 <HAL_ETH_Init+0x2c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800136e:	f7ff fea1 	bl	80010b4 <HAL_GetTick>
 8001372:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001374:	e011      	b.n	800139a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001376:	f7ff fe9d 	bl	80010b4 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001384:	d909      	bls.n	800139a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e139      	b.n	800160e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e4      	bne.n	8001376 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f023 031c 	bic.w	r3, r3, #28
 80013ba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013bc:	f001 fea4 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 80013c0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4a78      	ldr	r2, [pc, #480]	; (80015a8 <HAL_ETH_Init+0x2c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d908      	bls.n	80013dc <HAL_ETH_Init+0xfc>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4a77      	ldr	r2, [pc, #476]	; (80015ac <HAL_ETH_Init+0x2cc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d804      	bhi.n	80013dc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e027      	b.n	800142c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	4a73      	ldr	r2, [pc, #460]	; (80015ac <HAL_ETH_Init+0x2cc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d908      	bls.n	80013f6 <HAL_ETH_Init+0x116>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4a6d      	ldr	r2, [pc, #436]	; (800159c <HAL_ETH_Init+0x2bc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d204      	bcs.n	80013f6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f043 030c 	orr.w	r3, r3, #12
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	e01a      	b.n	800142c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4a68      	ldr	r2, [pc, #416]	; (800159c <HAL_ETH_Init+0x2bc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d303      	bcc.n	8001406 <HAL_ETH_Init+0x126>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4a6b      	ldr	r2, [pc, #428]	; (80015b0 <HAL_ETH_Init+0x2d0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d911      	bls.n	800142a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4a69      	ldr	r2, [pc, #420]	; (80015b0 <HAL_ETH_Init+0x2d0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d908      	bls.n	8001420 <HAL_ETH_Init+0x140>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <HAL_ETH_Init+0x2d4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d804      	bhi.n	8001420 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e005      	b.n	800142c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	e000      	b.n	800142c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800142a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001434:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001438:	2100      	movs	r1, #0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fb98 	bl	8001b70 <HAL_ETH_WritePHYRegister>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fd4d 	bl	8001eec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e0d7      	b.n	800160e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800145e:	20ff      	movs	r0, #255	; 0xff
 8001460:	f7ff fe34 	bl	80010cc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a5 	beq.w	80015b8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800146e:	f7ff fe21 	bl	80010b4 <HAL_GetTick>
 8001472:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	461a      	mov	r2, r3
 800147a:	2101      	movs	r1, #1
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fb0f 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001482:	f7ff fe17 	bl	80010b4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d90f      	bls.n	80014b4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fd26 	bl	8001eec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0ac      	b.n	800160e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0da      	beq.n	8001474 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c2:	2100      	movs	r1, #0
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fb53 	bl	8001b70 <HAL_ETH_WritePHYRegister>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00b      	beq.n	80014e8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014d4:	6939      	ldr	r1, [r7, #16]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fd08 	bl	8001eec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014e4:	2301      	movs	r3, #1
 80014e6:	e092      	b.n	800160e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fde4 	bl	80010b4 <HAL_GetTick>
 80014ec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	461a      	mov	r2, r3
 80014f4:	2101      	movs	r1, #1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fad2 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014fc:	f7ff fdda 	bl	80010b4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d90f      	bls.n	800152e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fce9 	bl	8001eec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e06f      	b.n	800160e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0da      	beq.n	80014ee <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	461a      	mov	r2, r3
 800153e:	211f      	movs	r1, #31
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 faad 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fcca 	bl	8001eec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001560:	2301      	movs	r3, #1
 8001562:	e054      	b.n	800160e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	e002      	b.n	800157e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	e035      	b.n	80015fc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	e030      	b.n	80015fc <HAL_ETH_Init+0x31c>
 800159a:	bf00      	nop
 800159c:	03938700 	.word	0x03938700
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	01312cff 	.word	0x01312cff
 80015ac:	02160ebf 	.word	0x02160ebf
 80015b0:	05f5e0ff 	.word	0x05f5e0ff
 80015b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 facd 	bl	8001b70 <HAL_ETH_WritePHYRegister>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00b      	beq.n	80015f4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fc82 	bl	8001eec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e00c      	b.n	800160e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015f8:	f7ff fd68 	bl	80010cc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015fc:	6939      	ldr	r1, [r7, #16]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fc74 	bl	8001eec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop

08001618 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ETH_DMATxDescListInit+0x20>
 8001634:	2302      	movs	r3, #2
 8001636:	e052      	b.n	80016de <HAL_ETH_DMATxDescListInit+0xc6>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e030      	b.n	80016b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	4413      	add	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001664:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	461a      	mov	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	d208      	bcs.n	80016aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e002      	b.n	80016b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3ca      	bcc.n	8001654 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	3310      	adds	r3, #16
 80016ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ETH_DMARxDescListInit+0x20>
 8001706:	2302      	movs	r3, #2
 8001708:	e056      	b.n	80017b8 <HAL_ETH_DMARxDescListInit+0xce>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2202      	movs	r2, #2
 8001716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e034      	b.n	8001790 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	015b      	lsls	r3, r3, #5
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001736:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800173e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	461a      	mov	r2, r3
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	3b01      	subs	r3, #1
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	429a      	cmp	r2, r3
 8001770:	d208      	bcs.n	8001784 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	015b      	lsls	r3, r3, #5
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	e002      	b.n	800178a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3c6      	bcc.n	8001726 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	330c      	adds	r3, #12
 80017a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ETH_TransmitFrame+0x24>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0cd      	b.n	8001984 <HAL_ETH_TransmitFrame+0x1c0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800180e:	2301      	movs	r3, #1
 8001810:	e0b8      	b.n	8001984 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da09      	bge.n	8001830 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2212      	movs	r2, #18
 8001820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0a9      	b.n	8001984 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001836:	4293      	cmp	r3, r2
 8001838:	d915      	bls.n	8001866 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_ETH_TransmitFrame+0x1cc>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_ETH_TransmitFrame+0x1cc>)
 800184a:	fba3 1302 	umull	r1, r3, r3, r2
 800184e:	0a9b      	lsrs	r3, r3, #10
 8001850:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e001      	b.n	800186a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001866:	2301      	movs	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d11c      	bne.n	80018aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800187e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800188a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800189a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a8:	e04b      	b.n	8001942 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	e044      	b.n	800193a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018be:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d116      	bne.n	8001918 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_ETH_TransmitFrame+0x1d0>)
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800190a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001916:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001926:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	3301      	adds	r3, #1
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3b6      	bcc.n	80018b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	3314      	adds	r3, #20
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00d      	beq.n	8001972 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195e:	3314      	adds	r3, #20
 8001960:	2204      	movs	r2, #4
 8001962:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	3304      	adds	r3, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	ac02b00b 	.word	0xac02b00b
 8001994:	fffffa0c 	.word	0xfffffa0c

08001998 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ETH_GetReceivedFrame+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e070      	b.n	8001a94 <HAL_ETH_GetReceivedFrame+0xfc>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db5a      	blt.n	8001a82 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d030      	beq.n	8001a3c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d103      	bne.n	80019f4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a08:	3b04      	subs	r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e02b      	b.n	8001a94 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
 8001a6a:	e00a      	b.n	8001a82 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b82      	cmp	r3, #130	; 0x82
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e050      	b.n	8001b68 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2282      	movs	r2, #130	; 0x82
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 031c 	and.w	r3, r3, #28
 8001adc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8a1b      	ldrh	r3, [r3, #16]
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001aec:	897b      	ldrh	r3, [r7, #10]
 8001aee:	019b      	lsls	r3, r3, #6
 8001af0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f023 0302 	bic.w	r3, r3, #2
 8001b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b12:	f7ff facf 	bl	80010b4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b18:	e015      	b.n	8001b46 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b1a:	f7ff facb 	bl	80010b4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d309      	bcc.n	8001b3e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e014      	b.n	8001b68 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e4      	bne.n	8001b1a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b42      	cmp	r3, #66	; 0x42
 8001b90:	d101      	bne.n	8001b96 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	e04e      	b.n	8001c34 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2242      	movs	r2, #66	; 0x42
 8001b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 031c 	and.w	r3, r3, #28
 8001bac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8a1b      	ldrh	r3, [r3, #16]
 8001bb2:	02db      	lsls	r3, r3, #11
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	019b      	lsls	r3, r3, #6
 8001bc0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bec:	f7ff fa62 	bl	80010b4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf2:	e015      	b.n	8001c20 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bf4:	f7ff fa5e 	bl	80010b4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d309      	bcc.n	8001c18 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e00d      	b.n	8001c34 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e4      	bne.n	8001bf4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_ETH_Start+0x16>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e01f      	b.n	8001c92 <HAL_ETH_Start+0x56>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fb44 	bl	80022f0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fb7b 	bl	8002364 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fc12 	bl	8002498 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fbaf 	bl	80023d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fbdc 	bl	8002438 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_ETH_Stop+0x16>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e01f      	b.n	8001cf0 <HAL_ETH_Stop+0x56>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fba1 	bl	8002408 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fbce 	bl	8002468 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb66 	bl	800239e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fbe0 	bl	8002498 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fb26 	bl	800232a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_ETH_ConfigMAC+0x1c>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e0e4      	b.n	8001ede <HAL_ETH_ConfigMAC+0x1e6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80b1 	beq.w	8001e8e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d44:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d4a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d50:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d56:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d5c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d62:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d68:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d6e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d74:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d7a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d80:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d86:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff f994 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001dba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001dc0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001dc6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001dcc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001dde:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001de0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff f96e 	bl	80010cc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e00:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e0a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e28:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e2e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e34:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e3a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e40:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff f937 	bl	80010cc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff f924 	bl	80010cc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	61da      	str	r2, [r3, #28]
 8001e8c:	e01e      	b.n	8001ecc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e9c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff f904 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	ff20810f 	.word	0xff20810f

08001eec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0b0      	sub	sp, #192	; 0xc0
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f08:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f10:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	663b      	str	r3, [r7, #96]	; 0x60
 8001f38:	e001      	b.n	8001f3e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f42:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc4:	4bac      	ldr	r3, [pc, #688]	; (8002278 <ETH_MACDMAConfig+0x38c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fd0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fd4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fd8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fde:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fe2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fe6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ff0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ff4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ff8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ffc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002000:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002002:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002014:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff f853 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800202e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002030:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002034:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002038:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800203a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800203e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002044:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800204a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800204c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002050:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002054:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800205c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800205e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff f82e 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002078:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002082:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800208c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002098:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020a0:	4013      	ands	r3, r2
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020aa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020b0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020b6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020bc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020c2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020c8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020dc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7fe ffef 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002112:	2001      	movs	r0, #1
 8002114:	f7fe ffda 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002120:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002134:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002146:	2304      	movs	r3, #4
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800214a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800215c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002166:	2300      	movs	r3, #0
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800216a:	2300      	movs	r3, #0
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	3318      	adds	r3, #24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800217e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <ETH_MACDMAConfig+0x390>)
 8002184:	4013      	ands	r3, r2
 8002186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800218a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800218c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800218e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002190:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002192:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002194:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002196:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002198:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800219a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800219c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800219e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021a0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021a2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021a6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021be:	3318      	adds	r3, #24
 80021c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ce:	3318      	adds	r3, #24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7fe ff78 	bl	80010cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e4:	3318      	adds	r3, #24
 80021e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002200:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002202:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002206:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ff51 	bl	80010cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002236:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10f      	bne.n	8002260 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	331c      	adds	r3, #28
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	331c      	adds	r3, #28
 800225e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	461a      	mov	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f809 	bl	8002280 <ETH_MACAddressConfig>
}
 800226e:	bf00      	nop
 8002270:	37c0      	adds	r7, #192	; 0xc0
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	ff20810f 	.word	0xff20810f
 800227c:	f8de3f23 	.word	0xf8de3f23

08002280 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3305      	adds	r3, #5
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	3204      	adds	r2, #4
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <ETH_MACAddressConfig+0x68>)
 80022a2:	4413      	add	r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3303      	adds	r3, #3
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	061a      	lsls	r2, r3, #24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3302      	adds	r3, #2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4313      	orrs	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <ETH_MACAddressConfig+0x6c>)
 80022d2:	4413      	add	r3, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	6013      	str	r3, [r2, #0]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40028040 	.word	0x40028040
 80022ec:	40028044 	.word	0x40028044

080022f0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002314:	2001      	movs	r0, #1
 8002316:	f000 f8e9 	bl	80024ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0208 	bic.w	r2, r2, #8
 8002344:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800234e:	2001      	movs	r0, #1
 8002350:	f000 f8cc 	bl	80024ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0204 	orr.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002388:	2001      	movs	r0, #1
 800238a:	f000 f8af 	bl	80024ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 f892 	bl	80024ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e8:	3318      	adds	r3, #24
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	3318      	adds	r3, #24
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002418:	3318      	adds	r3, #24
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	3318      	adds	r3, #24
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	3318      	adds	r3, #24
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0202 	orr.w	r2, r2, #2
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	3318      	adds	r3, #24
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002478:	3318      	adds	r3, #24
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0202 	bic.w	r2, r2, #2
 8002484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002488:	3318      	adds	r3, #24
 800248a:	601a      	str	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	3318      	adds	r3, #24
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	3318      	adds	r3, #24
 80024be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c8:	3318      	adds	r3, #24
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 f80c 	bl	80024ec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	3318      	adds	r3, #24
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <ETH_Delay+0x38>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <ETH_Delay+0x3c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0a5b      	lsrs	r3, r3, #9
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002508:	bf00      	nop
  } 
  while (Delay --);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e5a      	subs	r2, r3, #1
 800250e:	60fa      	str	r2, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f9      	bne.n	8002508 <ETH_Delay+0x1c>
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	10624dd3 	.word	0x10624dd3

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e16b      	b.n	8002820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 815a 	bne.w	800281a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d00b      	beq.n	8002586 <HAL_GPIO_Init+0x5a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257a:	2b11      	cmp	r3, #17
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b12      	cmp	r3, #18
 8002584:	d130      	bne.n	80025e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0xfc>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b12      	cmp	r3, #18
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80b4 	beq.w	800281a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a5b      	ldr	r2, [pc, #364]	; (800283c <HAL_GPIO_Init+0x310>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x314>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x226>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a51      	ldr	r2, [pc, #324]	; (8002844 <HAL_GPIO_Init+0x318>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x222>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_GPIO_Init+0x31c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x21e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_GPIO_Init+0x320>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x21a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_GPIO_Init+0x324>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x216>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x328>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x212>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x32c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x20e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_GPIO_Init+0x330>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x20a>
 8002732:	2307      	movs	r3, #7
 8002734:	e00e      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002736:	2308      	movs	r3, #8
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273a:	2306      	movs	r3, #6
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	; (800283c <HAL_GPIO_Init+0x310>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_GPIO_Init+0x334>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae90 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40021400 	.word	0x40021400
 8002858:	40021800 	.word	0x40021800
 800285c:	40021c00 	.word	0x40021c00
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e25b      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4ba3      	ldr	r3, [pc, #652]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b9d      	ldr	r3, [pc, #628]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b99      	ldr	r3, [pc, #612]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e236      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b91      	ldr	r3, [pc, #580]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a90      	ldr	r2, [pc, #576]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b8b      	ldr	r3, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a8a      	ldr	r2, [pc, #552]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a87      	ldr	r2, [pc, #540]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b84      	ldr	r3, [pc, #528]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a83      	ldr	r2, [pc, #524]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a80      	ldr	r2, [pc, #512]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fbb0 	bl	80010b4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fbac 	bl	80010b4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1fb      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe fb9c 	bl	80010b4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fb98 	bl	80010b4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1e7      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b6c      	ldr	r3, [pc, #432]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b5c      	ldr	r3, [pc, #368]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1bb      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b56      	ldr	r3, [pc, #344]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4952      	ldr	r1, [pc, #328]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_RCC_OscConfig+0x2b0>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fb51 	bl	80010b4 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fb4d 	bl	80010b4 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e19c      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4940      	ldr	r1, [pc, #256]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCC_OscConfig+0x2b0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fb30 	bl	80010b4 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7fe fb2c 	bl	80010b4 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e17b      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d030      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <HAL_RCC_OscConfig+0x2b4>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fb10 	bl	80010b4 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7fe fb0c 	bl	80010b4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e15b      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e015      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x2b4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe faf9 	bl	80010b4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7fe faf5 	bl	80010b4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e144      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80a0 	beq.w	8002c32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x2b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d121      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x2b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_RCC_OscConfig+0x2b8>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fabb 	bl	80010b4 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e011      	b.n	8002b66 <HAL_RCC_OscConfig+0x2ce>
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	42470000 	.word	0x42470000
 8002b4c:	42470e80 	.word	0x42470e80
 8002b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe faae 	bl	80010b4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0fd      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b81      	ldr	r3, [pc, #516]	; (8002d6c <HAL_RCC_OscConfig+0x4d4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
 8002b7a:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a7c      	ldr	r2, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	e01c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x32a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x312>
 8002b90:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a76      	ldr	r2, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a73      	ldr	r2, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x32a>
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a70      	ldr	r2, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a6d      	ldr	r2, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe fa73 	bl	80010b4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fa6f 	bl	80010b4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0bc      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x33a>
 8002bf4:	e014      	b.n	8002c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fa5d 	bl	80010b4 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fa59 	bl	80010b4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0a6      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4b56      	ldr	r3, [pc, #344]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a51      	ldr	r2, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 8092 	beq.w	8002d60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d05c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d141      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <HAL_RCC_OscConfig+0x4dc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fa2d 	bl	80010b4 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fa29 	bl	80010b4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e078      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	3b01      	subs	r3, #1
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	4933      	ldr	r1, [pc, #204]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x4dc>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa02 	bl	80010b4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe f9fe 	bl	80010b4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04d      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x41c>
 8002cd2:	e045      	b.n	8002d60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x4dc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe f9eb 	bl	80010b4 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe f9e7 	bl	80010b4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e036      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x44a>
 8002d00:	e02e      	b.n	8002d60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e029      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d36:	4013      	ands	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10d      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470060 	.word	0x42470060

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0cc      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d90c      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b8      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	494d      	ldr	r1, [pc, #308]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d044      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d119      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e36:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e067      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 0203 	bic.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4934      	ldr	r1, [pc, #208]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e68:	f7fe f924 	bl	80010b4 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e70:	f7fe f920 	bl	80010b4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e04f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 020c 	and.w	r2, r3, #12
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d1eb      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d20c      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e032      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4916      	ldr	r1, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002efe:	f000 f821 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	490a      	ldr	r1, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	5ccb      	ldrb	r3, [r1, r3]
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f884 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023c00 	.word	0x40023c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08014348 	.word	0x08014348
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	2300      	movs	r3, #0
 8002f56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5c:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d00d      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x40>
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	f200 80bd 	bhi.w	80030e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x34>
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f76:	e0b7      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b61      	ldr	r3, [pc, #388]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f7a:	60bb      	str	r3, [r7, #8]
       break;
 8002f7c:	e0b7      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7e:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f80:	60bb      	str	r3, [r7, #8]
      break;
 8002f82:	e0b4      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d04d      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b58      	ldr	r3, [pc, #352]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	ea02 0800 	and.w	r8, r2, r0
 8002fb2:	ea03 0901 	and.w	r9, r3, r1
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	014b      	lsls	r3, r1, #5
 8002fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fc8:	0142      	lsls	r2, r0, #5
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	ebb0 0008 	subs.w	r0, r0, r8
 8002fd2:	eb61 0109 	sbc.w	r1, r1, r9
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fe4:	0182      	lsls	r2, r0, #6
 8002fe6:	1a12      	subs	r2, r2, r0
 8002fe8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	00d9      	lsls	r1, r3, #3
 8002ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ffa:	00d0      	lsls	r0, r2, #3
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	eb12 0208 	adds.w	r2, r2, r8
 8003004:	eb43 0309 	adc.w	r3, r3, r9
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	0259      	lsls	r1, r3, #9
 8003012:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003016:	0250      	lsls	r0, r2, #9
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f7fd f93a 	bl	80002a0 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e04a      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	ea02 0400 	and.w	r4, r2, r0
 800304e:	ea03 0501 	and.w	r5, r3, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	014b      	lsls	r3, r1, #5
 8003060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003064:	0142      	lsls	r2, r0, #5
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	1b00      	subs	r0, r0, r4
 800306c:	eb61 0105 	sbc.w	r1, r1, r5
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	018b      	lsls	r3, r1, #6
 800307a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800307e:	0182      	lsls	r2, r0, #6
 8003080:	1a12      	subs	r2, r2, r0
 8003082:	eb63 0301 	sbc.w	r3, r3, r1
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	00d9      	lsls	r1, r3, #3
 8003090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003094:	00d0      	lsls	r0, r2, #3
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	1912      	adds	r2, r2, r4
 800309c:	eb45 0303 	adc.w	r3, r5, r3
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0299      	lsls	r1, r3, #10
 80030aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ae:	0290      	lsls	r0, r2, #10
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f7fd f8ee 	bl	80002a0 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	60bb      	str	r3, [r7, #8]
      break;
 80030e6:	e002      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ea:	60bb      	str	r3, [r7, #8]
      break;
 80030ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ee:	68bb      	ldr	r3, [r7, #8]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000008 	.word	0x20000008

08003120 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003126:	4b8d      	ldr	r3, [pc, #564]	; (800335c <MX_LWIP_Init+0x23c>)
 8003128:	22c0      	movs	r2, #192	; 0xc0
 800312a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800312c:	4b8b      	ldr	r3, [pc, #556]	; (800335c <MX_LWIP_Init+0x23c>)
 800312e:	22a8      	movs	r2, #168	; 0xa8
 8003130:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003132:	4b8a      	ldr	r3, [pc, #552]	; (800335c <MX_LWIP_Init+0x23c>)
 8003134:	2200      	movs	r2, #0
 8003136:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8003138:	4b88      	ldr	r3, [pc, #544]	; (800335c <MX_LWIP_Init+0x23c>)
 800313a:	220a      	movs	r2, #10
 800313c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <MX_LWIP_Init+0x240>)
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003144:	4b86      	ldr	r3, [pc, #536]	; (8003360 <MX_LWIP_Init+0x240>)
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <MX_LWIP_Init+0x240>)
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003150:	4b83      	ldr	r3, [pc, #524]	; (8003360 <MX_LWIP_Init+0x240>)
 8003152:	2200      	movs	r2, #0
 8003154:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003156:	4b83      	ldr	r3, [pc, #524]	; (8003364 <MX_LWIP_Init+0x244>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800315c:	4b81      	ldr	r3, [pc, #516]	; (8003364 <MX_LWIP_Init+0x244>)
 800315e:	2200      	movs	r2, #0
 8003160:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <MX_LWIP_Init+0x244>)
 8003164:	2200      	movs	r2, #0
 8003166:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003168:	4b7e      	ldr	r3, [pc, #504]	; (8003364 <MX_LWIP_Init+0x244>)
 800316a:	2200      	movs	r2, #0
 800316c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800316e:	f002 f8bd 	bl	80052ec <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003172:	4b7a      	ldr	r3, [pc, #488]	; (800335c <MX_LWIP_Init+0x23c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	061a      	lsls	r2, r3, #24
 8003178:	4b78      	ldr	r3, [pc, #480]	; (800335c <MX_LWIP_Init+0x23c>)
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	4b76      	ldr	r3, [pc, #472]	; (800335c <MX_LWIP_Init+0x23c>)
 8003182:	789b      	ldrb	r3, [r3, #2]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	4313      	orrs	r3, r2
 8003188:	4a74      	ldr	r2, [pc, #464]	; (800335c <MX_LWIP_Init+0x23c>)
 800318a:	78d2      	ldrb	r2, [r2, #3]
 800318c:	4313      	orrs	r3, r2
 800318e:	061a      	lsls	r2, r3, #24
 8003190:	4b72      	ldr	r3, [pc, #456]	; (800335c <MX_LWIP_Init+0x23c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	0619      	lsls	r1, r3, #24
 8003196:	4b71      	ldr	r3, [pc, #452]	; (800335c <MX_LWIP_Init+0x23c>)
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	4319      	orrs	r1, r3
 800319e:	4b6f      	ldr	r3, [pc, #444]	; (800335c <MX_LWIP_Init+0x23c>)
 80031a0:	789b      	ldrb	r3, [r3, #2]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	430b      	orrs	r3, r1
 80031a6:	496d      	ldr	r1, [pc, #436]	; (800335c <MX_LWIP_Init+0x23c>)
 80031a8:	78c9      	ldrb	r1, [r1, #3]
 80031aa:	430b      	orrs	r3, r1
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031b2:	431a      	orrs	r2, r3
 80031b4:	4b69      	ldr	r3, [pc, #420]	; (800335c <MX_LWIP_Init+0x23c>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	0619      	lsls	r1, r3, #24
 80031ba:	4b68      	ldr	r3, [pc, #416]	; (800335c <MX_LWIP_Init+0x23c>)
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	4319      	orrs	r1, r3
 80031c2:	4b66      	ldr	r3, [pc, #408]	; (800335c <MX_LWIP_Init+0x23c>)
 80031c4:	789b      	ldrb	r3, [r3, #2]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	430b      	orrs	r3, r1
 80031ca:	4964      	ldr	r1, [pc, #400]	; (800335c <MX_LWIP_Init+0x23c>)
 80031cc:	78c9      	ldrb	r1, [r1, #3]
 80031ce:	430b      	orrs	r3, r1
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031d6:	431a      	orrs	r2, r3
 80031d8:	4b60      	ldr	r3, [pc, #384]	; (800335c <MX_LWIP_Init+0x23c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	0619      	lsls	r1, r3, #24
 80031de:	4b5f      	ldr	r3, [pc, #380]	; (800335c <MX_LWIP_Init+0x23c>)
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	4319      	orrs	r1, r3
 80031e6:	4b5d      	ldr	r3, [pc, #372]	; (800335c <MX_LWIP_Init+0x23c>)
 80031e8:	789b      	ldrb	r3, [r3, #2]
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	430b      	orrs	r3, r1
 80031ee:	495b      	ldr	r1, [pc, #364]	; (800335c <MX_LWIP_Init+0x23c>)
 80031f0:	78c9      	ldrb	r1, [r1, #3]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	4313      	orrs	r3, r2
 80031f8:	4a5b      	ldr	r2, [pc, #364]	; (8003368 <MX_LWIP_Init+0x248>)
 80031fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80031fc:	4b58      	ldr	r3, [pc, #352]	; (8003360 <MX_LWIP_Init+0x240>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	061a      	lsls	r2, r3, #24
 8003202:	4b57      	ldr	r3, [pc, #348]	; (8003360 <MX_LWIP_Init+0x240>)
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	431a      	orrs	r2, r3
 800320a:	4b55      	ldr	r3, [pc, #340]	; (8003360 <MX_LWIP_Init+0x240>)
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	4313      	orrs	r3, r2
 8003212:	4a53      	ldr	r2, [pc, #332]	; (8003360 <MX_LWIP_Init+0x240>)
 8003214:	78d2      	ldrb	r2, [r2, #3]
 8003216:	4313      	orrs	r3, r2
 8003218:	061a      	lsls	r2, r3, #24
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <MX_LWIP_Init+0x240>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	0619      	lsls	r1, r3, #24
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <MX_LWIP_Init+0x240>)
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	4319      	orrs	r1, r3
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <MX_LWIP_Init+0x240>)
 800322a:	789b      	ldrb	r3, [r3, #2]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	430b      	orrs	r3, r1
 8003230:	494b      	ldr	r1, [pc, #300]	; (8003360 <MX_LWIP_Init+0x240>)
 8003232:	78c9      	ldrb	r1, [r1, #3]
 8003234:	430b      	orrs	r3, r1
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800323c:	431a      	orrs	r2, r3
 800323e:	4b48      	ldr	r3, [pc, #288]	; (8003360 <MX_LWIP_Init+0x240>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	0619      	lsls	r1, r3, #24
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <MX_LWIP_Init+0x240>)
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	4319      	orrs	r1, r3
 800324c:	4b44      	ldr	r3, [pc, #272]	; (8003360 <MX_LWIP_Init+0x240>)
 800324e:	789b      	ldrb	r3, [r3, #2]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	430b      	orrs	r3, r1
 8003254:	4942      	ldr	r1, [pc, #264]	; (8003360 <MX_LWIP_Init+0x240>)
 8003256:	78c9      	ldrb	r1, [r1, #3]
 8003258:	430b      	orrs	r3, r1
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003260:	431a      	orrs	r2, r3
 8003262:	4b3f      	ldr	r3, [pc, #252]	; (8003360 <MX_LWIP_Init+0x240>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	0619      	lsls	r1, r3, #24
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <MX_LWIP_Init+0x240>)
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	4319      	orrs	r1, r3
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <MX_LWIP_Init+0x240>)
 8003272:	789b      	ldrb	r3, [r3, #2]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	430b      	orrs	r3, r1
 8003278:	4939      	ldr	r1, [pc, #228]	; (8003360 <MX_LWIP_Init+0x240>)
 800327a:	78c9      	ldrb	r1, [r1, #3]
 800327c:	430b      	orrs	r3, r1
 800327e:	0e1b      	lsrs	r3, r3, #24
 8003280:	4313      	orrs	r3, r2
 8003282:	4a3a      	ldr	r2, [pc, #232]	; (800336c <MX_LWIP_Init+0x24c>)
 8003284:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <MX_LWIP_Init+0x244>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	061a      	lsls	r2, r3, #24
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <MX_LWIP_Init+0x244>)
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <MX_LWIP_Init+0x244>)
 8003296:	789b      	ldrb	r3, [r3, #2]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	4313      	orrs	r3, r2
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <MX_LWIP_Init+0x244>)
 800329e:	78d2      	ldrb	r2, [r2, #3]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	061a      	lsls	r2, r3, #24
 80032a4:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <MX_LWIP_Init+0x244>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	0619      	lsls	r1, r3, #24
 80032aa:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <MX_LWIP_Init+0x244>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	4319      	orrs	r1, r3
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <MX_LWIP_Init+0x244>)
 80032b4:	789b      	ldrb	r3, [r3, #2]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	430b      	orrs	r3, r1
 80032ba:	492a      	ldr	r1, [pc, #168]	; (8003364 <MX_LWIP_Init+0x244>)
 80032bc:	78c9      	ldrb	r1, [r1, #3]
 80032be:	430b      	orrs	r3, r1
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032c6:	431a      	orrs	r2, r3
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <MX_LWIP_Init+0x244>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	0619      	lsls	r1, r3, #24
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <MX_LWIP_Init+0x244>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	4319      	orrs	r1, r3
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <MX_LWIP_Init+0x244>)
 80032d8:	789b      	ldrb	r3, [r3, #2]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	430b      	orrs	r3, r1
 80032de:	4921      	ldr	r1, [pc, #132]	; (8003364 <MX_LWIP_Init+0x244>)
 80032e0:	78c9      	ldrb	r1, [r1, #3]
 80032e2:	430b      	orrs	r3, r1
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032ea:	431a      	orrs	r2, r3
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <MX_LWIP_Init+0x244>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	0619      	lsls	r1, r3, #24
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <MX_LWIP_Init+0x244>)
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	4319      	orrs	r1, r3
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <MX_LWIP_Init+0x244>)
 80032fc:	789b      	ldrb	r3, [r3, #2]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	430b      	orrs	r3, r1
 8003302:	4918      	ldr	r1, [pc, #96]	; (8003364 <MX_LWIP_Init+0x244>)
 8003304:	78c9      	ldrb	r1, [r1, #3]
 8003306:	430b      	orrs	r3, r1
 8003308:	0e1b      	lsrs	r3, r3, #24
 800330a:	4313      	orrs	r3, r2
 800330c:	4a18      	ldr	r2, [pc, #96]	; (8003370 <MX_LWIP_Init+0x250>)
 800330e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <MX_LWIP_Init+0x254>)
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <MX_LWIP_Init+0x258>)
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <MX_LWIP_Init+0x250>)
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <MX_LWIP_Init+0x24c>)
 8003320:	4911      	ldr	r1, [pc, #68]	; (8003368 <MX_LWIP_Init+0x248>)
 8003322:	4816      	ldr	r0, [pc, #88]	; (800337c <MX_LWIP_Init+0x25c>)
 8003324:	f002 fc88 	bl	8005c38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003328:	4814      	ldr	r0, [pc, #80]	; (800337c <MX_LWIP_Init+0x25c>)
 800332a:	f002 fe37 	bl	8005f9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <MX_LWIP_Init+0x25c>)
 8003330:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003340:	480e      	ldr	r0, [pc, #56]	; (800337c <MX_LWIP_Init+0x25c>)
 8003342:	f002 fe3b 	bl	8005fbc <netif_set_up>
 8003346:	e002      	b.n	800334e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003348:	480c      	ldr	r0, [pc, #48]	; (800337c <MX_LWIP_Init+0x25c>)
 800334a:	f002 fea3 	bl	8006094 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800334e:	490c      	ldr	r1, [pc, #48]	; (8003380 <MX_LWIP_Init+0x260>)
 8003350:	480a      	ldr	r0, [pc, #40]	; (800337c <MX_LWIP_Init+0x25c>)
 8003352:	f002 fed1 	bl	80060f8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	200006c0 	.word	0x200006c0
 8003360:	200006bc 	.word	0x200006bc
 8003364:	20000680 	.word	0x20000680
 8003368:	200006b8 	.word	0x200006b8
 800336c:	200006c4 	.word	0x200006c4
 8003370:	200006c8 	.word	0x200006c8
 8003374:	0800ff41 	.word	0x0800ff41
 8003378:	08003929 	.word	0x08003929
 800337c:	20000684 	.word	0x20000684
 8003380:	08003995 	.word	0x08003995

08003384 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003388:	4803      	ldr	r0, [pc, #12]	; (8003398 <MX_LWIP_Process+0x14>)
 800338a:	f000 faad 	bl	80038e8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800338e:	f009 fe37 	bl	800d000 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000684 	.word	0x20000684

0800339c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <HAL_ETH_MspInit+0x138>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f040 8085 	bne.w	80034ca <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4a43      	ldr	r2, [pc, #268]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ce:	6313      	str	r3, [r2, #48]	; 0x30
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4a35      	ldr	r2, [pc, #212]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003406:	6313      	str	r3, [r2, #48]	; 0x30
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4a2e      	ldr	r2, [pc, #184]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6313      	str	r3, [r2, #48]	; 0x30
 8003424:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6313      	str	r3, [r2, #48]	; 0x30
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <HAL_ETH_MspInit+0x13c>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003468:	2332      	movs	r3, #50	; 0x32
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003474:	2303      	movs	r3, #3
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003478:	230b      	movs	r3, #11
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003480:	4619      	mov	r1, r3
 8003482:	4816      	ldr	r0, [pc, #88]	; (80034dc <HAL_ETH_MspInit+0x140>)
 8003484:	f7ff f852 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003488:	2386      	movs	r3, #134	; 0x86
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003494:	2303      	movs	r3, #3
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003498:	230b      	movs	r3, #11
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	480f      	ldr	r0, [pc, #60]	; (80034e0 <HAL_ETH_MspInit+0x144>)
 80034a4:	f7ff f842 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80034a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034ba:	230b      	movs	r3, #11
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	4619      	mov	r1, r3
 80034c4:	4807      	ldr	r0, [pc, #28]	; (80034e4 <HAL_ETH_MspInit+0x148>)
 80034c6:	f7ff f831 	bl	800252c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80034ca:	bf00      	nop
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40028000 	.word	0x40028000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020000 	.word	0x40020000
 80034e4:	40020400 	.word	0x40020400

080034e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80034f4:	4b4d      	ldr	r3, [pc, #308]	; (800362c <low_level_init+0x144>)
 80034f6:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <low_level_init+0x148>)
 80034f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80034fa:	4b4c      	ldr	r3, [pc, #304]	; (800362c <low_level_init+0x144>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003500:	4b4a      	ldr	r3, [pc, #296]	; (800362c <low_level_init+0x144>)
 8003502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <low_level_init+0x144>)
 800350a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <low_level_init+0x144>)
 8003512:	2201      	movs	r2, #1
 8003514:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800351e:	23e1      	movs	r3, #225	; 0xe1
 8003520:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003522:	2300      	movs	r3, #0
 8003524:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800352a:	2300      	movs	r3, #0
 800352c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800352e:	4a3f      	ldr	r2, [pc, #252]	; (800362c <low_level_init+0x144>)
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003536:	4b3d      	ldr	r3, [pc, #244]	; (800362c <low_level_init+0x144>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <low_level_init+0x144>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003542:	4b3a      	ldr	r3, [pc, #232]	; (800362c <low_level_init+0x144>)
 8003544:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003548:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800354a:	4838      	ldr	r0, [pc, #224]	; (800362c <low_level_init+0x144>)
 800354c:	f7fd fec8 	bl	80012e0 <HAL_ETH_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d108      	bne.n	800356c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800356c:	2304      	movs	r3, #4
 800356e:	4a31      	ldr	r2, [pc, #196]	; (8003634 <low_level_init+0x14c>)
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <low_level_init+0x150>)
 8003572:	482e      	ldr	r0, [pc, #184]	; (800362c <low_level_init+0x144>)
 8003574:	f7fe f850 	bl	8001618 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003578:	2304      	movs	r3, #4
 800357a:	4a30      	ldr	r2, [pc, #192]	; (800363c <low_level_init+0x154>)
 800357c:	4930      	ldr	r1, [pc, #192]	; (8003640 <low_level_init+0x158>)
 800357e:	482b      	ldr	r0, [pc, #172]	; (800362c <low_level_init+0x144>)
 8003580:	f7fe f8b3 	bl	80016ea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2206      	movs	r2, #6
 8003588:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <low_level_init+0x144>)
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <low_level_init+0x144>)
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	785a      	ldrb	r2, [r3, #1]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <low_level_init+0x144>)
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	789a      	ldrb	r2, [r3, #2]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <low_level_init+0x144>)
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	78da      	ldrb	r2, [r3, #3]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <low_level_init+0x144>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	791a      	ldrb	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <low_level_init+0x144>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	795a      	ldrb	r2, [r3, #5]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80035da:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80035e2:	f043 030a 	orr.w	r3, r3, #10
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80035ee:	480f      	ldr	r0, [pc, #60]	; (800362c <low_level_init+0x144>)
 80035f0:	f7fe fb24 	bl	8001c3c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	461a      	mov	r2, r3
 80035fa:	211d      	movs	r1, #29
 80035fc:	480b      	ldr	r0, [pc, #44]	; (800362c <low_level_init+0x144>)
 80035fe:	f7fe fa4f 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f043 030b 	orr.w	r3, r3, #11
 8003608:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	461a      	mov	r2, r3
 800360e:	211d      	movs	r1, #29
 8003610:	4806      	ldr	r0, [pc, #24]	; (800362c <low_level_init+0x144>)
 8003612:	f7fe faad 	bl	8001b70 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	461a      	mov	r2, r3
 800361c:	211d      	movs	r1, #29
 800361e:	4803      	ldr	r0, [pc, #12]	; (800362c <low_level_init+0x144>)
 8003620:	f7fe fa3e 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20001f9c 	.word	0x20001f9c
 8003630:	40028000 	.word	0x40028000
 8003634:	20001fe4 	.word	0x20001fe4
 8003638:	200006cc 	.word	0x200006cc
 800363c:	2000074c 	.word	0x2000074c
 8003640:	20001f1c 	.word	0x20001f1c

08003644 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800364e:	4b4b      	ldr	r3, [pc, #300]	; (800377c <low_level_output+0x138>)
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003666:	4b45      	ldr	r3, [pc, #276]	; (800377c <low_level_output+0x138>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	e05a      	b.n	800372c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	da03      	bge.n	8003686 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800367e:	23f8      	movs	r3, #248	; 0xf8
 8003680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003684:	e05c      	b.n	8003740 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	895b      	ldrh	r3, [r3, #10]
 800368a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003690:	e02f      	b.n	80036f2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	18d0      	adds	r0, r2, r3
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	18d1      	adds	r1, r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80036a6:	3304      	adds	r3, #4
 80036a8:	461a      	mov	r2, r3
 80036aa:	f00c fd51 	bl	8010150 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da03      	bge.n	80036c4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80036bc:	23f8      	movs	r3, #248	; 0xf8
 80036be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80036c2:	e03d      	b.n	8003740 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80036d4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036e0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80036ec:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d8c8      	bhi.n	8003692 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	18d0      	adds	r0, r2, r3
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4413      	add	r3, r2
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4619      	mov	r1, r3
 8003712:	f00c fd1d 	bl	8010150 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1a1      	bne.n	8003676 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	4811      	ldr	r0, [pc, #68]	; (800377c <low_level_output+0x138>)
 8003736:	f7fe f845 	bl	80017c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <low_level_output+0x138>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003748:	3314      	adds	r3, #20
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <low_level_output+0x138>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	3314      	adds	r3, #20
 800375e:	2220      	movs	r2, #32
 8003760:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <low_level_output+0x138>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376a:	3304      	adds	r3, #4
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20001f9c 	.word	0x20001f9c

08003780 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80037a4:	484f      	ldr	r0, [pc, #316]	; (80038e4 <low_level_input+0x164>)
 80037a6:	f7fe f8f7 	bl	8001998 <HAL_ETH_GetReceivedFrame>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <low_level_input+0x34>

    return NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e092      	b.n	80038da <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <low_level_input+0x164>)
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <low_level_input+0x164>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80037cc:	4619      	mov	r1, r3
 80037ce:	2000      	movs	r0, #0
 80037d0:	f002 fd2e 	bl	8006230 <pbuf_alloc>
 80037d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d04b      	beq.n	8003874 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80037dc:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <low_level_input+0x164>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ea:	e040      	b.n	800386e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	895b      	ldrh	r3, [r3, #10]
 80037f0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80037f6:	e021      	b.n	800383c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	18d0      	adds	r0, r2, r3
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	18d1      	adds	r1, r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800380c:	3304      	adds	r3, #4
 800380e:	461a      	mov	r2, r3
 8003810:	f00c fc9e 	bl	8010150 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	4413      	add	r3, r2
 8003826:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800382a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003836:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003846:	4293      	cmp	r3, r2
 8003848:	d8d6      	bhi.n	80037f8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	18d0      	adds	r0, r2, r3
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4619      	mov	r1, r3
 800385c:	f00c fc78 	bl	8010150 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1bb      	bne.n	80037ec <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <low_level_input+0x164>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e00b      	b.n	8003898 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3301      	adds	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <low_level_input+0x164>)
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3ee      	bcc.n	8003880 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <low_level_input+0x164>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <low_level_input+0x164>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b0:	3314      	adds	r3, #20
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <low_level_input+0x164>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	3314      	adds	r3, #20
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <low_level_input+0x164>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d2:	3308      	adds	r3, #8
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3730      	adds	r7, #48	; 0x30
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20001f9c 	.word	0x20001f9c

080038e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff45 	bl	8003780 <low_level_input>
 80038f6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d010      	beq.n	8003920 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	4798      	blx	r3
 8003908:	4603      	mov	r3, r0
 800390a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800390c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f002 ff6f 	bl	80067f8 <pbuf_free>
    p = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e000      	b.n	8003922 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003920:	bf00      	nop
  }
}
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <ethernetif_init+0x1c>
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <ethernetif_init+0x48>)
 8003938:	f240 2207 	movw	r2, #519	; 0x207
 800393c:	490d      	ldr	r1, [pc, #52]	; (8003974 <ethernetif_init+0x4c>)
 800393e:	480e      	ldr	r0, [pc, #56]	; (8003978 <ethernetif_init+0x50>)
 8003940:	f00c fc36 	bl	80101b0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2273      	movs	r2, #115	; 0x73
 8003948:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2274      	movs	r2, #116	; 0x74
 8003950:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <ethernetif_init+0x54>)
 8003958:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <ethernetif_init+0x58>)
 800395e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fdc1 	bl	80034e8 <low_level_init>

  return ERR_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	08011648 	.word	0x08011648
 8003974:	08011664 	.word	0x08011664
 8003978:	08011674 	.word	0x08011674
 800397c:	0800e405 	.word	0x0800e405
 8003980:	08003645 	.word	0x08003645

08003984 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003988:	f7fd fb94 	bl	80010b4 <HAL_GetTick>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d05d      	beq.n	8003a72 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <ethernetif_update_config+0xf4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03f      	beq.n	8003a3e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80039be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c2:	2100      	movs	r1, #0
 80039c4:	4830      	ldr	r0, [pc, #192]	; (8003a88 <ethernetif_update_config+0xf4>)
 80039c6:	f7fe f8d3 	bl	8001b70 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fd fb73 	bl	80010b4 <HAL_GetTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	461a      	mov	r2, r3
 80039d8:	2101      	movs	r1, #1
 80039da:	482b      	ldr	r0, [pc, #172]	; (8003a88 <ethernetif_update_config+0xf4>)
 80039dc:	f7fe f860 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80039e0:	f7fd fb68 	bl	80010b4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ee:	d828      	bhi.n	8003a42 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0eb      	beq.n	80039d2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	461a      	mov	r2, r3
 8003a00:	211f      	movs	r1, #31
 8003a02:	4821      	ldr	r0, [pc, #132]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a04:	f7fe f84c 	bl	8001aa0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	e002      	b.n	8003a22 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	e016      	b.n	8003a62 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e011      	b.n	8003a62 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <ethernetif_update_config+0xb0>
          goto error;
 8003a42:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003a54:	4313      	orrs	r3, r2
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	480a      	ldr	r0, [pc, #40]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a5e:	f7fe f887 	bl	8001b70 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003a62:	2100      	movs	r1, #0
 8003a64:	4808      	ldr	r0, [pc, #32]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a66:	f7fe f947 	bl	8001cf8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003a6a:	4807      	ldr	r0, [pc, #28]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a6c:	f7fe f8e6 	bl	8001c3c <HAL_ETH_Start>
 8003a70:	e002      	b.n	8003a78 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <ethernetif_update_config+0xf4>)
 8003a74:	f7fe f911 	bl	8001c9a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f807 	bl	8003a8c <ethernetif_notify_conn_changed>
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20001f9c 	.word	0x20001f9c

08003a8c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <fs_open+0x16>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <fs_open+0x1c>
    return ERR_ARG;
 8003ab6:	f06f 030f 	mvn.w	r3, #15
 8003aba:	e028      	b.n	8003b0e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003abc:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <fs_open+0x78>)
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e020      	b.n	8003b04 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7fc fb81 	bl	80001d0 <strcmp>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	7c1a      	ldrb	r2, [r3, #16]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e007      	b.n	8003b0e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1db      	bne.n	8003ac2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003b0a:	f06f 0305 	mvn.w	r3, #5
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0801477c 	.word	0x0801477c

08003b1c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8003b54:	20e0      	movs	r0, #224	; 0xe0
 8003b56:	f001 fe83 	bl	8005860 <mem_malloc>
 8003b5a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8003b62:	22e0      	movs	r2, #224	; 0xe0
 8003b64:	2100      	movs	r1, #0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f00c fb1a 	bl	80101a0 <memset>
  }
  return ret;
 8003b6c:	687b      	ldr	r3, [r7, #4]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f001 fd05 	bl	8005594 <mem_free>
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003b9a:	22b0      	movs	r2, #176	; 0xb0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f00c fafe 	bl	80101a0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003bb2:	20b0      	movs	r0, #176	; 0xb0
 8003bb4:	f001 fe54 	bl	8005860 <mem_malloc>
 8003bb8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ffe6 	bl	8003b92 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003bc6:	687b      	ldr	r3, [r7, #4]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff99 	bl	8003b1c <fs_close>
    hs->handle = NULL;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ffba 	bl	8003b76 <http_ssi_state_free>
    hs->ssi = NULL;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fdef 	bl	80067f8 <pbuf_free>
    hs->req = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <http_state_free+0x1a>
    http_state_eof(hs);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ffca 	bl	8003bd0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fca9 	bl	8005594 <mem_free>
  }
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <http_write+0x22>
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <http_write+0xc8>)
 8003c62:	f240 2219 	movw	r2, #537	; 0x219
 8003c66:	492c      	ldr	r1, [pc, #176]	; (8003d18 <http_write+0xcc>)
 8003c68:	482c      	ldr	r0, [pc, #176]	; (8003d1c <http_write+0xd0>)
 8003c6a:	f00c faa1 	bl	80101b0 <iprintf>
  len = *length;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <http_write+0x32>
    return ERR_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e045      	b.n	8003d0a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c84:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003c86:	8aba      	ldrh	r2, [r7, #20]
 8003c88:	8afb      	ldrh	r3, [r7, #22]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d201      	bcs.n	8003c92 <http_write+0x46>
    len = max_len;
 8003c8e:	8abb      	ldrh	r3, [r7, #20]
 8003c90:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003c9a:	8afa      	ldrh	r2, [r7, #22]
 8003c9c:	8abb      	ldrh	r3, [r7, #20]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d901      	bls.n	8003ca6 <http_write+0x5a>
    len = max_len;
 8003ca2:	8abb      	ldrh	r3, [r7, #20]
 8003ca4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	8afa      	ldrh	r2, [r7, #22]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f007 fb3f 	bl	800b330 <tcp_write>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003cb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d10f      	bne.n	8003ce0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d902      	bls.n	8003cda <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	82fb      	strh	r3, [r7, #22]
 8003cd8:	e002      	b.n	8003ce0 <http_write+0x94>
      } else {
        len /= 2;
 8003cda:	8afb      	ldrh	r3, [r7, #22]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003ce0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d102      	bne.n	8003cf0 <http_write+0xa4>
 8003cea:	8afb      	ldrh	r3, [r7, #22]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d8da      	bhi.n	8003ca6 <http_write+0x5a>

  if (err == ERR_OK) {
 8003cf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8afa      	ldrh	r2, [r7, #22]
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	e002      	b.n	8003d06 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003d06:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	08011718 	.word	0x08011718
 8003d18:	08011750 	.word	0x08011750
 8003d1c:	08011760 	.word	0x08011760

08003d20 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f004 fbbf 	bl	80084b4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003d36:	2100      	movs	r1, #0
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f004 fbcd 	bl	80084d8 <tcp_recv>
  altcp_err(pcb, NULL);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f004 fc0d 	bl	8008560 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f004 fc42 	bl	80085d4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003d50:	2100      	movs	r1, #0
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f004 fbe2 	bl	800851c <tcp_sent>
  if (hs != NULL) {
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f7ff ff62 	bl	8003c28 <http_state_free>
  }

  if (abort_conn) {
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f003 fadc 	bl	8007328 <tcp_abort>
    return ERR_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e00f      	b.n	8003d94 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f003 f9ed 	bl	8007154 <tcp_close>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003d86:	2204      	movs	r2, #4
 8003d88:	4904      	ldr	r1, [pc, #16]	; (8003d9c <http_close_or_abort_conn+0x7c>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f004 fc22 	bl	80085d4 <tcp_poll>
  }
  return err;
 8003d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08004e0b 	.word	0x08004e0b

08003da0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffb6 	bl	8003d20 <http_close_or_abort_conn>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffe8 	bl	8003da0 <http_close_conn>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <extract_uri_parameters+0x18>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <extract_uri_parameters+0x1c>
    return (0);
 8003df0:	2300      	movs	r3, #0
 8003df2:	e04b      	b.n	8003e8c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	e03f      	b.n	8003e7e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	320c      	adds	r2, #12
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003e0e:	2126      	movs	r1, #38	; 0x26
 8003e10:	6978      	ldr	r0, [r7, #20]
 8003e12:	f00c fa45 	bl	80102a0 <strchr>
 8003e16:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <extract_uri_parameters+0x54>
      *pair = '\0';
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
      pair++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e00c      	b.n	8003e46 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003e2c:	2120      	movs	r1, #32
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f00c fa36 	bl	80102a0 <strchr>
 8003e34:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003e46:	213d      	movs	r1, #61	; 0x3d
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f00c fa29 	bl	80102a0 <strchr>
 8003e4e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <extract_uri_parameters+0x94>
      *equals = '\0';
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	321c      	adds	r2, #28
 8003e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e6a:	e005      	b.n	8003e78 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	321c      	adds	r2, #28
 8003e72:	2100      	movs	r1, #0
 8003e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b0f      	cmp	r3, #15
 8003e82:	dc02      	bgt.n	8003e8a <extract_uri_parameters+0xb2>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1b9      	bne.n	8003dfe <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003e8a:	693b      	ldr	r3, [r7, #16]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <get_tag_insert+0x1c>
 8003ea2:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <get_tag_insert+0x154>)
 8003ea4:	f44f 7241 	mov.w	r2, #772	; 0x304
 8003ea8:	4950      	ldr	r1, [pc, #320]	; (8003fec <get_tag_insert+0x158>)
 8003eaa:	4851      	ldr	r0, [pc, #324]	; (8003ff0 <get_tag_insert+0x15c>)
 8003eac:	f00c f980 	bl	80101b0 <iprintf>
  ssi = hs->ssi;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <get_tag_insert+0x36>
 8003ebc:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <get_tag_insert+0x154>)
 8003ebe:	f240 3206 	movw	r2, #774	; 0x306
 8003ec2:	494c      	ldr	r1, [pc, #304]	; (8003ff4 <get_tag_insert+0x160>)
 8003ec4:	484a      	ldr	r0, [pc, #296]	; (8003ff0 <get_tag_insert+0x15c>)
 8003ec6:	f00c f973 	bl	80101b0 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003eca:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <get_tag_insert+0x164>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02e      	beq.n	8003f30 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <get_tag_insert+0x168>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02a      	beq.n	8003f30 <get_tag_insert+0x9c>
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <get_tag_insert+0x16c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d026      	beq.n	8003f30 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e01e      	b.n	8003f26 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f103 0012 	add.w	r0, r3, #18
 8003eee:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <get_tag_insert+0x168>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7fc f968 	bl	80001d0 <strcmp>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003f06:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <get_tag_insert+0x164>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	f102 011b 	add.w	r1, r2, #27
 8003f10:	22c0      	movs	r2, #192	; 0xc0
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	4798      	blx	r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003f1e:	e060      	b.n	8003fe2 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3301      	adds	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <get_tag_insert+0x16c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	dbdb      	blt.n	8003ee8 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3312      	adds	r3, #18
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc f955 	bl	80001e4 <strlen>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2ba6      	cmp	r3, #166	; 0xa6
 8003f3e:	d818      	bhi.n	8003f72 <get_tag_insert+0xde>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	3312      	adds	r3, #18
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc f94d 	bl	80001e4 <strlen>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b09      	cmp	r3, #9
 8003f4e:	d810      	bhi.n	8003f72 <get_tag_insert+0xde>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3312      	adds	r3, #18
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc f945 	bl	80001e4 <strlen>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2ba6      	cmp	r3, #166	; 0xa6
 8003f5e:	d806      	bhi.n	8003f6e <get_tag_insert+0xda>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3312      	adds	r3, #18
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc f93d 	bl	80001e4 <strlen>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	e002      	b.n	8003f74 <get_tag_insert+0xe0>
 8003f6e:	23a7      	movs	r3, #167	; 0xa7
 8003f70:	e000      	b.n	8003f74 <get_tag_insert+0xe0>
 8003f72:	2309      	movs	r3, #9
 8003f74:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	331b      	adds	r3, #27
 8003f7a:	2212      	movs	r2, #18
 8003f7c:	4921      	ldr	r1, [pc, #132]	; (8004004 <get_tag_insert+0x170>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f00c f8e6 	bl	8010150 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3312      	adds	r3, #18
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f00c f8dd 	bl	8010150 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3312      	adds	r3, #18
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	4918      	ldr	r1, [pc, #96]	; (8004008 <get_tag_insert+0x174>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f00c f8d2 	bl	8010150 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3319      	adds	r3, #25
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	331b      	adds	r3, #27
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc f911 	bl	80001e4 <strlen>
 8003fc2:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d306      	bcc.n	8003fda <get_tag_insert+0x146>
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <get_tag_insert+0x154>)
 8003fce:	f240 323f 	movw	r2, #831	; 0x33f
 8003fd2:	490e      	ldr	r1, [pc, #56]	; (800400c <get_tag_insert+0x178>)
 8003fd4:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <get_tag_insert+0x15c>)
 8003fd6:	f00c f8eb 	bl	80101b0 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	81da      	strh	r2, [r3, #14]
}
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	08011718 	.word	0x08011718
 8003fec:	08011788 	.word	0x08011788
 8003ff0:	08011760 	.word	0x08011760
 8003ff4:	08011794 	.word	0x08011794
 8003ff8:	200004e4 	.word	0x200004e4
 8003ffc:	200004ec 	.word	0x200004ec
 8004000:	200004e8 	.word	0x200004e8
 8004004:	080117a0 	.word	0x080117a0
 8004008:	080117b4 	.word	0x080117b4
 800400c:	080117bc 	.word	0x080117bc

08004010 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004022:	6839      	ldr	r1, [r7, #0]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff feca 	bl	8003dbe <http_eof>
    return 0;
 800402a:	2300      	movs	r3, #0
 800402c:	e016      	b.n	800405c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fd7c 	bl	8003b30 <fs_bytes_left>
 8004038:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	dc05      	bgt.n	800404c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff febb 	bl	8003dbe <http_eof>
    return 0;
 8004048:	2300      	movs	r3, #0
 800404a:	e007      	b.n	800405c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <http_check_eof+0x54>)
 800404e:	f240 429d 	movw	r2, #1181	; 0x49d
 8004052:	4905      	ldr	r1, [pc, #20]	; (8004068 <http_check_eof+0x58>)
 8004054:	4805      	ldr	r0, [pc, #20]	; (800406c <http_check_eof+0x5c>)
 8004056:	f00c f8ab 	bl	80101b0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800405a:	2301      	movs	r3, #1
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	08011718 	.word	0x08011718
 8004068:	080117cc 	.word	0x080117cc
 800406c:	08011760 	.word	0x08011760

08004070 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004086:	4293      	cmp	r3, r2
 8004088:	d803      	bhi.n	8004092 <http_send_data_nonssi+0x22>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b29b      	uxth	r3, r3
 8004090:	e001      	b.n	8004096 <http_send_data_nonssi+0x26>
 8004092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004096:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6999      	ldr	r1, [r3, #24]
 800409c:	f107 020c 	add.w	r2, r7, #12
 80040a0:	2300      	movs	r3, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fdd2 	bl	8003c4c <http_write>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80040ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	89ba      	ldrh	r2, [r7, #12]
 80040be:	441a      	add	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	89ba      	ldrh	r2, [r7, #12]
 80040ca:	1a9a      	subs	r2, r3, r2
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <http_send_data_ssi+0x2c>
 80040fa:	4b9d      	ldr	r3, [pc, #628]	; (8004370 <http_send_data_ssi+0x294>)
 80040fc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004100:	499c      	ldr	r1, [pc, #624]	; (8004374 <http_send_data_ssi+0x298>)
 8004102:	489d      	ldr	r0, [pc, #628]	; (8004378 <http_send_data_ssi+0x29c>)
 8004104:	f00c f854 	bl	80101b0 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800410e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	f240 826a 	bls.w	80045f2 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800412c:	4293      	cmp	r3, r2
 800412e:	dc06      	bgt.n	800413e <http_send_data_ssi+0x62>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	b29b      	uxth	r3, r3
 800413c:	e001      	b.n	8004142 <http_send_data_ssi+0x66>
 800413e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004142:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6999      	ldr	r1, [r3, #24]
 8004148:	f107 020e 	add.w	r2, r7, #14
 800414c:	2300      	movs	r3, #0
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fd7c 	bl	8003c4c <http_write>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8004160:	2301      	movs	r3, #1
 8004162:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	89fa      	ldrh	r2, [r7, #14]
 800416a:	441a      	add	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	89fa      	ldrh	r2, [r7, #14]
 8004176:	1a9a      	subs	r2, r3, r2
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 8235 	bne.w	80045f2 <http_send_data_ssi+0x516>
      return data_to_send;
 8004188:	7dbb      	ldrb	r3, [r7, #22]
 800418a:	e27b      	b.n	8004684 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <http_send_data_ssi+0xba>
      return data_to_send;
 8004192:	7dbb      	ldrb	r3, [r7, #22]
 8004194:	e276      	b.n	8004684 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800419c:	2b04      	cmp	r3, #4
 800419e:	f200 8227 	bhi.w	80045f0 <http_send_data_ssi+0x514>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <http_send_data_ssi+0xcc>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041bd 	.word	0x080041bd
 80041ac:	0800420f 	.word	0x0800420f
 80041b0:	08004281 	.word	0x08004281
 80041b4:	080043cf 	.word	0x080043cf
 80041b8:	08004517 	.word	0x08004517
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80041bc:	2300      	movs	r3, #0
 80041be:	757b      	strb	r3, [r7, #21]
 80041c0:	e017      	b.n	80041f2 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	7d7b      	ldrb	r3, [r7, #21]
 80041ca:	496c      	ldr	r1, [pc, #432]	; (800437c <http_send_data_ssi+0x2a0>)
 80041cc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10a      	bne.n	80041ec <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	7d7a      	ldrb	r2, [r7, #21]
 80041da:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2201      	movs	r2, #1
 80041e8:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80041ea:	e005      	b.n	80041f8 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80041ec:	7d7b      	ldrb	r3, [r7, #21]
 80041ee:	3301      	adds	r3, #1
 80041f0:	757b      	strb	r3, [r7, #21]
 80041f2:	7d7b      	ldrb	r3, [r7, #21]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d9e4      	bls.n	80041c2 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	1e5a      	subs	r2, r3, #1
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	601a      	str	r2, [r3, #0]
        break;
 800420c:	e1f1      	b.n	80045f2 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	7c1b      	ldrb	r3, [r3, #16]
 8004212:	461a      	mov	r2, r3
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <http_send_data_ssi+0x2a0>)
 8004216:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	8992      	ldrh	r2, [r2, #12]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2200      	movs	r2, #0
 800422a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004234:	e1dd      	b.n	80045f2 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	7c1b      	ldrb	r3, [r3, #16]
 8004240:	4619      	mov	r1, r3
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <http_send_data_ssi+0x2a0>)
 8004244:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	8989      	ldrh	r1, [r1, #12]
 800424c:	440b      	add	r3, r1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d106      	bne.n	8004262 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	899b      	ldrh	r3, [r3, #12]
 8004258:	3301      	adds	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	819a      	strh	r2, [r3, #12]
 8004260:	e003      	b.n	800426a <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	1e5a      	subs	r2, r3, #1
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	601a      	str	r2, [r3, #0]
        }
        break;
 800427e:	e1b8      	b.n	80045f2 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	899b      	ldrh	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11e      	bne.n	80042c6 <http_send_data_ssi+0x1ea>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b20      	cmp	r3, #32
 8004290:	d00e      	beq.n	80042b0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004298:	2b09      	cmp	r3, #9
 800429a:	d009      	beq.n	80042b0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b0a      	cmp	r3, #10
 80042a4:	d004      	beq.n	80042b0 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80042ac:	2b0d      	cmp	r3, #13
 80042ae:	d10a      	bne.n	80042c6 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	601a      	str	r2, [r3, #0]
          break;
 80042c4:	e195      	b.n	80045f2 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	7c1b      	ldrb	r3, [r3, #16]
 80042d0:	492a      	ldr	r1, [pc, #168]	; (800437c <http_send_data_ssi+0x2a0>)
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d013      	beq.n	8004306 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d00e      	beq.n	8004306 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	d009      	beq.n	8004306 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80042f8:	2b0a      	cmp	r3, #10
 80042fa:	d004      	beq.n	8004306 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b0d      	cmp	r3, #13
 8004304:	d142      	bne.n	800438c <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	899b      	ldrh	r3, [r3, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 8004316:	e04f      	b.n	80043b8 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2203      	movs	r2, #3
 800431c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	899b      	ldrh	r3, [r3, #12]
 8004324:	2bff      	cmp	r3, #255	; 0xff
 8004326:	d906      	bls.n	8004336 <http_send_data_ssi+0x25a>
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <http_send_data_ssi+0x294>)
 800432a:	f240 523a 	movw	r2, #1338	; 0x53a
 800432e:	4914      	ldr	r1, [pc, #80]	; (8004380 <http_send_data_ssi+0x2a4>)
 8004330:	4811      	ldr	r0, [pc, #68]	; (8004378 <http_send_data_ssi+0x29c>)
 8004332:	f00b ff3d 	bl	80101b0 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	899b      	ldrh	r3, [r3, #12]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	899b      	ldrh	r3, [r3, #12]
 8004344:	461a      	mov	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	2200      	movs	r2, #0
 800434c:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	7c1b      	ldrb	r3, [r3, #16]
 8004358:	4908      	ldr	r1, [pc, #32]	; (800437c <http_send_data_ssi+0x2a0>)
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d10e      	bne.n	8004384 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2201      	movs	r2, #1
 800436a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800436c:	e024      	b.n	80043b8 <http_send_data_ssi+0x2dc>
 800436e:	bf00      	nop
 8004370:	08011718 	.word	0x08011718
 8004374:	08011794 	.word	0x08011794
 8004378:	08011760 	.word	0x08011760
 800437c:	080147cc 	.word	0x080147cc
 8004380:	08011804 	.word	0x08011804
            } else {
              ssi->tag_index = 0;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2200      	movs	r2, #0
 8004388:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800438a:	e015      	b.n	80043b8 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	899b      	ldrh	r3, [r3, #12]
 8004390:	2b07      	cmp	r3, #7
 8004392:	d80d      	bhi.n	80043b0 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	899b      	ldrh	r3, [r3, #12]
 800439c:	1c59      	adds	r1, r3, #1
 800439e:	b288      	uxth	r0, r1
 80043a0:	6939      	ldr	r1, [r7, #16]
 80043a2:	8188      	strh	r0, [r1, #12]
 80043a4:	4619      	mov	r1, r3
 80043a6:	7812      	ldrb	r2, [r2, #0]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	440b      	add	r3, r1
 80043ac:	749a      	strb	r2, [r3, #18]
 80043ae:	e003      	b.n	80043b8 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	1e5a      	subs	r2, r3, #1
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	601a      	str	r2, [r3, #0]

        break;
 80043cc:	e111      	b.n	80045f2 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	899b      	ldrh	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11e      	bne.n	8004414 <http_send_data_ssi+0x338>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d00e      	beq.n	80043fe <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80043e6:	2b09      	cmp	r3, #9
 80043e8:	d009      	beq.n	80043fe <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b0a      	cmp	r3, #10
 80043f2:	d004      	beq.n	80043fe <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80043fa:	2b0d      	cmp	r3, #13
 80043fc:	d10a      	bne.n	8004414 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	601a      	str	r2, [r3, #0]
          break;
 8004412:	e0ee      	b.n	80045f2 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	7c1b      	ldrb	r3, [r3, #16]
 800441e:	499b      	ldr	r1, [pc, #620]	; (800468c <http_send_data_ssi+0x5b0>)
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	440b      	add	r3, r1
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	6939      	ldr	r1, [r7, #16]
 8004428:	8989      	ldrh	r1, [r1, #12]
 800442a:	440b      	add	r3, r1
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d162      	bne.n	80044f8 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	899b      	ldrh	r3, [r3, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	7c1b      	ldrb	r3, [r3, #16]
 8004456:	4a8d      	ldr	r2, [pc, #564]	; (800468c <http_send_data_ssi+0x5b0>)
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	8992      	ldrh	r2, [r2, #12]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f040 80c3 	bne.w	80045f2 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800446c:	6838      	ldr	r0, [r7, #0]
 800446e:	f7ff fd11 	bl	8003e94 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2200      	movs	r2, #0
 8004476:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2204      	movs	r2, #4
 800447c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	429a      	cmp	r2, r3
 8004492:	f240 80ae 	bls.w	80045f2 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044a4:	4293      	cmp	r3, r2
 80044a6:	dc06      	bgt.n	80044b6 <http_send_data_ssi+0x3da>
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	e001      	b.n	80044ba <http_send_data_ssi+0x3de>
 80044b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ba:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6999      	ldr	r1, [r3, #24]
 80044c0:	f107 020e 	add.w	r2, r7, #14
 80044c4:	2300      	movs	r3, #0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fbc0 	bl	8003c4c <http_write>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 80044d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 808c 	bne.w	80045f2 <http_send_data_ssi+0x516>
                data_to_send = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	89fa      	ldrh	r2, [r7, #14]
 80044e4:	441a      	add	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	89fa      	ldrh	r2, [r7, #14]
 80044f0:	1a9a      	subs	r2, r3, r2
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
 80044f6:	e07c      	b.n	80045f2 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8004514:	e06d      	b.n	80045f2 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	429a      	cmp	r2, r3
 8004520:	d935      	bls.n	800458e <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004530:	4293      	cmp	r3, r2
 8004532:	dc06      	bgt.n	8004542 <http_send_data_ssi+0x466>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	e001      	b.n	8004546 <http_send_data_ssi+0x46a>
 8004542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004546:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	f107 020e 	add.w	r2, r7, #14
 8004556:	2300      	movs	r3, #0
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fb77 	bl	8003c4c <http_write>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]
 8004562:	e001      	b.n	8004568 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8004568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d140      	bne.n	80045f2 <http_send_data_ssi+0x516>
            data_to_send = 1;
 8004570:	2301      	movs	r3, #1
 8004572:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	89fa      	ldrh	r2, [r7, #14]
 800457a:	441a      	add	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	89fa      	ldrh	r2, [r7, #14]
 8004586:	1a9a      	subs	r2, r3, r2
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
 800458c:	e031      	b.n	80045f2 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	899a      	ldrh	r2, [r3, #12]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	89db      	ldrh	r3, [r3, #14]
 8004596:	429a      	cmp	r2, r3
 8004598:	d222      	bcs.n	80045e0 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	89da      	ldrh	r2, [r3, #14]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	899b      	ldrh	r3, [r3, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	899b      	ldrh	r3, [r3, #12]
 80045ac:	3318      	adds	r3, #24
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	1cd9      	adds	r1, r3, #3
 80045b4:	f107 020e 	add.w	r2, r7, #14
 80045b8:	2301      	movs	r3, #1
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fb46 	bl	8003c4c <http_write>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80045c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d112      	bne.n	80045f2 <http_send_data_ssi+0x516>
              data_to_send = 1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	899a      	ldrh	r2, [r3, #12]
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	4413      	add	r3, r2
 80045d8:	b29a      	uxth	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	819a      	strh	r2, [r3, #12]
 80045de:	e008      	b.n	80045f2 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2200      	movs	r2, #0
 80045e4:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80045ee:	e000      	b.n	80045f2 <http_send_data_ssi+0x516>
        default:
          break;
 80045f0:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d003      	beq.n	8004604 <http_send_data_ssi+0x528>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <http_send_data_ssi+0x532>
 8004604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f43f adbf 	beq.w	800418c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004614:	2b04      	cmp	r3, #4
 8004616:	d034      	beq.n	8004682 <http_send_data_ssi+0x5a6>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	429a      	cmp	r2, r3
 8004622:	d92e      	bls.n	8004682 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004632:	4293      	cmp	r3, r2
 8004634:	dc06      	bgt.n	8004644 <http_send_data_ssi+0x568>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	e001      	b.n	8004648 <http_send_data_ssi+0x56c>
 8004644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004648:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	f107 020e 	add.w	r2, r7, #14
 8004652:	2300      	movs	r3, #0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff faf9 	bl	8003c4c <http_write>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800465e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	89fa      	ldrh	r2, [r7, #14]
 8004670:	441a      	add	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	89fa      	ldrh	r2, [r7, #14]
 800467c:	1a9a      	subs	r2, r3, r2
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8004682:	7dbb      	ldrb	r3, [r7, #22]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	080147cc 	.word	0x080147cc

08004690 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <http_send+0x18>
    return 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e030      	b.n	800470a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fcac 	bl	8004010 <http_check_eof>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <http_send+0x32>
      return 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	e023      	b.n	800470a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fd05 	bl	80040dc <http_send_data_ssi>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e005      	b.n	80046e4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fcc8 	bl	8004070 <http_send_data_nonssi>
 80046e0:	4603      	mov	r3, r0
 80046e2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10d      	bne.n	8004708 <http_send+0x78>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff fa1d 	bl	8003b30 <fs_bytes_left>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc05      	bgt.n	8004708 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fb5d 	bl	8003dbe <http_eof>
    return 0;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <http_get_404_file+0x80>)
 8004722:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7ff f9b7 	bl	8003aa0 <fs_open>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d024      	beq.n	8004788 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <http_get_404_file+0x84>)
 8004742:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7ff f9a7 	bl	8003aa0 <fs_open>
 8004752:	4603      	mov	r3, r0
 8004754:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8004756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d014      	beq.n	8004788 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	4a0e      	ldr	r2, [pc, #56]	; (800479c <http_get_404_file+0x88>)
 8004762:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7ff f997 	bl	8003aa0 <fs_open>
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
        return NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8004788:	687b      	ldr	r3, [r7, #4]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	0801181c 	.word	0x0801181c
 8004798:	08011828 	.word	0x08011828
 800479c:	08011834 	.word	0x08011834

080047a0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <http_parse_request+0x24>
 80047b6:	4b65      	ldr	r3, [pc, #404]	; (800494c <http_parse_request+0x1ac>)
 80047b8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80047bc:	4964      	ldr	r1, [pc, #400]	; (8004950 <http_parse_request+0x1b0>)
 80047be:	4865      	ldr	r0, [pc, #404]	; (8004954 <http_parse_request+0x1b4>)
 80047c0:	f00b fcf6 	bl	80101b0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <http_parse_request+0x38>
 80047ca:	4b60      	ldr	r3, [pc, #384]	; (800494c <http_parse_request+0x1ac>)
 80047cc:	f240 72af 	movw	r2, #1967	; 0x7af
 80047d0:	4961      	ldr	r1, [pc, #388]	; (8004958 <http_parse_request+0x1b8>)
 80047d2:	4860      	ldr	r0, [pc, #384]	; (8004954 <http_parse_request+0x1b4>)
 80047d4:	f00b fcec 	bl	80101b0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <http_parse_request+0x48>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80047e8:	f06f 0307 	mvn.w	r3, #7
 80047ec:	e0a9      	b.n	8004942 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	621a      	str	r2, [r3, #32]
 80047fc:	e005      	b.n	800480a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004804:	4618      	mov	r0, r3
 8004806:	f002 f8b9 	bl	800697c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800480a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480c:	f002 f894 	bl	8006938 <pbuf_ref>

  if (hs->req->next != NULL) {
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d012      	beq.n	8004840 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004824:	4293      	cmp	r3, r2
 8004826:	bf28      	it	cs
 8004828:	4613      	movcs	r3, r2
 800482a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6a18      	ldr	r0, [r3, #32]
 8004830:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004832:	2300      	movs	r3, #0
 8004834:	4949      	ldr	r1, [pc, #292]	; (800495c <http_parse_request+0x1bc>)
 8004836:	f002 f9d9 	bl	8006bec <pbuf_copy_partial>
    data = httpd_req_buf;
 800483a:	4b48      	ldr	r3, [pc, #288]	; (800495c <http_parse_request+0x1bc>)
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	e005      	b.n	800484c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	895b      	ldrh	r3, [r3, #10]
 800484a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800484c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800484e:	2b06      	cmp	r3, #6
 8004850:	d962      	bls.n	8004918 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004852:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004854:	461a      	mov	r2, r3
 8004856:	4942      	ldr	r1, [pc, #264]	; (8004960 <http_parse_request+0x1c0>)
 8004858:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800485a:	f000 fcdd 	bl	8005218 <lwip_strnstr>
 800485e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d058      	beq.n	8004918 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800486a:	2204      	movs	r2, #4
 800486c:	493d      	ldr	r1, [pc, #244]	; (8004964 <http_parse_request+0x1c4>)
 800486e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004870:	f00b fd23 	bl	80102ba <strncmp>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d116      	bne.n	80048a8 <http_parse_request+0x108>
        sp1 = data + 3;
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	3303      	adds	r3, #3
 800487e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	8b7a      	ldrh	r2, [r7, #26]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <http_parse_request+0x1c8>)
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fcbd 	bl	8005218 <lwip_strnstr>
 800489e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d111      	bne.n	80048ca <http_parse_request+0x12a>
 80048a6:	e006      	b.n	80048b6 <http_parse_request+0x116>
        data[4] = 0;
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	3304      	adds	r3, #4
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80048b0:	f06f 030f 	mvn.w	r3, #15
 80048b4:	e045      	b.n	8004942 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	8b7a      	ldrh	r2, [r7, #26]
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <http_parse_request+0x1c0>)
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fcaa 	bl	8005218 <lwip_strnstr>
 80048c4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01e      	beq.n	8004918 <http_parse_request+0x178>
 80048da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d91a      	bls.n	8004918 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80048e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048e4:	461a      	mov	r2, r3
 80048e6:	4921      	ldr	r1, [pc, #132]	; (800496c <http_parse_request+0x1cc>)
 80048e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048ea:	f000 fc95 	bl	8005218 <lwip_strnstr>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8004900:	8b3b      	ldrh	r3, [r7, #24]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4413      	add	r3, r2
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800490a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490c:	6979      	ldr	r1, [r7, #20]
 800490e:	68b8      	ldr	r0, [r7, #8]
 8004910:	f000 f880 	bl	8004a14 <http_find_file>
 8004914:	4603      	mov	r3, r0
 8004916:	e014      	b.n	8004942 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fff3 	bl	8006908 <pbuf_clen>
 8004922:	4603      	mov	r3, r0
 8004924:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	891b      	ldrh	r3, [r3, #8]
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d205      	bcs.n	800493e <http_parse_request+0x19e>
 8004932:	8a7b      	ldrh	r3, [r7, #18]
 8004934:	2b05      	cmp	r3, #5
 8004936:	d802      	bhi.n	800493e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8004938:	f06f 0304 	mvn.w	r3, #4
 800493c:	e001      	b.n	8004942 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800493e:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3738      	adds	r7, #56	; 0x38
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	08011718 	.word	0x08011718
 8004950:	08011840 	.word	0x08011840
 8004954:	08011760 	.word	0x08011760
 8004958:	08011788 	.word	0x08011788
 800495c:	200000a4 	.word	0x200000a4
 8004960:	0801184c 	.word	0x0801184c
 8004964:	08011850 	.word	0x08011850
 8004968:	08011858 	.word	0x08011858
 800496c:	0801185c 	.word	0x0801185c

08004970 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d040      	beq.n	8004a06 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8004988:	213f      	movs	r1, #63	; 0x3f
 800498a:	6838      	ldr	r0, [r7, #0]
 800498c:	f00b fc88 	bl	80102a0 <strchr>
 8004990:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	613b      	str	r3, [r7, #16]
    ext = uri;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80049a6:	212e      	movs	r1, #46	; 0x2e
 80049a8:	6938      	ldr	r0, [r7, #16]
 80049aa:	f00b fc79 	bl	80102a0 <strchr>
 80049ae:	6138      	str	r0, [r7, #16]
 80049b0:	e009      	b.n	80049c6 <http_uri_is_ssi+0x56>
      ext = sub;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	617b      	str	r3, [r7, #20]
      sub++;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80049bc:	212e      	movs	r1, #46	; 0x2e
 80049be:	6938      	ldr	r0, [r7, #16]
 80049c0:	f00b fc6e 	bl	80102a0 <strchr>
 80049c4:	6138      	str	r0, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f2      	bne.n	80049b2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e010      	b.n	80049f4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80049d2:	4a0f      	ldr	r2, [pc, #60]	; (8004a10 <http_uri_is_ssi+0xa0>)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049da:	4619      	mov	r1, r3
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f000 fc51 	bl	8005284 <lwip_stricmp>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <http_uri_is_ssi+0x7e>
        tag_check = 1;
 80049e8:	2301      	movs	r3, #1
 80049ea:	76fb      	strb	r3, [r7, #27]
        break;
 80049ec:	e005      	b.n	80049fa <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d9eb      	bls.n	80049d2 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <http_uri_is_ssi+0x96>
      *param = '?';
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	223f      	movs	r2, #63	; 0x3f
 8004a04:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8004a06:	7efb      	ldrb	r3, [r7, #27]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	08014790 	.word	0x08014790

08004a14 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b093      	sub	sp, #76	; 0x4c
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fbd7 	bl	80001e4 <strlen>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d072      	beq.n	8004b24 <http_find_file+0x110>
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b2f      	cmp	r3, #47	; 0x2f
 8004a4a:	d16b      	bne.n	8004b24 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a4c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004a4e:	4a80      	ldr	r2, [pc, #512]	; (8004c50 <http_find_file+0x23c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d102      	bne.n	8004a5a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d164      	bne.n	8004b24 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8004a60:	bf28      	it	cs
 8004a62:	233f      	movcs	r3, #63	; 0x3f
 8004a64:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6a3a      	ldr	r2, [r7, #32]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4877      	ldr	r0, [pc, #476]	; (8004c50 <http_find_file+0x23c>)
 8004a74:	f00b fb6c 	bl	8010150 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004a78:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <http_find_file+0x23c>)
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a86:	e04a      	b.n	8004b1e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004a94:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01e      	beq.n	8004ada <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004a9c:	4a6d      	ldr	r2, [pc, #436]	; (8004c54 <http_find_file+0x240>)
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fb9d 	bl	80001e4 <strlen>
 8004aaa:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bf28      	it	cs
 8004ab4:	4613      	movcs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <http_find_file+0x23c>)
 8004abc:	1898      	adds	r0, r3, r2
 8004abe:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <http_find_file+0x240>)
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f00b fb41 	bl	8010150 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <http_find_file+0x23c>)
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004ada:	4b5d      	ldr	r3, [pc, #372]	; (8004c50 <http_find_file+0x23c>)
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ade:	e004      	b.n	8004aea <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004ae0:	4a5c      	ldr	r2, [pc, #368]	; (8004c54 <http_find_file+0x240>)
 8004ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe ffd6 	bl	8003aa0 <fs_open>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <http_find_file+0x104>
        uri = file_name;
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004b08:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <http_find_file+0x240>)
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	791b      	ldrb	r3, [r3, #4]
 8004b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004b16:	e005      	b.n	8004b24 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d9b1      	bls.n	8004a88 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d176      	bne.n	8004c18 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	213f      	movs	r1, #63	; 0x3f
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f00b fbb6 	bl	80102a0 <strchr>
 8004b34:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
      params++;
 8004b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b44:	3301      	adds	r3, #1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004b48:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <http_find_file+0x244>)
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8004b50:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <http_find_file+0x248>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d034      	beq.n	8004bc2 <http_find_file+0x1ae>
 8004b58:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <http_find_file+0x24c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d030      	beq.n	8004bc2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004b60:	2300      	movs	r3, #0
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	e028      	b.n	8004bb8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004b66:	68b8      	ldr	r0, [r7, #8]
 8004b68:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <http_find_file+0x24c>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	f7fb fb2b 	bl	80001d0 <strcmp>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d118      	bne.n	8004bb2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8004b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff f928 	bl	8003dd8 <extract_uri_parameters>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4a33      	ldr	r2, [pc, #204]	; (8004c58 <http_find_file+0x244>)
 8004b8c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <http_find_file+0x24c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	685c      	ldr	r4, [r3, #4]
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <http_find_file+0x244>)
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004baa:	47a0      	blx	r4
 8004bac:	4603      	mov	r3, r0
 8004bae:	60bb      	str	r3, [r7, #8]
          break;
 8004bb0:	e007      	b.n	8004bc2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb8:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <http_find_file+0x248>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	dbd1      	blt.n	8004b66 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe ff69 	bl	8003aa0 <fs_open>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8004bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bde:	e006      	b.n	8004bee <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8004be0:	f107 0308 	add.w	r3, r7, #8
 8004be4:	4619      	mov	r1, r3
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd94 	bl	8004714 <http_get_404_file>
 8004bec:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	7c1b      	ldrb	r3, [r3, #16]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <http_find_file+0x1f4>
        tag_check = 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004c06:	e007      	b.n	8004c18 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c0e:	f7ff feaf 	bl	8004970 <http_uri_is_ssi>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff fd75 	bl	8004714 <http_get_404_file>
 8004c2a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f810 	bl	8004c64 <http_init_file>
 8004c44:	4603      	mov	r3, r0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3744      	adds	r7, #68	; 0x44
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200004a4 	.word	0x200004a4
 8004c54:	080147a4 	.word	0x080147a4
 8004c58:	200004f8 	.word	0x200004f8
 8004c5c:	200004f4 	.word	0x200004f4
 8004c60:	200004f0 	.word	0x200004f0

08004c64 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d07d      	beq.n	8004d74 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <http_init_file+0x2a>
 8004c80:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <http_init_file+0x134>)
 8004c82:	f640 120b 	movw	r2, #2315	; 0x90b
 8004c86:	4945      	ldr	r1, [pc, #276]	; (8004d9c <http_init_file+0x138>)
 8004c88:	4845      	ldr	r0, [pc, #276]	; (8004da0 <http_init_file+0x13c>)
 8004c8a:	f00b fa91 	bl	80101b0 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004c96:	f7fe ff5a 	bl	8003b4e <http_ssi_state_alloc>
 8004c9a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da06      	bge.n	8004cf4 <http_init_file+0x90>
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	; (8004d98 <http_init_file+0x134>)
 8004ce8:	f640 1234 	movw	r2, #2356	; 0x934
 8004cec:	492d      	ldr	r1, [pc, #180]	; (8004da4 <http_init_file+0x140>)
 8004cee:	482c      	ldr	r0, [pc, #176]	; (8004da0 <http_init_file+0x13c>)
 8004cf0:	f00b fa5e 	bl	80101b0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	7c1b      	ldrb	r3, [r3, #16]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <http_init_file+0xbe>
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <http_init_file+0x134>)
 8004d16:	f640 1243 	movw	r2, #2371	; 0x943
 8004d1a:	4923      	ldr	r1, [pc, #140]	; (8004da8 <http_init_file+0x144>)
 8004d1c:	4820      	ldr	r0, [pc, #128]	; (8004da0 <http_init_file+0x13c>)
 8004d1e:	f00b fa47 	bl	80101b0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d032      	beq.n	8004d8e <http_init_file+0x12a>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	7c1b      	ldrb	r3, [r3, #16]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02b      	beq.n	8004d8e <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6998      	ldr	r0, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	461a      	mov	r2, r3
 8004d40:	491a      	ldr	r1, [pc, #104]	; (8004dac <http_init_file+0x148>)
 8004d42:	f000 fa69 	bl	8005218 <lwip_strnstr>
 8004d46:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01f      	beq.n	8004d8e <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1d1a      	adds	r2, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad2      	subs	r2, r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
 8004d72:	e00c      	b.n	8004d8e <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	08011718 	.word	0x08011718
 8004d9c:	08011864 	.word	0x08011864
 8004da0:	08011760 	.word	0x08011760
 8004da4:	08011878 	.word	0x08011878
 8004da8:	08011898 	.word	0x08011898
 8004dac:	0801185c 	.word	0x0801185c

08004db0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <http_err+0x1c>
    http_state_free(hs);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fe ff2e 	bl	8003c28 <http_state_free>
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	4613      	mov	r3, r2
 8004de0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <http_sent+0x1c>
    return ERR_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e008      	b.n	8004e02 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	f7ff fc48 	bl	8004690 <http_send>

  return ERR_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	6838      	ldr	r0, [r7, #0]
 8004e22:	f7fe ffbd 	bl	8003da0 <http_close_conn>
 8004e26:	4603      	mov	r3, r0
 8004e28:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e021      	b.n	8004e72 <http_poll+0x68>
  } else {
    hs->retries++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d105      	bne.n	8004e54 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f7fe ffa8 	bl	8003da0 <http_close_conn>
      return ERR_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e00e      	b.n	8004e72 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6838      	ldr	r0, [r7, #0]
 8004e60:	f7ff fc16 	bl	8004690 <http_send>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	f007 f84a 	bl	800bf04 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <http_recv+0x26>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <http_recv+0x26>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d111      	bne.n	8004ec6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	891b      	ldrh	r3, [r3, #8]
 8004eac:	4619      	mov	r1, r3
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f002 fc14 	bl	80076dc <tcp_recved>
      pbuf_free(p);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 fc9f 	bl	80067f8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004eba:	6979      	ldr	r1, [r7, #20]
 8004ebc:	68b8      	ldr	r0, [r7, #8]
 8004ebe:	f7fe ff6f 	bl	8003da0 <http_close_conn>
    return ERR_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e055      	b.n	8004f72 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	891b      	ldrh	r3, [r3, #8]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68b8      	ldr	r0, [r7, #8]
 8004ece:	f002 fc05 	bl	80076dc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d147      	bne.n	8004f6a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	6979      	ldr	r1, [r7, #20]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fc5e 	bl	80047a0 <http_parse_request>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004ee8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <http_recv+0xa0>
 8004ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ef4:	f113 0f05 	cmn.w	r3, #5
 8004ef8:	d010      	beq.n	8004f1c <http_recv+0xa0>
 8004efa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004efe:	f113 0f10 	cmn.w	r3, #16
 8004f02:	d00b      	beq.n	8004f1c <http_recv+0xa0>
 8004f04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f08:	f113 0f08 	cmn.w	r3, #8
 8004f0c:	d006      	beq.n	8004f1c <http_recv+0xa0>
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <http_recv+0x100>)
 8004f10:	f640 2204 	movw	r2, #2564	; 0xa04
 8004f14:	491a      	ldr	r1, [pc, #104]	; (8004f80 <http_recv+0x104>)
 8004f16:	481b      	ldr	r0, [pc, #108]	; (8004f84 <http_recv+0x108>)
 8004f18:	f00b f94a 	bl	80101b0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004f1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f20:	f113 0f05 	cmn.w	r3, #5
 8004f24:	d00b      	beq.n	8004f3e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <http_recv+0xc2>
          pbuf_free(hs->req);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 fc60 	bl	80067f8 <pbuf_free>
          hs->req = NULL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fc5a 	bl	80067f8 <pbuf_free>
      if (parsed == ERR_OK) {
 8004f44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004f4c:	6979      	ldr	r1, [r7, #20]
 8004f4e:	68b8      	ldr	r0, [r7, #8]
 8004f50:	f7ff fb9e 	bl	8004690 <http_send>
 8004f54:	e00c      	b.n	8004f70 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004f56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004f5a:	f113 0f10 	cmn.w	r3, #16
 8004f5e:	d107      	bne.n	8004f70 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8004f60:	6979      	ldr	r1, [r7, #20]
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f7fe ff1c 	bl	8003da0 <http_close_conn>
 8004f68:	e002      	b.n	8004f70 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fc44 	bl	80067f8 <pbuf_free>
    }
  }
  return ERR_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08011718 	.word	0x08011718
 8004f80:	080118c4 	.word	0x080118c4
 8004f84:	08011760 	.word	0x08011760

08004f88 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <http_accept+0x1c>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <http_accept+0x22>
    return ERR_VAL;
 8004fa4:	f06f 0305 	mvn.w	r3, #5
 8004fa8:	e025      	b.n	8004ff6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004faa:	2101      	movs	r1, #1
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	f003 f879 	bl	80080a4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004fb2:	f7fe fdfb 	bl	8003bac <http_state_alloc>
 8004fb6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc2:	e018      	b.n	8004ff6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f003 fa71 	bl	80084b4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004fd2:	490b      	ldr	r1, [pc, #44]	; (8005000 <http_accept+0x78>)
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f003 fa7f 	bl	80084d8 <tcp_recv>
  altcp_err(pcb, http_err);
 8004fda:	490a      	ldr	r1, [pc, #40]	; (8005004 <http_accept+0x7c>)
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f003 fabf 	bl	8008560 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4908      	ldr	r1, [pc, #32]	; (8005008 <http_accept+0x80>)
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f003 faf4 	bl	80085d4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004fec:	4907      	ldr	r1, [pc, #28]	; (800500c <http_accept+0x84>)
 8004fee:	68b8      	ldr	r0, [r7, #8]
 8004ff0:	f003 fa94 	bl	800851c <tcp_sent>

  return ERR_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	08004e7d 	.word	0x08004e7d
 8005004:	08004db1 	.word	0x08004db1
 8005008:	08004e0b 	.word	0x08004e0b
 800500c:	08004dd5 	.word	0x08004dd5

08005010 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d029      	beq.n	8005076 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005022:	2101      	movs	r1, #1
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f003 f83d 	bl	80080a4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	461a      	mov	r2, r3
 800502e:	4914      	ldr	r1, [pc, #80]	; (8005080 <httpd_init_pcb+0x70>)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f002 f985 	bl	8007340 <tcp_bind>
 8005036:	4603      	mov	r3, r0
 8005038:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800503a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <httpd_init_pcb+0x40>
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <httpd_init_pcb+0x74>)
 8005044:	f640 2257 	movw	r2, #2647	; 0xa57
 8005048:	490f      	ldr	r1, [pc, #60]	; (8005088 <httpd_init_pcb+0x78>)
 800504a:	4810      	ldr	r0, [pc, #64]	; (800508c <httpd_init_pcb+0x7c>)
 800504c:	f00b f8b0 	bl	80101b0 <iprintf>
    pcb = altcp_listen(pcb);
 8005050:	21ff      	movs	r1, #255	; 0xff
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f002 fa2c 	bl	80074b0 <tcp_listen_with_backlog>
 8005058:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <httpd_init_pcb+0x5e>
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <httpd_init_pcb+0x74>)
 8005062:	f640 2259 	movw	r2, #2649	; 0xa59
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <httpd_init_pcb+0x80>)
 8005068:	4808      	ldr	r0, [pc, #32]	; (800508c <httpd_init_pcb+0x7c>)
 800506a:	f00b f8a1 	bl	80101b0 <iprintf>
    altcp_accept(pcb, http_accept);
 800506e:	4909      	ldr	r1, [pc, #36]	; (8005094 <httpd_init_pcb+0x84>)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f003 fa97 	bl	80085a4 <tcp_accept>
  }
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	080148ac 	.word	0x080148ac
 8005084:	08011718 	.word	0x08011718
 8005088:	080118f0 	.word	0x080118f0
 800508c:	08011760 	.word	0x08011760
 8005090:	0801190c 	.word	0x0801190c
 8005094:	08004f89 	.word	0x08004f89

08005098 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800509e:	202e      	movs	r0, #46	; 0x2e
 80050a0:	f003 f9fa 	bl	8008498 <tcp_new_ip_type>
 80050a4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <httpd_init+0x22>
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <httpd_init+0x34>)
 80050ae:	f640 2272 	movw	r2, #2674	; 0xa72
 80050b2:	4907      	ldr	r1, [pc, #28]	; (80050d0 <httpd_init+0x38>)
 80050b4:	4807      	ldr	r0, [pc, #28]	; (80050d4 <httpd_init+0x3c>)
 80050b6:	f00b f87b 	bl	80101b0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80050ba:	2150      	movs	r1, #80	; 0x50
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ffa7 	bl	8005010 <httpd_init_pcb>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	08011718 	.word	0x08011718
 80050d0:	0801192c 	.word	0x0801192c
 80050d4:	08011760 	.word	0x08011760

080050d8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <http_set_ssi_handler+0x20>
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <http_set_ssi_handler+0x64>)
 80050ec:	f640 2297 	movw	r2, #2711	; 0xa97
 80050f0:	4913      	ldr	r1, [pc, #76]	; (8005140 <http_set_ssi_handler+0x68>)
 80050f2:	4814      	ldr	r0, [pc, #80]	; (8005144 <http_set_ssi_handler+0x6c>)
 80050f4:	f00b f85c 	bl	80101b0 <iprintf>
  httpd_ssi_handler = ssi_handler;
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <http_set_ssi_handler+0x70>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <http_set_ssi_handler+0x3a>
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <http_set_ssi_handler+0x64>)
 8005106:	f640 229e 	movw	r2, #2718	; 0xa9e
 800510a:	4910      	ldr	r1, [pc, #64]	; (800514c <http_set_ssi_handler+0x74>)
 800510c:	480d      	ldr	r0, [pc, #52]	; (8005144 <http_set_ssi_handler+0x6c>)
 800510e:	f00b f84f 	bl	80101b0 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	dc06      	bgt.n	8005126 <http_set_ssi_handler+0x4e>
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <http_set_ssi_handler+0x64>)
 800511a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800511e:	490c      	ldr	r1, [pc, #48]	; (8005150 <http_set_ssi_handler+0x78>)
 8005120:	4808      	ldr	r0, [pc, #32]	; (8005144 <http_set_ssi_handler+0x6c>)
 8005122:	f00b f845 	bl	80101b0 <iprintf>

  httpd_tags = tags;
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <http_set_ssi_handler+0x7c>)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <http_set_ssi_handler+0x80>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005132:	bf00      	nop
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	08011718 	.word	0x08011718
 8005140:	08011948 	.word	0x08011948
 8005144:	08011760 	.word	0x08011760
 8005148:	200004e4 	.word	0x200004e4
 800514c:	08011960 	.word	0x08011960
 8005150:	08011970 	.word	0x08011970
 8005154:	200004ec 	.word	0x200004ec
 8005158:	200004e8 	.word	0x200004e8

0800515c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <http_set_cgi_handlers+0x1e>
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <http_set_cgi_handlers+0x48>)
 800516e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8005172:	490d      	ldr	r1, [pc, #52]	; (80051a8 <http_set_cgi_handlers+0x4c>)
 8005174:	480d      	ldr	r0, [pc, #52]	; (80051ac <http_set_cgi_handlers+0x50>)
 8005176:	f00b f81b 	bl	80101b0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	dc06      	bgt.n	800518e <http_set_cgi_handlers+0x32>
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <http_set_cgi_handlers+0x48>)
 8005182:	f640 22b3 	movw	r2, #2739	; 0xab3
 8005186:	490a      	ldr	r1, [pc, #40]	; (80051b0 <http_set_cgi_handlers+0x54>)
 8005188:	4808      	ldr	r0, [pc, #32]	; (80051ac <http_set_cgi_handlers+0x50>)
 800518a:	f00b f811 	bl	80101b0 <iprintf>

  httpd_cgis = cgis;
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <http_set_cgi_handlers+0x58>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <http_set_cgi_handlers+0x5c>)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	08011718 	.word	0x08011718
 80051a8:	08011988 	.word	0x08011988
 80051ac:	08011760 	.word	0x08011760
 80051b0:	08011998 	.word	0x08011998
 80051b4:	200004f0 	.word	0x200004f0
 80051b8:	200004f4 	.word	0x200004f4

080051bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b21a      	sxth	r2, r3
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	b21b      	sxth	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b21b      	sxth	r3, r3
 80051d8:	b29b      	uxth	r3, r3
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	061a      	lsls	r2, r3, #24
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0a1b      	lsrs	r3, r3, #8
 8005200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	4313      	orrs	r3, r2
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f7fa ffdd 	bl	80001e4 <strlen>
 800522a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	e022      	b.n	800527c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e012      	b.n	8005262 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d109      	bne.n	800525c <lwip_strnstr+0x44>
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f00b f834 	bl	80102ba <strncmp>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	e00f      	b.n	800527c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3301      	adds	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <lwip_strnstr+0x62>
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	441a      	add	r2, r3
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	440b      	add	r3, r1
 8005276:	429a      	cmp	r2, r3
 8005278:	d9e0      	bls.n	800523c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	603a      	str	r2, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d016      	beq.n	80052d8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80052b2:	7b7b      	ldrb	r3, [r7, #13]
 80052b4:	2b60      	cmp	r3, #96	; 0x60
 80052b6:	d90c      	bls.n	80052d2 <lwip_stricmp+0x4e>
 80052b8:	7b7b      	ldrb	r3, [r7, #13]
 80052ba:	2b7a      	cmp	r3, #122	; 0x7a
 80052bc:	d809      	bhi.n	80052d2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80052c6:	7b7a      	ldrb	r2, [r7, #13]
 80052c8:	7b3b      	ldrb	r3, [r7, #12]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d003      	beq.n	80052d6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e006      	b.n	80052e0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e004      	b.n	80052e0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80052d6:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1d7      	bne.n	800528e <lwip_stricmp+0xa>
  return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80052f6:	f000 f8d5 	bl	80054a4 <mem_init>
  memp_init();
 80052fa:	f000 fbdb 	bl	8005ab4 <memp_init>
  pbuf_init();
  netif_init();
 80052fe:	f000 fc93 	bl	8005c28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005302:	f007 febf 	bl	800d084 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005306:	f001 fd15 	bl	8006d34 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800530a:	f007 fe31 	bl	800cf70 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <ptr_to_mem+0x20>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	4413      	add	r3, r2
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	200004fc 	.word	0x200004fc

0800533c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <mem_to_ptr+0x20>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	b29b      	uxth	r3, r3
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200004fc 	.word	0x200004fc

08005360 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005368:	4b45      	ldr	r3, [pc, #276]	; (8005480 <plug_holes+0x120>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d206      	bcs.n	8005380 <plug_holes+0x20>
 8005372:	4b44      	ldr	r3, [pc, #272]	; (8005484 <plug_holes+0x124>)
 8005374:	f240 12df 	movw	r2, #479	; 0x1df
 8005378:	4943      	ldr	r1, [pc, #268]	; (8005488 <plug_holes+0x128>)
 800537a:	4844      	ldr	r0, [pc, #272]	; (800548c <plug_holes+0x12c>)
 800537c:	f00a ff18 	bl	80101b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005380:	4b43      	ldr	r3, [pc, #268]	; (8005490 <plug_holes+0x130>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d306      	bcc.n	8005398 <plug_holes+0x38>
 800538a:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <plug_holes+0x124>)
 800538c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005390:	4940      	ldr	r1, [pc, #256]	; (8005494 <plug_holes+0x134>)
 8005392:	483e      	ldr	r0, [pc, #248]	; (800548c <plug_holes+0x12c>)
 8005394:	f00a ff0c 	bl	80101b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <plug_holes+0x4e>
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <plug_holes+0x124>)
 80053a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80053a6:	493c      	ldr	r1, [pc, #240]	; (8005498 <plug_holes+0x138>)
 80053a8:	4838      	ldr	r0, [pc, #224]	; (800548c <plug_holes+0x12c>)
 80053aa:	f00a ff01 	bl	80101b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053b6:	d906      	bls.n	80053c6 <plug_holes+0x66>
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <plug_holes+0x124>)
 80053ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80053be:	4937      	ldr	r1, [pc, #220]	; (800549c <plug_holes+0x13c>)
 80053c0:	4832      	ldr	r0, [pc, #200]	; (800548c <plug_holes+0x12c>)
 80053c2:	f00a fef5 	bl	80101b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ffa4 	bl	8005318 <ptr_to_mem>
 80053d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d024      	beq.n	8005424 <plug_holes+0xc4>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d120      	bne.n	8005424 <plug_holes+0xc4>
 80053e2:	4b2b      	ldr	r3, [pc, #172]	; (8005490 <plug_holes+0x130>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d01b      	beq.n	8005424 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80053ec:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <plug_holes+0x140>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d102      	bne.n	80053fc <plug_holes+0x9c>
      lfree = mem;
 80053f6:	4a2a      	ldr	r2, [pc, #168]	; (80054a0 <plug_holes+0x140>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800540c:	d00a      	beq.n	8005424 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff80 	bl	8005318 <ptr_to_mem>
 8005418:	4604      	mov	r4, r0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff8e 	bl	800533c <mem_to_ptr>
 8005420:	4603      	mov	r3, r0
 8005422:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	885b      	ldrh	r3, [r3, #2]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff75 	bl	8005318 <ptr_to_mem>
 800542e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	429a      	cmp	r2, r3
 8005436:	d01f      	beq.n	8005478 <plug_holes+0x118>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11b      	bne.n	8005478 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <plug_holes+0x140>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d102      	bne.n	8005450 <plug_holes+0xf0>
      lfree = pmem;
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <plug_holes+0x140>)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005460:	d00a      	beq.n	8005478 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ff56 	bl	8005318 <ptr_to_mem>
 800546c:	4604      	mov	r4, r0
 800546e:	68b8      	ldr	r0, [r7, #8]
 8005470:	f7ff ff64 	bl	800533c <mem_to_ptr>
 8005474:	4603      	mov	r3, r0
 8005476:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}
 8005480:	200004fc 	.word	0x200004fc
 8005484:	080119b4 	.word	0x080119b4
 8005488:	080119e4 	.word	0x080119e4
 800548c:	080119fc 	.word	0x080119fc
 8005490:	20000500 	.word	0x20000500
 8005494:	08011a24 	.word	0x08011a24
 8005498:	08011a40 	.word	0x08011a40
 800549c:	08011a5c 	.word	0x08011a5c
 80054a0:	20000504 	.word	0x20000504

080054a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <mem_init+0x68>)
 80054ac:	3303      	adds	r3, #3
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	461a      	mov	r2, r3
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <mem_init+0x6c>)
 80054b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <mem_init+0x6c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80054d2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80054d6:	f7ff ff1f 	bl	8005318 <ptr_to_mem>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a0d      	ldr	r2, [pc, #52]	; (8005514 <mem_init+0x70>)
 80054de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <mem_init+0x70>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <mem_init+0x70>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <mem_init+0x70>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80054fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <mem_init+0x6c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a05      	ldr	r2, [pc, #20]	; (8005518 <mem_init+0x74>)
 8005502:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	200037cc 	.word	0x200037cc
 8005510:	200004fc 	.word	0x200004fc
 8005514:	20000500 	.word	0x20000500
 8005518:	20000504 	.word	0x20000504

0800551c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff09 	bl	800533c <mem_to_ptr>
 800552a:	4603      	mov	r3, r0
 800552c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff fef0 	bl	8005318 <ptr_to_mem>
 8005538:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	885b      	ldrh	r3, [r3, #2]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff feea 	bl	8005318 <ptr_to_mem>
 8005544:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800554e:	d818      	bhi.n	8005582 <mem_link_valid+0x66>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	885b      	ldrh	r3, [r3, #2]
 8005554:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005558:	d813      	bhi.n	8005582 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800555e:	8afa      	ldrh	r2, [r7, #22]
 8005560:	429a      	cmp	r2, r3
 8005562:	d004      	beq.n	800556e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	8afa      	ldrh	r2, [r7, #22]
 800556a:	429a      	cmp	r2, r3
 800556c:	d109      	bne.n	8005582 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <mem_link_valid+0x74>)
 8005570:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	429a      	cmp	r2, r3
 8005576:	d006      	beq.n	8005586 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	885b      	ldrh	r3, [r3, #2]
 800557c:	8afa      	ldrh	r2, [r7, #22]
 800557e:	429a      	cmp	r2, r3
 8005580:	d001      	beq.n	8005586 <mem_link_valid+0x6a>
    return 0;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <mem_link_valid+0x6c>
  }
  return 1;
 8005586:	2301      	movs	r3, #1
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000500 	.word	0x20000500

08005594 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04c      	beq.n	800563c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <mem_free+0xb0>)
 80055ae:	f240 2273 	movw	r2, #627	; 0x273
 80055b2:	4925      	ldr	r1, [pc, #148]	; (8005648 <mem_free+0xb4>)
 80055b4:	4825      	ldr	r0, [pc, #148]	; (800564c <mem_free+0xb8>)
 80055b6:	f00a fdfb 	bl	80101b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055ba:	e040      	b.n	800563e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b08      	subs	r3, #8
 80055c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80055c2:	4b23      	ldr	r3, [pc, #140]	; (8005650 <mem_free+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d306      	bcc.n	80055da <mem_free+0x46>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 020c 	add.w	r2, r3, #12
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <mem_free+0xc0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d907      	bls.n	80055ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80055da:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <mem_free+0xb0>)
 80055dc:	f240 227f 	movw	r2, #639	; 0x27f
 80055e0:	491d      	ldr	r1, [pc, #116]	; (8005658 <mem_free+0xc4>)
 80055e2:	481a      	ldr	r0, [pc, #104]	; (800564c <mem_free+0xb8>)
 80055e4:	f00a fde4 	bl	80101b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80055e8:	e029      	b.n	800563e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d107      	bne.n	8005602 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80055f2:	4b14      	ldr	r3, [pc, #80]	; (8005644 <mem_free+0xb0>)
 80055f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80055f8:	4918      	ldr	r1, [pc, #96]	; (800565c <mem_free+0xc8>)
 80055fa:	4814      	ldr	r0, [pc, #80]	; (800564c <mem_free+0xb8>)
 80055fc:	f00a fdd8 	bl	80101b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005600:	e01d      	b.n	800563e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff ff8a 	bl	800551c <mem_link_valid>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d107      	bne.n	800561e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <mem_free+0xb0>)
 8005610:	f240 2295 	movw	r2, #661	; 0x295
 8005614:	4912      	ldr	r1, [pc, #72]	; (8005660 <mem_free+0xcc>)
 8005616:	480d      	ldr	r0, [pc, #52]	; (800564c <mem_free+0xb8>)
 8005618:	f00a fdca 	bl	80101b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800561c:	e00f      	b.n	800563e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <mem_free+0xd0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	429a      	cmp	r2, r3
 800562c:	d202      	bcs.n	8005634 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <mem_free+0xd0>)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff fe93 	bl	8005360 <plug_holes>
 800563a:	e000      	b.n	800563e <mem_free+0xaa>
    return;
 800563c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	080119b4 	.word	0x080119b4
 8005648:	08011a88 	.word	0x08011a88
 800564c:	080119fc 	.word	0x080119fc
 8005650:	200004fc 	.word	0x200004fc
 8005654:	20000500 	.word	0x20000500
 8005658:	08011aac 	.word	0x08011aac
 800565c:	08011ac8 	.word	0x08011ac8
 8005660:	08011af0 	.word	0x08011af0
 8005664:	20000504 	.word	0x20000504

08005668 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005674:	887b      	ldrh	r3, [r7, #2]
 8005676:	3303      	adds	r3, #3
 8005678:	b29b      	uxth	r3, r3
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005680:	8bfb      	ldrh	r3, [r7, #30]
 8005682:	2b0b      	cmp	r3, #11
 8005684:	d801      	bhi.n	800568a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005686:	230c      	movs	r3, #12
 8005688:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800568a:	8bfb      	ldrh	r3, [r7, #30]
 800568c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005690:	d803      	bhi.n	800569a <mem_trim+0x32>
 8005692:	8bfa      	ldrh	r2, [r7, #30]
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	429a      	cmp	r2, r3
 8005698:	d201      	bcs.n	800569e <mem_trim+0x36>
    return NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	e0cc      	b.n	8005838 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800569e:	4b68      	ldr	r3, [pc, #416]	; (8005840 <mem_trim+0x1d8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d304      	bcc.n	80056b2 <mem_trim+0x4a>
 80056a8:	4b66      	ldr	r3, [pc, #408]	; (8005844 <mem_trim+0x1dc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d306      	bcc.n	80056c0 <mem_trim+0x58>
 80056b2:	4b65      	ldr	r3, [pc, #404]	; (8005848 <mem_trim+0x1e0>)
 80056b4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80056b8:	4964      	ldr	r1, [pc, #400]	; (800584c <mem_trim+0x1e4>)
 80056ba:	4865      	ldr	r0, [pc, #404]	; (8005850 <mem_trim+0x1e8>)
 80056bc:	f00a fd78 	bl	80101b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80056c0:	4b5f      	ldr	r3, [pc, #380]	; (8005840 <mem_trim+0x1d8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d304      	bcc.n	80056d4 <mem_trim+0x6c>
 80056ca:	4b5e      	ldr	r3, [pc, #376]	; (8005844 <mem_trim+0x1dc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d301      	bcc.n	80056d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	e0af      	b.n	8005838 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3b08      	subs	r3, #8
 80056dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80056de:	69b8      	ldr	r0, [r7, #24]
 80056e0:	f7ff fe2c 	bl	800533c <mem_to_ptr>
 80056e4:	4603      	mov	r3, r0
 80056e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	8afb      	ldrh	r3, [r7, #22]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b08      	subs	r3, #8
 80056f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80056f6:	8bfa      	ldrh	r2, [r7, #30]
 80056f8:	8abb      	ldrh	r3, [r7, #20]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d906      	bls.n	800570c <mem_trim+0xa4>
 80056fe:	4b52      	ldr	r3, [pc, #328]	; (8005848 <mem_trim+0x1e0>)
 8005700:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005704:	4953      	ldr	r1, [pc, #332]	; (8005854 <mem_trim+0x1ec>)
 8005706:	4852      	ldr	r0, [pc, #328]	; (8005850 <mem_trim+0x1e8>)
 8005708:	f00a fd52 	bl	80101b0 <iprintf>
  if (newsize > size) {
 800570c:	8bfa      	ldrh	r2, [r7, #30]
 800570e:	8abb      	ldrh	r3, [r7, #20]
 8005710:	429a      	cmp	r2, r3
 8005712:	d901      	bls.n	8005718 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	e08f      	b.n	8005838 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005718:	8bfa      	ldrh	r2, [r7, #30]
 800571a:	8abb      	ldrh	r3, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	d101      	bne.n	8005724 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	e089      	b.n	8005838 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fdf5 	bl	8005318 <ptr_to_mem>
 800572e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	791b      	ldrb	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d13f      	bne.n	80057b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005740:	d106      	bne.n	8005750 <mem_trim+0xe8>
 8005742:	4b41      	ldr	r3, [pc, #260]	; (8005848 <mem_trim+0x1e0>)
 8005744:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005748:	4943      	ldr	r1, [pc, #268]	; (8005858 <mem_trim+0x1f0>)
 800574a:	4841      	ldr	r0, [pc, #260]	; (8005850 <mem_trim+0x1e8>)
 800574c:	f00a fd30 	bl	80101b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005756:	8afa      	ldrh	r2, [r7, #22]
 8005758:	8bfb      	ldrh	r3, [r7, #30]
 800575a:	4413      	add	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	3308      	adds	r3, #8
 8005760:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005762:	4b3e      	ldr	r3, [pc, #248]	; (800585c <mem_trim+0x1f4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d106      	bne.n	800577a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fdd2 	bl	8005318 <ptr_to_mem>
 8005774:	4603      	mov	r3, r0
 8005776:	4a39      	ldr	r2, [pc, #228]	; (800585c <mem_trim+0x1f4>)
 8005778:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fdcb 	bl	8005318 <ptr_to_mem>
 8005782:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2200      	movs	r2, #0
 8005788:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	89ba      	ldrh	r2, [r7, #12]
 800578e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	8afa      	ldrh	r2, [r7, #22]
 8005794:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	89fa      	ldrh	r2, [r7, #14]
 800579a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057a4:	d047      	beq.n	8005836 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fdb4 	bl	8005318 <ptr_to_mem>
 80057b0:	4602      	mov	r2, r0
 80057b2:	89fb      	ldrh	r3, [r7, #14]
 80057b4:	8053      	strh	r3, [r2, #2]
 80057b6:	e03e      	b.n	8005836 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80057b8:	8bfb      	ldrh	r3, [r7, #30]
 80057ba:	f103 0214 	add.w	r2, r3, #20
 80057be:	8abb      	ldrh	r3, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d838      	bhi.n	8005836 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80057c4:	8afa      	ldrh	r2, [r7, #22]
 80057c6:	8bfb      	ldrh	r3, [r7, #30]
 80057c8:	4413      	add	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3308      	adds	r3, #8
 80057ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057d8:	d106      	bne.n	80057e8 <mem_trim+0x180>
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <mem_trim+0x1e0>)
 80057dc:	f240 3216 	movw	r2, #790	; 0x316
 80057e0:	491d      	ldr	r1, [pc, #116]	; (8005858 <mem_trim+0x1f0>)
 80057e2:	481b      	ldr	r0, [pc, #108]	; (8005850 <mem_trim+0x1e8>)
 80057e4:	f00a fce4 	bl	80101b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80057e8:	89fb      	ldrh	r3, [r7, #14]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fd94 	bl	8005318 <ptr_to_mem>
 80057f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <mem_trim+0x1f4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d202      	bcs.n	8005802 <mem_trim+0x19a>
      lfree = mem2;
 80057fc:	4a17      	ldr	r2, [pc, #92]	; (800585c <mem_trim+0x1f4>)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2200      	movs	r2, #0
 8005806:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	8afa      	ldrh	r2, [r7, #22]
 8005814:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	89fa      	ldrh	r2, [r7, #14]
 800581a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005824:	d007      	beq.n	8005836 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fd74 	bl	8005318 <ptr_to_mem>
 8005830:	4602      	mov	r2, r0
 8005832:	89fb      	ldrh	r3, [r7, #14]
 8005834:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005836:	687b      	ldr	r3, [r7, #4]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200004fc 	.word	0x200004fc
 8005844:	20000500 	.word	0x20000500
 8005848:	080119b4 	.word	0x080119b4
 800584c:	08011b24 	.word	0x08011b24
 8005850:	080119fc 	.word	0x080119fc
 8005854:	08011b3c 	.word	0x08011b3c
 8005858:	08011b5c 	.word	0x08011b5c
 800585c:	20000504 	.word	0x20000504

08005860 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <mem_malloc+0x14>
    return NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	e0d9      	b.n	8005a28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	3303      	adds	r3, #3
 8005878:	b29b      	uxth	r3, r3
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005880:	8bbb      	ldrh	r3, [r7, #28]
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d801      	bhi.n	800588a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005886:	230c      	movs	r3, #12
 8005888:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800588a:	8bbb      	ldrh	r3, [r7, #28]
 800588c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005890:	d803      	bhi.n	800589a <mem_malloc+0x3a>
 8005892:	8bba      	ldrh	r2, [r7, #28]
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	429a      	cmp	r2, r3
 8005898:	d201      	bcs.n	800589e <mem_malloc+0x3e>
    return NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	e0c4      	b.n	8005a28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800589e:	4b64      	ldr	r3, [pc, #400]	; (8005a30 <mem_malloc+0x1d0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fd4a 	bl	800533c <mem_to_ptr>
 80058a8:	4603      	mov	r3, r0
 80058aa:	83fb      	strh	r3, [r7, #30]
 80058ac:	e0b4      	b.n	8005a18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80058ae:	8bfb      	ldrh	r3, [r7, #30]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fd31 	bl	8005318 <ptr_to_mem>
 80058b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 80a4 	bne.w	8005a0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	8bfb      	ldrh	r3, [r7, #30]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f1a3 0208 	sub.w	r2, r3, #8
 80058d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80058d2:	429a      	cmp	r2, r3
 80058d4:	f0c0 8099 	bcc.w	8005a0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	8bfb      	ldrh	r3, [r7, #30]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f1a3 0208 	sub.w	r2, r3, #8
 80058e6:	8bbb      	ldrh	r3, [r7, #28]
 80058e8:	3314      	adds	r3, #20
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d333      	bcc.n	8005956 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80058ee:	8bfa      	ldrh	r2, [r7, #30]
 80058f0:	8bbb      	ldrh	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3308      	adds	r3, #8
 80058f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80058fa:	8a7b      	ldrh	r3, [r7, #18]
 80058fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005900:	d106      	bne.n	8005910 <mem_malloc+0xb0>
 8005902:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <mem_malloc+0x1d4>)
 8005904:	f240 3287 	movw	r2, #903	; 0x387
 8005908:	494b      	ldr	r1, [pc, #300]	; (8005a38 <mem_malloc+0x1d8>)
 800590a:	484c      	ldr	r0, [pc, #304]	; (8005a3c <mem_malloc+0x1dc>)
 800590c:	f00a fc50 	bl	80101b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005910:	8a7b      	ldrh	r3, [r7, #18]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fd00 	bl	8005318 <ptr_to_mem>
 8005918:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	881a      	ldrh	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8bfa      	ldrh	r2, [r7, #30]
 800592c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	8a7a      	ldrh	r2, [r7, #18]
 8005932:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2201      	movs	r2, #1
 8005938:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005942:	d00b      	beq.n	800595c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fce5 	bl	8005318 <ptr_to_mem>
 800594e:	4602      	mov	r2, r0
 8005950:	8a7b      	ldrh	r3, [r7, #18]
 8005952:	8053      	strh	r3, [r2, #2]
 8005954:	e002      	b.n	800595c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2201      	movs	r2, #1
 800595a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <mem_malloc+0x1d0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	429a      	cmp	r2, r3
 8005964:	d127      	bne.n	80059b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005966:	4b32      	ldr	r3, [pc, #200]	; (8005a30 <mem_malloc+0x1d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800596c:	e005      	b.n	800597a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fcd0 	bl	8005318 <ptr_to_mem>
 8005978:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	791b      	ldrb	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <mem_malloc+0x12c>
 8005982:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <mem_malloc+0x1e0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d1f0      	bne.n	800596e <mem_malloc+0x10e>
          }
          lfree = cur;
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <mem_malloc+0x1d0>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005992:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <mem_malloc+0x1d0>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <mem_malloc+0x1e0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d00b      	beq.n	80059b6 <mem_malloc+0x156>
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <mem_malloc+0x1d0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	791b      	ldrb	r3, [r3, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <mem_malloc+0x156>
 80059a8:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <mem_malloc+0x1d4>)
 80059aa:	f240 32b5 	movw	r2, #949	; 0x3b5
 80059ae:	4925      	ldr	r1, [pc, #148]	; (8005a44 <mem_malloc+0x1e4>)
 80059b0:	4822      	ldr	r0, [pc, #136]	; (8005a3c <mem_malloc+0x1dc>)
 80059b2:	f00a fbfd 	bl	80101b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80059b6:	8bba      	ldrh	r2, [r7, #28]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	3308      	adds	r3, #8
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <mem_malloc+0x1e0>)
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d906      	bls.n	80059d4 <mem_malloc+0x174>
 80059c6:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <mem_malloc+0x1d4>)
 80059c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80059cc:	491e      	ldr	r1, [pc, #120]	; (8005a48 <mem_malloc+0x1e8>)
 80059ce:	481b      	ldr	r0, [pc, #108]	; (8005a3c <mem_malloc+0x1dc>)
 80059d0:	f00a fbee 	bl	80101b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <mem_malloc+0x18c>
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <mem_malloc+0x1d4>)
 80059e0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80059e4:	4919      	ldr	r1, [pc, #100]	; (8005a4c <mem_malloc+0x1ec>)
 80059e6:	4815      	ldr	r0, [pc, #84]	; (8005a3c <mem_malloc+0x1dc>)
 80059e8:	f00a fbe2 	bl	80101b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <mem_malloc+0x1a4>
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <mem_malloc+0x1d4>)
 80059f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80059fc:	4914      	ldr	r1, [pc, #80]	; (8005a50 <mem_malloc+0x1f0>)
 80059fe:	480f      	ldr	r0, [pc, #60]	; (8005a3c <mem_malloc+0x1dc>)
 8005a00:	f00a fbd6 	bl	80101b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3308      	adds	r3, #8
 8005a08:	e00e      	b.n	8005a28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005a0a:	8bfb      	ldrh	r3, [r7, #30]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fc83 	bl	8005318 <ptr_to_mem>
 8005a12:	4603      	mov	r3, r0
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a18:	8bfa      	ldrh	r2, [r7, #30]
 8005a1a:	8bbb      	ldrh	r3, [r7, #28]
 8005a1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f4ff af44 	bcc.w	80058ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000504 	.word	0x20000504
 8005a34:	080119b4 	.word	0x080119b4
 8005a38:	08011b5c 	.word	0x08011b5c
 8005a3c:	080119fc 	.word	0x080119fc
 8005a40:	20000500 	.word	0x20000500
 8005a44:	08011b70 	.word	0x08011b70
 8005a48:	08011b8c 	.word	0x08011b8c
 8005a4c:	08011bbc 	.word	0x08011bbc
 8005a50:	08011bec 	.word	0x08011bec

08005a54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	3303      	adds	r3, #3
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e011      	b.n	8005a9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4413      	add	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	dbe7      	blt.n	8005a76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005aba:	2300      	movs	r3, #0
 8005abc:	80fb      	strh	r3, [r7, #6]
 8005abe:	e009      	b.n	8005ad4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <memp_init+0x30>)
 8005ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ffc3 	bl	8005a54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	80fb      	strh	r3, [r7, #6]
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d9f2      	bls.n	8005ac0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005ada:	bf00      	nop
 8005adc:	bf00      	nop
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08014848 	.word	0x08014848

08005ae8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d012      	beq.n	8005b24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d006      	beq.n	8005b20 <do_memp_malloc_pool+0x38>
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <do_memp_malloc_pool+0x48>)
 8005b14:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005b18:	4906      	ldr	r1, [pc, #24]	; (8005b34 <do_memp_malloc_pool+0x4c>)
 8005b1a:	4807      	ldr	r0, [pc, #28]	; (8005b38 <do_memp_malloc_pool+0x50>)
 8005b1c:	f00a fb48 	bl	80101b0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	e000      	b.n	8005b26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	08011c10 	.word	0x08011c10
 8005b34:	08011c40 	.word	0x08011c40
 8005b38:	08011c64 	.word	0x08011c64

08005b3c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d908      	bls.n	8005b5e <memp_malloc+0x22>
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <memp_malloc+0x3c>)
 8005b4e:	f240 1257 	movw	r2, #343	; 0x157
 8005b52:	490a      	ldr	r1, [pc, #40]	; (8005b7c <memp_malloc+0x40>)
 8005b54:	480a      	ldr	r0, [pc, #40]	; (8005b80 <memp_malloc+0x44>)
 8005b56:	f00a fb2b 	bl	80101b0 <iprintf>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e008      	b.n	8005b70 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <memp_malloc+0x48>)
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff ffbe 	bl	8005ae8 <do_memp_malloc_pool>
 8005b6c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	08011c10 	.word	0x08011c10
 8005b7c:	08011ca0 	.word	0x08011ca0
 8005b80:	08011c64 	.word	0x08011c64
 8005b84:	08014848 	.word	0x08014848

08005b88 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d006      	beq.n	8005baa <do_memp_free_pool+0x22>
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <do_memp_free_pool+0x40>)
 8005b9e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005ba2:	490a      	ldr	r1, [pc, #40]	; (8005bcc <do_memp_free_pool+0x44>)
 8005ba4:	480a      	ldr	r0, [pc, #40]	; (8005bd0 <do_memp_free_pool+0x48>)
 8005ba6:	f00a fb03 	bl	80101b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	08011c10 	.word	0x08011c10
 8005bcc:	08011cc0 	.word	0x08011cc0
 8005bd0:	08011c64 	.word	0x08011c64

08005bd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	6039      	str	r1, [r7, #0]
 8005bde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d907      	bls.n	8005bf6 <memp_free+0x22>
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <memp_free+0x44>)
 8005be8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005bec:	490b      	ldr	r1, [pc, #44]	; (8005c1c <memp_free+0x48>)
 8005bee:	480c      	ldr	r0, [pc, #48]	; (8005c20 <memp_free+0x4c>)
 8005bf0:	f00a fade 	bl	80101b0 <iprintf>
 8005bf4:	e00c      	b.n	8005c10 <memp_free+0x3c>

  if (mem == NULL) {
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <memp_free+0x50>)
 8005c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ffbe 	bl	8005b88 <do_memp_free_pool>
 8005c0c:	e000      	b.n	8005c10 <memp_free+0x3c>
    return;
 8005c0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	08011c10 	.word	0x08011c10
 8005c1c:	08011ce0 	.word	0x08011ce0
 8005c20:	08011c64 	.word	0x08011c64
 8005c24:	08014848 	.word	0x08014848

08005c28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <netif_add+0x26>
 8005c4c:	4b57      	ldr	r3, [pc, #348]	; (8005dac <netif_add+0x174>)
 8005c4e:	f240 1227 	movw	r2, #295	; 0x127
 8005c52:	4957      	ldr	r1, [pc, #348]	; (8005db0 <netif_add+0x178>)
 8005c54:	4857      	ldr	r0, [pc, #348]	; (8005db4 <netif_add+0x17c>)
 8005c56:	f00a faab 	bl	80101b0 <iprintf>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e0a2      	b.n	8005da4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d108      	bne.n	8005c76 <netif_add+0x3e>
 8005c64:	4b51      	ldr	r3, [pc, #324]	; (8005dac <netif_add+0x174>)
 8005c66:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005c6a:	4953      	ldr	r1, [pc, #332]	; (8005db8 <netif_add+0x180>)
 8005c6c:	4851      	ldr	r0, [pc, #324]	; (8005db4 <netif_add+0x17c>)
 8005c6e:	f00a fa9f 	bl	80101b0 <iprintf>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e096      	b.n	8005da4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005c7c:	4b4f      	ldr	r3, [pc, #316]	; (8005dbc <netif_add+0x184>)
 8005c7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005c86:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <netif_add+0x184>)
 8005c88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005c90:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <netif_add+0x184>)
 8005c92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a45      	ldr	r2, [pc, #276]	; (8005dc0 <netif_add+0x188>)
 8005caa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a3a      	ldr	r2, [r7, #32]
 8005cc4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005cc6:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <netif_add+0x18c>)
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f913 	bl	8005f08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	4798      	blx	r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <netif_add+0xba>
    return NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e058      	b.n	8005da4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cf8:	2bff      	cmp	r3, #255	; 0xff
 8005cfa:	d103      	bne.n	8005d04 <netif_add+0xcc>
        netif->num = 0;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d08:	4b2f      	ldr	r3, [pc, #188]	; (8005dc8 <netif_add+0x190>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e02b      	b.n	8005d68 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d106      	bne.n	8005d26 <netif_add+0xee>
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <netif_add+0x174>)
 8005d1a:	f240 128b 	movw	r2, #395	; 0x18b
 8005d1e:	492b      	ldr	r1, [pc, #172]	; (8005dcc <netif_add+0x194>)
 8005d20:	4824      	ldr	r0, [pc, #144]	; (8005db4 <netif_add+0x17c>)
 8005d22:	f00a fa45 	bl	80101b0 <iprintf>
        num_netifs++;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2bff      	cmp	r3, #255	; 0xff
 8005d30:	dd06      	ble.n	8005d40 <netif_add+0x108>
 8005d32:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <netif_add+0x174>)
 8005d34:	f240 128d 	movw	r2, #397	; 0x18d
 8005d38:	4925      	ldr	r1, [pc, #148]	; (8005dd0 <netif_add+0x198>)
 8005d3a:	481e      	ldr	r0, [pc, #120]	; (8005db4 <netif_add+0x17c>)
 8005d3c:	f00a fa38 	bl	80101b0 <iprintf>
        if (netif2->num == netif->num) {
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d108      	bne.n	8005d62 <netif_add+0x12a>
          netif->num++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005d60:	e005      	b.n	8005d6e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1d0      	bne.n	8005d10 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1be      	bne.n	8005cf2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8005d7c:	d103      	bne.n	8005d86 <netif_add+0x14e>
    netif_num = 0;
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <netif_add+0x18c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e006      	b.n	8005d94 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <netif_add+0x18c>)
 8005d92:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <netif_add+0x190>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <netif_add+0x190>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	08011cfc 	.word	0x08011cfc
 8005db0:	08011d90 	.word	0x08011d90
 8005db4:	08011d4c 	.word	0x08011d4c
 8005db8:	08011dac 	.word	0x08011dac
 8005dbc:	080148ac 	.word	0x080148ac
 8005dc0:	0800611b 	.word	0x0800611b
 8005dc4:	2000052c 	.word	0x2000052c
 8005dc8:	20006ce8 	.word	0x20006ce8
 8005dcc:	08011dd0 	.word	0x08011dd0
 8005dd0:	08011de4 	.word	0x08011de4

08005dd4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f002 fd9d 	bl	8008920 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f007 fe8f 	bl	800db0c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <netif_do_set_ipaddr+0x20>
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <netif_do_set_ipaddr+0x88>)
 8005e0c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005e10:	491c      	ldr	r1, [pc, #112]	; (8005e84 <netif_do_set_ipaddr+0x8c>)
 8005e12:	481d      	ldr	r0, [pc, #116]	; (8005e88 <netif_do_set_ipaddr+0x90>)
 8005e14:	f00a f9cc 	bl	80101b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <netif_do_set_ipaddr+0x34>
 8005e1e:	4b18      	ldr	r3, [pc, #96]	; (8005e80 <netif_do_set_ipaddr+0x88>)
 8005e20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005e24:	4917      	ldr	r1, [pc, #92]	; (8005e84 <netif_do_set_ipaddr+0x8c>)
 8005e26:	4818      	ldr	r0, [pc, #96]	; (8005e88 <netif_do_set_ipaddr+0x90>)
 8005e28:	f00a f9c2 	bl	80101b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3304      	adds	r3, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d01c      	beq.n	8005e74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3304      	adds	r3, #4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e4a:	f107 0314 	add.w	r3, r7, #20
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ffbf 	bl	8005dd4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <netif_do_set_ipaddr+0x6a>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	e000      	b.n	8005e64 <netif_do_set_ipaddr+0x6c>
 8005e62:	2300      	movs	r3, #0
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005e68:	2101      	movs	r1, #1
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f8d2 	bl	8006014 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	08011cfc 	.word	0x08011cfc
 8005e84:	08011e14 	.word	0x08011e14
 8005e88:	08011d4c 	.word	0x08011d4c

08005e8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d00a      	beq.n	8005ebc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <netif_do_set_netmask+0x26>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	e000      	b.n	8005eb4 <netif_do_set_netmask+0x28>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	330c      	adds	r3, #12
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d00a      	beq.n	8005efa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <netif_do_set_gw+0x26>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	e000      	b.n	8005ef2 <netif_do_set_gw+0x28>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <netif_set_addr+0x90>)
 8005f26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <netif_set_addr+0x90>)
 8005f30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <netif_set_addr+0x90>)
 8005f3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <netif_set_addr+0x42>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <netif_set_addr+0x46>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <netif_set_addr+0x48>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f58:	f107 0310 	add.w	r3, r7, #16
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff49 	bl	8005df8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ff8e 	bl	8005e8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff ffa8 	bl	8005eca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	461a      	mov	r2, r3
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ff35 	bl	8005df8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005f8e:	bf00      	nop
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	080148ac 	.word	0x080148ac

08005f9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005fa4:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <netif_set_default+0x1c>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20006cec 	.word	0x20006cec

08005fbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <netif_set_up+0x1e>
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <netif_set_up+0x4c>)
 8005fcc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005fd0:	490e      	ldr	r1, [pc, #56]	; (800600c <netif_set_up+0x50>)
 8005fd2:	480f      	ldr	r0, [pc, #60]	; (8006010 <netif_set_up+0x54>)
 8005fd4:	f00a f8ec 	bl	80101b0 <iprintf>
 8005fd8:	e013      	b.n	8006002 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10c      	bne.n	8006002 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f809 	bl	8006014 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	08011cfc 	.word	0x08011cfc
 800600c:	08011e84 	.word	0x08011e84
 8006010:	08011d4c 	.word	0x08011d4c

08006014 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <netif_issue_reports+0x20>
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <netif_issue_reports+0x74>)
 8006028:	f240 326d 	movw	r2, #877	; 0x36d
 800602c:	4917      	ldr	r1, [pc, #92]	; (800608c <netif_issue_reports+0x78>)
 800602e:	4818      	ldr	r0, [pc, #96]	; (8006090 <netif_issue_reports+0x7c>)
 8006030:	f00a f8be 	bl	80101b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01e      	beq.n	8006080 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006048:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800604c:	2b00      	cmp	r3, #0
 800604e:	d017      	beq.n	8006080 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f008 fcb1 	bl	800e9e0 <etharp_request>
 800607e:	e000      	b.n	8006082 <netif_issue_reports+0x6e>
    return;
 8006080:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	08011cfc 	.word	0x08011cfc
 800608c:	08011ea0 	.word	0x08011ea0
 8006090:	08011d4c 	.word	0x08011d4c

08006094 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <netif_set_down+0x1e>
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <netif_set_down+0x58>)
 80060a4:	f240 329b 	movw	r2, #923	; 0x39b
 80060a8:	4911      	ldr	r1, [pc, #68]	; (80060f0 <netif_set_down+0x5c>)
 80060aa:	4812      	ldr	r0, [pc, #72]	; (80060f4 <netif_set_down+0x60>)
 80060ac:	f00a f880 	bl	80101b0 <iprintf>
 80060b0:	e019      	b.n	80060e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d012      	beq.n	80060e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f008 f83b 	bl	800e15c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08011cfc 	.word	0x08011cfc
 80060f0:	08011ec4 	.word	0x08011ec4
 80060f4:	08011d4c 	.word	0x08011d4c

080060f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	61da      	str	r2, [r3, #28]
  }
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006126:	f06f 030b 	mvn.w	r3, #11
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d013      	beq.n	8006170 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <netif_get_by_index+0x48>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e00c      	b.n	800616a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006156:	3301      	adds	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	79fa      	ldrb	r2, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d101      	bne.n	8006164 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	e006      	b.n	8006172 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ef      	bne.n	8006150 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20006ce8 	.word	0x20006ce8

08006184 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <pbuf_free_ooseq+0x38>)
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <pbuf_free_ooseq+0x3c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	e00a      	b.n	80061ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f002 fbfb 	bl	800899c <tcp_free_ooseq>
      return;
 80061a6:	e005      	b.n	80061b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f1      	bne.n	8006198 <pbuf_free_ooseq+0x14>
    }
  }
}
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20006cf0 	.word	0x20006cf0
 80061c0:	20006cf8 	.word	0x20006cf8

080061c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061c8:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <pbuf_pool_is_empty+0x14>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80061ce:	bf00      	nop
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20006cf0 	.word	0x20006cf0

080061dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4611      	mov	r1, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	460b      	mov	r3, r1
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	88fa      	ldrh	r2, [r7, #6]
 8006202:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	88ba      	ldrh	r2, [r7, #4]
 8006208:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800620a:	8b3b      	ldrh	r3, [r7, #24]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	7f3a      	ldrb	r2, [r7, #28]
 8006216:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	73da      	strb	r2, [r3, #15]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af02      	add	r7, sp, #8
 8006236:	4603      	mov	r3, r0
 8006238:	71fb      	strb	r3, [r7, #7]
 800623a:	460b      	mov	r3, r1
 800623c:	80bb      	strh	r3, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800624c:	d07f      	beq.n	800634e <pbuf_alloc+0x11e>
 800624e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006252:	f300 80c8 	bgt.w	80063e6 <pbuf_alloc+0x1b6>
 8006256:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800625a:	d010      	beq.n	800627e <pbuf_alloc+0x4e>
 800625c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006260:	f300 80c1 	bgt.w	80063e6 <pbuf_alloc+0x1b6>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d002      	beq.n	800626e <pbuf_alloc+0x3e>
 8006268:	2b41      	cmp	r3, #65	; 0x41
 800626a:	f040 80bc 	bne.w	80063e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	88bb      	ldrh	r3, [r7, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	2000      	movs	r0, #0
 8006276:	f000 f8d1 	bl	800641c <pbuf_alloc_reference>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800627c:	e0bd      	b.n	80063fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006286:	88bb      	ldrh	r3, [r7, #4]
 8006288:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800628a:	2008      	movs	r0, #8
 800628c:	f7ff fc56 	bl	8005b3c <memp_malloc>
 8006290:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006298:	f7ff ff94 	bl	80061c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80062a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062a4:	f000 faa8 	bl	80067f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e0a7      	b.n	80063fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80062ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062ae:	3303      	adds	r3, #3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8b7a      	ldrh	r2, [r7, #26]
 80062c0:	4293      	cmp	r3, r2
 80062c2:	bf28      	it	cs
 80062c4:	4613      	movcs	r3, r2
 80062c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80062c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062ca:	3310      	adds	r3, #16
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	3303      	adds	r3, #3
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	4618      	mov	r0, r3
 80062d8:	89f9      	ldrh	r1, [r7, #14]
 80062da:	8b7a      	ldrh	r2, [r7, #26]
 80062dc:	2300      	movs	r3, #0
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	460b      	mov	r3, r1
 80062e6:	4601      	mov	r1, r0
 80062e8:	6938      	ldr	r0, [r7, #16]
 80062ea:	f7ff ff77 	bl	80061dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <pbuf_alloc+0xd8>
 80062fa:	4b42      	ldr	r3, [pc, #264]	; (8006404 <pbuf_alloc+0x1d4>)
 80062fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006300:	4941      	ldr	r1, [pc, #260]	; (8006408 <pbuf_alloc+0x1d8>)
 8006302:	4842      	ldr	r0, [pc, #264]	; (800640c <pbuf_alloc+0x1dc>)
 8006304:	f009 ff54 	bl	80101b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800630a:	3303      	adds	r3, #3
 800630c:	f023 0303 	bic.w	r3, r3, #3
 8006310:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006314:	d106      	bne.n	8006324 <pbuf_alloc+0xf4>
 8006316:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <pbuf_alloc+0x1d4>)
 8006318:	f44f 7281 	mov.w	r2, #258	; 0x102
 800631c:	493c      	ldr	r1, [pc, #240]	; (8006410 <pbuf_alloc+0x1e0>)
 800631e:	483b      	ldr	r0, [pc, #236]	; (800640c <pbuf_alloc+0x1dc>)
 8006320:	f009 ff46 	bl	80101b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
 800632e:	e002      	b.n	8006336 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800633a:	8b7a      	ldrh	r2, [r7, #26]
 800633c:	89fb      	ldrh	r3, [r7, #14]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006346:	8b7b      	ldrh	r3, [r7, #26]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d19e      	bne.n	800628a <pbuf_alloc+0x5a>
      break;
 800634c:	e055      	b.n	80063fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800634e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006350:	3303      	adds	r3, #3
 8006352:	b29b      	uxth	r3, r3
 8006354:	f023 0303 	bic.w	r3, r3, #3
 8006358:	b29a      	uxth	r2, r3
 800635a:	88bb      	ldrh	r3, [r7, #4]
 800635c:	3303      	adds	r3, #3
 800635e:	b29b      	uxth	r3, r3
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	b29b      	uxth	r3, r3
 8006366:	4413      	add	r3, r2
 8006368:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800636a:	8b3b      	ldrh	r3, [r7, #24]
 800636c:	3310      	adds	r3, #16
 800636e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006370:	8b3a      	ldrh	r2, [r7, #24]
 8006372:	88bb      	ldrh	r3, [r7, #4]
 8006374:	3303      	adds	r3, #3
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	429a      	cmp	r2, r3
 800637c:	d306      	bcc.n	800638c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800637e:	8afa      	ldrh	r2, [r7, #22]
 8006380:	88bb      	ldrh	r3, [r7, #4]
 8006382:	3303      	adds	r3, #3
 8006384:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006388:	429a      	cmp	r2, r3
 800638a:	d201      	bcs.n	8006390 <pbuf_alloc+0x160>
        return NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	e035      	b.n	80063fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006390:	8afb      	ldrh	r3, [r7, #22]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fa64 	bl	8005860 <mem_malloc>
 8006398:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <pbuf_alloc+0x174>
        return NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e02b      	b.n	80063fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063a6:	3310      	adds	r3, #16
 80063a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063aa:	4413      	add	r3, r2
 80063ac:	3303      	adds	r3, #3
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	4618      	mov	r0, r3
 80063b4:	88b9      	ldrh	r1, [r7, #4]
 80063b6:	88ba      	ldrh	r2, [r7, #4]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	460b      	mov	r3, r1
 80063c2:	4601      	mov	r1, r0
 80063c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063c6:	f7ff ff09 	bl	80061dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <pbuf_alloc+0x1c8>
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <pbuf_alloc+0x1d4>)
 80063d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80063dc:	490d      	ldr	r1, [pc, #52]	; (8006414 <pbuf_alloc+0x1e4>)
 80063de:	480b      	ldr	r0, [pc, #44]	; (800640c <pbuf_alloc+0x1dc>)
 80063e0:	f009 fee6 	bl	80101b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80063e4:	e008      	b.n	80063f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <pbuf_alloc+0x1d4>)
 80063e8:	f240 1227 	movw	r2, #295	; 0x127
 80063ec:	490a      	ldr	r1, [pc, #40]	; (8006418 <pbuf_alloc+0x1e8>)
 80063ee:	4807      	ldr	r0, [pc, #28]	; (800640c <pbuf_alloc+0x1dc>)
 80063f0:	f009 fede 	bl	80101b0 <iprintf>
      return NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e001      	b.n	80063fc <pbuf_alloc+0x1cc>
      break;
 80063f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3728      	adds	r7, #40	; 0x28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	08011f2c 	.word	0x08011f2c
 8006408:	08011f5c 	.word	0x08011f5c
 800640c:	08011f8c 	.word	0x08011f8c
 8006410:	08011fb4 	.word	0x08011fb4
 8006414:	08011fe8 	.word	0x08011fe8
 8006418:	08012014 	.word	0x08012014

0800641c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
 8006428:	4613      	mov	r3, r2
 800642a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800642c:	883b      	ldrh	r3, [r7, #0]
 800642e:	2b41      	cmp	r3, #65	; 0x41
 8006430:	d009      	beq.n	8006446 <pbuf_alloc_reference+0x2a>
 8006432:	883b      	ldrh	r3, [r7, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d006      	beq.n	8006446 <pbuf_alloc_reference+0x2a>
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <pbuf_alloc_reference+0x5c>)
 800643a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800643e:	490f      	ldr	r1, [pc, #60]	; (800647c <pbuf_alloc_reference+0x60>)
 8006440:	480f      	ldr	r0, [pc, #60]	; (8006480 <pbuf_alloc_reference+0x64>)
 8006442:	f009 feb5 	bl	80101b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006446:	2007      	movs	r0, #7
 8006448:	f7ff fb78 	bl	8005b3c <memp_malloc>
 800644c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	e00b      	b.n	8006470 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006458:	8879      	ldrh	r1, [r7, #2]
 800645a:	887a      	ldrh	r2, [r7, #2]
 800645c:	2300      	movs	r3, #0
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	883b      	ldrh	r3, [r7, #0]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	460b      	mov	r3, r1
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff feb7 	bl	80061dc <pbuf_init_alloced_pbuf>
  return p;
 800646e:	68fb      	ldr	r3, [r7, #12]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08011f2c 	.word	0x08011f2c
 800647c:	08012030 	.word	0x08012030
 8006480:	08011f8c 	.word	0x08011f8c

08006484 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	460b      	mov	r3, r1
 8006492:	81bb      	strh	r3, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800649c:	8a7b      	ldrh	r3, [r7, #18]
 800649e:	3303      	adds	r3, #3
 80064a0:	f023 0203 	bic.w	r2, r3, #3
 80064a4:	89bb      	ldrh	r3, [r7, #12]
 80064a6:	441a      	add	r2, r3
 80064a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d901      	bls.n	80064b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e018      	b.n	80064e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064b8:	8a7b      	ldrh	r3, [r7, #18]
 80064ba:	3303      	adds	r3, #3
 80064bc:	f023 0303 	bic.w	r3, r3, #3
 80064c0:	6a3a      	ldr	r2, [r7, #32]
 80064c2:	4413      	add	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e001      	b.n	80064cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	89b9      	ldrh	r1, [r7, #12]
 80064d0:	89ba      	ldrh	r2, [r7, #12]
 80064d2:	2302      	movs	r3, #2
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	460b      	mov	r3, r1
 80064dc:	6979      	ldr	r1, [r7, #20]
 80064de:	f7ff fe7d 	bl	80061dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80064e2:	687b      	ldr	r3, [r7, #4]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <pbuf_realloc+0x20>
 80064fe:	4b3a      	ldr	r3, [pc, #232]	; (80065e8 <pbuf_realloc+0xfc>)
 8006500:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006504:	4939      	ldr	r1, [pc, #228]	; (80065ec <pbuf_realloc+0x100>)
 8006506:	483a      	ldr	r0, [pc, #232]	; (80065f0 <pbuf_realloc+0x104>)
 8006508:	f009 fe52 	bl	80101b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	891b      	ldrh	r3, [r3, #8]
 8006510:	887a      	ldrh	r2, [r7, #2]
 8006512:	429a      	cmp	r2, r3
 8006514:	d263      	bcs.n	80065de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	891a      	ldrh	r2, [r3, #8]
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	817b      	strh	r3, [r7, #10]
  q = p;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006528:	e018      	b.n	800655c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	895b      	ldrh	r3, [r3, #10]
 800652e:	897a      	ldrh	r2, [r7, #10]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	891a      	ldrh	r2, [r3, #8]
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <pbuf_realloc+0x70>
 800654e:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <pbuf_realloc+0xfc>)
 8006550:	f240 12af 	movw	r2, #431	; 0x1af
 8006554:	4927      	ldr	r1, [pc, #156]	; (80065f4 <pbuf_realloc+0x108>)
 8006556:	4826      	ldr	r0, [pc, #152]	; (80065f0 <pbuf_realloc+0x104>)
 8006558:	f009 fe2a 	bl	80101b0 <iprintf>
  while (rem_len > q->len) {
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	895b      	ldrh	r3, [r3, #10]
 8006560:	897a      	ldrh	r2, [r7, #10]
 8006562:	429a      	cmp	r2, r3
 8006564:	d8e1      	bhi.n	800652a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	7b1b      	ldrb	r3, [r3, #12]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	2b00      	cmp	r3, #0
 8006570:	d121      	bne.n	80065b6 <pbuf_realloc+0xca>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	895b      	ldrh	r3, [r3, #10]
 8006576:	897a      	ldrh	r2, [r7, #10]
 8006578:	429a      	cmp	r2, r3
 800657a:	d01c      	beq.n	80065b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	7b5b      	ldrb	r3, [r3, #13]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d116      	bne.n	80065b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	b29a      	uxth	r2, r3
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	4413      	add	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff f864 	bl	8005668 <mem_trim>
 80065a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <pbuf_realloc+0xca>
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <pbuf_realloc+0xfc>)
 80065aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80065ae:	4912      	ldr	r1, [pc, #72]	; (80065f8 <pbuf_realloc+0x10c>)
 80065b0:	480f      	ldr	r0, [pc, #60]	; (80065f0 <pbuf_realloc+0x104>)
 80065b2:	f009 fdfd 	bl	80101b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	897a      	ldrh	r2, [r7, #10]
 80065ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	895a      	ldrh	r2, [r3, #10]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f911 	bl	80067f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e000      	b.n	80065e0 <pbuf_realloc+0xf4>
    return;
 80065de:	bf00      	nop

}
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	08011f2c 	.word	0x08011f2c
 80065ec:	08012044 	.word	0x08012044
 80065f0:	08011f8c 	.word	0x08011f8c
 80065f4:	0801205c 	.word	0x0801205c
 80065f8:	08012074 	.word	0x08012074

080065fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <pbuf_add_header_impl+0x22>
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <pbuf_add_header_impl+0xc4>)
 8006612:	f240 12df 	movw	r2, #479	; 0x1df
 8006616:	492b      	ldr	r1, [pc, #172]	; (80066c4 <pbuf_add_header_impl+0xc8>)
 8006618:	482b      	ldr	r0, [pc, #172]	; (80066c8 <pbuf_add_header_impl+0xcc>)
 800661a:	f009 fdc9 	bl	80101b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <pbuf_add_header_impl+0x30>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662a:	d301      	bcc.n	8006630 <pbuf_add_header_impl+0x34>
    return 1;
 800662c:	2301      	movs	r3, #1
 800662e:	e043      	b.n	80066b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <pbuf_add_header_impl+0x3e>
    return 0;
 8006636:	2300      	movs	r3, #0
 8006638:	e03e      	b.n	80066b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	891a      	ldrh	r2, [r3, #8]
 8006642:	8a7b      	ldrh	r3, [r7, #18]
 8006644:	4413      	add	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	8a7a      	ldrh	r2, [r7, #18]
 800664a:	429a      	cmp	r2, r3
 800664c:	d901      	bls.n	8006652 <pbuf_add_header_impl+0x56>
    return 1;
 800664e:	2301      	movs	r3, #1
 8006650:	e032      	b.n	80066b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	7b1b      	ldrb	r3, [r3, #12]
 8006656:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006658:	8a3b      	ldrh	r3, [r7, #16]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00c      	beq.n	800667c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	425b      	negs	r3, r3
 800666a:	4413      	add	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3310      	adds	r3, #16
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	429a      	cmp	r2, r3
 8006676:	d20d      	bcs.n	8006694 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006678:	2301      	movs	r3, #1
 800667a:	e01d      	b.n	80066b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	425b      	negs	r3, r3
 800668a:	4413      	add	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e001      	b.n	8006694 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006690:	2301      	movs	r3, #1
 8006692:	e011      	b.n	80066b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	895a      	ldrh	r2, [r3, #10]
 800669e:	8a7b      	ldrh	r3, [r7, #18]
 80066a0:	4413      	add	r3, r2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	891a      	ldrh	r2, [r3, #8]
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	4413      	add	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	08011f2c 	.word	0x08011f2c
 80066c4:	08012090 	.word	0x08012090
 80066c8:	08011f8c 	.word	0x08011f8c

080066cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80066d6:	2200      	movs	r2, #0
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff ff8e 	bl	80065fc <pbuf_add_header_impl>
 80066e0:	4603      	mov	r3, r0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <pbuf_remove_header+0x1e>
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <pbuf_remove_header+0x94>)
 80066fe:	f240 224b 	movw	r2, #587	; 0x24b
 8006702:	4920      	ldr	r1, [pc, #128]	; (8006784 <pbuf_remove_header+0x98>)
 8006704:	4820      	ldr	r0, [pc, #128]	; (8006788 <pbuf_remove_header+0x9c>)
 8006706:	f009 fd53 	bl	80101b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <pbuf_remove_header+0x2c>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d301      	bcc.n	800671c <pbuf_remove_header+0x30>
    return 1;
 8006718:	2301      	movs	r3, #1
 800671a:	e02c      	b.n	8006776 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <pbuf_remove_header+0x3a>
    return 0;
 8006722:	2300      	movs	r3, #0
 8006724:	e027      	b.n	8006776 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	895b      	ldrh	r3, [r3, #10]
 800672e:	89fa      	ldrh	r2, [r7, #14]
 8006730:	429a      	cmp	r2, r3
 8006732:	d908      	bls.n	8006746 <pbuf_remove_header+0x5a>
 8006734:	4b12      	ldr	r3, [pc, #72]	; (8006780 <pbuf_remove_header+0x94>)
 8006736:	f240 2255 	movw	r2, #597	; 0x255
 800673a:	4914      	ldr	r1, [pc, #80]	; (800678c <pbuf_remove_header+0xa0>)
 800673c:	4812      	ldr	r0, [pc, #72]	; (8006788 <pbuf_remove_header+0x9c>)
 800673e:	f009 fd37 	bl	80101b0 <iprintf>
 8006742:	2301      	movs	r3, #1
 8006744:	e017      	b.n	8006776 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	895a      	ldrh	r2, [r3, #10]
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	891a      	ldrh	r2, [r3, #8]
 800676a:	89fb      	ldrh	r3, [r7, #14]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b29a      	uxth	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	08011f2c 	.word	0x08011f2c
 8006784:	08012090 	.word	0x08012090
 8006788:	08011f8c 	.word	0x08011f8c
 800678c:	0801209c 	.word	0x0801209c

08006790 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
 800679c:	4613      	mov	r3, r2
 800679e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da08      	bge.n	80067ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067ac:	425b      	negs	r3, r3
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff9b 	bl	80066ec <pbuf_remove_header>
 80067b6:	4603      	mov	r3, r0
 80067b8:	e007      	b.n	80067ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80067ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067be:	787a      	ldrb	r2, [r7, #1]
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff ff1a 	bl	80065fc <pbuf_add_header_impl>
 80067c8:	4603      	mov	r3, r0
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80067de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067e2:	2201      	movs	r2, #1
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ffd2 	bl	8006790 <pbuf_header_impl>
 80067ec:	4603      	mov	r3, r0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <pbuf_free+0x22>
 800680c:	4b38      	ldr	r3, [pc, #224]	; (80068f0 <pbuf_free+0xf8>)
 800680e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006812:	4938      	ldr	r1, [pc, #224]	; (80068f4 <pbuf_free+0xfc>)
 8006814:	4838      	ldr	r0, [pc, #224]	; (80068f8 <pbuf_free+0x100>)
 8006816:	f009 fccb 	bl	80101b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800681a:	2300      	movs	r3, #0
 800681c:	e063      	b.n	80068e6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006822:	e05c      	b.n	80068de <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7b9b      	ldrb	r3, [r3, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <pbuf_free+0x42>
 800682c:	4b30      	ldr	r3, [pc, #192]	; (80068f0 <pbuf_free+0xf8>)
 800682e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006832:	4932      	ldr	r1, [pc, #200]	; (80068fc <pbuf_free+0x104>)
 8006834:	4830      	ldr	r0, [pc, #192]	; (80068f8 <pbuf_free+0x100>)
 8006836:	f009 fcbb 	bl	80101b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7b9b      	ldrb	r3, [r3, #14]
 800683e:	3b01      	subs	r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	739a      	strb	r2, [r3, #14]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7b9b      	ldrb	r3, [r3, #14]
 800684a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800684c:	7dbb      	ldrb	r3, [r7, #22]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d143      	bne.n	80068da <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7b1b      	ldrb	r3, [r3, #12]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	7b5b      	ldrb	r3, [r3, #13]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <pbuf_free+0x90>
 800687a:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <pbuf_free+0xf8>)
 800687c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006880:	491f      	ldr	r1, [pc, #124]	; (8006900 <pbuf_free+0x108>)
 8006882:	481d      	ldr	r0, [pc, #116]	; (80068f8 <pbuf_free+0x100>)
 8006884:	f009 fc94 	bl	80101b0 <iprintf>
        pc->custom_free_function(p);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	e01d      	b.n	80068ce <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d104      	bne.n	80068a2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	2008      	movs	r0, #8
 800689c:	f7ff f99a 	bl	8005bd4 <memp_free>
 80068a0:	e015      	b.n	80068ce <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d104      	bne.n	80068b2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	2007      	movs	r0, #7
 80068ac:	f7ff f992 	bl	8005bd4 <memp_free>
 80068b0:	e00d      	b.n	80068ce <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <pbuf_free+0xc8>
          mem_free(p);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fe fe6b 	bl	8005594 <mem_free>
 80068be:	e006      	b.n	80068ce <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <pbuf_free+0xf8>)
 80068c2:	f240 320f 	movw	r2, #783	; 0x30f
 80068c6:	490f      	ldr	r1, [pc, #60]	; (8006904 <pbuf_free+0x10c>)
 80068c8:	480b      	ldr	r0, [pc, #44]	; (80068f8 <pbuf_free+0x100>)
 80068ca:	f009 fc71 	bl	80101b0 <iprintf>
        }
      }
      count++;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	3301      	adds	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	607b      	str	r3, [r7, #4]
 80068d8:	e001      	b.n	80068de <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d19f      	bne.n	8006824 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	08011f2c 	.word	0x08011f2c
 80068f4:	08012090 	.word	0x08012090
 80068f8:	08011f8c 	.word	0x08011f8c
 80068fc:	080120bc 	.word	0x080120bc
 8006900:	080120d4 	.word	0x080120d4
 8006904:	080120f8 	.word	0x080120f8

08006908 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006914:	e005      	b.n	8006922 <pbuf_clen+0x1a>
    ++len;
 8006916:	89fb      	ldrh	r3, [r7, #14]
 8006918:	3301      	adds	r3, #1
 800691a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f6      	bne.n	8006916 <pbuf_clen+0xe>
  }
  return len;
 8006928:	89fb      	ldrh	r3, [r7, #14]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d010      	beq.n	8006968 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	7b9b      	ldrb	r3, [r3, #14]
 800694a:	3301      	adds	r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7b9b      	ldrb	r3, [r3, #14]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <pbuf_ref+0x30>
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <pbuf_ref+0x38>)
 800695c:	f240 3242 	movw	r2, #834	; 0x342
 8006960:	4904      	ldr	r1, [pc, #16]	; (8006974 <pbuf_ref+0x3c>)
 8006962:	4805      	ldr	r0, [pc, #20]	; (8006978 <pbuf_ref+0x40>)
 8006964:	f009 fc24 	bl	80101b0 <iprintf>
  }
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	08011f2c 	.word	0x08011f2c
 8006974:	0801210c 	.word	0x0801210c
 8006978:	08011f8c 	.word	0x08011f8c

0800697c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <pbuf_cat+0x16>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <pbuf_cat+0x26>
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <pbuf_cat+0x98>)
 8006994:	f240 3259 	movw	r2, #857	; 0x359
 8006998:	491f      	ldr	r1, [pc, #124]	; (8006a18 <pbuf_cat+0x9c>)
 800699a:	4820      	ldr	r0, [pc, #128]	; (8006a1c <pbuf_cat+0xa0>)
 800699c:	f009 fc08 	bl	80101b0 <iprintf>
 80069a0:	e034      	b.n	8006a0c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	e00a      	b.n	80069be <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	891a      	ldrh	r2, [r3, #8]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	891b      	ldrh	r3, [r3, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	891a      	ldrh	r2, [r3, #8]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	895b      	ldrh	r3, [r3, #10]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d006      	beq.n	80069e0 <pbuf_cat+0x64>
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <pbuf_cat+0x98>)
 80069d4:	f240 3262 	movw	r2, #866	; 0x362
 80069d8:	4911      	ldr	r1, [pc, #68]	; (8006a20 <pbuf_cat+0xa4>)
 80069da:	4810      	ldr	r0, [pc, #64]	; (8006a1c <pbuf_cat+0xa0>)
 80069dc:	f009 fbe8 	bl	80101b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <pbuf_cat+0x7a>
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <pbuf_cat+0x98>)
 80069ea:	f240 3263 	movw	r2, #867	; 0x363
 80069ee:	490d      	ldr	r1, [pc, #52]	; (8006a24 <pbuf_cat+0xa8>)
 80069f0:	480a      	ldr	r0, [pc, #40]	; (8006a1c <pbuf_cat+0xa0>)
 80069f2:	f009 fbdd 	bl	80101b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	891a      	ldrh	r2, [r3, #8]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	891b      	ldrh	r3, [r3, #8]
 80069fe:	4413      	add	r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	08011f2c 	.word	0x08011f2c
 8006a18:	08012120 	.word	0x08012120
 8006a1c:	08011f8c 	.word	0x08011f8c
 8006a20:	08012158 	.word	0x08012158
 8006a24:	08012188 	.word	0x08012188

08006a28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ffa1 	bl	800697c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006a3a:	6838      	ldr	r0, [r7, #0]
 8006a3c:	f7ff ff7c 	bl	8006938 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	2300      	movs	r3, #0
 8006a58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <pbuf_copy+0x2a>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <pbuf_copy+0x2a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	891a      	ldrh	r2, [r3, #8]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	891b      	ldrh	r3, [r3, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d209      	bcs.n	8006a86 <pbuf_copy+0x3e>
 8006a72:	4b57      	ldr	r3, [pc, #348]	; (8006bd0 <pbuf_copy+0x188>)
 8006a74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006a78:	4956      	ldr	r1, [pc, #344]	; (8006bd4 <pbuf_copy+0x18c>)
 8006a7a:	4857      	ldr	r0, [pc, #348]	; (8006bd8 <pbuf_copy+0x190>)
 8006a7c:	f009 fb98 	bl	80101b0 <iprintf>
 8006a80:	f06f 030f 	mvn.w	r3, #15
 8006a84:	e09f      	b.n	8006bc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	895b      	ldrh	r3, [r3, #10]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	895b      	ldrh	r3, [r3, #10]
 8006a94:	4619      	mov	r1, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1acb      	subs	r3, r1, r3
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d306      	bcc.n	8006aac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	895b      	ldrh	r3, [r3, #10]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	e005      	b.n	8006ab8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	895b      	ldrh	r3, [r3, #10]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	18d0      	adds	r0, r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4619      	mov	r1, r3
 8006acc:	f009 fb40 	bl	8010150 <memcpy>
    offset_to += len;
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	895b      	ldrh	r3, [r3, #10]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d906      	bls.n	8006afa <pbuf_copy+0xb2>
 8006aec:	4b38      	ldr	r3, [pc, #224]	; (8006bd0 <pbuf_copy+0x188>)
 8006aee:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006af2:	493a      	ldr	r1, [pc, #232]	; (8006bdc <pbuf_copy+0x194>)
 8006af4:	4838      	ldr	r0, [pc, #224]	; (8006bd8 <pbuf_copy+0x190>)
 8006af6:	f009 fb5b 	bl	80101b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	895b      	ldrh	r3, [r3, #10]
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d906      	bls.n	8006b14 <pbuf_copy+0xcc>
 8006b06:	4b32      	ldr	r3, [pc, #200]	; (8006bd0 <pbuf_copy+0x188>)
 8006b08:	f240 32da 	movw	r2, #986	; 0x3da
 8006b0c:	4934      	ldr	r1, [pc, #208]	; (8006be0 <pbuf_copy+0x198>)
 8006b0e:	4832      	ldr	r0, [pc, #200]	; (8006bd8 <pbuf_copy+0x190>)
 8006b10:	f009 fb4e 	bl	80101b0 <iprintf>
    if (offset_from >= p_from->len) {
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d304      	bcc.n	8006b2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	895b      	ldrh	r3, [r3, #10]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d114      	bne.n	8006b60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10c      	bne.n	8006b60 <pbuf_copy+0x118>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <pbuf_copy+0x118>
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <pbuf_copy+0x188>)
 8006b4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b52:	4924      	ldr	r1, [pc, #144]	; (8006be4 <pbuf_copy+0x19c>)
 8006b54:	4820      	ldr	r0, [pc, #128]	; (8006bd8 <pbuf_copy+0x190>)
 8006b56:	f009 fb2b 	bl	80101b0 <iprintf>
 8006b5a:	f06f 030f 	mvn.w	r3, #15
 8006b5e:	e032      	b.n	8006bc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <pbuf_copy+0x146>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	895a      	ldrh	r2, [r3, #10]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	891b      	ldrh	r3, [r3, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d10d      	bne.n	8006b8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <pbuf_copy+0x146>
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <pbuf_copy+0x188>)
 8006b7c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006b80:	4919      	ldr	r1, [pc, #100]	; (8006be8 <pbuf_copy+0x1a0>)
 8006b82:	4815      	ldr	r0, [pc, #84]	; (8006bd8 <pbuf_copy+0x190>)
 8006b84:	f009 fb14 	bl	80101b0 <iprintf>
 8006b88:	f06f 0305 	mvn.w	r3, #5
 8006b8c:	e01b      	b.n	8006bc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <pbuf_copy+0x174>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	895a      	ldrh	r2, [r3, #10]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	891b      	ldrh	r3, [r3, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d10d      	bne.n	8006bbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <pbuf_copy+0x174>
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <pbuf_copy+0x188>)
 8006baa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006bae:	490e      	ldr	r1, [pc, #56]	; (8006be8 <pbuf_copy+0x1a0>)
 8006bb0:	4809      	ldr	r0, [pc, #36]	; (8006bd8 <pbuf_copy+0x190>)
 8006bb2:	f009 fafd 	bl	80101b0 <iprintf>
 8006bb6:	f06f 0305 	mvn.w	r3, #5
 8006bba:	e004      	b.n	8006bc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f af61 	bne.w	8006a86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08011f2c 	.word	0x08011f2c
 8006bd4:	080121d4 	.word	0x080121d4
 8006bd8:	08011f8c 	.word	0x08011f8c
 8006bdc:	08012204 	.word	0x08012204
 8006be0:	0801221c 	.word	0x0801221c
 8006be4:	08012238 	.word	0x08012238
 8006be8:	08012248 	.word	0x08012248

08006bec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	80fb      	strh	r3, [r7, #6]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d108      	bne.n	8006c22 <pbuf_copy_partial+0x36>
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <pbuf_copy_partial+0xd4>)
 8006c12:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c16:	492b      	ldr	r1, [pc, #172]	; (8006cc4 <pbuf_copy_partial+0xd8>)
 8006c18:	482b      	ldr	r0, [pc, #172]	; (8006cc8 <pbuf_copy_partial+0xdc>)
 8006c1a:	f009 fac9 	bl	80101b0 <iprintf>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e04a      	b.n	8006cb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d108      	bne.n	8006c3a <pbuf_copy_partial+0x4e>
 8006c28:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <pbuf_copy_partial+0xd4>)
 8006c2a:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c2e:	4927      	ldr	r1, [pc, #156]	; (8006ccc <pbuf_copy_partial+0xe0>)
 8006c30:	4825      	ldr	r0, [pc, #148]	; (8006cc8 <pbuf_copy_partial+0xdc>)
 8006c32:	f009 fabd 	bl	80101b0 <iprintf>
 8006c36:	2300      	movs	r3, #0
 8006c38:	e03e      	b.n	8006cb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e034      	b.n	8006caa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c40:	88bb      	ldrh	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <pbuf_copy_partial+0x70>
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	895b      	ldrh	r3, [r3, #10]
 8006c4a:	88ba      	ldrh	r2, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d305      	bcc.n	8006c5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	895b      	ldrh	r3, [r3, #10]
 8006c54:	88ba      	ldrh	r2, [r7, #4]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	80bb      	strh	r3, [r7, #4]
 8006c5a:	e023      	b.n	8006ca4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	895a      	ldrh	r2, [r3, #10]
 8006c60:	88bb      	ldrh	r3, [r7, #4]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c66:	8b3a      	ldrh	r2, [r7, #24]
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d901      	bls.n	8006c72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c72:	8b7b      	ldrh	r3, [r7, #26]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	18d0      	adds	r0, r2, r3
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	88bb      	ldrh	r3, [r7, #4]
 8006c7e:	4413      	add	r3, r2
 8006c80:	8b3a      	ldrh	r2, [r7, #24]
 8006c82:	4619      	mov	r1, r3
 8006c84:	f009 fa64 	bl	8010150 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006c88:	8afa      	ldrh	r2, [r7, #22]
 8006c8a:	8b3b      	ldrh	r3, [r7, #24]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006c90:	8b7a      	ldrh	r2, [r7, #26]
 8006c92:	8b3b      	ldrh	r3, [r7, #24]
 8006c94:	4413      	add	r3, r2
 8006c96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	8b3b      	ldrh	r3, [r7, #24]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <pbuf_copy_partial+0xca>
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1c4      	bne.n	8006c40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006cb6:	8afb      	ldrh	r3, [r7, #22]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	08011f2c 	.word	0x08011f2c
 8006cc4:	08012274 	.word	0x08012274
 8006cc8:	08011f8c 	.word	0x08011f8c
 8006ccc:	08012294 	.word	0x08012294

08006cd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	603a      	str	r2, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	8919      	ldrh	r1, [r3, #8]
 8006ce4:	88ba      	ldrh	r2, [r7, #4]
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff faa1 	bl	8006230 <pbuf_alloc>
 8006cee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <pbuf_clone+0x2a>
    return NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e011      	b.n	8006d1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fea3 	bl	8006a48 <pbuf_copy>
 8006d02:	4603      	mov	r3, r0
 8006d04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <pbuf_clone+0x4c>
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <pbuf_clone+0x58>)
 8006d10:	f240 5224 	movw	r2, #1316	; 0x524
 8006d14:	4905      	ldr	r1, [pc, #20]	; (8006d2c <pbuf_clone+0x5c>)
 8006d16:	4806      	ldr	r0, [pc, #24]	; (8006d30 <pbuf_clone+0x60>)
 8006d18:	f009 fa4a 	bl	80101b0 <iprintf>
  return q;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	08011f2c 	.word	0x08011f2c
 8006d2c:	080123a0 	.word	0x080123a0
 8006d30:	08011f8c 	.word	0x08011f8c

08006d34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d38:	f009 fa52 	bl	80101e0 <rand>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	4b01      	ldr	r3, [pc, #4]	; (8006d54 <tcp_init+0x20>)
 8006d4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d50:	bf00      	nop
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000012 	.word	0x20000012

08006d58 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	7d1b      	ldrb	r3, [r3, #20]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d105      	bne.n	8006d74 <tcp_free+0x1c>
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <tcp_free+0x2c>)
 8006d6a:	22d4      	movs	r2, #212	; 0xd4
 8006d6c:	4906      	ldr	r1, [pc, #24]	; (8006d88 <tcp_free+0x30>)
 8006d6e:	4807      	ldr	r0, [pc, #28]	; (8006d8c <tcp_free+0x34>)
 8006d70:	f009 fa1e 	bl	80101b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	2001      	movs	r0, #1
 8006d78:	f7fe ff2c 	bl	8005bd4 <memp_free>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	0801242c 	.word	0x0801242c
 8006d88:	0801245c 	.word	0x0801245c
 8006d8c:	08012470 	.word	0x08012470

08006d90 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7d1b      	ldrb	r3, [r3, #20]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d105      	bne.n	8006dac <tcp_free_listen+0x1c>
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <tcp_free_listen+0x2c>)
 8006da2:	22df      	movs	r2, #223	; 0xdf
 8006da4:	4906      	ldr	r1, [pc, #24]	; (8006dc0 <tcp_free_listen+0x30>)
 8006da6:	4807      	ldr	r0, [pc, #28]	; (8006dc4 <tcp_free_listen+0x34>)
 8006da8:	f009 fa02 	bl	80101b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dac:	6879      	ldr	r1, [r7, #4]
 8006dae:	2002      	movs	r0, #2
 8006db0:	f7fe ff10 	bl	8005bd4 <memp_free>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	0801242c 	.word	0x0801242c
 8006dc0:	08012498 	.word	0x08012498
 8006dc4:	08012470 	.word	0x08012470

08006dc8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006dcc:	f001 f85c 	bl	8007e88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <tcp_tmr+0x28>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <tcp_tmr+0x28>)
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <tcp_tmr+0x28>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006de8:	f000 fd0e 	bl	8007808 <tcp_slowtmr>
  }
}
 8006dec:	bf00      	nop
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	2000052d 	.word	0x2000052d

08006df4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <tcp_remove_listener+0x1c>
 8006e04:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <tcp_remove_listener+0x48>)
 8006e06:	22ff      	movs	r2, #255	; 0xff
 8006e08:	490d      	ldr	r1, [pc, #52]	; (8006e40 <tcp_remove_listener+0x4c>)
 8006e0a:	480e      	ldr	r0, [pc, #56]	; (8006e44 <tcp_remove_listener+0x50>)
 8006e0c:	f009 f9d0 	bl	80101b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e00a      	b.n	8006e2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d102      	bne.n	8006e26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f1      	bne.n	8006e16 <tcp_remove_listener+0x22>
    }
  }
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	0801242c 	.word	0x0801242c
 8006e40:	080124b4 	.word	0x080124b4
 8006e44:	08012470 	.word	0x08012470

08006e48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <tcp_listen_closed+0x1c>
 8006e56:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <tcp_listen_closed+0x60>)
 8006e58:	f240 1211 	movw	r2, #273	; 0x111
 8006e5c:	4913      	ldr	r1, [pc, #76]	; (8006eac <tcp_listen_closed+0x64>)
 8006e5e:	4814      	ldr	r0, [pc, #80]	; (8006eb0 <tcp_listen_closed+0x68>)
 8006e60:	f009 f9a6 	bl	80101b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	7d1b      	ldrb	r3, [r3, #20]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d006      	beq.n	8006e7a <tcp_listen_closed+0x32>
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <tcp_listen_closed+0x60>)
 8006e6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e72:	4910      	ldr	r1, [pc, #64]	; (8006eb4 <tcp_listen_closed+0x6c>)
 8006e74:	480e      	ldr	r0, [pc, #56]	; (8006eb0 <tcp_listen_closed+0x68>)
 8006e76:	f009 f99b 	bl	80101b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e00b      	b.n	8006e98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006e80:	4a0d      	ldr	r2, [pc, #52]	; (8006eb8 <tcp_listen_closed+0x70>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff ffb1 	bl	8006df4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d9f0      	bls.n	8006e80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	0801242c 	.word	0x0801242c
 8006eac:	080124dc 	.word	0x080124dc
 8006eb0:	08012470 	.word	0x08012470
 8006eb4:	080124e8 	.word	0x080124e8
 8006eb8:	08014884 	.word	0x08014884

08006ebc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ebc:	b5b0      	push	{r4, r5, r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af04      	add	r7, sp, #16
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <tcp_close_shutdown+0x20>
 8006ece:	4b63      	ldr	r3, [pc, #396]	; (800705c <tcp_close_shutdown+0x1a0>)
 8006ed0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ed4:	4962      	ldr	r1, [pc, #392]	; (8007060 <tcp_close_shutdown+0x1a4>)
 8006ed6:	4863      	ldr	r0, [pc, #396]	; (8007064 <tcp_close_shutdown+0x1a8>)
 8006ed8:	f009 f96a 	bl	80101b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d066      	beq.n	8006fb0 <tcp_close_shutdown+0xf4>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7d1b      	ldrb	r3, [r3, #20]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d003      	beq.n	8006ef2 <tcp_close_shutdown+0x36>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7d1b      	ldrb	r3, [r3, #20]
 8006eee:	2b07      	cmp	r3, #7
 8006ef0:	d15e      	bne.n	8006fb0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <tcp_close_shutdown+0x48>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f02:	d055      	beq.n	8006fb0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8b5b      	ldrh	r3, [r3, #26]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <tcp_close_shutdown+0x62>
 8006f10:	4b52      	ldr	r3, [pc, #328]	; (800705c <tcp_close_shutdown+0x1a0>)
 8006f12:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f16:	4954      	ldr	r1, [pc, #336]	; (8007068 <tcp_close_shutdown+0x1ac>)
 8006f18:	4852      	ldr	r0, [pc, #328]	; (8007064 <tcp_close_shutdown+0x1a8>)
 8006f1a:	f009 f949 	bl	80101b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f26:	687d      	ldr	r5, [r7, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	8ad2      	ldrh	r2, [r2, #22]
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	8b09      	ldrh	r1, [r1, #24]
 8006f34:	9102      	str	r1, [sp, #8]
 8006f36:	9201      	str	r2, [sp, #4]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f005 fd93 	bl	800ca6c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fb74 	bl	8008634 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f4c:	4b47      	ldr	r3, [pc, #284]	; (800706c <tcp_close_shutdown+0x1b0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d105      	bne.n	8006f62 <tcp_close_shutdown+0xa6>
 8006f56:	4b45      	ldr	r3, [pc, #276]	; (800706c <tcp_close_shutdown+0x1b0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4a43      	ldr	r2, [pc, #268]	; (800706c <tcp_close_shutdown+0x1b0>)
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	e013      	b.n	8006f8a <tcp_close_shutdown+0xce>
 8006f62:	4b42      	ldr	r3, [pc, #264]	; (800706c <tcp_close_shutdown+0x1b0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e00c      	b.n	8006f84 <tcp_close_shutdown+0xc8>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d104      	bne.n	8006f7e <tcp_close_shutdown+0xc2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	60da      	str	r2, [r3, #12]
 8006f7c:	e005      	b.n	8006f8a <tcp_close_shutdown+0xce>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1ef      	bne.n	8006f6a <tcp_close_shutdown+0xae>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	4b37      	ldr	r3, [pc, #220]	; (8007070 <tcp_close_shutdown+0x1b4>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006f96:	4b37      	ldr	r3, [pc, #220]	; (8007074 <tcp_close_shutdown+0x1b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d102      	bne.n	8006fa6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fa0:	f004 f808 	bl	800afb4 <tcp_trigger_input_pcb_close>
 8006fa4:	e002      	b.n	8006fac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fed6 	bl	8006d58 <tcp_free>
      }
      return ERR_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e050      	b.n	8007052 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7d1b      	ldrb	r3, [r3, #20]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d03b      	beq.n	8007030 <tcp_close_shutdown+0x174>
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	dc44      	bgt.n	8007046 <tcp_close_shutdown+0x18a>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <tcp_close_shutdown+0x10a>
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d02a      	beq.n	800701a <tcp_close_shutdown+0x15e>
 8006fc4:	e03f      	b.n	8007046 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8adb      	ldrh	r3, [r3, #22]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d021      	beq.n	8007012 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <tcp_close_shutdown+0x1bc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d105      	bne.n	8006fe4 <tcp_close_shutdown+0x128>
 8006fd8:	4b27      	ldr	r3, [pc, #156]	; (8007078 <tcp_close_shutdown+0x1bc>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	4a26      	ldr	r2, [pc, #152]	; (8007078 <tcp_close_shutdown+0x1bc>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e013      	b.n	800700c <tcp_close_shutdown+0x150>
 8006fe4:	4b24      	ldr	r3, [pc, #144]	; (8007078 <tcp_close_shutdown+0x1bc>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	e00c      	b.n	8007006 <tcp_close_shutdown+0x14a>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d104      	bne.n	8007000 <tcp_close_shutdown+0x144>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	e005      	b.n	800700c <tcp_close_shutdown+0x150>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1ef      	bne.n	8006fec <tcp_close_shutdown+0x130>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fea0 	bl	8006d58 <tcp_free>
      break;
 8007018:	e01a      	b.n	8007050 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff ff14 	bl	8006e48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4816      	ldr	r0, [pc, #88]	; (800707c <tcp_close_shutdown+0x1c0>)
 8007024:	f001 fb56 	bl	80086d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff feb1 	bl	8006d90 <tcp_free_listen>
      break;
 800702e:	e00f      	b.n	8007050 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	480e      	ldr	r0, [pc, #56]	; (800706c <tcp_close_shutdown+0x1b0>)
 8007034:	f001 fb4e 	bl	80086d4 <tcp_pcb_remove>
 8007038:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <tcp_close_shutdown+0x1b4>)
 800703a:	2201      	movs	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fe8a 	bl	8006d58 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007044:	e004      	b.n	8007050 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f81a 	bl	8007080 <tcp_close_shutdown_fin>
 800704c:	4603      	mov	r3, r0
 800704e:	e000      	b.n	8007052 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bdb0      	pop	{r4, r5, r7, pc}
 800705a:	bf00      	nop
 800705c:	0801242c 	.word	0x0801242c
 8007060:	08012500 	.word	0x08012500
 8007064:	08012470 	.word	0x08012470
 8007068:	08012520 	.word	0x08012520
 800706c:	20006cf8 	.word	0x20006cf8
 8007070:	20006cf4 	.word	0x20006cf4
 8007074:	20006d0c 	.word	0x20006d0c
 8007078:	20006d04 	.word	0x20006d04
 800707c:	20006d00 	.word	0x20006d00

08007080 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <tcp_close_shutdown_fin+0x1c>
 800708e:	4b2e      	ldr	r3, [pc, #184]	; (8007148 <tcp_close_shutdown_fin+0xc8>)
 8007090:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007094:	492d      	ldr	r1, [pc, #180]	; (800714c <tcp_close_shutdown_fin+0xcc>)
 8007096:	482e      	ldr	r0, [pc, #184]	; (8007150 <tcp_close_shutdown_fin+0xd0>)
 8007098:	f009 f88a 	bl	80101b0 <iprintf>

  switch (pcb->state) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7d1b      	ldrb	r3, [r3, #20]
 80070a0:	2b07      	cmp	r3, #7
 80070a2:	d020      	beq.n	80070e6 <tcp_close_shutdown_fin+0x66>
 80070a4:	2b07      	cmp	r3, #7
 80070a6:	dc2b      	bgt.n	8007100 <tcp_close_shutdown_fin+0x80>
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d002      	beq.n	80070b2 <tcp_close_shutdown_fin+0x32>
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d00d      	beq.n	80070cc <tcp_close_shutdown_fin+0x4c>
 80070b0:	e026      	b.n	8007100 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f004 fde8 	bl	800bc88 <tcp_send_fin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11f      	bne.n	8007104 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2205      	movs	r2, #5
 80070c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070ca:	e01b      	b.n	8007104 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f004 fddb 	bl	800bc88 <tcp_send_fin>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d114      	bne.n	8007108 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2205      	movs	r2, #5
 80070e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070e4:	e010      	b.n	8007108 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f004 fdce 	bl	800bc88 <tcp_send_fin>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2209      	movs	r2, #9
 80070fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070fe:	e005      	b.n	800710c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e01c      	b.n	800713e <tcp_close_shutdown_fin+0xbe>
      break;
 8007104:	bf00      	nop
 8007106:	e002      	b.n	800710e <tcp_close_shutdown_fin+0x8e>
      break;
 8007108:	bf00      	nop
 800710a:	e000      	b.n	800710e <tcp_close_shutdown_fin+0x8e>
      break;
 800710c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800710e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f004 fef4 	bl	800bf04 <tcp_output>
 800711c:	e00d      	b.n	800713a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d108      	bne.n	800713a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8b5b      	ldrh	r3, [r3, #26]
 800712c:	f043 0308 	orr.w	r3, r3, #8
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e001      	b.n	800713e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	0801242c 	.word	0x0801242c
 800714c:	080124dc 	.word	0x080124dc
 8007150:	08012470 	.word	0x08012470

08007154 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <tcp_close+0x22>
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <tcp_close+0x4c>)
 8007164:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007168:	490e      	ldr	r1, [pc, #56]	; (80071a4 <tcp_close+0x50>)
 800716a:	480f      	ldr	r0, [pc, #60]	; (80071a8 <tcp_close+0x54>)
 800716c:	f009 f820 	bl	80101b0 <iprintf>
 8007170:	f06f 030f 	mvn.w	r3, #15
 8007174:	e00f      	b.n	8007196 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7d1b      	ldrb	r3, [r3, #20]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d006      	beq.n	800718c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8b5b      	ldrh	r3, [r3, #26]
 8007182:	f043 0310 	orr.w	r3, r3, #16
 8007186:	b29a      	uxth	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800718c:	2101      	movs	r1, #1
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fe94 	bl	8006ebc <tcp_close_shutdown>
 8007194:	4603      	mov	r3, r0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	0801242c 	.word	0x0801242c
 80071a4:	0801253c 	.word	0x0801253c
 80071a8:	08012470 	.word	0x08012470

080071ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08e      	sub	sp, #56	; 0x38
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <tcp_abandon+0x20>
 80071bc:	4b52      	ldr	r3, [pc, #328]	; (8007308 <tcp_abandon+0x15c>)
 80071be:	f240 223d 	movw	r2, #573	; 0x23d
 80071c2:	4952      	ldr	r1, [pc, #328]	; (800730c <tcp_abandon+0x160>)
 80071c4:	4852      	ldr	r0, [pc, #328]	; (8007310 <tcp_abandon+0x164>)
 80071c6:	f008 fff3 	bl	80101b0 <iprintf>
 80071ca:	e099      	b.n	8007300 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7d1b      	ldrb	r3, [r3, #20]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <tcp_abandon+0x36>
 80071d4:	4b4c      	ldr	r3, [pc, #304]	; (8007308 <tcp_abandon+0x15c>)
 80071d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80071da:	494e      	ldr	r1, [pc, #312]	; (8007314 <tcp_abandon+0x168>)
 80071dc:	484c      	ldr	r0, [pc, #304]	; (8007310 <tcp_abandon+0x164>)
 80071de:	f008 ffe7 	bl	80101b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7d1b      	ldrb	r3, [r3, #20]
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d107      	bne.n	80071fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	484a      	ldr	r0, [pc, #296]	; (8007318 <tcp_abandon+0x16c>)
 80071ee:	f001 fa71 	bl	80086d4 <tcp_pcb_remove>
    tcp_free(pcb);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fdb0 	bl	8006d58 <tcp_free>
 80071f8:	e082      	b.n	8007300 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7d1b      	ldrb	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d126      	bne.n	8007272 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8adb      	ldrh	r3, [r3, #22]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02e      	beq.n	800728a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800722c:	4b3b      	ldr	r3, [pc, #236]	; (800731c <tcp_abandon+0x170>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d105      	bne.n	8007242 <tcp_abandon+0x96>
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <tcp_abandon+0x170>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4a37      	ldr	r2, [pc, #220]	; (800731c <tcp_abandon+0x170>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e013      	b.n	800726a <tcp_abandon+0xbe>
 8007242:	4b36      	ldr	r3, [pc, #216]	; (800731c <tcp_abandon+0x170>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e00c      	b.n	8007264 <tcp_abandon+0xb8>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d104      	bne.n	800725e <tcp_abandon+0xb2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e005      	b.n	800726a <tcp_abandon+0xbe>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ef      	bne.n	800724a <tcp_abandon+0x9e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e00b      	b.n	800728a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8adb      	ldrh	r3, [r3, #22]
 800727a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4828      	ldr	r0, [pc, #160]	; (8007320 <tcp_abandon+0x174>)
 8007280:	f001 fa28 	bl	80086d4 <tcp_pcb_remove>
 8007284:	4b27      	ldr	r3, [pc, #156]	; (8007324 <tcp_abandon+0x178>)
 8007286:	2201      	movs	r2, #1
 8007288:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fed6 	bl	8008048 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fecd 	bl	8008048 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fec4 	bl	8008048 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	8b12      	ldrh	r2, [r2, #24]
 80072d0:	9202      	str	r2, [sp, #8]
 80072d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	460b      	mov	r3, r1
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	69b9      	ldr	r1, [r7, #24]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f005 fbc4 	bl	800ca6c <tcp_rst>
    }
    last_state = pcb->state;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7d1b      	ldrb	r3, [r3, #20]
 80072e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd34 	bl	8006d58 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <tcp_abandon+0x154>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f06f 010c 	mvn.w	r1, #12
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	4798      	blx	r3
  }
}
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	0801242c 	.word	0x0801242c
 800730c:	08012570 	.word	0x08012570
 8007310:	08012470 	.word	0x08012470
 8007314:	0801258c 	.word	0x0801258c
 8007318:	20006d08 	.word	0x20006d08
 800731c:	20006d04 	.word	0x20006d04
 8007320:	20006cf8 	.word	0x20006cf8
 8007324:	20006cf4 	.word	0x20006cf4

08007328 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007330:	2101      	movs	r1, #1
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff ff3a 	bl	80071ac <tcp_abandon>
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800734e:	2304      	movs	r3, #4
 8007350:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007358:	4b3e      	ldr	r3, [pc, #248]	; (8007454 <tcp_bind+0x114>)
 800735a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d109      	bne.n	8007376 <tcp_bind+0x36>
 8007362:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <tcp_bind+0x118>)
 8007364:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007368:	493c      	ldr	r1, [pc, #240]	; (800745c <tcp_bind+0x11c>)
 800736a:	483d      	ldr	r0, [pc, #244]	; (8007460 <tcp_bind+0x120>)
 800736c:	f008 ff20 	bl	80101b0 <iprintf>
 8007370:	f06f 030f 	mvn.w	r3, #15
 8007374:	e06a      	b.n	800744c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	7d1b      	ldrb	r3, [r3, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <tcp_bind+0x52>
 800737e:	4b36      	ldr	r3, [pc, #216]	; (8007458 <tcp_bind+0x118>)
 8007380:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007384:	4937      	ldr	r1, [pc, #220]	; (8007464 <tcp_bind+0x124>)
 8007386:	4836      	ldr	r0, [pc, #216]	; (8007460 <tcp_bind+0x120>)
 8007388:	f008 ff12 	bl	80101b0 <iprintf>
 800738c:	f06f 0305 	mvn.w	r3, #5
 8007390:	e05c      	b.n	800744c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <tcp_bind+0x6c>
    port = tcp_new_port();
 8007398:	f000 f9f0 	bl	800777c <tcp_new_port>
 800739c:	4603      	mov	r3, r0
 800739e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d135      	bne.n	8007412 <tcp_bind+0xd2>
      return ERR_BUF;
 80073a6:	f06f 0301 	mvn.w	r3, #1
 80073aa:	e04f      	b.n	800744c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e02b      	b.n	800740a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80073b2:	4a2d      	ldr	r2, [pc, #180]	; (8007468 <tcp_bind+0x128>)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e01e      	b.n	80073fe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	8adb      	ldrh	r3, [r3, #22]
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d116      	bne.n	80073f8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80073ca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00c      	beq.n	80073f2 <tcp_bind+0xb2>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d102      	bne.n	80073f8 <tcp_bind+0xb8>
              return ERR_USE;
 80073f2:	f06f 0307 	mvn.w	r3, #7
 80073f6:	e029      	b.n	800744c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1dd      	bne.n	80073c0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3301      	adds	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	429a      	cmp	r2, r3
 8007410:	dbcf      	blt.n	80073b2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00c      	beq.n	8007432 <tcp_bind+0xf2>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <tcp_bind+0xec>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	e000      	b.n	800742e <tcp_bind+0xee>
 800742c:	2300      	movs	r3, #0
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	88fa      	ldrh	r2, [r7, #6]
 8007436:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <tcp_bind+0x12c>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <tcp_bind+0x12c>)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	f005 fcd3 	bl	800cdf0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	080148ac 	.word	0x080148ac
 8007458:	0801242c 	.word	0x0801242c
 800745c:	080125c0 	.word	0x080125c0
 8007460:	08012470 	.word	0x08012470
 8007464:	080125d8 	.word	0x080125d8
 8007468:	08014884 	.word	0x08014884
 800746c:	20006d04 	.word	0x20006d04

08007470 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4613      	mov	r3, r2
 800747c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <tcp_accept_null+0x22>
 8007484:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <tcp_accept_null+0x34>)
 8007486:	f240 320f 	movw	r2, #783	; 0x30f
 800748a:	4907      	ldr	r1, [pc, #28]	; (80074a8 <tcp_accept_null+0x38>)
 800748c:	4807      	ldr	r0, [pc, #28]	; (80074ac <tcp_accept_null+0x3c>)
 800748e:	f008 fe8f 	bl	80101b0 <iprintf>

  tcp_abort(pcb);
 8007492:	68b8      	ldr	r0, [r7, #8]
 8007494:	f7ff ff48 	bl	8007328 <tcp_abort>

  return ERR_ABRT;
 8007498:	f06f 030c 	mvn.w	r3, #12
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	0801242c 	.word	0x0801242c
 80074a8:	08012600 	.word	0x08012600
 80074ac:	08012470 	.word	0x08012470

080074b0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	2200      	movs	r2, #0
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f806 	bl	80074d4 <tcp_listen_with_backlog_and_err>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <tcp_listen_with_backlog_and_err+0x2c>
 80074ec:	4b47      	ldr	r3, [pc, #284]	; (800760c <tcp_listen_with_backlog_and_err+0x138>)
 80074ee:	f240 3259 	movw	r2, #857	; 0x359
 80074f2:	4947      	ldr	r1, [pc, #284]	; (8007610 <tcp_listen_with_backlog_and_err+0x13c>)
 80074f4:	4847      	ldr	r0, [pc, #284]	; (8007614 <tcp_listen_with_backlog_and_err+0x140>)
 80074f6:	f008 fe5b 	bl	80101b0 <iprintf>
 80074fa:	23f0      	movs	r3, #240	; 0xf0
 80074fc:	76fb      	strb	r3, [r7, #27]
 80074fe:	e079      	b.n	80075f4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	7d1b      	ldrb	r3, [r3, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <tcp_listen_with_backlog_and_err+0x48>
 8007508:	4b40      	ldr	r3, [pc, #256]	; (800760c <tcp_listen_with_backlog_and_err+0x138>)
 800750a:	f240 325a 	movw	r2, #858	; 0x35a
 800750e:	4942      	ldr	r1, [pc, #264]	; (8007618 <tcp_listen_with_backlog_and_err+0x144>)
 8007510:	4840      	ldr	r0, [pc, #256]	; (8007614 <tcp_listen_with_backlog_and_err+0x140>)
 8007512:	f008 fe4d 	bl	80101b0 <iprintf>
 8007516:	23f1      	movs	r3, #241	; 0xf1
 8007518:	76fb      	strb	r3, [r7, #27]
 800751a:	e06b      	b.n	80075f4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	7d1b      	ldrb	r3, [r3, #20]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d104      	bne.n	800752e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007528:	23f7      	movs	r3, #247	; 0xf7
 800752a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800752c:	e062      	b.n	80075f4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800752e:	2002      	movs	r0, #2
 8007530:	f7fe fb04 	bl	8005b3c <memp_malloc>
 8007534:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d102      	bne.n	8007542 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800753c:	23ff      	movs	r3, #255	; 0xff
 800753e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007540:	e058      	b.n	80075f4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8ada      	ldrh	r2, [r3, #22]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2201      	movs	r2, #1
 8007556:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	7d5a      	ldrb	r2, [r3, #21]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	7a5a      	ldrb	r2, [r3, #9]
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2200      	movs	r2, #0
 800756c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7ada      	ldrb	r2, [r3, #11]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	7a9a      	ldrb	r2, [r3, #10]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8adb      	ldrh	r3, [r3, #22]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d021      	beq.n	80075d2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <tcp_listen_with_backlog_and_err+0x148>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d105      	bne.n	80075a4 <tcp_listen_with_backlog_and_err+0xd0>
 8007598:	4b20      	ldr	r3, [pc, #128]	; (800761c <tcp_listen_with_backlog_and_err+0x148>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	4a1f      	ldr	r2, [pc, #124]	; (800761c <tcp_listen_with_backlog_and_err+0x148>)
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	e013      	b.n	80075cc <tcp_listen_with_backlog_and_err+0xf8>
 80075a4:	4b1d      	ldr	r3, [pc, #116]	; (800761c <tcp_listen_with_backlog_and_err+0x148>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e00c      	b.n	80075c6 <tcp_listen_with_backlog_and_err+0xf2>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d104      	bne.n	80075c0 <tcp_listen_with_backlog_and_err+0xec>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	e005      	b.n	80075cc <tcp_listen_with_backlog_and_err+0xf8>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1ef      	bne.n	80075ac <tcp_listen_with_backlog_and_err+0xd8>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff fbc0 	bl	8006d58 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4a11      	ldr	r2, [pc, #68]	; (8007620 <tcp_listen_with_backlog_and_err+0x14c>)
 80075dc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <tcp_listen_with_backlog_and_err+0x150>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	60da      	str	r2, [r3, #12]
 80075e6:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <tcp_listen_with_backlog_and_err+0x150>)
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	f005 fc00 	bl	800cdf0 <tcp_timer_needed>
  res = ERR_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7efa      	ldrb	r2, [r7, #27]
 80075fe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007600:	69fb      	ldr	r3, [r7, #28]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	0801242c 	.word	0x0801242c
 8007610:	08012620 	.word	0x08012620
 8007614:	08012470 	.word	0x08012470
 8007618:	08012650 	.word	0x08012650
 800761c:	20006d04 	.word	0x20006d04
 8007620:	08007471 	.word	0x08007471
 8007624:	20006d00 	.word	0x20006d00

08007628 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <tcp_update_rcv_ann_wnd+0x1c>
 8007636:	4b25      	ldr	r3, [pc, #148]	; (80076cc <tcp_update_rcv_ann_wnd+0xa4>)
 8007638:	f240 32a6 	movw	r2, #934	; 0x3a6
 800763c:	4924      	ldr	r1, [pc, #144]	; (80076d0 <tcp_update_rcv_ann_wnd+0xa8>)
 800763e:	4825      	ldr	r0, [pc, #148]	; (80076d4 <tcp_update_rcv_ann_wnd+0xac>)
 8007640:	f008 fdb6 	bl	80101b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007658:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800765c:	bf28      	it	cs
 800765e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007662:	b292      	uxth	r2, r2
 8007664:	4413      	add	r3, r2
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	db08      	blt.n	8007680 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	e020      	b.n	80076c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	dd03      	ble.n	8007696 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007694:	e014      	b.n	80076c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d306      	bcc.n	80076b8 <tcp_update_rcv_ann_wnd+0x90>
 80076aa:	4b08      	ldr	r3, [pc, #32]	; (80076cc <tcp_update_rcv_ann_wnd+0xa4>)
 80076ac:	f240 32b6 	movw	r2, #950	; 0x3b6
 80076b0:	4909      	ldr	r1, [pc, #36]	; (80076d8 <tcp_update_rcv_ann_wnd+0xb0>)
 80076b2:	4808      	ldr	r0, [pc, #32]	; (80076d4 <tcp_update_rcv_ann_wnd+0xac>)
 80076b4:	f008 fd7c 	bl	80101b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80076c0:	2300      	movs	r3, #0
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	0801242c 	.word	0x0801242c
 80076d0:	08012688 	.word	0x08012688
 80076d4:	08012470 	.word	0x08012470
 80076d8:	080126ac 	.word	0x080126ac

080076dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <tcp_recved+0x22>
 80076ee:	4b1f      	ldr	r3, [pc, #124]	; (800776c <tcp_recved+0x90>)
 80076f0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80076f4:	491e      	ldr	r1, [pc, #120]	; (8007770 <tcp_recved+0x94>)
 80076f6:	481f      	ldr	r0, [pc, #124]	; (8007774 <tcp_recved+0x98>)
 80076f8:	f008 fd5a 	bl	80101b0 <iprintf>
 80076fc:	e032      	b.n	8007764 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7d1b      	ldrb	r3, [r3, #20]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d106      	bne.n	8007714 <tcp_recved+0x38>
 8007706:	4b19      	ldr	r3, [pc, #100]	; (800776c <tcp_recved+0x90>)
 8007708:	f240 32d2 	movw	r2, #978	; 0x3d2
 800770c:	491a      	ldr	r1, [pc, #104]	; (8007778 <tcp_recved+0x9c>)
 800770e:	4819      	ldr	r0, [pc, #100]	; (8007774 <tcp_recved+0x98>)
 8007710:	f008 fd4e 	bl	80101b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007718:	887b      	ldrh	r3, [r7, #2]
 800771a:	4413      	add	r3, r2
 800771c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800771e:	89fb      	ldrh	r3, [r7, #14]
 8007720:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007724:	d804      	bhi.n	8007730 <tcp_recved+0x54>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772a:	89fa      	ldrh	r2, [r7, #14]
 800772c:	429a      	cmp	r2, r3
 800772e:	d204      	bcs.n	800773a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007736:	851a      	strh	r2, [r3, #40]	; 0x28
 8007738:	e002      	b.n	8007740 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	89fa      	ldrh	r2, [r7, #14]
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff ff71 	bl	8007628 <tcp_update_rcv_ann_wnd>
 8007746:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800774e:	d309      	bcc.n	8007764 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8b5b      	ldrh	r3, [r3, #26]
 8007754:	f043 0302 	orr.w	r3, r3, #2
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f004 fbd0 	bl	800bf04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	0801242c 	.word	0x0801242c
 8007770:	080126c8 	.word	0x080126c8
 8007774:	08012470 	.word	0x08012470
 8007778:	080126e0 	.word	0x080126e0

0800777c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007786:	4b1e      	ldr	r3, [pc, #120]	; (8007800 <tcp_new_port+0x84>)
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <tcp_new_port+0x84>)
 8007790:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007792:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <tcp_new_port+0x84>)
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800779a:	4293      	cmp	r3, r2
 800779c:	d103      	bne.n	80077a6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800779e:	4b18      	ldr	r3, [pc, #96]	; (8007800 <tcp_new_port+0x84>)
 80077a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077a6:	2300      	movs	r3, #0
 80077a8:	71fb      	strb	r3, [r7, #7]
 80077aa:	e01e      	b.n	80077ea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	4a15      	ldr	r2, [pc, #84]	; (8007804 <tcp_new_port+0x88>)
 80077b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	e011      	b.n	80077de <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	8ada      	ldrh	r2, [r3, #22]
 80077be:	4b10      	ldr	r3, [pc, #64]	; (8007800 <tcp_new_port+0x84>)
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d108      	bne.n	80077d8 <tcp_new_port+0x5c>
        n++;
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	3301      	adds	r3, #1
 80077ca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80077cc:	88bb      	ldrh	r3, [r7, #4]
 80077ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d2:	d3d8      	bcc.n	8007786 <tcp_new_port+0xa>
          return 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e00d      	b.n	80077f4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1ea      	bne.n	80077ba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	3301      	adds	r3, #1
 80077e8:	71fb      	strb	r3, [r7, #7]
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d9dd      	bls.n	80077ac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <tcp_new_port+0x84>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000012 	.word	0x20000012
 8007804:	08014884 	.word	0x08014884

08007808 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b090      	sub	sp, #64	; 0x40
 800780c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007814:	4b94      	ldr	r3, [pc, #592]	; (8007a68 <tcp_slowtmr+0x260>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3301      	adds	r3, #1
 800781a:	4a93      	ldr	r2, [pc, #588]	; (8007a68 <tcp_slowtmr+0x260>)
 800781c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800781e:	4b93      	ldr	r3, [pc, #588]	; (8007a6c <tcp_slowtmr+0x264>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	b2da      	uxtb	r2, r3
 8007826:	4b91      	ldr	r3, [pc, #580]	; (8007a6c <tcp_slowtmr+0x264>)
 8007828:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800782e:	4b90      	ldr	r3, [pc, #576]	; (8007a70 <tcp_slowtmr+0x268>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007834:	e29f      	b.n	8007d76 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	7d1b      	ldrb	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <tcp_slowtmr+0x44>
 800783e:	4b8d      	ldr	r3, [pc, #564]	; (8007a74 <tcp_slowtmr+0x26c>)
 8007840:	f240 42be 	movw	r2, #1214	; 0x4be
 8007844:	498c      	ldr	r1, [pc, #560]	; (8007a78 <tcp_slowtmr+0x270>)
 8007846:	488d      	ldr	r0, [pc, #564]	; (8007a7c <tcp_slowtmr+0x274>)
 8007848:	f008 fcb2 	bl	80101b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	7d1b      	ldrb	r3, [r3, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <tcp_slowtmr+0x5a>
 8007854:	4b87      	ldr	r3, [pc, #540]	; (8007a74 <tcp_slowtmr+0x26c>)
 8007856:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800785a:	4989      	ldr	r1, [pc, #548]	; (8007a80 <tcp_slowtmr+0x278>)
 800785c:	4887      	ldr	r0, [pc, #540]	; (8007a7c <tcp_slowtmr+0x274>)
 800785e:	f008 fca7 	bl	80101b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	2b0a      	cmp	r3, #10
 8007868:	d106      	bne.n	8007878 <tcp_slowtmr+0x70>
 800786a:	4b82      	ldr	r3, [pc, #520]	; (8007a74 <tcp_slowtmr+0x26c>)
 800786c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007870:	4984      	ldr	r1, [pc, #528]	; (8007a84 <tcp_slowtmr+0x27c>)
 8007872:	4882      	ldr	r0, [pc, #520]	; (8007a7c <tcp_slowtmr+0x274>)
 8007874:	f008 fc9c 	bl	80101b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	7f9a      	ldrb	r2, [r3, #30]
 800787c:	4b7b      	ldr	r3, [pc, #492]	; (8007a6c <tcp_slowtmr+0x264>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d105      	bne.n	8007890 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800788e:	e272      	b.n	8007d76 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007890:	4b76      	ldr	r3, [pc, #472]	; (8007a6c <tcp_slowtmr+0x264>)
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	7d1b      	ldrb	r3, [r3, #20]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d10a      	bne.n	80078c2 <tcp_slowtmr+0xba>
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d905      	bls.n	80078c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80078b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ba:	3301      	adds	r3, #1
 80078bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078c0:	e11e      	b.n	8007b00 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078c8:	2b0b      	cmp	r3, #11
 80078ca:	d905      	bls.n	80078d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80078cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d0:	3301      	adds	r3, #1
 80078d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078d6:	e113      	b.n	8007b00 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d075      	beq.n	80079ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d006      	beq.n	80078f8 <tcp_slowtmr+0xf0>
 80078ea:	4b62      	ldr	r3, [pc, #392]	; (8007a74 <tcp_slowtmr+0x26c>)
 80078ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80078f0:	4965      	ldr	r1, [pc, #404]	; (8007a88 <tcp_slowtmr+0x280>)
 80078f2:	4862      	ldr	r0, [pc, #392]	; (8007a7c <tcp_slowtmr+0x274>)
 80078f4:	f008 fc5c 	bl	80101b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <tcp_slowtmr+0x106>
 8007900:	4b5c      	ldr	r3, [pc, #368]	; (8007a74 <tcp_slowtmr+0x26c>)
 8007902:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007906:	4961      	ldr	r1, [pc, #388]	; (8007a8c <tcp_slowtmr+0x284>)
 8007908:	485c      	ldr	r0, [pc, #368]	; (8007a7c <tcp_slowtmr+0x274>)
 800790a:	f008 fc51 	bl	80101b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007914:	2b0b      	cmp	r3, #11
 8007916:	d905      	bls.n	8007924 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800791c:	3301      	adds	r3, #1
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007922:	e0ed      	b.n	8007b00 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800792a:	3b01      	subs	r3, #1
 800792c:	4a58      	ldr	r2, [pc, #352]	; (8007a90 <tcp_slowtmr+0x288>)
 800792e:	5cd3      	ldrb	r3, [r2, r3]
 8007930:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007938:	7c7a      	ldrb	r2, [r7, #17]
 800793a:	429a      	cmp	r2, r3
 800793c:	d907      	bls.n	800794e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007944:	3301      	adds	r3, #1
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007954:	7c7a      	ldrb	r2, [r7, #17]
 8007956:	429a      	cmp	r2, r3
 8007958:	f200 80d2 	bhi.w	8007b00 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800795c:	2301      	movs	r3, #1
 800795e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800796a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800796c:	f005 f972 	bl	800cc54 <tcp_zero_window_probe>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d014      	beq.n	80079a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007976:	2300      	movs	r3, #0
 8007978:	623b      	str	r3, [r7, #32]
 800797a:	e011      	b.n	80079a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007982:	4619      	mov	r1, r3
 8007984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007986:	f004 f837 	bl	800b9f8 <tcp_split_unsent_seg>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007992:	f004 fab7 	bl	800bf04 <tcp_output>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80ac 	beq.w	8007b00 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	f200 80a2 	bhi.w	8007b00 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079c2:	3301      	adds	r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80079cc:	e098      	b.n	8007b00 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db0f      	blt.n	80079f8 <tcp_slowtmr+0x1f0>
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d008      	beq.n	80079f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3301      	adds	r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	b21a      	sxth	r2, r3
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a04:	429a      	cmp	r2, r3
 8007a06:	db7b      	blt.n	8007b00 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007a08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a0a:	f004 fd6d 	bl	800c4e8 <tcp_rexmit_rto_prepare>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <tcp_slowtmr+0x21c>
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d171      	bne.n	8007b00 <tcp_slowtmr+0x2f8>
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d06d      	beq.n	8007b00 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	7d1b      	ldrb	r3, [r3, #20]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d03a      	beq.n	8007aa2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a32:	2b0c      	cmp	r3, #12
 8007a34:	bf28      	it	cs
 8007a36:	230c      	movcs	r3, #12
 8007a38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007a40:	10db      	asrs	r3, r3, #3
 8007a42:	b21b      	sxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007a4c:	4413      	add	r3, r2
 8007a4e:	7efa      	ldrb	r2, [r7, #27]
 8007a50:	4910      	ldr	r1, [pc, #64]	; (8007a94 <tcp_slowtmr+0x28c>)
 8007a52:	5c8a      	ldrb	r2, [r1, r2]
 8007a54:	4093      	lsls	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	dc1a      	bgt.n	8007a98 <tcp_slowtmr+0x290>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	b21a      	sxth	r2, r3
 8007a66:	e019      	b.n	8007a9c <tcp_slowtmr+0x294>
 8007a68:	20006cfc 	.word	0x20006cfc
 8007a6c:	2000052e 	.word	0x2000052e
 8007a70:	20006cf8 	.word	0x20006cf8
 8007a74:	0801242c 	.word	0x0801242c
 8007a78:	08012770 	.word	0x08012770
 8007a7c:	08012470 	.word	0x08012470
 8007a80:	0801279c 	.word	0x0801279c
 8007a84:	080127c8 	.word	0x080127c8
 8007a88:	080127f8 	.word	0x080127f8
 8007a8c:	0801282c 	.word	0x0801282c
 8007a90:	0801487c 	.word	0x0801487c
 8007a94:	0801486c 	.word	0x0801486c
 8007a98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bf28      	it	cs
 8007ab8:	4613      	movcs	r3, r2
 8007aba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007abc:	8a7b      	ldrh	r3, [r7, #18]
 8007abe:	085b      	lsrs	r3, r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d206      	bcs.n	8007ae8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007afc:	f004 fd64 	bl	800c5c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	7d1b      	ldrb	r3, [r3, #20]
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	d111      	bne.n	8007b2c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	8b5b      	ldrh	r3, [r3, #26]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b14:	4b9d      	ldr	r3, [pc, #628]	; (8007d8c <tcp_slowtmr+0x584>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b28      	cmp	r3, #40	; 0x28
 8007b20:	d904      	bls.n	8007b2c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b26:	3301      	adds	r3, #1
 8007b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	7a5b      	ldrb	r3, [r3, #9]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d04c      	beq.n	8007bd2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d003      	beq.n	8007b48 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007b44:	2b07      	cmp	r3, #7
 8007b46:	d144      	bne.n	8007bd2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b48:	4b90      	ldr	r3, [pc, #576]	; (8007d8c <tcp_slowtmr+0x584>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b58:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007b5c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007b60:	498b      	ldr	r1, [pc, #556]	; (8007d90 <tcp_slowtmr+0x588>)
 8007b62:	fba1 1303 	umull	r1, r3, r1, r3
 8007b66:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d90a      	bls.n	8007b82 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b70:	3301      	adds	r3, #1
 8007b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007b76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b80:	e027      	b.n	8007bd2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b82:	4b82      	ldr	r3, [pc, #520]	; (8007d8c <tcp_slowtmr+0x584>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007b98:	4618      	mov	r0, r3
 8007b9a:	4b7e      	ldr	r3, [pc, #504]	; (8007d94 <tcp_slowtmr+0x58c>)
 8007b9c:	fb03 f300 	mul.w	r3, r3, r0
 8007ba0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007ba2:	497b      	ldr	r1, [pc, #492]	; (8007d90 <tcp_slowtmr+0x588>)
 8007ba4:	fba1 1303 	umull	r1, r3, r1, r3
 8007ba8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d911      	bls.n	8007bd2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bb0:	f005 f810 	bl	800cbd4 <tcp_keepalive>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007bba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d107      	bne.n	8007bd2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d011      	beq.n	8007bfe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007bda:	4b6c      	ldr	r3, [pc, #432]	; (8007d8c <tcp_slowtmr+0x584>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007bea:	4619      	mov	r1, r3
 8007bec:	460b      	mov	r3, r1
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	440b      	add	r3, r1
 8007bf2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d302      	bcc.n	8007bfe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bfa:	f000 fecf 	bl	800899c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	7d1b      	ldrb	r3, [r3, #20]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d10b      	bne.n	8007c1e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c06:	4b61      	ldr	r3, [pc, #388]	; (8007d8c <tcp_slowtmr+0x584>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b28      	cmp	r3, #40	; 0x28
 8007c12:	d904      	bls.n	8007c1e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	7d1b      	ldrb	r3, [r3, #20]
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d10b      	bne.n	8007c3e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c26:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <tcp_slowtmr+0x584>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2bf0      	cmp	r3, #240	; 0xf0
 8007c32:	d904      	bls.n	8007c3e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c38:	3301      	adds	r3, #1
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d060      	beq.n	8007d08 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007c4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c50:	f000 fcf0 	bl	8008634 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d010      	beq.n	8007c7c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007c5a:	4b4f      	ldr	r3, [pc, #316]	; (8007d98 <tcp_slowtmr+0x590>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d106      	bne.n	8007c72 <tcp_slowtmr+0x46a>
 8007c64:	4b4d      	ldr	r3, [pc, #308]	; (8007d9c <tcp_slowtmr+0x594>)
 8007c66:	f240 526d 	movw	r2, #1389	; 0x56d
 8007c6a:	494d      	ldr	r1, [pc, #308]	; (8007da0 <tcp_slowtmr+0x598>)
 8007c6c:	484d      	ldr	r0, [pc, #308]	; (8007da4 <tcp_slowtmr+0x59c>)
 8007c6e:	f008 fa9f 	bl	80101b0 <iprintf>
        prev->next = pcb->next;
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	e00f      	b.n	8007c9c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c7c:	4b46      	ldr	r3, [pc, #280]	; (8007d98 <tcp_slowtmr+0x590>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d006      	beq.n	8007c94 <tcp_slowtmr+0x48c>
 8007c86:	4b45      	ldr	r3, [pc, #276]	; (8007d9c <tcp_slowtmr+0x594>)
 8007c88:	f240 5271 	movw	r2, #1393	; 0x571
 8007c8c:	4946      	ldr	r1, [pc, #280]	; (8007da8 <tcp_slowtmr+0x5a0>)
 8007c8e:	4845      	ldr	r0, [pc, #276]	; (8007da4 <tcp_slowtmr+0x59c>)
 8007c90:	f008 fa8e 	bl	80101b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4a3f      	ldr	r2, [pc, #252]	; (8007d98 <tcp_slowtmr+0x590>)
 8007c9a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d013      	beq.n	8007ccc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007cac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	8ad2      	ldrh	r2, [r2, #22]
 8007cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb8:	8b09      	ldrh	r1, [r1, #24]
 8007cba:	9102      	str	r1, [sp, #8]
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cc8:	f004 fed0 	bl	800ca6c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	7d1b      	ldrb	r3, [r3, #20]
 8007cd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f7ff f838 	bl	8006d58 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007ce8:	4b30      	ldr	r3, [pc, #192]	; (8007dac <tcp_slowtmr+0x5a4>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <tcp_slowtmr+0x4f6>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f06f 010c 	mvn.w	r1, #12
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007cfe:	4b2b      	ldr	r3, [pc, #172]	; (8007dac <tcp_slowtmr+0x5a4>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d037      	beq.n	8007d76 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007d06:	e590      	b.n	800782a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	7f1b      	ldrb	r3, [r3, #28]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	7f1a      	ldrb	r2, [r3, #28]
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	7f5b      	ldrb	r3, [r3, #29]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d325      	bcc.n	8007d76 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007d30:	4b1e      	ldr	r3, [pc, #120]	; (8007dac <tcp_slowtmr+0x5a4>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <tcp_slowtmr+0x550>
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d48:	6912      	ldr	r2, [r2, #16]
 8007d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	4603      	mov	r3, r0
 8007d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007d56:	e002      	b.n	8007d5e <tcp_slowtmr+0x556>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <tcp_slowtmr+0x5a4>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d000      	beq.n	8007d68 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007d66:	e560      	b.n	800782a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007d68:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d72:	f004 f8c7 	bl	800bf04 <tcp_output>
  while (pcb != NULL) {
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f47f ad5c 	bne.w	8007836 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007d82:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <tcp_slowtmr+0x5a8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007d88:	e067      	b.n	8007e5a <tcp_slowtmr+0x652>
 8007d8a:	bf00      	nop
 8007d8c:	20006cfc 	.word	0x20006cfc
 8007d90:	10624dd3 	.word	0x10624dd3
 8007d94:	000124f8 	.word	0x000124f8
 8007d98:	20006cf8 	.word	0x20006cf8
 8007d9c:	0801242c 	.word	0x0801242c
 8007da0:	08012864 	.word	0x08012864
 8007da4:	08012470 	.word	0x08012470
 8007da8:	08012890 	.word	0x08012890
 8007dac:	20006cf4 	.word	0x20006cf4
 8007db0:	20006d08 	.word	0x20006d08
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	7d1b      	ldrb	r3, [r3, #20]
 8007db8:	2b0a      	cmp	r3, #10
 8007dba:	d006      	beq.n	8007dca <tcp_slowtmr+0x5c2>
 8007dbc:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <tcp_slowtmr+0x664>)
 8007dbe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007dc2:	492b      	ldr	r1, [pc, #172]	; (8007e70 <tcp_slowtmr+0x668>)
 8007dc4:	482b      	ldr	r0, [pc, #172]	; (8007e74 <tcp_slowtmr+0x66c>)
 8007dc6:	f008 f9f3 	bl	80101b0 <iprintf>
    pcb_remove = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007dd0:	4b29      	ldr	r3, [pc, #164]	; (8007e78 <tcp_slowtmr+0x670>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2bf0      	cmp	r3, #240	; 0xf0
 8007ddc:	d904      	bls.n	8007de8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de2:	3301      	adds	r3, #1
 8007de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02f      	beq.n	8007e50 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df2:	f000 fc1f 	bl	8008634 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d010      	beq.n	8007e1e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007dfc:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <tcp_slowtmr+0x674>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d106      	bne.n	8007e14 <tcp_slowtmr+0x60c>
 8007e06:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <tcp_slowtmr+0x664>)
 8007e08:	f240 52af 	movw	r2, #1455	; 0x5af
 8007e0c:	491c      	ldr	r1, [pc, #112]	; (8007e80 <tcp_slowtmr+0x678>)
 8007e0e:	4819      	ldr	r0, [pc, #100]	; (8007e74 <tcp_slowtmr+0x66c>)
 8007e10:	f008 f9ce 	bl	80101b0 <iprintf>
        prev->next = pcb->next;
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	e00f      	b.n	8007e3e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007e1e:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <tcp_slowtmr+0x674>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d006      	beq.n	8007e36 <tcp_slowtmr+0x62e>
 8007e28:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <tcp_slowtmr+0x664>)
 8007e2a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007e2e:	4915      	ldr	r1, [pc, #84]	; (8007e84 <tcp_slowtmr+0x67c>)
 8007e30:	4810      	ldr	r0, [pc, #64]	; (8007e74 <tcp_slowtmr+0x66c>)
 8007e32:	f008 f9bd 	bl	80101b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <tcp_slowtmr+0x674>)
 8007e3c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007e48:	69f8      	ldr	r0, [r7, #28]
 8007e4a:	f7fe ff85 	bl	8006d58 <tcp_free>
 8007e4e:	e004      	b.n	8007e5a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1a9      	bne.n	8007db4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	3730      	adds	r7, #48	; 0x30
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	0801242c 	.word	0x0801242c
 8007e70:	080128bc 	.word	0x080128bc
 8007e74:	08012470 	.word	0x08012470
 8007e78:	20006cfc 	.word	0x20006cfc
 8007e7c:	20006d08 	.word	0x20006d08
 8007e80:	080128ec 	.word	0x080128ec
 8007e84:	08012914 	.word	0x08012914

08007e88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007e8e:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <tcp_fasttmr+0xbc>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <tcp_fasttmr+0xbc>)
 8007e98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007e9a:	4b2b      	ldr	r3, [pc, #172]	; (8007f48 <tcp_fasttmr+0xc0>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007ea0:	e048      	b.n	8007f34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7f9a      	ldrb	r2, [r3, #30]
 8007ea6:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <tcp_fasttmr+0xbc>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d03f      	beq.n	8007f2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007eae:	4b25      	ldr	r3, [pc, #148]	; (8007f44 <tcp_fasttmr+0xbc>)
 8007eb0:	781a      	ldrb	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8b5b      	ldrh	r3, [r3, #26]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d010      	beq.n	8007ee4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8b5b      	ldrh	r3, [r3, #26]
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f004 f817 	bl	800bf04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8b5b      	ldrh	r3, [r3, #26]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8b5b      	ldrh	r3, [r3, #26]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8b5b      	ldrh	r3, [r3, #26]
 8007ef4:	f023 0308 	bic.w	r3, r3, #8
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff f8be 	bl	8007080 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007f12:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <tcp_fasttmr+0xc4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f819 	bl	8007f50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <tcp_fasttmr+0xc4>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d000      	beq.n	8007f28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007f26:	e7b8      	b.n	8007e9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e002      	b.n	8007f34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1b3      	bne.n	8007ea2 <tcp_fasttmr+0x1a>
    }
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	2000052e 	.word	0x2000052e
 8007f48:	20006cf8 	.word	0x20006cf8
 8007f4c:	20006cf4 	.word	0x20006cf4

08007f50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007f50:	b590      	push	{r4, r7, lr}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <tcp_process_refused_data+0x22>
 8007f5e:	4b37      	ldr	r3, [pc, #220]	; (800803c <tcp_process_refused_data+0xec>)
 8007f60:	f240 6209 	movw	r2, #1545	; 0x609
 8007f64:	4936      	ldr	r1, [pc, #216]	; (8008040 <tcp_process_refused_data+0xf0>)
 8007f66:	4837      	ldr	r0, [pc, #220]	; (8008044 <tcp_process_refused_data+0xf4>)
 8007f68:	f008 f922 	bl	80101b0 <iprintf>
 8007f6c:	f06f 030f 	mvn.w	r3, #15
 8007f70:	e060      	b.n	8008034 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f76:	7b5b      	ldrb	r3, [r3, #13]
 8007f78:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <tcp_process_refused_data+0x58>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6918      	ldr	r0, [r3, #16]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	47a0      	blx	r4
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
 8007fa6:	e007      	b.n	8007fb8 <tcp_process_refused_data+0x68>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f000 f8c2 	bl	8008138 <tcp_recv_null>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d12a      	bne.n	8008016 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d033      	beq.n	8008032 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fd2:	d005      	beq.n	8007fe0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <tcp_process_refused_data+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6918      	ldr	r0, [r3, #16]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	47a0      	blx	r4
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e001      	b.n	8008006 <tcp_process_refused_data+0xb6>
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800a:	f113 0f0d 	cmn.w	r3, #13
 800800e:	d110      	bne.n	8008032 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008010:	f06f 030c 	mvn.w	r3, #12
 8008014:	e00e      	b.n	8008034 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	f113 0f0d 	cmn.w	r3, #13
 800801e:	d102      	bne.n	8008026 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008020:	f06f 030c 	mvn.w	r3, #12
 8008024:	e006      	b.n	8008034 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800802c:	f06f 0304 	mvn.w	r3, #4
 8008030:	e000      	b.n	8008034 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}
 800803c:	0801242c 	.word	0x0801242c
 8008040:	0801293c 	.word	0x0801293c
 8008044:	08012470 	.word	0x08012470

08008048 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008050:	e007      	b.n	8008062 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f80a 	bl	8008072 <tcp_seg_free>
    seg = next;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f4      	bne.n	8008052 <tcp_segs_free+0xa>
  }
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fbb3 	bl	80067f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	2003      	movs	r0, #3
 8008096:	f7fd fd9d 	bl	8005bd4 <memp_free>
  }
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d107      	bne.n	80080c6 <tcp_setprio+0x22>
 80080b6:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <tcp_setprio+0x30>)
 80080b8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80080bc:	4906      	ldr	r1, [pc, #24]	; (80080d8 <tcp_setprio+0x34>)
 80080be:	4807      	ldr	r0, [pc, #28]	; (80080dc <tcp_setprio+0x38>)
 80080c0:	f008 f876 	bl	80101b0 <iprintf>
 80080c4:	e002      	b.n	80080cc <tcp_setprio+0x28>

  pcb->prio = prio;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	755a      	strb	r2, [r3, #21]
}
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	0801242c 	.word	0x0801242c
 80080d8:	08012964 	.word	0x08012964
 80080dc:	08012470 	.word	0x08012470

080080e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <tcp_seg_copy+0x1c>
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <tcp_seg_copy+0x4c>)
 80080f0:	f240 6282 	movw	r2, #1666	; 0x682
 80080f4:	490e      	ldr	r1, [pc, #56]	; (8008130 <tcp_seg_copy+0x50>)
 80080f6:	480f      	ldr	r0, [pc, #60]	; (8008134 <tcp_seg_copy+0x54>)
 80080f8:	f008 f85a 	bl	80101b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80080fc:	2003      	movs	r0, #3
 80080fe:	f7fd fd1d 	bl	8005b3c <memp_malloc>
 8008102:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <tcp_seg_copy+0x2e>
    return NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	e00a      	b.n	8008124 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800810e:	2210      	movs	r2, #16
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f008 f81c 	bl	8010150 <memcpy>
  pbuf_ref(cseg->p);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fc0b 	bl	8006938 <pbuf_ref>
  return cseg;
 8008122:	68fb      	ldr	r3, [r7, #12]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	0801242c 	.word	0x0801242c
 8008130:	08012980 	.word	0x08012980
 8008134:	08012470 	.word	0x08012470

08008138 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <tcp_recv_null+0x28>
 800814c:	4b12      	ldr	r3, [pc, #72]	; (8008198 <tcp_recv_null+0x60>)
 800814e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008152:	4912      	ldr	r1, [pc, #72]	; (800819c <tcp_recv_null+0x64>)
 8008154:	4812      	ldr	r0, [pc, #72]	; (80081a0 <tcp_recv_null+0x68>)
 8008156:	f008 f82b 	bl	80101b0 <iprintf>
 800815a:	f06f 030f 	mvn.w	r3, #15
 800815e:	e016      	b.n	800818e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	891b      	ldrh	r3, [r3, #8]
 800816a:	4619      	mov	r1, r3
 800816c:	68b8      	ldr	r0, [r7, #8]
 800816e:	f7ff fab5 	bl	80076dc <tcp_recved>
    pbuf_free(p);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fe fb40 	bl	80067f8 <pbuf_free>
 8008178:	e008      	b.n	800818c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800817a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008182:	68b8      	ldr	r0, [r7, #8]
 8008184:	f7fe ffe6 	bl	8007154 <tcp_close>
 8008188:	4603      	mov	r3, r0
 800818a:	e000      	b.n	800818e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	0801242c 	.word	0x0801242c
 800819c:	0801299c 	.word	0x0801299c
 80081a0:	08012470 	.word	0x08012470

080081a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	db01      	blt.n	80081ba <tcp_kill_prio+0x16>
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	e000      	b.n	80081bc <tcp_kill_prio+0x18>
 80081ba:	237f      	movs	r3, #127	; 0x7f
 80081bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d034      	beq.n	800822e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081d2:	4b19      	ldr	r3, [pc, #100]	; (8008238 <tcp_kill_prio+0x94>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e01f      	b.n	800821a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	7d5b      	ldrb	r3, [r3, #21]
 80081de:	7afa      	ldrb	r2, [r7, #11]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d80c      	bhi.n	80081fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80081e8:	7afa      	ldrb	r2, [r7, #11]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d112      	bne.n	8008214 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <tcp_kill_prio+0x98>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d80a      	bhi.n	8008214 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <tcp_kill_prio+0x98>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	7d5b      	ldrb	r3, [r3, #21]
 8008212:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1dc      	bne.n	80081da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008226:	6938      	ldr	r0, [r7, #16]
 8008228:	f7ff f87e 	bl	8007328 <tcp_abort>
 800822c:	e000      	b.n	8008230 <tcp_kill_prio+0x8c>
    return;
 800822e:	bf00      	nop
  }
}
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20006cf8 	.word	0x20006cf8
 800823c:	20006cfc 	.word	0x20006cfc

08008240 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d009      	beq.n	8008264 <tcp_kill_state+0x24>
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b09      	cmp	r3, #9
 8008254:	d006      	beq.n	8008264 <tcp_kill_state+0x24>
 8008256:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <tcp_kill_state+0x80>)
 8008258:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800825c:	4919      	ldr	r1, [pc, #100]	; (80082c4 <tcp_kill_state+0x84>)
 800825e:	481a      	ldr	r0, [pc, #104]	; (80082c8 <tcp_kill_state+0x88>)
 8008260:	f007 ffa6 	bl	80101b0 <iprintf>

  inactivity = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800826c:	4b17      	ldr	r3, [pc, #92]	; (80082cc <tcp_kill_state+0x8c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e017      	b.n	80082a4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	7d1b      	ldrb	r3, [r3, #20]
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	429a      	cmp	r2, r3
 800827c:	d10f      	bne.n	800829e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <tcp_kill_state+0x90>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	429a      	cmp	r2, r3
 800828c:	d807      	bhi.n	800829e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <tcp_kill_state+0x90>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e4      	bne.n	8008274 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80082b0:	2100      	movs	r1, #0
 80082b2:	6938      	ldr	r0, [r7, #16]
 80082b4:	f7fe ff7a 	bl	80071ac <tcp_abandon>
  }
}
 80082b8:	bf00      	nop
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	0801242c 	.word	0x0801242c
 80082c4:	080129b8 	.word	0x080129b8
 80082c8:	08012470 	.word	0x08012470
 80082cc:	20006cf8 	.word	0x20006cf8
 80082d0:	20006cfc 	.word	0x20006cfc

080082d4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <tcp_kill_timewait+0x58>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e012      	b.n	8008310 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082ea:	4b11      	ldr	r3, [pc, #68]	; (8008330 <tcp_kill_timewait+0x5c>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d807      	bhi.n	800830a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80082fa:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <tcp_kill_timewait+0x5c>)
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e9      	bne.n	80082ea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800831c:	68b8      	ldr	r0, [r7, #8]
 800831e:	f7ff f803 	bl	8007328 <tcp_abort>
  }
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20006d08 	.word	0x20006d08
 8008330:	20006cfc 	.word	0x20006cfc

08008334 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <tcp_handle_closepend+0x48>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008340:	e014      	b.n	800836c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8b5b      	ldrh	r3, [r3, #26]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d009      	beq.n	8008368 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	8b5b      	ldrh	r3, [r3, #26]
 8008358:	f023 0308 	bic.w	r3, r3, #8
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fe fe8c 	bl	8007080 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e7      	bne.n	8008342 <tcp_handle_closepend+0xe>
  }
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20006cf8 	.word	0x20006cf8

08008380 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800838a:	2001      	movs	r0, #1
 800838c:	f7fd fbd6 	bl	8005b3c <memp_malloc>
 8008390:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d126      	bne.n	80083e6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008398:	f7ff ffcc 	bl	8008334 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800839c:	f7ff ff9a 	bl	80082d4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083a0:	2001      	movs	r0, #1
 80083a2:	f7fd fbcb 	bl	8005b3c <memp_malloc>
 80083a6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11b      	bne.n	80083e6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80083ae:	2009      	movs	r0, #9
 80083b0:	f7ff ff46 	bl	8008240 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7fd fbc1 	bl	8005b3c <memp_malloc>
 80083ba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d111      	bne.n	80083e6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80083c2:	2008      	movs	r0, #8
 80083c4:	f7ff ff3c 	bl	8008240 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083c8:	2001      	movs	r0, #1
 80083ca:	f7fd fbb7 	bl	8005b3c <memp_malloc>
 80083ce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d107      	bne.n	80083e6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fee3 	bl	80081a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083de:	2001      	movs	r0, #1
 80083e0:	f7fd fbac 	bl	8005b3c <memp_malloc>
 80083e4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d03f      	beq.n	800846c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80083ec:	229c      	movs	r2, #156	; 0x9c
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f007 fed5 	bl	80101a0 <memset>
    pcb->prio = prio;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	79fa      	ldrb	r2, [r7, #7]
 80083fa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008402:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800840c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	22ff      	movs	r2, #255	; 0xff
 800841a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008422:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2206      	movs	r2, #6
 8008428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2206      	movs	r2, #6
 8008430:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008438:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008442:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <tcp_alloc+0xf8>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <tcp_alloc+0xfc>)
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a08      	ldr	r2, [pc, #32]	; (8008480 <tcp_alloc+0x100>)
 8008460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a07      	ldr	r2, [pc, #28]	; (8008484 <tcp_alloc+0x104>)
 8008468:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800846c:	68fb      	ldr	r3, [r7, #12]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20006cfc 	.word	0x20006cfc
 800847c:	2000052e 	.word	0x2000052e
 8008480:	08008139 	.word	0x08008139
 8008484:	006ddd00 	.word	0x006ddd00

08008488 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800848c:	2040      	movs	r0, #64	; 0x40
 800848e:	f7ff ff77 	bl	8008380 <tcp_alloc>
 8008492:	4603      	mov	r3, r0
}
 8008494:	4618      	mov	r0, r3
 8008496:	bd80      	pop	{r7, pc}

08008498 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80084a2:	2040      	movs	r0, #64	; 0x40
 80084a4:	f7ff ff6c 	bl	8008380 <tcp_alloc>
 80084a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80084aa:	68fb      	ldr	r3, [r7, #12]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	611a      	str	r2, [r3, #16]
  }
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7d1b      	ldrb	r3, [r3, #20]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d106      	bne.n	80084fe <tcp_recv+0x26>
 80084f0:	4b07      	ldr	r3, [pc, #28]	; (8008510 <tcp_recv+0x38>)
 80084f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80084f6:	4907      	ldr	r1, [pc, #28]	; (8008514 <tcp_recv+0x3c>)
 80084f8:	4807      	ldr	r0, [pc, #28]	; (8008518 <tcp_recv+0x40>)
 80084fa:	f007 fe59 	bl	80101b0 <iprintf>
    pcb->recv = recv;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	0801242c 	.word	0x0801242c
 8008514:	080129c8 	.word	0x080129c8
 8008518:	08012470 	.word	0x08012470

0800851c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00e      	beq.n	800854a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	7d1b      	ldrb	r3, [r3, #20]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d106      	bne.n	8008542 <tcp_sent+0x26>
 8008534:	4b07      	ldr	r3, [pc, #28]	; (8008554 <tcp_sent+0x38>)
 8008536:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800853a:	4907      	ldr	r1, [pc, #28]	; (8008558 <tcp_sent+0x3c>)
 800853c:	4807      	ldr	r0, [pc, #28]	; (800855c <tcp_sent+0x40>)
 800853e:	f007 fe37 	bl	80101b0 <iprintf>
    pcb->sent = sent;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	0801242c 	.word	0x0801242c
 8008558:	080129f0 	.word	0x080129f0
 800855c:	08012470 	.word	0x08012470

08008560 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00e      	beq.n	800858e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	7d1b      	ldrb	r3, [r3, #20]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d106      	bne.n	8008586 <tcp_err+0x26>
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <tcp_err+0x38>)
 800857a:	f640 020d 	movw	r2, #2061	; 0x80d
 800857e:	4907      	ldr	r1, [pc, #28]	; (800859c <tcp_err+0x3c>)
 8008580:	4807      	ldr	r0, [pc, #28]	; (80085a0 <tcp_err+0x40>)
 8008582:	f007 fe15 	bl	80101b0 <iprintf>
    pcb->errf = err;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	0801242c 	.word	0x0801242c
 800859c:	08012a18 	.word	0x08012a18
 80085a0:	08012470 	.word	0x08012470

080085a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <tcp_accept+0x22>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d104      	bne.n	80085c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	619a      	str	r2, [r3, #24]
  }
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d107      	bne.n	80085f8 <tcp_poll+0x24>
 80085e8:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <tcp_poll+0x50>)
 80085ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80085ee:	490e      	ldr	r1, [pc, #56]	; (8008628 <tcp_poll+0x54>)
 80085f0:	480e      	ldr	r0, [pc, #56]	; (800862c <tcp_poll+0x58>)
 80085f2:	f007 fddd 	bl	80101b0 <iprintf>
 80085f6:	e011      	b.n	800861c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7d1b      	ldrb	r3, [r3, #20]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d106      	bne.n	800860e <tcp_poll+0x3a>
 8008600:	4b08      	ldr	r3, [pc, #32]	; (8008624 <tcp_poll+0x50>)
 8008602:	f640 023e 	movw	r2, #2110	; 0x83e
 8008606:	490a      	ldr	r1, [pc, #40]	; (8008630 <tcp_poll+0x5c>)
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <tcp_poll+0x58>)
 800860a:	f007 fdd1 	bl	80101b0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	79fa      	ldrb	r2, [r7, #7]
 800861a:	775a      	strb	r2, [r3, #29]
}
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	0801242c 	.word	0x0801242c
 8008628:	08012a40 	.word	0x08012a40
 800862c:	08012470 	.word	0x08012470
 8008630:	08012a58 	.word	0x08012a58

08008634 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d107      	bne.n	8008652 <tcp_pcb_purge+0x1e>
 8008642:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <tcp_pcb_purge+0x94>)
 8008644:	f640 0251 	movw	r2, #2129	; 0x851
 8008648:	4920      	ldr	r1, [pc, #128]	; (80086cc <tcp_pcb_purge+0x98>)
 800864a:	4821      	ldr	r0, [pc, #132]	; (80086d0 <tcp_pcb_purge+0x9c>)
 800864c:	f007 fdb0 	bl	80101b0 <iprintf>
 8008650:	e037      	b.n	80086c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7d1b      	ldrb	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d033      	beq.n	80086c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800865e:	2b0a      	cmp	r3, #10
 8008660:	d02f      	beq.n	80086c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008666:	2b01      	cmp	r3, #1
 8008668:	d02b      	beq.n	80086c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe f8be 	bl	80067f8 <pbuf_free>
      pcb->refused_data = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f986 	bl	800899c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008696:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fcd3 	bl	8008048 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fcce 	bl	8008048 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	0801242c 	.word	0x0801242c
 80086cc:	08012a78 	.word	0x08012a78
 80086d0:	08012470 	.word	0x08012470

080086d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <tcp_pcb_remove+0x1e>
 80086e4:	4b3e      	ldr	r3, [pc, #248]	; (80087e0 <tcp_pcb_remove+0x10c>)
 80086e6:	f640 0283 	movw	r2, #2179	; 0x883
 80086ea:	493e      	ldr	r1, [pc, #248]	; (80087e4 <tcp_pcb_remove+0x110>)
 80086ec:	483e      	ldr	r0, [pc, #248]	; (80087e8 <tcp_pcb_remove+0x114>)
 80086ee:	f007 fd5f 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d106      	bne.n	8008706 <tcp_pcb_remove+0x32>
 80086f8:	4b39      	ldr	r3, [pc, #228]	; (80087e0 <tcp_pcb_remove+0x10c>)
 80086fa:	f640 0284 	movw	r2, #2180	; 0x884
 80086fe:	493b      	ldr	r1, [pc, #236]	; (80087ec <tcp_pcb_remove+0x118>)
 8008700:	4839      	ldr	r0, [pc, #228]	; (80087e8 <tcp_pcb_remove+0x114>)
 8008702:	f007 fd55 	bl	80101b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d105      	bne.n	800871c <tcp_pcb_remove+0x48>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	e013      	b.n	8008744 <tcp_pcb_remove+0x70>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e00c      	b.n	800873e <tcp_pcb_remove+0x6a>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d104      	bne.n	8008738 <tcp_pcb_remove+0x64>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e005      	b.n	8008744 <tcp_pcb_remove+0x70>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1ef      	bne.n	8008724 <tcp_pcb_remove+0x50>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2200      	movs	r2, #0
 8008748:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800874a:	6838      	ldr	r0, [r7, #0]
 800874c:	f7ff ff72 	bl	8008634 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	2b0a      	cmp	r3, #10
 8008756:	d013      	beq.n	8008780 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800875c:	2b01      	cmp	r3, #1
 800875e:	d00f      	beq.n	8008780 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	8b5b      	ldrh	r3, [r3, #26]
 8008764:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	8b5b      	ldrh	r3, [r3, #26]
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	b29a      	uxth	r2, r3
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800877a:	6838      	ldr	r0, [r7, #0]
 800877c:	f003 fbc2 	bl	800bf04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	7d1b      	ldrb	r3, [r3, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d020      	beq.n	80087ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d006      	beq.n	800879e <tcp_pcb_remove+0xca>
 8008790:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <tcp_pcb_remove+0x10c>)
 8008792:	f640 0293 	movw	r2, #2195	; 0x893
 8008796:	4916      	ldr	r1, [pc, #88]	; (80087f0 <tcp_pcb_remove+0x11c>)
 8008798:	4813      	ldr	r0, [pc, #76]	; (80087e8 <tcp_pcb_remove+0x114>)
 800879a:	f007 fd09 	bl	80101b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d006      	beq.n	80087b4 <tcp_pcb_remove+0xe0>
 80087a6:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <tcp_pcb_remove+0x10c>)
 80087a8:	f640 0294 	movw	r2, #2196	; 0x894
 80087ac:	4911      	ldr	r1, [pc, #68]	; (80087f4 <tcp_pcb_remove+0x120>)
 80087ae:	480e      	ldr	r0, [pc, #56]	; (80087e8 <tcp_pcb_remove+0x114>)
 80087b0:	f007 fcfe 	bl	80101b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <tcp_pcb_remove+0xf6>
 80087bc:	4b08      	ldr	r3, [pc, #32]	; (80087e0 <tcp_pcb_remove+0x10c>)
 80087be:	f640 0296 	movw	r2, #2198	; 0x896
 80087c2:	490d      	ldr	r1, [pc, #52]	; (80087f8 <tcp_pcb_remove+0x124>)
 80087c4:	4808      	ldr	r0, [pc, #32]	; (80087e8 <tcp_pcb_remove+0x114>)
 80087c6:	f007 fcf3 	bl	80101b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	0801242c 	.word	0x0801242c
 80087e4:	08012a94 	.word	0x08012a94
 80087e8:	08012470 	.word	0x08012470
 80087ec:	08012ab0 	.word	0x08012ab0
 80087f0:	08012ad0 	.word	0x08012ad0
 80087f4:	08012ae8 	.word	0x08012ae8
 80087f8:	08012b04 	.word	0x08012b04

080087fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d106      	bne.n	8008818 <tcp_next_iss+0x1c>
 800880a:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <tcp_next_iss+0x38>)
 800880c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008810:	4909      	ldr	r1, [pc, #36]	; (8008838 <tcp_next_iss+0x3c>)
 8008812:	480a      	ldr	r0, [pc, #40]	; (800883c <tcp_next_iss+0x40>)
 8008814:	f007 fccc 	bl	80101b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <tcp_next_iss+0x44>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	4b09      	ldr	r3, [pc, #36]	; (8008844 <tcp_next_iss+0x48>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4413      	add	r3, r2
 8008822:	4a07      	ldr	r2, [pc, #28]	; (8008840 <tcp_next_iss+0x44>)
 8008824:	6013      	str	r3, [r2, #0]
  return iss;
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <tcp_next_iss+0x44>)
 8008828:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	0801242c 	.word	0x0801242c
 8008838:	08012b1c 	.word	0x08012b1c
 800883c:	08012470 	.word	0x08012470
 8008840:	20000014 	.word	0x20000014
 8008844:	20006cfc 	.word	0x20006cfc

08008848 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <tcp_eff_send_mss_netif+0x22>
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <tcp_eff_send_mss_netif+0x68>)
 800885e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008862:	4914      	ldr	r1, [pc, #80]	; (80088b4 <tcp_eff_send_mss_netif+0x6c>)
 8008864:	4814      	ldr	r0, [pc, #80]	; (80088b8 <tcp_eff_send_mss_netif+0x70>)
 8008866:	f007 fca3 	bl	80101b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008870:	89fb      	ldrh	r3, [r7, #14]
 8008872:	e019      	b.n	80088a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008878:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800887a:	8afb      	ldrh	r3, [r7, #22]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d012      	beq.n	80088a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008880:	2328      	movs	r3, #40	; 0x28
 8008882:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008884:	8afa      	ldrh	r2, [r7, #22]
 8008886:	8abb      	ldrh	r3, [r7, #20]
 8008888:	429a      	cmp	r2, r3
 800888a:	d904      	bls.n	8008896 <tcp_eff_send_mss_netif+0x4e>
 800888c:	8afa      	ldrh	r2, [r7, #22]
 800888e:	8abb      	ldrh	r3, [r7, #20]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	b29b      	uxth	r3, r3
 8008894:	e000      	b.n	8008898 <tcp_eff_send_mss_netif+0x50>
 8008896:	2300      	movs	r3, #0
 8008898:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800889a:	8a7a      	ldrh	r2, [r7, #18]
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	4293      	cmp	r3, r2
 80088a0:	bf28      	it	cs
 80088a2:	4613      	movcs	r3, r2
 80088a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80088a6:	89fb      	ldrh	r3, [r7, #14]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	0801242c 	.word	0x0801242c
 80088b4:	08012b38 	.word	0x08012b38
 80088b8:	08012470 	.word	0x08012470

080088bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d119      	bne.n	8008904 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80088d0:	4b10      	ldr	r3, [pc, #64]	; (8008914 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80088d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80088d6:	4910      	ldr	r1, [pc, #64]	; (8008918 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80088d8:	4810      	ldr	r0, [pc, #64]	; (800891c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80088da:	f007 fc69 	bl	80101b0 <iprintf>

  while (pcb != NULL) {
 80088de:	e011      	b.n	8008904 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d108      	bne.n	80088fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7fe fd18 	bl	8007328 <tcp_abort>
      pcb = next;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	e002      	b.n	8008904 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1ea      	bne.n	80088e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	0801242c 	.word	0x0801242c
 8008918:	08012b60 	.word	0x08012b60
 800891c:	08012470 	.word	0x08012470

08008920 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d02a      	beq.n	8008986 <tcp_netif_ip_addr_changed+0x66>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d026      	beq.n	8008986 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <tcp_netif_ip_addr_changed+0x70>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff ffbc 	bl	80088bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008944:	4b13      	ldr	r3, [pc, #76]	; (8008994 <tcp_netif_ip_addr_changed+0x74>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ffb6 	bl	80088bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d017      	beq.n	8008986 <tcp_netif_ip_addr_changed+0x66>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d013      	beq.n	8008986 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800895e:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <tcp_netif_ip_addr_changed+0x78>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e00c      	b.n	8008980 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	429a      	cmp	r2, r3
 8008970:	d103      	bne.n	800897a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1ef      	bne.n	8008966 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20006cf8 	.word	0x20006cf8
 8008994:	20006d04 	.word	0x20006d04
 8008998:	20006d00 	.word	0x20006d00

0800899c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff fb49 	bl	8008048 <tcp_segs_free>
    pcb->ooseq = NULL;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b08d      	sub	sp, #52	; 0x34
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d105      	bne.n	80089e0 <tcp_input+0x1c>
 80089d4:	4b9b      	ldr	r3, [pc, #620]	; (8008c44 <tcp_input+0x280>)
 80089d6:	2283      	movs	r2, #131	; 0x83
 80089d8:	499b      	ldr	r1, [pc, #620]	; (8008c48 <tcp_input+0x284>)
 80089da:	489c      	ldr	r0, [pc, #624]	; (8008c4c <tcp_input+0x288>)
 80089dc:	f007 fbe8 	bl	80101b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	4a9a      	ldr	r2, [pc, #616]	; (8008c50 <tcp_input+0x28c>)
 80089e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	895b      	ldrh	r3, [r3, #10]
 80089ec:	2b13      	cmp	r3, #19
 80089ee:	f240 83c4 	bls.w	800917a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80089f2:	4b98      	ldr	r3, [pc, #608]	; (8008c54 <tcp_input+0x290>)
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	4a97      	ldr	r2, [pc, #604]	; (8008c54 <tcp_input+0x290>)
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f006 fc25 	bl	800f24c <ip4_addr_isbroadcast_u32>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 83ba 	bne.w	800917e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a0a:	4b92      	ldr	r3, [pc, #584]	; (8008c54 <tcp_input+0x290>)
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a12:	2be0      	cmp	r3, #224	; 0xe0
 8008a14:	f000 83b3 	beq.w	800917e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a18:	4b8d      	ldr	r3, [pc, #564]	; (8008c50 <tcp_input+0x28c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	899b      	ldrh	r3, [r3, #12]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fc fbcb 	bl	80051bc <lwip_htons>
 8008a26:	4603      	mov	r3, r0
 8008a28:	0b1b      	lsrs	r3, r3, #12
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a32:	7cbb      	ldrb	r3, [r7, #18]
 8008a34:	2b13      	cmp	r3, #19
 8008a36:	f240 83a4 	bls.w	8009182 <tcp_input+0x7be>
 8008a3a:	7cbb      	ldrb	r3, [r7, #18]
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	891b      	ldrh	r3, [r3, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	f200 839d 	bhi.w	8009182 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008a48:	7cbb      	ldrb	r3, [r7, #18]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b14      	subs	r3, #20
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	4b81      	ldr	r3, [pc, #516]	; (8008c58 <tcp_input+0x294>)
 8008a52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008a54:	4b81      	ldr	r3, [pc, #516]	; (8008c5c <tcp_input+0x298>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	895a      	ldrh	r2, [r3, #10]
 8008a5e:	7cbb      	ldrb	r3, [r7, #18]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d309      	bcc.n	8008a7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008a66:	4b7c      	ldr	r3, [pc, #496]	; (8008c58 <tcp_input+0x294>)
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	4b7d      	ldr	r3, [pc, #500]	; (8008c60 <tcp_input+0x29c>)
 8008a6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008a6e:	7cbb      	ldrb	r3, [r7, #18]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7fd fe3a 	bl	80066ec <pbuf_remove_header>
 8008a78:	e04e      	b.n	8008b18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <tcp_input+0xca>
 8008a82:	4b70      	ldr	r3, [pc, #448]	; (8008c44 <tcp_input+0x280>)
 8008a84:	22c2      	movs	r2, #194	; 0xc2
 8008a86:	4977      	ldr	r1, [pc, #476]	; (8008c64 <tcp_input+0x2a0>)
 8008a88:	4870      	ldr	r0, [pc, #448]	; (8008c4c <tcp_input+0x288>)
 8008a8a:	f007 fb91 	bl	80101b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008a8e:	2114      	movs	r1, #20
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fd fe2b 	bl	80066ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	895a      	ldrh	r2, [r3, #10]
 8008a9a:	4b71      	ldr	r3, [pc, #452]	; (8008c60 <tcp_input+0x29c>)
 8008a9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008a9e:	4b6e      	ldr	r3, [pc, #440]	; (8008c58 <tcp_input+0x294>)
 8008aa0:	881a      	ldrh	r2, [r3, #0]
 8008aa2:	4b6f      	ldr	r3, [pc, #444]	; (8008c60 <tcp_input+0x29c>)
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008aaa:	4b6d      	ldr	r3, [pc, #436]	; (8008c60 <tcp_input+0x29c>)
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fd fe1b 	bl	80066ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	895b      	ldrh	r3, [r3, #10]
 8008abc:	8a3a      	ldrh	r2, [r7, #16]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	f200 8361 	bhi.w	8009186 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	4a64      	ldr	r2, [pc, #400]	; (8008c5c <tcp_input+0x298>)
 8008acc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	8a3a      	ldrh	r2, [r7, #16]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fd fe08 	bl	80066ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	891a      	ldrh	r2, [r3, #8]
 8008ae0:	8a3b      	ldrh	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	895b      	ldrh	r3, [r3, #10]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <tcp_input+0x13a>
 8008af2:	4b54      	ldr	r3, [pc, #336]	; (8008c44 <tcp_input+0x280>)
 8008af4:	22df      	movs	r2, #223	; 0xdf
 8008af6:	495c      	ldr	r1, [pc, #368]	; (8008c68 <tcp_input+0x2a4>)
 8008af8:	4854      	ldr	r0, [pc, #336]	; (8008c4c <tcp_input+0x288>)
 8008afa:	f007 fb59 	bl	80101b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	891a      	ldrh	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	891b      	ldrh	r3, [r3, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d005      	beq.n	8008b18 <tcp_input+0x154>
 8008b0c:	4b4d      	ldr	r3, [pc, #308]	; (8008c44 <tcp_input+0x280>)
 8008b0e:	22e0      	movs	r2, #224	; 0xe0
 8008b10:	4956      	ldr	r1, [pc, #344]	; (8008c6c <tcp_input+0x2a8>)
 8008b12:	484e      	ldr	r0, [pc, #312]	; (8008c4c <tcp_input+0x288>)
 8008b14:	f007 fb4c 	bl	80101b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b18:	4b4d      	ldr	r3, [pc, #308]	; (8008c50 <tcp_input+0x28c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4a4b      	ldr	r2, [pc, #300]	; (8008c50 <tcp_input+0x28c>)
 8008b22:	6814      	ldr	r4, [r2, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fc fb49 	bl	80051bc <lwip_htons>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b2e:	4b48      	ldr	r3, [pc, #288]	; (8008c50 <tcp_input+0x28c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	885b      	ldrh	r3, [r3, #2]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	4a46      	ldr	r2, [pc, #280]	; (8008c50 <tcp_input+0x28c>)
 8008b38:	6814      	ldr	r4, [r2, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fc fb3e 	bl	80051bc <lwip_htons>
 8008b40:	4603      	mov	r3, r0
 8008b42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b44:	4b42      	ldr	r3, [pc, #264]	; (8008c50 <tcp_input+0x28c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4a41      	ldr	r2, [pc, #260]	; (8008c50 <tcp_input+0x28c>)
 8008b4c:	6814      	ldr	r4, [r2, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fc fb49 	bl	80051e6 <lwip_htonl>
 8008b54:	4603      	mov	r3, r0
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	4a45      	ldr	r2, [pc, #276]	; (8008c70 <tcp_input+0x2ac>)
 8008b5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b5e:	4b3c      	ldr	r3, [pc, #240]	; (8008c50 <tcp_input+0x28c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	4a3a      	ldr	r2, [pc, #232]	; (8008c50 <tcp_input+0x28c>)
 8008b66:	6814      	ldr	r4, [r2, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fc fb3c 	bl	80051e6 <lwip_htonl>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	60a3      	str	r3, [r4, #8]
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	4a3f      	ldr	r2, [pc, #252]	; (8008c74 <tcp_input+0x2b0>)
 8008b76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008b78:	4b35      	ldr	r3, [pc, #212]	; (8008c50 <tcp_input+0x28c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	89db      	ldrh	r3, [r3, #14]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	4a33      	ldr	r2, [pc, #204]	; (8008c50 <tcp_input+0x28c>)
 8008b82:	6814      	ldr	r4, [r2, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fc fb19 	bl	80051bc <lwip_htons>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008b8e:	4b30      	ldr	r3, [pc, #192]	; (8008c50 <tcp_input+0x28c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	899b      	ldrh	r3, [r3, #12]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fc fb10 	bl	80051bc <lwip_htons>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	4b34      	ldr	r3, [pc, #208]	; (8008c78 <tcp_input+0x2b4>)
 8008ba8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	891a      	ldrh	r2, [r3, #8]
 8008bae:	4b33      	ldr	r3, [pc, #204]	; (8008c7c <tcp_input+0x2b8>)
 8008bb0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008bb2:	4b31      	ldr	r3, [pc, #196]	; (8008c78 <tcp_input+0x2b4>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <tcp_input+0x214>
    tcplen++;
 8008bbe:	4b2f      	ldr	r3, [pc, #188]	; (8008c7c <tcp_input+0x2b8>)
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	4b2d      	ldr	r3, [pc, #180]	; (8008c7c <tcp_input+0x2b8>)
 8008bc8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	891a      	ldrh	r2, [r3, #8]
 8008bce:	4b2b      	ldr	r3, [pc, #172]	; (8008c7c <tcp_input+0x2b8>)
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	f200 82d9 	bhi.w	800918a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bdc:	4b28      	ldr	r3, [pc, #160]	; (8008c80 <tcp_input+0x2bc>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	61fb      	str	r3, [r7, #28]
 8008be2:	e09d      	b.n	8008d20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	7d1b      	ldrb	r3, [r3, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <tcp_input+0x234>
 8008bec:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <tcp_input+0x280>)
 8008bee:	22fb      	movs	r2, #251	; 0xfb
 8008bf0:	4924      	ldr	r1, [pc, #144]	; (8008c84 <tcp_input+0x2c0>)
 8008bf2:	4816      	ldr	r0, [pc, #88]	; (8008c4c <tcp_input+0x288>)
 8008bf4:	f007 fadc 	bl	80101b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	7d1b      	ldrb	r3, [r3, #20]
 8008bfc:	2b0a      	cmp	r3, #10
 8008bfe:	d105      	bne.n	8008c0c <tcp_input+0x248>
 8008c00:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <tcp_input+0x280>)
 8008c02:	22fc      	movs	r2, #252	; 0xfc
 8008c04:	4920      	ldr	r1, [pc, #128]	; (8008c88 <tcp_input+0x2c4>)
 8008c06:	4811      	ldr	r0, [pc, #68]	; (8008c4c <tcp_input+0x288>)
 8008c08:	f007 fad2 	bl	80101b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d105      	bne.n	8008c20 <tcp_input+0x25c>
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <tcp_input+0x280>)
 8008c16:	22fd      	movs	r2, #253	; 0xfd
 8008c18:	491c      	ldr	r1, [pc, #112]	; (8008c8c <tcp_input+0x2c8>)
 8008c1a:	480c      	ldr	r0, [pc, #48]	; (8008c4c <tcp_input+0x288>)
 8008c1c:	f007 fac8 	bl	80101b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	7a1b      	ldrb	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d033      	beq.n	8008c90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	7a1a      	ldrb	r2, [r3, #8]
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <tcp_input+0x290>)
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c34:	3301      	adds	r3, #1
 8008c36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d029      	beq.n	8008c90 <tcp_input+0x2cc>
      prev = pcb;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	61bb      	str	r3, [r7, #24]
      continue;
 8008c40:	e06b      	b.n	8008d1a <tcp_input+0x356>
 8008c42:	bf00      	nop
 8008c44:	08012b94 	.word	0x08012b94
 8008c48:	08012bc8 	.word	0x08012bc8
 8008c4c:	08012be0 	.word	0x08012be0
 8008c50:	20000540 	.word	0x20000540
 8008c54:	200037b4 	.word	0x200037b4
 8008c58:	20000544 	.word	0x20000544
 8008c5c:	20000548 	.word	0x20000548
 8008c60:	20000546 	.word	0x20000546
 8008c64:	08012c08 	.word	0x08012c08
 8008c68:	08012c18 	.word	0x08012c18
 8008c6c:	08012c24 	.word	0x08012c24
 8008c70:	20000550 	.word	0x20000550
 8008c74:	20000554 	.word	0x20000554
 8008c78:	2000055c 	.word	0x2000055c
 8008c7c:	2000055a 	.word	0x2000055a
 8008c80:	20006cf8 	.word	0x20006cf8
 8008c84:	08012c44 	.word	0x08012c44
 8008c88:	08012c6c 	.word	0x08012c6c
 8008c8c:	08012c98 	.word	0x08012c98
    }

    if (pcb->remote_port == tcphdr->src &&
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	8b1a      	ldrh	r2, [r3, #24]
 8008c94:	4b94      	ldr	r3, [pc, #592]	; (8008ee8 <tcp_input+0x524>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d13a      	bne.n	8008d16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	8ada      	ldrh	r2, [r3, #22]
 8008ca4:	4b90      	ldr	r3, [pc, #576]	; (8008ee8 <tcp_input+0x524>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d132      	bne.n	8008d16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b8d      	ldr	r3, [pc, #564]	; (8008eec <tcp_input+0x528>)
 8008cb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d12c      	bne.n	8008d16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	4b8a      	ldr	r3, [pc, #552]	; (8008eec <tcp_input+0x528>)
 8008cc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d126      	bne.n	8008d16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d106      	bne.n	8008ce0 <tcp_input+0x31c>
 8008cd2:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <tcp_input+0x52c>)
 8008cd4:	f240 120d 	movw	r2, #269	; 0x10d
 8008cd8:	4986      	ldr	r1, [pc, #536]	; (8008ef4 <tcp_input+0x530>)
 8008cda:	4887      	ldr	r0, [pc, #540]	; (8008ef8 <tcp_input+0x534>)
 8008cdc:	f007 fa68 	bl	80101b0 <iprintf>
      if (prev != NULL) {
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <tcp_input+0x338>
        prev->next = pcb->next;
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008cee:	4b83      	ldr	r3, [pc, #524]	; (8008efc <tcp_input+0x538>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008cf6:	4a81      	ldr	r2, [pc, #516]	; (8008efc <tcp_input+0x538>)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d111      	bne.n	8008d2a <tcp_input+0x366>
 8008d06:	4b7a      	ldr	r3, [pc, #488]	; (8008ef0 <tcp_input+0x52c>)
 8008d08:	f240 1215 	movw	r2, #277	; 0x115
 8008d0c:	497c      	ldr	r1, [pc, #496]	; (8008f00 <tcp_input+0x53c>)
 8008d0e:	487a      	ldr	r0, [pc, #488]	; (8008ef8 <tcp_input+0x534>)
 8008d10:	f007 fa4e 	bl	80101b0 <iprintf>
      break;
 8008d14:	e009      	b.n	8008d2a <tcp_input+0x366>
    }
    prev = pcb;
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f47f af5e 	bne.w	8008be4 <tcp_input+0x220>
 8008d28:	e000      	b.n	8008d2c <tcp_input+0x368>
      break;
 8008d2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 8095 	bne.w	8008e5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d34:	4b73      	ldr	r3, [pc, #460]	; (8008f04 <tcp_input+0x540>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	e03f      	b.n	8008dbc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	7d1b      	ldrb	r3, [r3, #20]
 8008d40:	2b0a      	cmp	r3, #10
 8008d42:	d006      	beq.n	8008d52 <tcp_input+0x38e>
 8008d44:	4b6a      	ldr	r3, [pc, #424]	; (8008ef0 <tcp_input+0x52c>)
 8008d46:	f240 121f 	movw	r2, #287	; 0x11f
 8008d4a:	496f      	ldr	r1, [pc, #444]	; (8008f08 <tcp_input+0x544>)
 8008d4c:	486a      	ldr	r0, [pc, #424]	; (8008ef8 <tcp_input+0x534>)
 8008d4e:	f007 fa2f 	bl	80101b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	7a1b      	ldrb	r3, [r3, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	7a1a      	ldrb	r2, [r3, #8]
 8008d5e:	4b63      	ldr	r3, [pc, #396]	; (8008eec <tcp_input+0x528>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d66:	3301      	adds	r3, #1
 8008d68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d122      	bne.n	8008db4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	8b1a      	ldrh	r2, [r3, #24]
 8008d72:	4b5d      	ldr	r3, [pc, #372]	; (8008ee8 <tcp_input+0x524>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d11b      	bne.n	8008db6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	8ada      	ldrh	r2, [r3, #22]
 8008d82:	4b59      	ldr	r3, [pc, #356]	; (8008ee8 <tcp_input+0x524>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	885b      	ldrh	r3, [r3, #2]
 8008d88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d113      	bne.n	8008db6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	4b56      	ldr	r3, [pc, #344]	; (8008eec <tcp_input+0x528>)
 8008d94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d10d      	bne.n	8008db6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b53      	ldr	r3, [pc, #332]	; (8008eec <tcp_input+0x528>)
 8008da0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d107      	bne.n	8008db6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008da6:	69f8      	ldr	r0, [r7, #28]
 8008da8:	f000 fb54 	bl	8009454 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fd fd23 	bl	80067f8 <pbuf_free>
        return;
 8008db2:	e1f0      	b.n	8009196 <tcp_input+0x7d2>
        continue;
 8008db4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1bc      	bne.n	8008d3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dc6:	4b51      	ldr	r3, [pc, #324]	; (8008f0c <tcp_input+0x548>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e02a      	b.n	8008e24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	7a1b      	ldrb	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00c      	beq.n	8008df0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	7a1a      	ldrb	r2, [r3, #8]
 8008dda:	4b44      	ldr	r3, [pc, #272]	; (8008eec <tcp_input+0x528>)
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de2:	3301      	adds	r3, #1
 8008de4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d002      	beq.n	8008df0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	61bb      	str	r3, [r7, #24]
        continue;
 8008dee:	e016      	b.n	8008e1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	8ada      	ldrh	r2, [r3, #22]
 8008df4:	4b3c      	ldr	r3, [pc, #240]	; (8008ee8 <tcp_input+0x524>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d10c      	bne.n	8008e1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	4b39      	ldr	r3, [pc, #228]	; (8008eec <tcp_input+0x528>)
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d00f      	beq.n	8008e2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00d      	beq.n	8008e2e <tcp_input+0x46a>
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1d1      	bne.n	8008dce <tcp_input+0x40a>
 8008e2a:	e000      	b.n	8008e2e <tcp_input+0x46a>
            break;
 8008e2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d014      	beq.n	8008e5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008e42:	4b32      	ldr	r3, [pc, #200]	; (8008f0c <tcp_input+0x548>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008e4a:	4a30      	ldr	r2, [pc, #192]	; (8008f0c <tcp_input+0x548>)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e50:	6978      	ldr	r0, [r7, #20]
 8008e52:	f000 fa01 	bl	8009258 <tcp_listen_input>
      }
      pbuf_free(p);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fd fcce 	bl	80067f8 <pbuf_free>
      return;
 8008e5c:	e19b      	b.n	8009196 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8160 	beq.w	8009126 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008e66:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <tcp_input+0x54c>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	891a      	ldrh	r2, [r3, #8]
 8008e70:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <tcp_input+0x54c>)
 8008e72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008e74:	4a26      	ldr	r2, [pc, #152]	; (8008f10 <tcp_input+0x54c>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008e7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <tcp_input+0x524>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a24      	ldr	r2, [pc, #144]	; (8008f10 <tcp_input+0x54c>)
 8008e80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <tcp_input+0x550>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008e88:	4b23      	ldr	r3, [pc, #140]	; (8008f18 <tcp_input+0x554>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <tcp_input+0x558>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008e94:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <tcp_input+0x55c>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d006      	beq.n	8008eae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7b5b      	ldrb	r3, [r3, #13]
 8008ea4:	f043 0301 	orr.w	r3, r3, #1
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d038      	beq.n	8008f28 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008eb6:	69f8      	ldr	r0, [r7, #28]
 8008eb8:	f7ff f84a 	bl	8007f50 <tcp_process_refused_data>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f113 0f0d 	cmn.w	r3, #13
 8008ec2:	d007      	beq.n	8008ed4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d02d      	beq.n	8008f28 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ecc:	4b15      	ldr	r3, [pc, #84]	; (8008f24 <tcp_input+0x560>)
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d029      	beq.n	8008f28 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f040 8104 	bne.w	80090e6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008ede:	69f8      	ldr	r0, [r7, #28]
 8008ee0:	f003 fe16 	bl	800cb10 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008ee4:	e0ff      	b.n	80090e6 <tcp_input+0x722>
 8008ee6:	bf00      	nop
 8008ee8:	20000540 	.word	0x20000540
 8008eec:	200037b4 	.word	0x200037b4
 8008ef0:	08012b94 	.word	0x08012b94
 8008ef4:	08012cc0 	.word	0x08012cc0
 8008ef8:	08012be0 	.word	0x08012be0
 8008efc:	20006cf8 	.word	0x20006cf8
 8008f00:	08012cec 	.word	0x08012cec
 8008f04:	20006d08 	.word	0x20006d08
 8008f08:	08012d18 	.word	0x08012d18
 8008f0c:	20006d00 	.word	0x20006d00
 8008f10:	20000530 	.word	0x20000530
 8008f14:	20000560 	.word	0x20000560
 8008f18:	2000055d 	.word	0x2000055d
 8008f1c:	20000558 	.word	0x20000558
 8008f20:	2000055c 	.word	0x2000055c
 8008f24:	2000055a 	.word	0x2000055a
      }
    }
    tcp_input_pcb = pcb;
 8008f28:	4a9c      	ldr	r2, [pc, #624]	; (800919c <tcp_input+0x7d8>)
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f2e:	69f8      	ldr	r0, [r7, #28]
 8008f30:	f000 fb0a 	bl	8009548 <tcp_process>
 8008f34:	4603      	mov	r3, r0
 8008f36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f3c:	f113 0f0d 	cmn.w	r3, #13
 8008f40:	f000 80d3 	beq.w	80090ea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008f44:	4b96      	ldr	r3, [pc, #600]	; (80091a0 <tcp_input+0x7dc>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d015      	beq.n	8008f7c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <tcp_input+0x5a8>
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	6912      	ldr	r2, [r2, #16]
 8008f64:	f06f 010d 	mvn.w	r1, #13
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f6c:	69f9      	ldr	r1, [r7, #28]
 8008f6e:	488d      	ldr	r0, [pc, #564]	; (80091a4 <tcp_input+0x7e0>)
 8008f70:	f7ff fbb0 	bl	80086d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8008f74:	69f8      	ldr	r0, [r7, #28]
 8008f76:	f7fd feef 	bl	8006d58 <tcp_free>
 8008f7a:	e0c1      	b.n	8009100 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008f80:	4b89      	ldr	r3, [pc, #548]	; (80091a8 <tcp_input+0x7e4>)
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01d      	beq.n	8008fc4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008f88:	4b87      	ldr	r3, [pc, #540]	; (80091a8 <tcp_input+0x7e4>)
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <tcp_input+0x5ea>
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	6910      	ldr	r0, [r2, #16]
 8008fa2:	89fa      	ldrh	r2, [r7, #14]
 8008fa4:	69f9      	ldr	r1, [r7, #28]
 8008fa6:	4798      	blx	r3
 8008fa8:	4603      	mov	r3, r0
 8008faa:	74fb      	strb	r3, [r7, #19]
 8008fac:	e001      	b.n	8008fb2 <tcp_input+0x5ee>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008fb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fb6:	f113 0f0d 	cmn.w	r3, #13
 8008fba:	f000 8098 	beq.w	80090ee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008fbe:	4b7a      	ldr	r3, [pc, #488]	; (80091a8 <tcp_input+0x7e4>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008fc4:	69f8      	ldr	r0, [r7, #28]
 8008fc6:	f000 f907 	bl	80091d8 <tcp_input_delayed_close>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8090 	bne.w	80090f2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008fd2:	4b76      	ldr	r3, [pc, #472]	; (80091ac <tcp_input+0x7e8>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d041      	beq.n	800905e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d006      	beq.n	8008ff0 <tcp_input+0x62c>
 8008fe2:	4b73      	ldr	r3, [pc, #460]	; (80091b0 <tcp_input+0x7ec>)
 8008fe4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008fe8:	4972      	ldr	r1, [pc, #456]	; (80091b4 <tcp_input+0x7f0>)
 8008fea:	4873      	ldr	r0, [pc, #460]	; (80091b8 <tcp_input+0x7f4>)
 8008fec:	f007 f8e0 	bl	80101b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	8b5b      	ldrh	r3, [r3, #26]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d008      	beq.n	800900e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ffc:	4b6b      	ldr	r3, [pc, #428]	; (80091ac <tcp_input+0x7e8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fd fbf9 	bl	80067f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009006:	69f8      	ldr	r0, [r7, #28]
 8009008:	f7fe f98e 	bl	8007328 <tcp_abort>
            goto aborted;
 800900c:	e078      	b.n	8009100 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00c      	beq.n	8009032 <tcp_input+0x66e>
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	6918      	ldr	r0, [r3, #16]
 8009022:	4b62      	ldr	r3, [pc, #392]	; (80091ac <tcp_input+0x7e8>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	69f9      	ldr	r1, [r7, #28]
 800902a:	47a0      	blx	r4
 800902c:	4603      	mov	r3, r0
 800902e:	74fb      	strb	r3, [r7, #19]
 8009030:	e008      	b.n	8009044 <tcp_input+0x680>
 8009032:	4b5e      	ldr	r3, [pc, #376]	; (80091ac <tcp_input+0x7e8>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	2300      	movs	r3, #0
 8009038:	69f9      	ldr	r1, [r7, #28]
 800903a:	2000      	movs	r0, #0
 800903c:	f7ff f87c 	bl	8008138 <tcp_recv_null>
 8009040:	4603      	mov	r3, r0
 8009042:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009044:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009048:	f113 0f0d 	cmn.w	r3, #13
 800904c:	d053      	beq.n	80090f6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800904e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009056:	4b55      	ldr	r3, [pc, #340]	; (80091ac <tcp_input+0x7e8>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800905e:	4b50      	ldr	r3, [pc, #320]	; (80091a0 <tcp_input+0x7dc>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d030      	beq.n	80090cc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009076:	7b5a      	ldrb	r2, [r3, #13]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800907c:	f042 0220 	orr.w	r2, r2, #32
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	735a      	strb	r2, [r3, #13]
 8009084:	e022      	b.n	80090cc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800908e:	d005      	beq.n	800909c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009094:	3301      	adds	r3, #1
 8009096:	b29a      	uxth	r2, r3
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <tcp_input+0x6fa>
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	6918      	ldr	r0, [r3, #16]
 80090b0:	2300      	movs	r3, #0
 80090b2:	2200      	movs	r2, #0
 80090b4:	69f9      	ldr	r1, [r7, #28]
 80090b6:	47a0      	blx	r4
 80090b8:	4603      	mov	r3, r0
 80090ba:	74fb      	strb	r3, [r7, #19]
 80090bc:	e001      	b.n	80090c2 <tcp_input+0x6fe>
 80090be:	2300      	movs	r3, #0
 80090c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80090c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090c6:	f113 0f0d 	cmn.w	r3, #13
 80090ca:	d016      	beq.n	80090fa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80090cc:	4b33      	ldr	r3, [pc, #204]	; (800919c <tcp_input+0x7d8>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80090d2:	69f8      	ldr	r0, [r7, #28]
 80090d4:	f000 f880 	bl	80091d8 <tcp_input_delayed_close>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10f      	bne.n	80090fe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80090de:	69f8      	ldr	r0, [r7, #28]
 80090e0:	f002 ff10 	bl	800bf04 <tcp_output>
 80090e4:	e00c      	b.n	8009100 <tcp_input+0x73c>
        goto aborted;
 80090e6:	bf00      	nop
 80090e8:	e00a      	b.n	8009100 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80090ea:	bf00      	nop
 80090ec:	e008      	b.n	8009100 <tcp_input+0x73c>
              goto aborted;
 80090ee:	bf00      	nop
 80090f0:	e006      	b.n	8009100 <tcp_input+0x73c>
          goto aborted;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <tcp_input+0x73c>
            goto aborted;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <tcp_input+0x73c>
              goto aborted;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <tcp_input+0x73c>
          goto aborted;
 80090fe:	bf00      	nop
    tcp_input_pcb = NULL;
 8009100:	4b26      	ldr	r3, [pc, #152]	; (800919c <tcp_input+0x7d8>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009106:	4b29      	ldr	r3, [pc, #164]	; (80091ac <tcp_input+0x7e8>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800910c:	4b2b      	ldr	r3, [pc, #172]	; (80091bc <tcp_input+0x7f8>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d03f      	beq.n	8009194 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009114:	4b29      	ldr	r3, [pc, #164]	; (80091bc <tcp_input+0x7f8>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4618      	mov	r0, r3
 800911a:	f7fd fb6d 	bl	80067f8 <pbuf_free>
      inseg.p = NULL;
 800911e:	4b27      	ldr	r3, [pc, #156]	; (80091bc <tcp_input+0x7f8>)
 8009120:	2200      	movs	r2, #0
 8009122:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009124:	e036      	b.n	8009194 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009126:	4b26      	ldr	r3, [pc, #152]	; (80091c0 <tcp_input+0x7fc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	899b      	ldrh	r3, [r3, #12]
 800912c:	b29b      	uxth	r3, r3
 800912e:	4618      	mov	r0, r3
 8009130:	f7fc f844 	bl	80051bc <lwip_htons>
 8009134:	4603      	mov	r3, r0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d118      	bne.n	8009172 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009140:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <tcp_input+0x800>)
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <tcp_input+0x804>)
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	4b20      	ldr	r3, [pc, #128]	; (80091cc <tcp_input+0x808>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009150:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <tcp_input+0x7fc>)
 8009152:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009154:	885b      	ldrh	r3, [r3, #2]
 8009156:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009158:	4a19      	ldr	r2, [pc, #100]	; (80091c0 <tcp_input+0x7fc>)
 800915a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	b292      	uxth	r2, r2
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <tcp_input+0x80c>)
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <tcp_input+0x810>)
 800916a:	4602      	mov	r2, r0
 800916c:	2000      	movs	r0, #0
 800916e:	f003 fc7d 	bl	800ca6c <tcp_rst>
    pbuf_free(p);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fd fb40 	bl	80067f8 <pbuf_free>
  return;
 8009178:	e00c      	b.n	8009194 <tcp_input+0x7d0>
    goto dropped;
 800917a:	bf00      	nop
 800917c:	e006      	b.n	800918c <tcp_input+0x7c8>
    goto dropped;
 800917e:	bf00      	nop
 8009180:	e004      	b.n	800918c <tcp_input+0x7c8>
    goto dropped;
 8009182:	bf00      	nop
 8009184:	e002      	b.n	800918c <tcp_input+0x7c8>
      goto dropped;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <tcp_input+0x7c8>
      goto dropped;
 800918a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7fd fb33 	bl	80067f8 <pbuf_free>
 8009192:	e000      	b.n	8009196 <tcp_input+0x7d2>
  return;
 8009194:	bf00      	nop
}
 8009196:	3724      	adds	r7, #36	; 0x24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}
 800919c:	20006d0c 	.word	0x20006d0c
 80091a0:	2000055d 	.word	0x2000055d
 80091a4:	20006cf8 	.word	0x20006cf8
 80091a8:	20000558 	.word	0x20000558
 80091ac:	20000560 	.word	0x20000560
 80091b0:	08012b94 	.word	0x08012b94
 80091b4:	08012d48 	.word	0x08012d48
 80091b8:	08012be0 	.word	0x08012be0
 80091bc:	20000530 	.word	0x20000530
 80091c0:	20000540 	.word	0x20000540
 80091c4:	20000554 	.word	0x20000554
 80091c8:	2000055a 	.word	0x2000055a
 80091cc:	20000550 	.word	0x20000550
 80091d0:	200037c4 	.word	0x200037c4
 80091d4:	200037c8 	.word	0x200037c8

080091d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <tcp_input_delayed_close+0x1c>
 80091e6:	4b17      	ldr	r3, [pc, #92]	; (8009244 <tcp_input_delayed_close+0x6c>)
 80091e8:	f240 225a 	movw	r2, #602	; 0x25a
 80091ec:	4916      	ldr	r1, [pc, #88]	; (8009248 <tcp_input_delayed_close+0x70>)
 80091ee:	4817      	ldr	r0, [pc, #92]	; (800924c <tcp_input_delayed_close+0x74>)
 80091f0:	f006 ffde 	bl	80101b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80091f4:	4b16      	ldr	r3, [pc, #88]	; (8009250 <tcp_input_delayed_close+0x78>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d01c      	beq.n	800923a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	8b5b      	ldrh	r3, [r3, #26]
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10d      	bne.n	8009228 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <tcp_input_delayed_close+0x50>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6912      	ldr	r2, [r2, #16]
 8009220:	f06f 010e 	mvn.w	r1, #14
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	480a      	ldr	r0, [pc, #40]	; (8009254 <tcp_input_delayed_close+0x7c>)
 800922c:	f7ff fa52 	bl	80086d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7fd fd91 	bl	8006d58 <tcp_free>
    return 1;
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	08012b94 	.word	0x08012b94
 8009248:	08012d64 	.word	0x08012d64
 800924c:	08012be0 	.word	0x08012be0
 8009250:	2000055d 	.word	0x2000055d
 8009254:	20006cf8 	.word	0x20006cf8

08009258 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b08b      	sub	sp, #44	; 0x2c
 800925c:	af04      	add	r7, sp, #16
 800925e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009260:	4b6f      	ldr	r3, [pc, #444]	; (8009420 <tcp_listen_input+0x1c8>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 80d2 	bne.w	8009412 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <tcp_listen_input+0x2a>
 8009274:	4b6b      	ldr	r3, [pc, #428]	; (8009424 <tcp_listen_input+0x1cc>)
 8009276:	f240 2281 	movw	r2, #641	; 0x281
 800927a:	496b      	ldr	r1, [pc, #428]	; (8009428 <tcp_listen_input+0x1d0>)
 800927c:	486b      	ldr	r0, [pc, #428]	; (800942c <tcp_listen_input+0x1d4>)
 800927e:	f006 ff97 	bl	80101b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009282:	4b67      	ldr	r3, [pc, #412]	; (8009420 <tcp_listen_input+0x1c8>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800928e:	4b68      	ldr	r3, [pc, #416]	; (8009430 <tcp_listen_input+0x1d8>)
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	4b68      	ldr	r3, [pc, #416]	; (8009434 <tcp_listen_input+0x1dc>)
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	4b67      	ldr	r3, [pc, #412]	; (8009438 <tcp_listen_input+0x1e0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800929e:	4b67      	ldr	r3, [pc, #412]	; (800943c <tcp_listen_input+0x1e4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092a2:	885b      	ldrh	r3, [r3, #2]
 80092a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092a6:	4a65      	ldr	r2, [pc, #404]	; (800943c <tcp_listen_input+0x1e4>)
 80092a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092aa:	8812      	ldrh	r2, [r2, #0]
 80092ac:	b292      	uxth	r2, r2
 80092ae:	9202      	str	r2, [sp, #8]
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	4b63      	ldr	r3, [pc, #396]	; (8009440 <tcp_listen_input+0x1e8>)
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	4b63      	ldr	r3, [pc, #396]	; (8009444 <tcp_listen_input+0x1ec>)
 80092b8:	4602      	mov	r2, r0
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f003 fbd6 	bl	800ca6c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80092c0:	e0a9      	b.n	8009416 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80092c2:	4b57      	ldr	r3, [pc, #348]	; (8009420 <tcp_listen_input+0x1c8>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 80a3 	beq.w	8009416 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7d5b      	ldrb	r3, [r3, #21]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff f853 	bl	8008380 <tcp_alloc>
 80092da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d111      	bne.n	8009306 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <tcp_listen_input+0xa8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6910      	ldr	r0, [r2, #16]
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	2100      	movs	r1, #0
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	73bb      	strb	r3, [r7, #14]
      return;
 80092fe:	e08b      	b.n	8009418 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009300:	23f0      	movs	r3, #240	; 0xf0
 8009302:	73bb      	strb	r3, [r7, #14]
      return;
 8009304:	e088      	b.n	8009418 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009306:	4b50      	ldr	r3, [pc, #320]	; (8009448 <tcp_listen_input+0x1f0>)
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800930e:	4b4e      	ldr	r3, [pc, #312]	; (8009448 <tcp_listen_input+0x1f0>)
 8009310:	691a      	ldr	r2, [r3, #16]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8ada      	ldrh	r2, [r3, #22]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800931e:	4b47      	ldr	r3, [pc, #284]	; (800943c <tcp_listen_input+0x1e4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29a      	uxth	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2203      	movs	r2, #3
 800932e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009330:	4b41      	ldr	r3, [pc, #260]	; (8009438 <tcp_listen_input+0x1e0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009342:	6978      	ldr	r0, [r7, #20]
 8009344:	f7ff fa5a 	bl	80087fc <tcp_next_iss>
 8009348:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009362:	4b35      	ldr	r3, [pc, #212]	; (8009438 <tcp_listen_input+0x1e0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7a5b      	ldrb	r3, [r3, #9]
 800937e:	f003 030c 	and.w	r3, r3, #12
 8009382:	b2da      	uxtb	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7a1a      	ldrb	r2, [r3, #8]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009390:	4b2e      	ldr	r3, [pc, #184]	; (800944c <tcp_listen_input+0x1f4>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	60da      	str	r2, [r3, #12]
 8009398:	4a2c      	ldr	r2, [pc, #176]	; (800944c <tcp_listen_input+0x1f4>)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	f003 fd27 	bl	800cdf0 <tcp_timer_needed>
 80093a2:	4b2b      	ldr	r3, [pc, #172]	; (8009450 <tcp_listen_input+0x1f8>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093a8:	6978      	ldr	r0, [r7, #20]
 80093aa:	f001 fd8d 	bl	800aec8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093ae:	4b23      	ldr	r3, [pc, #140]	; (800943c <tcp_listen_input+0x1e4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	89db      	ldrh	r3, [r3, #14]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f005 fca5 	bl	800ed20 <ip4_route>
 80093d6:	4601      	mov	r1, r0
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	3304      	adds	r3, #4
 80093dc:	461a      	mov	r2, r3
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff fa32 	bl	8008848 <tcp_eff_send_mss_netif>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80093ec:	2112      	movs	r1, #18
 80093ee:	6978      	ldr	r0, [r7, #20]
 80093f0:	f002 fc9a 	bl	800bd28 <tcp_enqueue_flags>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80093f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009400:	2100      	movs	r1, #0
 8009402:	6978      	ldr	r0, [r7, #20]
 8009404:	f7fd fed2 	bl	80071ac <tcp_abandon>
      return;
 8009408:	e006      	b.n	8009418 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f002 fd7a 	bl	800bf04 <tcp_output>
  return;
 8009410:	e001      	b.n	8009416 <tcp_listen_input+0x1be>
    return;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <tcp_listen_input+0x1c0>
  return;
 8009416:	bf00      	nop
}
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	bd90      	pop	{r4, r7, pc}
 800941e:	bf00      	nop
 8009420:	2000055c 	.word	0x2000055c
 8009424:	08012b94 	.word	0x08012b94
 8009428:	08012d8c 	.word	0x08012d8c
 800942c:	08012be0 	.word	0x08012be0
 8009430:	20000554 	.word	0x20000554
 8009434:	2000055a 	.word	0x2000055a
 8009438:	20000550 	.word	0x20000550
 800943c:	20000540 	.word	0x20000540
 8009440:	200037c4 	.word	0x200037c4
 8009444:	200037c8 	.word	0x200037c8
 8009448:	200037b4 	.word	0x200037b4
 800944c:	20006cf8 	.word	0x20006cf8
 8009450:	20006cf4 	.word	0x20006cf4

08009454 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af04      	add	r7, sp, #16
 800945a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800945c:	4b2f      	ldr	r3, [pc, #188]	; (800951c <tcp_timewait_input+0xc8>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d153      	bne.n	8009510 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <tcp_timewait_input+0x28>
 800946e:	4b2c      	ldr	r3, [pc, #176]	; (8009520 <tcp_timewait_input+0xcc>)
 8009470:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009474:	492b      	ldr	r1, [pc, #172]	; (8009524 <tcp_timewait_input+0xd0>)
 8009476:	482c      	ldr	r0, [pc, #176]	; (8009528 <tcp_timewait_input+0xd4>)
 8009478:	f006 fe9a 	bl	80101b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800947c:	4b27      	ldr	r3, [pc, #156]	; (800951c <tcp_timewait_input+0xc8>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d02a      	beq.n	80094de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009488:	4b28      	ldr	r3, [pc, #160]	; (800952c <tcp_timewait_input+0xd8>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	db2d      	blt.n	80094f2 <tcp_timewait_input+0x9e>
 8009496:	4b25      	ldr	r3, [pc, #148]	; (800952c <tcp_timewait_input+0xd8>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094a2:	440b      	add	r3, r1
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dc23      	bgt.n	80094f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094aa:	4b21      	ldr	r3, [pc, #132]	; (8009530 <tcp_timewait_input+0xdc>)
 80094ac:	6819      	ldr	r1, [r3, #0]
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <tcp_timewait_input+0xe0>)
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	4b1d      	ldr	r3, [pc, #116]	; (800952c <tcp_timewait_input+0xd8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094ba:	4b1f      	ldr	r3, [pc, #124]	; (8009538 <tcp_timewait_input+0xe4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094be:	885b      	ldrh	r3, [r3, #2]
 80094c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094c2:	4a1d      	ldr	r2, [pc, #116]	; (8009538 <tcp_timewait_input+0xe4>)
 80094c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094c6:	8812      	ldrh	r2, [r2, #0]
 80094c8:	b292      	uxth	r2, r2
 80094ca:	9202      	str	r2, [sp, #8]
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <tcp_timewait_input+0xe8>)
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <tcp_timewait_input+0xec>)
 80094d4:	4602      	mov	r2, r0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f003 fac8 	bl	800ca6c <tcp_rst>
      return;
 80094dc:	e01b      	b.n	8009516 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <tcp_timewait_input+0xc8>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80094ea:	4b16      	ldr	r3, [pc, #88]	; (8009544 <tcp_timewait_input+0xf0>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80094f2:	4b10      	ldr	r3, [pc, #64]	; (8009534 <tcp_timewait_input+0xe0>)
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00c      	beq.n	8009514 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8b5b      	ldrh	r3, [r3, #26]
 80094fe:	f043 0302 	orr.w	r3, r3, #2
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 fcfb 	bl	800bf04 <tcp_output>
  }
  return;
 800950e:	e001      	b.n	8009514 <tcp_timewait_input+0xc0>
    return;
 8009510:	bf00      	nop
 8009512:	e000      	b.n	8009516 <tcp_timewait_input+0xc2>
  return;
 8009514:	bf00      	nop
}
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	2000055c 	.word	0x2000055c
 8009520:	08012b94 	.word	0x08012b94
 8009524:	08012dac 	.word	0x08012dac
 8009528:	08012be0 	.word	0x08012be0
 800952c:	20000550 	.word	0x20000550
 8009530:	20000554 	.word	0x20000554
 8009534:	2000055a 	.word	0x2000055a
 8009538:	20000540 	.word	0x20000540
 800953c:	200037c4 	.word	0x200037c4
 8009540:	200037c8 	.word	0x200037c8
 8009544:	20006cfc 	.word	0x20006cfc

08009548 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009548:	b590      	push	{r4, r7, lr}
 800954a:	b08d      	sub	sp, #52	; 0x34
 800954c:	af04      	add	r7, sp, #16
 800954e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d106      	bne.n	800956c <tcp_process+0x24>
 800955e:	4ba5      	ldr	r3, [pc, #660]	; (80097f4 <tcp_process+0x2ac>)
 8009560:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009564:	49a4      	ldr	r1, [pc, #656]	; (80097f8 <tcp_process+0x2b0>)
 8009566:	48a5      	ldr	r0, [pc, #660]	; (80097fc <tcp_process+0x2b4>)
 8009568:	f006 fe22 	bl	80101b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800956c:	4ba4      	ldr	r3, [pc, #656]	; (8009800 <tcp_process+0x2b8>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d04e      	beq.n	8009616 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7d1b      	ldrb	r3, [r3, #20]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d108      	bne.n	8009592 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009584:	4b9f      	ldr	r3, [pc, #636]	; (8009804 <tcp_process+0x2bc>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d123      	bne.n	80095d4 <tcp_process+0x8c>
        acceptable = 1;
 800958c:	2301      	movs	r3, #1
 800958e:	76fb      	strb	r3, [r7, #27]
 8009590:	e020      	b.n	80095d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009596:	4b9c      	ldr	r3, [pc, #624]	; (8009808 <tcp_process+0x2c0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d102      	bne.n	80095a4 <tcp_process+0x5c>
        acceptable = 1;
 800959e:	2301      	movs	r3, #1
 80095a0:	76fb      	strb	r3, [r7, #27]
 80095a2:	e017      	b.n	80095d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095a4:	4b98      	ldr	r3, [pc, #608]	; (8009808 <tcp_process+0x2c0>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	db10      	blt.n	80095d4 <tcp_process+0x8c>
 80095b2:	4b95      	ldr	r3, [pc, #596]	; (8009808 <tcp_process+0x2c0>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095be:	440b      	add	r3, r1
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dc06      	bgt.n	80095d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	8b5b      	ldrh	r3, [r3, #26]
 80095ca:	f043 0302 	orr.w	r3, r3, #2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80095d4:	7efb      	ldrb	r3, [r7, #27]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01b      	beq.n	8009612 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	7d1b      	ldrb	r3, [r3, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <tcp_process+0xa8>
 80095e2:	4b84      	ldr	r3, [pc, #528]	; (80097f4 <tcp_process+0x2ac>)
 80095e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80095e8:	4988      	ldr	r1, [pc, #544]	; (800980c <tcp_process+0x2c4>)
 80095ea:	4884      	ldr	r0, [pc, #528]	; (80097fc <tcp_process+0x2b4>)
 80095ec:	f006 fde0 	bl	80101b0 <iprintf>
      recv_flags |= TF_RESET;
 80095f0:	4b87      	ldr	r3, [pc, #540]	; (8009810 <tcp_process+0x2c8>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f043 0308 	orr.w	r3, r3, #8
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	4b85      	ldr	r3, [pc, #532]	; (8009810 <tcp_process+0x2c8>)
 80095fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8b5b      	ldrh	r3, [r3, #26]
 8009602:	f023 0301 	bic.w	r3, r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800960c:	f06f 030d 	mvn.w	r3, #13
 8009610:	e37a      	b.n	8009d08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	e378      	b.n	8009d08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009616:	4b7a      	ldr	r3, [pc, #488]	; (8009800 <tcp_process+0x2b8>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d010      	beq.n	8009644 <tcp_process+0xfc>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7d1b      	ldrb	r3, [r3, #20]
 8009626:	2b02      	cmp	r3, #2
 8009628:	d00c      	beq.n	8009644 <tcp_process+0xfc>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7d1b      	ldrb	r3, [r3, #20]
 800962e:	2b03      	cmp	r3, #3
 8009630:	d008      	beq.n	8009644 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8b5b      	ldrh	r3, [r3, #26]
 8009636:	f043 0302 	orr.w	r3, r3, #2
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	e361      	b.n	8009d08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8b5b      	ldrh	r3, [r3, #26]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b00      	cmp	r3, #0
 800964e:	d103      	bne.n	8009658 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009650:	4b70      	ldr	r3, [pc, #448]	; (8009814 <tcp_process+0x2cc>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fc2d 	bl	800aec8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7d1b      	ldrb	r3, [r3, #20]
 8009672:	3b02      	subs	r3, #2
 8009674:	2b07      	cmp	r3, #7
 8009676:	f200 8337 	bhi.w	8009ce8 <tcp_process+0x7a0>
 800967a:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <tcp_process+0x138>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	080096a1 	.word	0x080096a1
 8009684:	080098d1 	.word	0x080098d1
 8009688:	08009a49 	.word	0x08009a49
 800968c:	08009a73 	.word	0x08009a73
 8009690:	08009b97 	.word	0x08009b97
 8009694:	08009a49 	.word	0x08009a49
 8009698:	08009c23 	.word	0x08009c23
 800969c:	08009cb3 	.word	0x08009cb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096a0:	4b57      	ldr	r3, [pc, #348]	; (8009800 <tcp_process+0x2b8>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 0310 	and.w	r3, r3, #16
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80e4 	beq.w	8009876 <tcp_process+0x32e>
 80096ae:	4b54      	ldr	r3, [pc, #336]	; (8009800 <tcp_process+0x2b8>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80dd 	beq.w	8009876 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	4b50      	ldr	r3, [pc, #320]	; (8009804 <tcp_process+0x2bc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	f040 80d5 	bne.w	8009876 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80096cc:	4b4e      	ldr	r3, [pc, #312]	; (8009808 <tcp_process+0x2c0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80096de:	4b49      	ldr	r3, [pc, #292]	; (8009804 <tcp_process+0x2bc>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80096e6:	4b4c      	ldr	r3, [pc, #304]	; (8009818 <tcp_process+0x2d0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	89db      	ldrh	r3, [r3, #14]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009700:	4b41      	ldr	r3, [pc, #260]	; (8009808 <tcp_process+0x2c0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	1e5a      	subs	r2, r3, #1
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2204      	movs	r2, #4
 800970e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3304      	adds	r3, #4
 8009718:	4618      	mov	r0, r3
 800971a:	f005 fb01 	bl	800ed20 <ip4_route>
 800971e:	4601      	mov	r1, r0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3304      	adds	r3, #4
 8009724:	461a      	mov	r2, r3
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff f88e 	bl	8008848 <tcp_eff_send_mss_netif>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009738:	009a      	lsls	r2, r3, #2
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	f241 111c 	movw	r1, #4380	; 0x111c
 8009744:	428b      	cmp	r3, r1
 8009746:	bf38      	it	cc
 8009748:	460b      	movcc	r3, r1
 800974a:	429a      	cmp	r2, r3
 800974c:	d204      	bcs.n	8009758 <tcp_process+0x210>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	b29b      	uxth	r3, r3
 8009756:	e00d      	b.n	8009774 <tcp_process+0x22c>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009762:	4293      	cmp	r3, r2
 8009764:	d904      	bls.n	8009770 <tcp_process+0x228>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	b29b      	uxth	r3, r3
 800976e:	e001      	b.n	8009774 <tcp_process+0x22c>
 8009770:	f241 131c 	movw	r3, #4380	; 0x111c
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <tcp_process+0x24a>
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <tcp_process+0x2ac>)
 8009786:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800978a:	4924      	ldr	r1, [pc, #144]	; (800981c <tcp_process+0x2d4>)
 800978c:	481b      	ldr	r0, [pc, #108]	; (80097fc <tcp_process+0x2b4>)
 800978e:	f006 fd0f 	bl	80101b0 <iprintf>
        --pcb->snd_queuelen;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d111      	bne.n	80097d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <tcp_process+0x280>
 80097ba:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <tcp_process+0x2ac>)
 80097bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80097c0:	4917      	ldr	r1, [pc, #92]	; (8009820 <tcp_process+0x2d8>)
 80097c2:	480e      	ldr	r0, [pc, #56]	; (80097fc <tcp_process+0x2b4>)
 80097c4:	f006 fcf4 	bl	80101b0 <iprintf>
          pcb->unsent = rseg->next;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80097d0:	e003      	b.n	80097da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80097da:	69f8      	ldr	r0, [r7, #28]
 80097dc:	f7fe fc49 	bl	8008072 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11d      	bne.n	8009824 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80097f0:	e01f      	b.n	8009832 <tcp_process+0x2ea>
 80097f2:	bf00      	nop
 80097f4:	08012b94 	.word	0x08012b94
 80097f8:	08012dcc 	.word	0x08012dcc
 80097fc:	08012be0 	.word	0x08012be0
 8009800:	2000055c 	.word	0x2000055c
 8009804:	20000554 	.word	0x20000554
 8009808:	20000550 	.word	0x20000550
 800980c:	08012de8 	.word	0x08012de8
 8009810:	2000055d 	.word	0x2000055d
 8009814:	20006cfc 	.word	0x20006cfc
 8009818:	20000540 	.word	0x20000540
 800981c:	08012e08 	.word	0x08012e08
 8009820:	08012e20 	.word	0x08012e20
        } else {
          pcb->rtime = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <tcp_process+0x30a>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6910      	ldr	r0, [r2, #16]
 8009846:	2200      	movs	r2, #0
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4798      	blx	r3
 800984c:	4603      	mov	r3, r0
 800984e:	76bb      	strb	r3, [r7, #26]
 8009850:	e001      	b.n	8009856 <tcp_process+0x30e>
 8009852:	2300      	movs	r3, #0
 8009854:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009856:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800985a:	f113 0f0d 	cmn.w	r3, #13
 800985e:	d102      	bne.n	8009866 <tcp_process+0x31e>
          return ERR_ABRT;
 8009860:	f06f 030c 	mvn.w	r3, #12
 8009864:	e250      	b.n	8009d08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	8b5b      	ldrh	r3, [r3, #26]
 800986a:	f043 0302 	orr.w	r3, r3, #2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009874:	e23a      	b.n	8009cec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009876:	4b9d      	ldr	r3, [pc, #628]	; (8009aec <tcp_process+0x5a4>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	f003 0310 	and.w	r3, r3, #16
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 8234 	beq.w	8009cec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009884:	4b9a      	ldr	r3, [pc, #616]	; (8009af0 <tcp_process+0x5a8>)
 8009886:	6819      	ldr	r1, [r3, #0]
 8009888:	4b9a      	ldr	r3, [pc, #616]	; (8009af4 <tcp_process+0x5ac>)
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	4b9a      	ldr	r3, [pc, #616]	; (8009af8 <tcp_process+0x5b0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009894:	4b99      	ldr	r3, [pc, #612]	; (8009afc <tcp_process+0x5b4>)
 8009896:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009898:	885b      	ldrh	r3, [r3, #2]
 800989a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800989c:	4a97      	ldr	r2, [pc, #604]	; (8009afc <tcp_process+0x5b4>)
 800989e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098a0:	8812      	ldrh	r2, [r2, #0]
 80098a2:	b292      	uxth	r2, r2
 80098a4:	9202      	str	r2, [sp, #8]
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	4b95      	ldr	r3, [pc, #596]	; (8009b00 <tcp_process+0x5b8>)
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	4b95      	ldr	r3, [pc, #596]	; (8009b04 <tcp_process+0x5bc>)
 80098ae:	4602      	mov	r2, r0
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f003 f8db 	bl	800ca6c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098bc:	2b05      	cmp	r3, #5
 80098be:	f200 8215 	bhi.w	8009cec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f002 fea5 	bl	800c618 <tcp_rexmit_rto>
      break;
 80098ce:	e20d      	b.n	8009cec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80098d0:	4b86      	ldr	r3, [pc, #536]	; (8009aec <tcp_process+0x5a4>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80a1 	beq.w	8009a20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098de:	4b84      	ldr	r3, [pc, #528]	; (8009af0 <tcp_process+0x5a8>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	db7e      	blt.n	80099ec <tcp_process+0x4a4>
 80098ee:	4b80      	ldr	r3, [pc, #512]	; (8009af0 <tcp_process+0x5a8>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	dc77      	bgt.n	80099ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2204      	movs	r2, #4
 8009900:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800990a:	23fa      	movs	r3, #250	; 0xfa
 800990c:	76bb      	strb	r3, [r7, #26]
 800990e:	e01d      	b.n	800994c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <tcp_process+0x3e0>
 800991a:	4b7b      	ldr	r3, [pc, #492]	; (8009b08 <tcp_process+0x5c0>)
 800991c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009920:	497a      	ldr	r1, [pc, #488]	; (8009b0c <tcp_process+0x5c4>)
 8009922:	487b      	ldr	r0, [pc, #492]	; (8009b10 <tcp_process+0x5c8>)
 8009924:	f006 fc44 	bl	80101b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <tcp_process+0x400>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6910      	ldr	r0, [r2, #16]
 800993c:	2200      	movs	r2, #0
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	4798      	blx	r3
 8009942:	4603      	mov	r3, r0
 8009944:	76bb      	strb	r3, [r7, #26]
 8009946:	e001      	b.n	800994c <tcp_process+0x404>
 8009948:	23f0      	movs	r3, #240	; 0xf0
 800994a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800994c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009954:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009958:	f113 0f0d 	cmn.w	r3, #13
 800995c:	d002      	beq.n	8009964 <tcp_process+0x41c>
              tcp_abort(pcb);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7fd fce2 	bl	8007328 <tcp_abort>
            }
            return ERR_ABRT;
 8009964:	f06f 030c 	mvn.w	r3, #12
 8009968:	e1ce      	b.n	8009d08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fae0 	bl	8009f30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009970:	4b68      	ldr	r3, [pc, #416]	; (8009b14 <tcp_process+0x5cc>)
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <tcp_process+0x43c>
            recv_acked--;
 8009978:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <tcp_process+0x5cc>)
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	3b01      	subs	r3, #1
 800997e:	b29a      	uxth	r2, r3
 8009980:	4b64      	ldr	r3, [pc, #400]	; (8009b14 <tcp_process+0x5cc>)
 8009982:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009988:	009a      	lsls	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	f241 111c 	movw	r1, #4380	; 0x111c
 8009994:	428b      	cmp	r3, r1
 8009996:	bf38      	it	cc
 8009998:	460b      	movcc	r3, r1
 800999a:	429a      	cmp	r2, r3
 800999c:	d204      	bcs.n	80099a8 <tcp_process+0x460>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	e00d      	b.n	80099c4 <tcp_process+0x47c>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d904      	bls.n	80099c0 <tcp_process+0x478>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	b29b      	uxth	r3, r3
 80099be:	e001      	b.n	80099c4 <tcp_process+0x47c>
 80099c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80099ca:	4b53      	ldr	r3, [pc, #332]	; (8009b18 <tcp_process+0x5d0>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	f003 0320 	and.w	r3, r3, #32
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d037      	beq.n	8009a46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	8b5b      	ldrh	r3, [r3, #26]
 80099da:	f043 0302 	orr.w	r3, r3, #2
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2207      	movs	r2, #7
 80099e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80099ea:	e02c      	b.n	8009a46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099ec:	4b40      	ldr	r3, [pc, #256]	; (8009af0 <tcp_process+0x5a8>)
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	4b40      	ldr	r3, [pc, #256]	; (8009af4 <tcp_process+0x5ac>)
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b40      	ldr	r3, [pc, #256]	; (8009af8 <tcp_process+0x5b0>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099fc:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <tcp_process+0x5b4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a04:	4a3d      	ldr	r2, [pc, #244]	; (8009afc <tcp_process+0x5b4>)
 8009a06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a08:	8812      	ldrh	r2, [r2, #0]
 8009a0a:	b292      	uxth	r2, r2
 8009a0c:	9202      	str	r2, [sp, #8]
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	4b3b      	ldr	r3, [pc, #236]	; (8009b00 <tcp_process+0x5b8>)
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	4b3b      	ldr	r3, [pc, #236]	; (8009b04 <tcp_process+0x5bc>)
 8009a16:	4602      	mov	r2, r0
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f003 f827 	bl	800ca6c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a1e:	e167      	b.n	8009cf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a20:	4b32      	ldr	r3, [pc, #200]	; (8009aec <tcp_process+0x5a4>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8161 	beq.w	8009cf0 <tcp_process+0x7a8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	1e5a      	subs	r2, r3, #1
 8009a34:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <tcp_process+0x5b0>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	f040 8159 	bne.w	8009cf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f002 fe0c 	bl	800c65c <tcp_rexmit>
      break;
 8009a44:	e154      	b.n	8009cf0 <tcp_process+0x7a8>
 8009a46:	e153      	b.n	8009cf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa71 	bl	8009f30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a4e:	4b32      	ldr	r3, [pc, #200]	; (8009b18 <tcp_process+0x5d0>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 814c 	beq.w	8009cf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	8b5b      	ldrh	r3, [r3, #26]
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2207      	movs	r2, #7
 8009a6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a70:	e140      	b.n	8009cf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa5c 	bl	8009f30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a78:	4b27      	ldr	r3, [pc, #156]	; (8009b18 <tcp_process+0x5d0>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d071      	beq.n	8009b68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a84:	4b19      	ldr	r3, [pc, #100]	; (8009aec <tcp_process+0x5a4>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d060      	beq.n	8009b52 <tcp_process+0x60a>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a94:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <tcp_process+0x5a8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d15a      	bne.n	8009b52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d156      	bne.n	8009b52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8b5b      	ldrh	r3, [r3, #26]
 8009aa8:	f043 0302 	orr.w	r3, r3, #2
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe fdbe 	bl	8008634 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009ab8:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <tcp_process+0x5d4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d105      	bne.n	8009ace <tcp_process+0x586>
 8009ac2:	4b16      	ldr	r3, [pc, #88]	; (8009b1c <tcp_process+0x5d4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4a14      	ldr	r2, [pc, #80]	; (8009b1c <tcp_process+0x5d4>)
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	e02e      	b.n	8009b2c <tcp_process+0x5e4>
 8009ace:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <tcp_process+0x5d4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e027      	b.n	8009b26 <tcp_process+0x5de>
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d11f      	bne.n	8009b20 <tcp_process+0x5d8>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	e020      	b.n	8009b2c <tcp_process+0x5e4>
 8009aea:	bf00      	nop
 8009aec:	2000055c 	.word	0x2000055c
 8009af0:	20000554 	.word	0x20000554
 8009af4:	2000055a 	.word	0x2000055a
 8009af8:	20000550 	.word	0x20000550
 8009afc:	20000540 	.word	0x20000540
 8009b00:	200037c4 	.word	0x200037c4
 8009b04:	200037c8 	.word	0x200037c8
 8009b08:	08012b94 	.word	0x08012b94
 8009b0c:	08012e34 	.word	0x08012e34
 8009b10:	08012be0 	.word	0x08012be0
 8009b14:	20000558 	.word	0x20000558
 8009b18:	2000055d 	.word	0x2000055d
 8009b1c:	20006cf8 	.word	0x20006cf8
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1d4      	bne.n	8009ad6 <tcp_process+0x58e>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	60da      	str	r2, [r3, #12]
 8009b32:	4b77      	ldr	r3, [pc, #476]	; (8009d10 <tcp_process+0x7c8>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b3e:	4b75      	ldr	r3, [pc, #468]	; (8009d14 <tcp_process+0x7cc>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	4a73      	ldr	r2, [pc, #460]	; (8009d14 <tcp_process+0x7cc>)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	f003 f950 	bl	800cdf0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b50:	e0d2      	b.n	8009cf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8b5b      	ldrh	r3, [r3, #26]
 8009b56:	f043 0302 	orr.w	r3, r3, #2
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2208      	movs	r2, #8
 8009b64:	751a      	strb	r2, [r3, #20]
      break;
 8009b66:	e0c7      	b.n	8009cf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b68:	4b6b      	ldr	r3, [pc, #428]	; (8009d18 <tcp_process+0x7d0>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80c1 	beq.w	8009cf8 <tcp_process+0x7b0>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b7a:	4b68      	ldr	r3, [pc, #416]	; (8009d1c <tcp_process+0x7d4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	f040 80ba 	bne.w	8009cf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 80b5 	bne.w	8009cf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2206      	movs	r2, #6
 8009b92:	751a      	strb	r2, [r3, #20]
      break;
 8009b94:	e0b0      	b.n	8009cf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f9ca 	bl	8009f30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009b9c:	4b60      	ldr	r3, [pc, #384]	; (8009d20 <tcp_process+0x7d8>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80a9 	beq.w	8009cfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	8b5b      	ldrh	r3, [r3, #26]
 8009bae:	f043 0302 	orr.w	r3, r3, #2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7fe fd3b 	bl	8008634 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009bbe:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <tcp_process+0x7dc>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d105      	bne.n	8009bd4 <tcp_process+0x68c>
 8009bc8:	4b56      	ldr	r3, [pc, #344]	; (8009d24 <tcp_process+0x7dc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	4a55      	ldr	r2, [pc, #340]	; (8009d24 <tcp_process+0x7dc>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	e013      	b.n	8009bfc <tcp_process+0x6b4>
 8009bd4:	4b53      	ldr	r3, [pc, #332]	; (8009d24 <tcp_process+0x7dc>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	613b      	str	r3, [r7, #16]
 8009bda:	e00c      	b.n	8009bf6 <tcp_process+0x6ae>
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d104      	bne.n	8009bf0 <tcp_process+0x6a8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	60da      	str	r2, [r3, #12]
 8009bee:	e005      	b.n	8009bfc <tcp_process+0x6b4>
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1ef      	bne.n	8009bdc <tcp_process+0x694>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	60da      	str	r2, [r3, #12]
 8009c02:	4b43      	ldr	r3, [pc, #268]	; (8009d10 <tcp_process+0x7c8>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	220a      	movs	r2, #10
 8009c0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c0e:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <tcp_process+0x7cc>)
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	4a3f      	ldr	r2, [pc, #252]	; (8009d14 <tcp_process+0x7cc>)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	f003 f8e8 	bl	800cdf0 <tcp_timer_needed>
      }
      break;
 8009c20:	e06c      	b.n	8009cfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f984 	bl	8009f30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c28:	4b3b      	ldr	r3, [pc, #236]	; (8009d18 <tcp_process+0x7d0>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d065      	beq.n	8009d00 <tcp_process+0x7b8>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c38:	4b38      	ldr	r3, [pc, #224]	; (8009d1c <tcp_process+0x7d4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d15f      	bne.n	8009d00 <tcp_process+0x7b8>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d15b      	bne.n	8009d00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe fcf3 	bl	8008634 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c4e:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <tcp_process+0x7dc>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d105      	bne.n	8009c64 <tcp_process+0x71c>
 8009c58:	4b32      	ldr	r3, [pc, #200]	; (8009d24 <tcp_process+0x7dc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	4a31      	ldr	r2, [pc, #196]	; (8009d24 <tcp_process+0x7dc>)
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	e013      	b.n	8009c8c <tcp_process+0x744>
 8009c64:	4b2f      	ldr	r3, [pc, #188]	; (8009d24 <tcp_process+0x7dc>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	e00c      	b.n	8009c86 <tcp_process+0x73e>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d104      	bne.n	8009c80 <tcp_process+0x738>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	60da      	str	r2, [r3, #12]
 8009c7e:	e005      	b.n	8009c8c <tcp_process+0x744>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1ef      	bne.n	8009c6c <tcp_process+0x724>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	60da      	str	r2, [r3, #12]
 8009c92:	4b1f      	ldr	r3, [pc, #124]	; (8009d10 <tcp_process+0x7c8>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	220a      	movs	r2, #10
 8009c9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c9e:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <tcp_process+0x7cc>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	60da      	str	r2, [r3, #12]
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	; (8009d14 <tcp_process+0x7cc>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	f003 f8a0 	bl	800cdf0 <tcp_timer_needed>
      }
      break;
 8009cb0:	e026      	b.n	8009d00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f93c 	bl	8009f30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <tcp_process+0x7d0>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d01f      	beq.n	8009d04 <tcp_process+0x7bc>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cc8:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <tcp_process+0x7d4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d119      	bne.n	8009d04 <tcp_process+0x7bc>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d115      	bne.n	8009d04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009cd8:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <tcp_process+0x7d8>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f043 0310 	orr.w	r3, r3, #16
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4b0f      	ldr	r3, [pc, #60]	; (8009d20 <tcp_process+0x7d8>)
 8009ce4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ce6:	e00d      	b.n	8009d04 <tcp_process+0x7bc>
    default:
      break;
 8009ce8:	bf00      	nop
 8009cea:	e00c      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009cec:	bf00      	nop
 8009cee:	e00a      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009cf0:	bf00      	nop
 8009cf2:	e008      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009cf4:	bf00      	nop
 8009cf6:	e006      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009cf8:	bf00      	nop
 8009cfa:	e004      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009cfc:	bf00      	nop
 8009cfe:	e002      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009d00:	bf00      	nop
 8009d02:	e000      	b.n	8009d06 <tcp_process+0x7be>
      break;
 8009d04:	bf00      	nop
  }
  return ERR_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3724      	adds	r7, #36	; 0x24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}
 8009d10:	20006cf4 	.word	0x20006cf4
 8009d14:	20006d08 	.word	0x20006d08
 8009d18:	2000055c 	.word	0x2000055c
 8009d1c:	20000554 	.word	0x20000554
 8009d20:	2000055d 	.word	0x2000055d
 8009d24:	20006cf8 	.word	0x20006cf8

08009d28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <tcp_oos_insert_segment+0x1e>
 8009d38:	4b3b      	ldr	r3, [pc, #236]	; (8009e28 <tcp_oos_insert_segment+0x100>)
 8009d3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8009d3e:	493b      	ldr	r1, [pc, #236]	; (8009e2c <tcp_oos_insert_segment+0x104>)
 8009d40:	483b      	ldr	r0, [pc, #236]	; (8009e30 <tcp_oos_insert_segment+0x108>)
 8009d42:	f006 fa35 	bl	80101b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	899b      	ldrh	r3, [r3, #12]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fb fa34 	bl	80051bc <lwip_htons>
 8009d54:	4603      	mov	r3, r0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0301 	and.w	r3, r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d028      	beq.n	8009db2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009d60:	6838      	ldr	r0, [r7, #0]
 8009d62:	f7fe f971 	bl	8008048 <tcp_segs_free>
    next = NULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	e056      	b.n	8009e1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fb fa21 	bl	80051bc <lwip_htons>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00d      	beq.n	8009da2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	899b      	ldrh	r3, [r3, #12]
 8009d8c:	b29c      	uxth	r4, r3
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f7fb fa14 	bl	80051bc <lwip_htons>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4322      	orrs	r2, r4
 8009d9e:	b292      	uxth	r2, r2
 8009da0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7fe f960 	bl	8008072 <tcp_seg_free>
    while (next &&
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00e      	beq.n	8009dd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	891b      	ldrh	r3, [r3, #8]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b1d      	ldr	r3, [pc, #116]	; (8009e34 <tcp_oos_insert_segment+0x10c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	441a      	add	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	8909      	ldrh	r1, [r1, #8]
 8009dce:	440b      	add	r3, r1
 8009dd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	daca      	bge.n	8009d6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01e      	beq.n	8009e1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	891b      	ldrh	r3, [r3, #8]
 8009de0:	461a      	mov	r2, r3
 8009de2:	4b14      	ldr	r3, [pc, #80]	; (8009e34 <tcp_oos_insert_segment+0x10c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	441a      	add	r2, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dd12      	ble.n	8009e1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <tcp_oos_insert_segment+0x10c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	891b      	ldrh	r3, [r3, #8]
 8009e12:	4619      	mov	r1, r3
 8009e14:	4610      	mov	r0, r2
 8009e16:	f7fc fb69 	bl	80064ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	601a      	str	r2, [r3, #0]
}
 8009e20:	bf00      	nop
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}
 8009e28:	08012b94 	.word	0x08012b94
 8009e2c:	08012e54 	.word	0x08012e54
 8009e30:	08012be0 	.word	0x08012be0
 8009e34:	20000550 	.word	0x20000550

08009e38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e38:	b5b0      	push	{r4, r5, r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e46:	e03e      	b.n	8009ec6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fc fd56 	bl	8006908 <pbuf_clen>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e66:	8a7a      	ldrh	r2, [r7, #18]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d906      	bls.n	8009e7a <tcp_free_acked_segments+0x42>
 8009e6c:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <tcp_free_acked_segments+0xe0>)
 8009e6e:	f240 4257 	movw	r2, #1111	; 0x457
 8009e72:	492a      	ldr	r1, [pc, #168]	; (8009f1c <tcp_free_acked_segments+0xe4>)
 8009e74:	482a      	ldr	r0, [pc, #168]	; (8009f20 <tcp_free_acked_segments+0xe8>)
 8009e76:	f006 f99b 	bl	80101b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009e80:	8a7b      	ldrh	r3, [r7, #18]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	891a      	ldrh	r2, [r3, #8]
 8009e90:	4b24      	ldr	r3, [pc, #144]	; (8009f24 <tcp_free_acked_segments+0xec>)
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	4413      	add	r3, r2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	4b22      	ldr	r3, [pc, #136]	; (8009f24 <tcp_free_acked_segments+0xec>)
 8009e9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009e9c:	6978      	ldr	r0, [r7, #20]
 8009e9e:	f7fe f8e8 	bl	8008072 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00c      	beq.n	8009ec6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d109      	bne.n	8009ec6 <tcp_free_acked_segments+0x8e>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <tcp_free_acked_segments+0x8e>
 8009eb8:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <tcp_free_acked_segments+0xe0>)
 8009eba:	f240 4261 	movw	r2, #1121	; 0x461
 8009ebe:	491a      	ldr	r1, [pc, #104]	; (8009f28 <tcp_free_acked_segments+0xf0>)
 8009ec0:	4817      	ldr	r0, [pc, #92]	; (8009f20 <tcp_free_acked_segments+0xe8>)
 8009ec2:	f006 f975 	bl	80101b0 <iprintf>
  while (seg_list != NULL &&
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d020      	beq.n	8009f0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fb f987 	bl	80051e6 <lwip_htonl>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	891b      	ldrh	r3, [r3, #8]
 8009ede:	461d      	mov	r5, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	899b      	ldrh	r3, [r3, #12]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fb f967 	bl	80051bc <lwip_htons>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 0303 	and.w	r3, r3, #3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <tcp_free_acked_segments+0xc6>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <tcp_free_acked_segments+0xc8>
 8009efe:	2300      	movs	r3, #0
 8009f00:	442b      	add	r3, r5
 8009f02:	18e2      	adds	r2, r4, r3
 8009f04:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <tcp_free_acked_segments+0xf4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd9c      	ble.n	8009e48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bdb0      	pop	{r4, r5, r7, pc}
 8009f18:	08012b94 	.word	0x08012b94
 8009f1c:	08012e7c 	.word	0x08012e7c
 8009f20:	08012be0 	.word	0x08012be0
 8009f24:	20000558 	.word	0x20000558
 8009f28:	08012ea4 	.word	0x08012ea4
 8009f2c:	20000554 	.word	0x20000554

08009f30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f30:	b5b0      	push	{r4, r5, r7, lr}
 8009f32:	b094      	sub	sp, #80	; 0x50
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <tcp_receive+0x20>
 8009f42:	4ba6      	ldr	r3, [pc, #664]	; (800a1dc <tcp_receive+0x2ac>)
 8009f44:	f240 427b 	movw	r2, #1147	; 0x47b
 8009f48:	49a5      	ldr	r1, [pc, #660]	; (800a1e0 <tcp_receive+0x2b0>)
 8009f4a:	48a6      	ldr	r0, [pc, #664]	; (800a1e4 <tcp_receive+0x2b4>)
 8009f4c:	f006 f930 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7d1b      	ldrb	r3, [r3, #20]
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d806      	bhi.n	8009f66 <tcp_receive+0x36>
 8009f58:	4ba0      	ldr	r3, [pc, #640]	; (800a1dc <tcp_receive+0x2ac>)
 8009f5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8009f5e:	49a2      	ldr	r1, [pc, #648]	; (800a1e8 <tcp_receive+0x2b8>)
 8009f60:	48a0      	ldr	r0, [pc, #640]	; (800a1e4 <tcp_receive+0x2b4>)
 8009f62:	f006 f925 	bl	80101b0 <iprintf>

  if (flags & TCP_ACK) {
 8009f66:	4ba1      	ldr	r3, [pc, #644]	; (800a1ec <tcp_receive+0x2bc>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8263 	beq.w	800a43a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f80:	4413      	add	r3, r2
 8009f82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f88:	4b99      	ldr	r3, [pc, #612]	; (800a1f0 <tcp_receive+0x2c0>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	db1b      	blt.n	8009fca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f96:	4b96      	ldr	r3, [pc, #600]	; (800a1f0 <tcp_receive+0x2c0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d106      	bne.n	8009fac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fa2:	4b94      	ldr	r3, [pc, #592]	; (800a1f4 <tcp_receive+0x2c4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	db0e      	blt.n	8009fca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fb0:	4b90      	ldr	r3, [pc, #576]	; (800a1f4 <tcp_receive+0x2c4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d125      	bne.n	800a004 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fb8:	4b8f      	ldr	r3, [pc, #572]	; (800a1f8 <tcp_receive+0x2c8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	89db      	ldrh	r3, [r3, #14]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d91c      	bls.n	800a004 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009fca:	4b8b      	ldr	r3, [pc, #556]	; (800a1f8 <tcp_receive+0x2c8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	89db      	ldrh	r3, [r3, #14]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d205      	bcs.n	8009ff4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ff4:	4b7e      	ldr	r3, [pc, #504]	; (800a1f0 <tcp_receive+0x2c0>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009ffc:	4b7d      	ldr	r3, [pc, #500]	; (800a1f4 <tcp_receive+0x2c4>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a004:	4b7b      	ldr	r3, [pc, #492]	; (800a1f4 <tcp_receive+0x2c4>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dc58      	bgt.n	800a0c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a012:	4b7a      	ldr	r3, [pc, #488]	; (800a1fc <tcp_receive+0x2cc>)
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d14b      	bne.n	800a0b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a024:	4413      	add	r3, r2
 800a026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a028:	429a      	cmp	r2, r3
 800a02a:	d142      	bne.n	800a0b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a032:	2b00      	cmp	r3, #0
 800a034:	db3d      	blt.n	800a0b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a03a:	4b6e      	ldr	r3, [pc, #440]	; (800a1f4 <tcp_receive+0x2c4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d137      	bne.n	800a0b2 <tcp_receive+0x182>
              found_dupack = 1;
 800a042:	2301      	movs	r3, #1
 800a044:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a04c:	2bff      	cmp	r3, #255	; 0xff
 800a04e:	d007      	beq.n	800a060 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a056:	3301      	adds	r3, #1
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a066:	2b03      	cmp	r3, #3
 800a068:	d91b      	bls.n	800a0a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a074:	4413      	add	r3, r2
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a07e:	429a      	cmp	r2, r3
 800a080:	d30a      	bcc.n	800a098 <tcp_receive+0x168>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a08c:	4413      	add	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a096:	e004      	b.n	800a0a2 <tcp_receive+0x172>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a09e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d902      	bls.n	800a0b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f002 fb41 	bl	800c734 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f040 8160 	bne.w	800a37a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c2:	e15a      	b.n	800a37a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0c4:	4b4b      	ldr	r3, [pc, #300]	; (800a1f4 <tcp_receive+0x2c4>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f2c0 814d 	blt.w	800a370 <tcp_receive+0x440>
 800a0d6:	4b47      	ldr	r3, [pc, #284]	; (800a1f4 <tcp_receive+0x2c4>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f300 8145 	bgt.w	800a370 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	8b5b      	ldrh	r3, [r3, #26]
 800a0ea:	f003 0304 	and.w	r3, r3, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d010      	beq.n	800a114 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8b5b      	ldrh	r3, [r3, #26]
 800a0f6:	f023 0304 	bic.w	r3, r3, #4
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a122:	10db      	asrs	r3, r3, #3
 800a124:	b21b      	sxth	r3, r3
 800a126:	b29a      	uxth	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4413      	add	r3, r2
 800a132:	b29b      	uxth	r3, r3
 800a134:	b21a      	sxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a13c:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <tcp_receive+0x2c4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	b29b      	uxth	r3, r3
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a154:	4b27      	ldr	r3, [pc, #156]	; (800a1f4 <tcp_receive+0x2c4>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7d1b      	ldrb	r3, [r3, #20]
 800a160:	2b03      	cmp	r3, #3
 800a162:	f240 8096 	bls.w	800a292 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a172:	429a      	cmp	r2, r3
 800a174:	d244      	bcs.n	800a200 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8b5b      	ldrh	r3, [r3, #26]
 800a17a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <tcp_receive+0x256>
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <tcp_receive+0x258>
 800a186:	2302      	movs	r3, #2
 800a188:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a18c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a190:	b29a      	uxth	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a196:	fb12 f303 	smulbb	r3, r2, r3
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bf28      	it	cs
 800a1a2:	4613      	movcs	r3, r2
 800a1a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1ae:	4413      	add	r3, r2
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d309      	bcc.n	800a1d0 <tcp_receive+0x2a0>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1c4:	4413      	add	r3, r2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1ce:	e060      	b.n	800a292 <tcp_receive+0x362>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1da:	e05a      	b.n	800a292 <tcp_receive+0x362>
 800a1dc:	08012b94 	.word	0x08012b94
 800a1e0:	08012ec4 	.word	0x08012ec4
 800a1e4:	08012be0 	.word	0x08012be0
 800a1e8:	08012ee0 	.word	0x08012ee0
 800a1ec:	2000055c 	.word	0x2000055c
 800a1f0:	20000550 	.word	0x20000550
 800a1f4:	20000554 	.word	0x20000554
 800a1f8:	20000540 	.word	0x20000540
 800a1fc:	2000055a 	.word	0x2000055a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a206:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a208:	4413      	add	r3, r2
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a212:	429a      	cmp	r2, r3
 800a214:	d309      	bcc.n	800a22a <tcp_receive+0x2fa>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a21c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a21e:	4413      	add	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a228:	e004      	b.n	800a234 <tcp_receive+0x304>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a240:	429a      	cmp	r2, r3
 800a242:	d326      	bcc.n	800a292 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a264:	4413      	add	r3, r2
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a26e:	429a      	cmp	r2, r3
 800a270:	d30a      	bcc.n	800a288 <tcp_receive+0x358>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a27c:	4413      	add	r3, r2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a286:	e004      	b.n	800a292 <tcp_receive+0x362>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a28e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a29a:	4a98      	ldr	r2, [pc, #608]	; (800a4fc <tcp_receive+0x5cc>)
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff fdcb 	bl	8009e38 <tcp_free_acked_segments>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b0:	4a93      	ldr	r2, [pc, #588]	; (800a500 <tcp_receive+0x5d0>)
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fdc0 	bl	8009e38 <tcp_free_acked_segments>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2cc:	861a      	strh	r2, [r3, #48]	; 0x30
 800a2ce:	e002      	b.n	800a2d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d103      	bne.n	800a2ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a2f2:	4b84      	ldr	r3, [pc, #528]	; (800a504 <tcp_receive+0x5d4>)
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8b5b      	ldrh	r3, [r3, #26]
 800a304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d035      	beq.n	800a378 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a310:	2b00      	cmp	r3, #0
 800a312:	d118      	bne.n	800a346 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fa ff5c 	bl	80051e6 <lwip_htonl>
 800a32e:	4603      	mov	r3, r0
 800a330:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a332:	2b00      	cmp	r3, #0
 800a334:	dc20      	bgt.n	800a378 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8b5b      	ldrh	r3, [r3, #26]
 800a33a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a344:	e018      	b.n	800a378 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	4618      	mov	r0, r3
 800a354:	f7fa ff47 	bl	80051e6 <lwip_htonl>
 800a358:	4603      	mov	r3, r0
 800a35a:	1ae3      	subs	r3, r4, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc0b      	bgt.n	800a378 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8b5b      	ldrh	r3, [r3, #26]
 800a364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a36e:	e003      	b.n	800a378 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f002 fbcd 	bl	800cb10 <tcp_send_empty_ack>
 800a376:	e000      	b.n	800a37a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a378:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d05b      	beq.n	800a43a <tcp_receive+0x50a>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a386:	4b60      	ldr	r3, [pc, #384]	; (800a508 <tcp_receive+0x5d8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da54      	bge.n	800a43a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a390:	4b5e      	ldr	r3, [pc, #376]	; (800a50c <tcp_receive+0x5dc>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3ae:	10db      	asrs	r3, r3, #3
 800a3b0:	b21b      	sxth	r3, r3
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	b21a      	sxth	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a3d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da05      	bge.n	800a3e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a3da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3de:	425b      	negs	r3, r3
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a3e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3f0:	109b      	asrs	r3, r3, #2
 800a3f2:	b21b      	sxth	r3, r3
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a404:	b29a      	uxth	r2, r3
 800a406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a40a:	4413      	add	r3, r2
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	b21a      	sxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a41a:	10db      	asrs	r3, r3, #3
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a426:	b29b      	uxth	r3, r3
 800a428:	4413      	add	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	b21a      	sxth	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a43a:	4b35      	ldr	r3, [pc, #212]	; (800a510 <tcp_receive+0x5e0>)
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 84e1 	beq.w	800ae06 <tcp_receive+0xed6>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7d1b      	ldrb	r3, [r3, #20]
 800a448:	2b06      	cmp	r3, #6
 800a44a:	f200 84dc 	bhi.w	800ae06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a452:	4b30      	ldr	r3, [pc, #192]	; (800a514 <tcp_receive+0x5e4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f2c0 808e 	blt.w	800a57c <tcp_receive+0x64c>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a464:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <tcp_receive+0x5e0>)
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	4619      	mov	r1, r3
 800a46a:	4b2a      	ldr	r3, [pc, #168]	; (800a514 <tcp_receive+0x5e4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	440b      	add	r3, r1
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	3301      	adds	r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	f300 8081 	bgt.w	800a57c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a47a:	4b27      	ldr	r3, [pc, #156]	; (800a518 <tcp_receive+0x5e8>)
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a484:	4b23      	ldr	r3, [pc, #140]	; (800a514 <tcp_receive+0x5e4>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a48c:	4b22      	ldr	r3, [pc, #136]	; (800a518 <tcp_receive+0x5e8>)
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <tcp_receive+0x572>
 800a494:	4b21      	ldr	r3, [pc, #132]	; (800a51c <tcp_receive+0x5ec>)
 800a496:	f240 5294 	movw	r2, #1428	; 0x594
 800a49a:	4921      	ldr	r1, [pc, #132]	; (800a520 <tcp_receive+0x5f0>)
 800a49c:	4821      	ldr	r0, [pc, #132]	; (800a524 <tcp_receive+0x5f4>)
 800a49e:	f005 fe87 	bl	80101b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d906      	bls.n	800a4ba <tcp_receive+0x58a>
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <tcp_receive+0x5ec>)
 800a4ae:	f240 5295 	movw	r2, #1429	; 0x595
 800a4b2:	491d      	ldr	r1, [pc, #116]	; (800a528 <tcp_receive+0x5f8>)
 800a4b4:	481b      	ldr	r0, [pc, #108]	; (800a524 <tcp_receive+0x5f4>)
 800a4b6:	f005 fe7b 	bl	80101b0 <iprintf>
      off = (u16_t)off32;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a4c0:	4b15      	ldr	r3, [pc, #84]	; (800a518 <tcp_receive+0x5e8>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	891b      	ldrh	r3, [r3, #8]
 800a4c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d906      	bls.n	800a4dc <tcp_receive+0x5ac>
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <tcp_receive+0x5ec>)
 800a4d0:	f240 5297 	movw	r2, #1431	; 0x597
 800a4d4:	4915      	ldr	r1, [pc, #84]	; (800a52c <tcp_receive+0x5fc>)
 800a4d6:	4813      	ldr	r0, [pc, #76]	; (800a524 <tcp_receive+0x5f4>)
 800a4d8:	f005 fe6a 	bl	80101b0 <iprintf>
      inseg.len -= off;
 800a4dc:	4b0e      	ldr	r3, [pc, #56]	; (800a518 <tcp_receive+0x5e8>)
 800a4de:	891a      	ldrh	r2, [r3, #8]
 800a4e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <tcp_receive+0x5e8>)
 800a4ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <tcp_receive+0x5e8>)
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	891a      	ldrh	r2, [r3, #8]
 800a4f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a4fa:	e029      	b.n	800a550 <tcp_receive+0x620>
 800a4fc:	08012efc 	.word	0x08012efc
 800a500:	08012f04 	.word	0x08012f04
 800a504:	20000558 	.word	0x20000558
 800a508:	20000554 	.word	0x20000554
 800a50c:	20006cfc 	.word	0x20006cfc
 800a510:	2000055a 	.word	0x2000055a
 800a514:	20000550 	.word	0x20000550
 800a518:	20000530 	.word	0x20000530
 800a51c:	08012b94 	.word	0x08012b94
 800a520:	08012f0c 	.word	0x08012f0c
 800a524:	08012be0 	.word	0x08012be0
 800a528:	08012f1c 	.word	0x08012f1c
 800a52c:	08012f2c 	.word	0x08012f2c
        off -= p->len;
 800a530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a540:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a542:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a546:	2200      	movs	r2, #0
 800a548:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a552:	895b      	ldrh	r3, [r3, #10]
 800a554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a558:	429a      	cmp	r2, r3
 800a55a:	d8e9      	bhi.n	800a530 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a55c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a560:	4619      	mov	r1, r3
 800a562:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a564:	f7fc f8c2 	bl	80066ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4a91      	ldr	r2, [pc, #580]	; (800a7b4 <tcp_receive+0x884>)
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	4b91      	ldr	r3, [pc, #580]	; (800a7b8 <tcp_receive+0x888>)
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	4a8f      	ldr	r2, [pc, #572]	; (800a7b4 <tcp_receive+0x884>)
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a57a:	e00d      	b.n	800a598 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a57c:	4b8d      	ldr	r3, [pc, #564]	; (800a7b4 <tcp_receive+0x884>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	da06      	bge.n	800a598 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8b5b      	ldrh	r3, [r3, #26]
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a598:	4b86      	ldr	r3, [pc, #536]	; (800a7b4 <tcp_receive+0x884>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f2c0 842a 	blt.w	800adfc <tcp_receive+0xecc>
 800a5a8:	4b82      	ldr	r3, [pc, #520]	; (800a7b4 <tcp_receive+0x884>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5b4:	440b      	add	r3, r1
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f300 841e 	bgt.w	800adfc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5c4:	4b7b      	ldr	r3, [pc, #492]	; (800a7b4 <tcp_receive+0x884>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f040 829a 	bne.w	800ab02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a5ce:	4b7a      	ldr	r3, [pc, #488]	; (800a7b8 <tcp_receive+0x888>)
 800a5d0:	891c      	ldrh	r4, [r3, #8]
 800a5d2:	4b79      	ldr	r3, [pc, #484]	; (800a7b8 <tcp_receive+0x888>)
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fa fdee 	bl	80051bc <lwip_htons>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <tcp_receive+0x6c0>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <tcp_receive+0x6c2>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4423      	add	r3, r4
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	4b71      	ldr	r3, [pc, #452]	; (800a7bc <tcp_receive+0x88c>)
 800a5f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5fe:	4b6f      	ldr	r3, [pc, #444]	; (800a7bc <tcp_receive+0x88c>)
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d275      	bcs.n	800a6f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a606:	4b6c      	ldr	r3, [pc, #432]	; (800a7b8 <tcp_receive+0x888>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa fdd4 	bl	80051bc <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01f      	beq.n	800a660 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a620:	4b65      	ldr	r3, [pc, #404]	; (800a7b8 <tcp_receive+0x888>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	899b      	ldrh	r3, [r3, #12]
 800a626:	b29b      	uxth	r3, r3
 800a628:	b21b      	sxth	r3, r3
 800a62a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a62e:	b21c      	sxth	r4, r3
 800a630:	4b61      	ldr	r3, [pc, #388]	; (800a7b8 <tcp_receive+0x888>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	b29b      	uxth	r3, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fa fdbf 	bl	80051bc <lwip_htons>
 800a63e:	4603      	mov	r3, r0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	b29b      	uxth	r3, r3
 800a644:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fa fdb6 	bl	80051bc <lwip_htons>
 800a650:	4603      	mov	r3, r0
 800a652:	b21b      	sxth	r3, r3
 800a654:	4323      	orrs	r3, r4
 800a656:	b21a      	sxth	r2, r3
 800a658:	4b57      	ldr	r3, [pc, #348]	; (800a7b8 <tcp_receive+0x888>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	b292      	uxth	r2, r2
 800a65e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a664:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <tcp_receive+0x888>)
 800a666:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a668:	4b53      	ldr	r3, [pc, #332]	; (800a7b8 <tcp_receive+0x888>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	899b      	ldrh	r3, [r3, #12]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4618      	mov	r0, r3
 800a672:	f7fa fda3 	bl	80051bc <lwip_htons>
 800a676:	4603      	mov	r3, r0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <tcp_receive+0x75e>
            inseg.len -= 1;
 800a682:	4b4d      	ldr	r3, [pc, #308]	; (800a7b8 <tcp_receive+0x888>)
 800a684:	891b      	ldrh	r3, [r3, #8]
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	4b4b      	ldr	r3, [pc, #300]	; (800a7b8 <tcp_receive+0x888>)
 800a68c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a68e:	4b4a      	ldr	r3, [pc, #296]	; (800a7b8 <tcp_receive+0x888>)
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4a49      	ldr	r2, [pc, #292]	; (800a7b8 <tcp_receive+0x888>)
 800a694:	8912      	ldrh	r2, [r2, #8]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fb ff27 	bl	80064ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a69e:	4b46      	ldr	r3, [pc, #280]	; (800a7b8 <tcp_receive+0x888>)
 800a6a0:	891c      	ldrh	r4, [r3, #8]
 800a6a2:	4b45      	ldr	r3, [pc, #276]	; (800a7b8 <tcp_receive+0x888>)
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fa fd86 	bl	80051bc <lwip_htons>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <tcp_receive+0x790>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e000      	b.n	800a6c2 <tcp_receive+0x792>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4423      	add	r3, r4
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	4b3d      	ldr	r3, [pc, #244]	; (800a7bc <tcp_receive+0x88c>)
 800a6c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6ca:	4b3c      	ldr	r3, [pc, #240]	; (800a7bc <tcp_receive+0x88c>)
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4b38      	ldr	r3, [pc, #224]	; (800a7b4 <tcp_receive+0x884>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	441a      	add	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6de:	440b      	add	r3, r1
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d006      	beq.n	800a6f2 <tcp_receive+0x7c2>
 800a6e4:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <tcp_receive+0x890>)
 800a6e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a6ea:	4936      	ldr	r1, [pc, #216]	; (800a7c4 <tcp_receive+0x894>)
 800a6ec:	4836      	ldr	r0, [pc, #216]	; (800a7c8 <tcp_receive+0x898>)
 800a6ee:	f005 fd5f 	bl	80101b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80e7 	beq.w	800a8ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6fc:	4b2e      	ldr	r3, [pc, #184]	; (800a7b8 <tcp_receive+0x888>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	899b      	ldrh	r3, [r3, #12]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7fa fd59 	bl	80051bc <lwip_htons>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a716:	e00a      	b.n	800a72e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7fd fca2 	bl	8008072 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f0      	bne.n	800a718 <tcp_receive+0x7e8>
 800a736:	e0c8      	b.n	800a8ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a73e:	e052      	b.n	800a7e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	899b      	ldrh	r3, [r3, #12]
 800a746:	b29b      	uxth	r3, r3
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fa fd37 	bl	80051bc <lwip_htons>
 800a74e:	4603      	mov	r3, r0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d03d      	beq.n	800a7d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a75a:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <tcp_receive+0x888>)
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	899b      	ldrh	r3, [r3, #12]
 800a760:	b29b      	uxth	r3, r3
 800a762:	4618      	mov	r0, r3
 800a764:	f7fa fd2a 	bl	80051bc <lwip_htons>
 800a768:	4603      	mov	r3, r0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a770:	2b00      	cmp	r3, #0
 800a772:	d130      	bne.n	800a7d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <tcp_receive+0x888>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	899b      	ldrh	r3, [r3, #12]
 800a77a:	b29c      	uxth	r4, r3
 800a77c:	2001      	movs	r0, #1
 800a77e:	f7fa fd1d 	bl	80051bc <lwip_htons>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <tcp_receive+0x888>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4322      	orrs	r2, r4
 800a78c:	b292      	uxth	r2, r2
 800a78e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a790:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <tcp_receive+0x888>)
 800a792:	891c      	ldrh	r4, [r3, #8]
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <tcp_receive+0x888>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fa fd0d 	bl	80051bc <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00e      	beq.n	800a7cc <tcp_receive+0x89c>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e00d      	b.n	800a7ce <tcp_receive+0x89e>
 800a7b2:	bf00      	nop
 800a7b4:	20000550 	.word	0x20000550
 800a7b8:	20000530 	.word	0x20000530
 800a7bc:	2000055a 	.word	0x2000055a
 800a7c0:	08012b94 	.word	0x08012b94
 800a7c4:	08012f3c 	.word	0x08012f3c
 800a7c8:	08012be0 	.word	0x08012be0
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4423      	add	r3, r4
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	4b98      	ldr	r3, [pc, #608]	; (800aa34 <tcp_receive+0xb04>)
 800a7d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a7e0:	6938      	ldr	r0, [r7, #16]
 800a7e2:	f7fd fc46 	bl	8008072 <tcp_seg_free>
            while (next &&
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00e      	beq.n	800a80a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a7ec:	4b91      	ldr	r3, [pc, #580]	; (800aa34 <tcp_receive+0xb04>)
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4b91      	ldr	r3, [pc, #580]	; (800aa38 <tcp_receive+0xb08>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a800:	8909      	ldrh	r1, [r1, #8]
 800a802:	440b      	add	r3, r1
 800a804:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a806:	2b00      	cmp	r3, #0
 800a808:	da9a      	bge.n	800a740 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d059      	beq.n	800a8c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a810:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <tcp_receive+0xb04>)
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	4b88      	ldr	r3, [pc, #544]	; (800aa38 <tcp_receive+0xb08>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	441a      	add	r2, r3
 800a81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a824:	2b00      	cmp	r3, #0
 800a826:	dd4d      	ble.n	800a8c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	4b81      	ldr	r3, [pc, #516]	; (800aa38 <tcp_receive+0xb08>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	b29a      	uxth	r2, r3
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <tcp_receive+0xb0c>)
 800a83c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a83e:	4b7f      	ldr	r3, [pc, #508]	; (800aa3c <tcp_receive+0xb0c>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fcb8 	bl	80051bc <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <tcp_receive+0x934>
                inseg.len -= 1;
 800a858:	4b78      	ldr	r3, [pc, #480]	; (800aa3c <tcp_receive+0xb0c>)
 800a85a:	891b      	ldrh	r3, [r3, #8]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	4b76      	ldr	r3, [pc, #472]	; (800aa3c <tcp_receive+0xb0c>)
 800a862:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a864:	4b75      	ldr	r3, [pc, #468]	; (800aa3c <tcp_receive+0xb0c>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4a74      	ldr	r2, [pc, #464]	; (800aa3c <tcp_receive+0xb0c>)
 800a86a:	8912      	ldrh	r2, [r2, #8]
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fb fe3c 	bl	80064ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a874:	4b71      	ldr	r3, [pc, #452]	; (800aa3c <tcp_receive+0xb0c>)
 800a876:	891c      	ldrh	r4, [r3, #8]
 800a878:	4b70      	ldr	r3, [pc, #448]	; (800aa3c <tcp_receive+0xb0c>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	899b      	ldrh	r3, [r3, #12]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4618      	mov	r0, r3
 800a882:	f7fa fc9b 	bl	80051bc <lwip_htons>
 800a886:	4603      	mov	r3, r0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <tcp_receive+0x966>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <tcp_receive+0x968>
 800a896:	2300      	movs	r3, #0
 800a898:	4423      	add	r3, r4
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	4b65      	ldr	r3, [pc, #404]	; (800aa34 <tcp_receive+0xb04>)
 800a89e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a8a0:	4b64      	ldr	r3, [pc, #400]	; (800aa34 <tcp_receive+0xb04>)
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4b64      	ldr	r3, [pc, #400]	; (800aa38 <tcp_receive+0xb08>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d006      	beq.n	800a8c4 <tcp_receive+0x994>
 800a8b6:	4b62      	ldr	r3, [pc, #392]	; (800aa40 <tcp_receive+0xb10>)
 800a8b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a8bc:	4961      	ldr	r1, [pc, #388]	; (800aa44 <tcp_receive+0xb14>)
 800a8be:	4862      	ldr	r0, [pc, #392]	; (800aa48 <tcp_receive+0xb18>)
 800a8c0:	f005 fc76 	bl	80101b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a8ca:	4b5a      	ldr	r3, [pc, #360]	; (800aa34 <tcp_receive+0xb04>)
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b59      	ldr	r3, [pc, #356]	; (800aa38 <tcp_receive+0xb08>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	441a      	add	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8de:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <tcp_receive+0xb04>)
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d206      	bcs.n	800a8f4 <tcp_receive+0x9c4>
 800a8e6:	4b56      	ldr	r3, [pc, #344]	; (800aa40 <tcp_receive+0xb10>)
 800a8e8:	f240 6207 	movw	r2, #1543	; 0x607
 800a8ec:	4957      	ldr	r1, [pc, #348]	; (800aa4c <tcp_receive+0xb1c>)
 800a8ee:	4856      	ldr	r0, [pc, #344]	; (800aa48 <tcp_receive+0xb18>)
 800a8f0:	f005 fc5e 	bl	80101b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8f8:	4b4e      	ldr	r3, [pc, #312]	; (800aa34 <tcp_receive+0xb04>)
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fc fe8f 	bl	8007628 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a90a:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <tcp_receive+0xb0c>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	891b      	ldrh	r3, [r3, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a914:	4b49      	ldr	r3, [pc, #292]	; (800aa3c <tcp_receive+0xb0c>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4a4d      	ldr	r2, [pc, #308]	; (800aa50 <tcp_receive+0xb20>)
 800a91a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a91c:	4b47      	ldr	r3, [pc, #284]	; (800aa3c <tcp_receive+0xb0c>)
 800a91e:	2200      	movs	r2, #0
 800a920:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a922:	4b46      	ldr	r3, [pc, #280]	; (800aa3c <tcp_receive+0xb0c>)
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	899b      	ldrh	r3, [r3, #12]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fa fc46 	bl	80051bc <lwip_htons>
 800a930:	4603      	mov	r3, r0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 80b8 	beq.w	800aaae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a93e:	4b45      	ldr	r3, [pc, #276]	; (800aa54 <tcp_receive+0xb24>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	f043 0320 	orr.w	r3, r3, #32
 800a946:	b2da      	uxtb	r2, r3
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <tcp_receive+0xb24>)
 800a94a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a94c:	e0af      	b.n	800aaae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a952:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4a36      	ldr	r2, [pc, #216]	; (800aa38 <tcp_receive+0xb08>)
 800a95e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	891b      	ldrh	r3, [r3, #8]
 800a964:	461c      	mov	r4, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fa fc24 	bl	80051bc <lwip_htons>
 800a974:	4603      	mov	r3, r0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0303 	and.w	r3, r3, #3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <tcp_receive+0xa54>
 800a980:	2301      	movs	r3, #1
 800a982:	e000      	b.n	800a986 <tcp_receive+0xa56>
 800a984:	2300      	movs	r3, #0
 800a986:	191a      	adds	r2, r3, r4
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	441a      	add	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a996:	461c      	mov	r4, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	891b      	ldrh	r3, [r3, #8]
 800a99c:	461d      	mov	r5, r3
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	899b      	ldrh	r3, [r3, #12]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fa fc08 	bl	80051bc <lwip_htons>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <tcp_receive+0xa8c>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <tcp_receive+0xa8e>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	442b      	add	r3, r5
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	d206      	bcs.n	800a9d2 <tcp_receive+0xaa2>
 800a9c4:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <tcp_receive+0xb10>)
 800a9c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800a9ca:	4923      	ldr	r1, [pc, #140]	; (800aa58 <tcp_receive+0xb28>)
 800a9cc:	481e      	ldr	r0, [pc, #120]	; (800aa48 <tcp_receive+0xb18>)
 800a9ce:	f005 fbef 	bl	80101b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	891b      	ldrh	r3, [r3, #8]
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	899b      	ldrh	r3, [r3, #12]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fa fbeb 	bl	80051bc <lwip_htons>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <tcp_receive+0xac6>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <tcp_receive+0xac8>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	1919      	adds	r1, r3, r4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9fe:	b28b      	uxth	r3, r1
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fc fe0d 	bl	8007628 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	891b      	ldrh	r3, [r3, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d028      	beq.n	800aa6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <tcp_receive+0xb20>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01d      	beq.n	800aa5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800aa20:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <tcp_receive+0xb20>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fb ffa6 	bl	800697c <pbuf_cat>
 800aa30:	e018      	b.n	800aa64 <tcp_receive+0xb34>
 800aa32:	bf00      	nop
 800aa34:	2000055a 	.word	0x2000055a
 800aa38:	20000550 	.word	0x20000550
 800aa3c:	20000530 	.word	0x20000530
 800aa40:	08012b94 	.word	0x08012b94
 800aa44:	08012f74 	.word	0x08012f74
 800aa48:	08012be0 	.word	0x08012be0
 800aa4c:	08012fb0 	.word	0x08012fb0
 800aa50:	20000560 	.word	0x20000560
 800aa54:	2000055d 	.word	0x2000055d
 800aa58:	08012fd0 	.word	0x08012fd0
            } else {
              recv_data = cseg->p;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a70      	ldr	r2, [pc, #448]	; (800ac24 <tcp_receive+0xcf4>)
 800aa62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2200      	movs	r2, #0
 800aa68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	899b      	ldrh	r3, [r3, #12]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fa fba2 	bl	80051bc <lwip_htons>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00d      	beq.n	800aaa0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aa84:	4b68      	ldr	r3, [pc, #416]	; (800ac28 <tcp_receive+0xcf8>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f043 0320 	orr.w	r3, r3, #32
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b66      	ldr	r3, [pc, #408]	; (800ac28 <tcp_receive+0xcf8>)
 800aa90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7d1b      	ldrb	r3, [r3, #20]
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d102      	bne.n	800aaa0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2207      	movs	r2, #7
 800aa9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aaa8:	68b8      	ldr	r0, [r7, #8]
 800aaaa:	f7fd fae2 	bl	8008072 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aac2:	429a      	cmp	r2, r3
 800aac4:	f43f af43 	beq.w	800a94e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	8b5b      	ldrh	r3, [r3, #26]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00e      	beq.n	800aaf2 <tcp_receive+0xbc2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8b5b      	ldrh	r3, [r3, #26]
 800aad8:	f023 0301 	bic.w	r3, r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	835a      	strh	r2, [r3, #26]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8b5b      	ldrh	r3, [r3, #26]
 800aae6:	f043 0302 	orr.w	r3, r3, #2
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aaf0:	e188      	b.n	800ae04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	8b5b      	ldrh	r3, [r3, #26]
 800aaf6:	f043 0301 	orr.w	r3, r3, #1
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab00:	e180      	b.n	800ae04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab0a:	4848      	ldr	r0, [pc, #288]	; (800ac2c <tcp_receive+0xcfc>)
 800ab0c:	f7fd fae8 	bl	80080e0 <tcp_seg_copy>
 800ab10:	4602      	mov	r2, r0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	675a      	str	r2, [r3, #116]	; 0x74
 800ab16:	e16d      	b.n	800adf4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab20:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab22:	e157      	b.n	800add4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	4b41      	ldr	r3, [pc, #260]	; (800ac30 <tcp_receive+0xd00>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d11d      	bne.n	800ab6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab32:	4b3e      	ldr	r3, [pc, #248]	; (800ac2c <tcp_receive+0xcfc>)
 800ab34:	891a      	ldrh	r2, [r3, #8]
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	891b      	ldrh	r3, [r3, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	f240 814f 	bls.w	800adde <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab40:	483a      	ldr	r0, [pc, #232]	; (800ac2c <tcp_receive+0xcfc>)
 800ab42:	f7fd facd 	bl	80080e0 <tcp_seg_copy>
 800ab46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 8149 	beq.w	800ade2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ab50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e002      	b.n	800ab64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab66:	6978      	ldr	r0, [r7, #20]
 800ab68:	f7ff f8de 	bl	8009d28 <tcp_oos_insert_segment>
                }
                break;
 800ab6c:	e139      	b.n	800ade2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d117      	bne.n	800aba4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <tcp_receive+0xd00>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da57      	bge.n	800ac34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab84:	4829      	ldr	r0, [pc, #164]	; (800ac2c <tcp_receive+0xcfc>)
 800ab86:	f7fd faab 	bl	80080e0 <tcp_seg_copy>
 800ab8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8129 	beq.w	800ade6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ab9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab9c:	69b8      	ldr	r0, [r7, #24]
 800ab9e:	f7ff f8c3 	bl	8009d28 <tcp_oos_insert_segment>
                  }
                  break;
 800aba2:	e120      	b.n	800ade6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aba4:	4b22      	ldr	r3, [pc, #136]	; (800ac30 <tcp_receive+0xd00>)
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	3b01      	subs	r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	db3e      	blt.n	800ac34 <tcp_receive+0xd04>
 800abb6:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <tcp_receive+0xd00>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	3301      	adds	r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dc35      	bgt.n	800ac34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abc8:	4818      	ldr	r0, [pc, #96]	; (800ac2c <tcp_receive+0xcfc>)
 800abca:	f7fd fa89 	bl	80080e0 <tcp_seg_copy>
 800abce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f000 8109 	beq.w	800adea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe0:	8912      	ldrh	r2, [r2, #8]
 800abe2:	441a      	add	r2, r3
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <tcp_receive+0xd00>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd12      	ble.n	800ac14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800abee:	4b10      	ldr	r3, [pc, #64]	; (800ac30 <tcp_receive+0xd00>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	891b      	ldrh	r3, [r3, #8]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fb fc6c 	bl	80064ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac1c:	69f8      	ldr	r0, [r7, #28]
 800ac1e:	f7ff f883 	bl	8009d28 <tcp_oos_insert_segment>
                  }
                  break;
 800ac22:	e0e2      	b.n	800adea <tcp_receive+0xeba>
 800ac24:	20000560 	.word	0x20000560
 800ac28:	2000055d 	.word	0x2000055d
 800ac2c:	20000530 	.word	0x20000530
 800ac30:	20000550 	.word	0x20000550
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 80c6 	bne.w	800adce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac42:	4b80      	ldr	r3, [pc, #512]	; (800ae44 <tcp_receive+0xf14>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f340 80bd 	ble.w	800adce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	899b      	ldrh	r3, [r3, #12]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fa faad 	bl	80051bc <lwip_htons>
 800ac62:	4603      	mov	r3, r0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 80bf 	bne.w	800adee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ac70:	4875      	ldr	r0, [pc, #468]	; (800ae48 <tcp_receive+0xf18>)
 800ac72:	f7fd fa35 	bl	80080e0 <tcp_seg_copy>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 80b6 	beq.w	800adf2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8e:	8912      	ldrh	r2, [r2, #8]
 800ac90:	441a      	add	r2, r3
 800ac92:	4b6c      	ldr	r3, [pc, #432]	; (800ae44 <tcp_receive+0xf14>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dd12      	ble.n	800acc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ac9c:	4b69      	ldr	r3, [pc, #420]	; (800ae44 <tcp_receive+0xf14>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	b29a      	uxth	r2, r3
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	891b      	ldrh	r3, [r3, #8]
 800acba:	4619      	mov	r1, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f7fb fc15 	bl	80064ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800acc2:	4b62      	ldr	r3, [pc, #392]	; (800ae4c <tcp_receive+0xf1c>)
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <tcp_receive+0xf14>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	441a      	add	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800acd6:	440b      	add	r3, r1
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f340 8089 	ble.w	800adf2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4618      	mov	r0, r3
 800acec:	f7fa fa66 	bl	80051bc <lwip_htons>
 800acf0:	4603      	mov	r3, r0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d022      	beq.n	800ad42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	899b      	ldrh	r3, [r3, #12]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad0c:	b21c      	sxth	r4, r3
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fa fa4f 	bl	80051bc <lwip_htons>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fa fa46 	bl	80051bc <lwip_htons>
 800ad30:	4603      	mov	r3, r0
 800ad32:	b21b      	sxth	r3, r3
 800ad34:	4323      	orrs	r3, r4
 800ad36:	b21a      	sxth	r2, r3
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad4c:	4413      	add	r3, r2
 800ad4e:	b299      	uxth	r1, r3
 800ad50:	4b3c      	ldr	r3, [pc, #240]	; (800ae44 <tcp_receive+0xf14>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	1a8a      	subs	r2, r1, r2
 800ad5c:	b292      	uxth	r2, r2
 800ad5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	891b      	ldrh	r3, [r3, #8]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fb fbbc 	bl	80064ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	891c      	ldrh	r4, [r3, #8]
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	899b      	ldrh	r3, [r3, #12]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fa fa19 	bl	80051bc <lwip_htons>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <tcp_receive+0xe6a>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <tcp_receive+0xe6c>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4423      	add	r3, r4
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	4b2a      	ldr	r3, [pc, #168]	; (800ae4c <tcp_receive+0xf1c>)
 800ada2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ada4:	4b29      	ldr	r3, [pc, #164]	; (800ae4c <tcp_receive+0xf1c>)
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b26      	ldr	r3, [pc, #152]	; (800ae44 <tcp_receive+0xf14>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	441a      	add	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adb8:	440b      	add	r3, r1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d019      	beq.n	800adf2 <tcp_receive+0xec2>
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <tcp_receive+0xf20>)
 800adc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800adc4:	4923      	ldr	r1, [pc, #140]	; (800ae54 <tcp_receive+0xf24>)
 800adc6:	4824      	ldr	r0, [pc, #144]	; (800ae58 <tcp_receive+0xf28>)
 800adc8:	f005 f9f2 	bl	80101b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800adcc:	e011      	b.n	800adf2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	63bb      	str	r3, [r7, #56]	; 0x38
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	f47f aea4 	bne.w	800ab24 <tcp_receive+0xbf4>
 800addc:	e00a      	b.n	800adf4 <tcp_receive+0xec4>
                break;
 800adde:	bf00      	nop
 800ade0:	e008      	b.n	800adf4 <tcp_receive+0xec4>
                break;
 800ade2:	bf00      	nop
 800ade4:	e006      	b.n	800adf4 <tcp_receive+0xec4>
                  break;
 800ade6:	bf00      	nop
 800ade8:	e004      	b.n	800adf4 <tcp_receive+0xec4>
                  break;
 800adea:	bf00      	nop
 800adec:	e002      	b.n	800adf4 <tcp_receive+0xec4>
                  break;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <tcp_receive+0xec4>
                break;
 800adf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 fe8b 	bl	800cb10 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800adfa:	e003      	b.n	800ae04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fe87 	bl	800cb10 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae02:	e01a      	b.n	800ae3a <tcp_receive+0xf0a>
 800ae04:	e019      	b.n	800ae3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <tcp_receive+0xf14>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db0a      	blt.n	800ae2a <tcp_receive+0xefa>
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <tcp_receive+0xf14>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae20:	440b      	add	r3, r1
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	3301      	adds	r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd07      	ble.n	800ae3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8b5b      	ldrh	r3, [r3, #26]
 800ae2e:	f043 0302 	orr.w	r3, r3, #2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae38:	e7ff      	b.n	800ae3a <tcp_receive+0xf0a>
 800ae3a:	bf00      	nop
 800ae3c:	3750      	adds	r7, #80	; 0x50
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bdb0      	pop	{r4, r5, r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20000550 	.word	0x20000550
 800ae48:	20000530 	.word	0x20000530
 800ae4c:	2000055a 	.word	0x2000055a
 800ae50:	08012b94 	.word	0x08012b94
 800ae54:	08012f3c 	.word	0x08012f3c
 800ae58:	08012be0 	.word	0x08012be0

0800ae5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <tcp_get_next_optbyte+0x5c>)
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	b291      	uxth	r1, r2
 800ae6a:	4a13      	ldr	r2, [pc, #76]	; (800aeb8 <tcp_get_next_optbyte+0x5c>)
 800ae6c:	8011      	strh	r1, [r2, #0]
 800ae6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ae70:	4b12      	ldr	r3, [pc, #72]	; (800aebc <tcp_get_next_optbyte+0x60>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <tcp_get_next_optbyte+0x26>
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <tcp_get_next_optbyte+0x64>)
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	88fa      	ldrh	r2, [r7, #6]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d208      	bcs.n	800ae94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <tcp_get_next_optbyte+0x68>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3314      	adds	r3, #20
 800ae88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ae8a:	88fb      	ldrh	r3, [r7, #6]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	4413      	add	r3, r2
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	e00b      	b.n	800aeac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ae94:	88fb      	ldrh	r3, [r7, #6]
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <tcp_get_next_optbyte+0x64>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <tcp_get_next_optbyte+0x60>)
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	797b      	ldrb	r3, [r7, #5]
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	2000054c 	.word	0x2000054c
 800aebc:	20000548 	.word	0x20000548
 800aec0:	20000546 	.word	0x20000546
 800aec4:	20000540 	.word	0x20000540

0800aec8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <tcp_parseopt+0x1c>
 800aed6:	4b32      	ldr	r3, [pc, #200]	; (800afa0 <tcp_parseopt+0xd8>)
 800aed8:	f240 727d 	movw	r2, #1917	; 0x77d
 800aedc:	4931      	ldr	r1, [pc, #196]	; (800afa4 <tcp_parseopt+0xdc>)
 800aede:	4832      	ldr	r0, [pc, #200]	; (800afa8 <tcp_parseopt+0xe0>)
 800aee0:	f005 f966 	bl	80101b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aee4:	4b31      	ldr	r3, [pc, #196]	; (800afac <tcp_parseopt+0xe4>)
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d055      	beq.n	800af98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aeec:	4b30      	ldr	r3, [pc, #192]	; (800afb0 <tcp_parseopt+0xe8>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	e045      	b.n	800af80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800aef4:	f7ff ffb2 	bl	800ae5c <tcp_get_next_optbyte>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d006      	beq.n	800af10 <tcp_parseopt+0x48>
 800af02:	2b02      	cmp	r3, #2
 800af04:	dc2b      	bgt.n	800af5e <tcp_parseopt+0x96>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d041      	beq.n	800af8e <tcp_parseopt+0xc6>
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d127      	bne.n	800af5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af0e:	e037      	b.n	800af80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af10:	f7ff ffa4 	bl	800ae5c <tcp_get_next_optbyte>
 800af14:	4603      	mov	r3, r0
 800af16:	2b04      	cmp	r3, #4
 800af18:	d13b      	bne.n	800af92 <tcp_parseopt+0xca>
 800af1a:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <tcp_parseopt+0xe8>)
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	3301      	adds	r3, #1
 800af20:	4a22      	ldr	r2, [pc, #136]	; (800afac <tcp_parseopt+0xe4>)
 800af22:	8812      	ldrh	r2, [r2, #0]
 800af24:	4293      	cmp	r3, r2
 800af26:	da34      	bge.n	800af92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af28:	f7ff ff98 	bl	800ae5c <tcp_get_next_optbyte>
 800af2c:	4603      	mov	r3, r0
 800af2e:	b29b      	uxth	r3, r3
 800af30:	021b      	lsls	r3, r3, #8
 800af32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af34:	f7ff ff92 	bl	800ae5c <tcp_get_next_optbyte>
 800af38:	4603      	mov	r3, r0
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	89bb      	ldrh	r3, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af42:	89bb      	ldrh	r3, [r7, #12]
 800af44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af48:	d804      	bhi.n	800af54 <tcp_parseopt+0x8c>
 800af4a:	89bb      	ldrh	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <tcp_parseopt+0x8c>
 800af50:	89ba      	ldrh	r2, [r7, #12]
 800af52:	e001      	b.n	800af58 <tcp_parseopt+0x90>
 800af54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af5c:	e010      	b.n	800af80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af5e:	f7ff ff7d 	bl	800ae5c <tcp_get_next_optbyte>
 800af62:	4603      	mov	r3, r0
 800af64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d914      	bls.n	800af96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	b29a      	uxth	r2, r3
 800af70:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <tcp_parseopt+0xe8>)
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	4413      	add	r3, r2
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b02      	subs	r3, #2
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <tcp_parseopt+0xe8>)
 800af7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <tcp_parseopt+0xe8>)
 800af82:	881a      	ldrh	r2, [r3, #0]
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <tcp_parseopt+0xe4>)
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d3b3      	bcc.n	800aef4 <tcp_parseopt+0x2c>
 800af8c:	e004      	b.n	800af98 <tcp_parseopt+0xd0>
          return;
 800af8e:	bf00      	nop
 800af90:	e002      	b.n	800af98 <tcp_parseopt+0xd0>
            return;
 800af92:	bf00      	nop
 800af94:	e000      	b.n	800af98 <tcp_parseopt+0xd0>
            return;
 800af96:	bf00      	nop
      }
    }
  }
}
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08012b94 	.word	0x08012b94
 800afa4:	08012ff8 	.word	0x08012ff8
 800afa8:	08012be0 	.word	0x08012be0
 800afac:	20000544 	.word	0x20000544
 800afb0:	2000054c 	.word	0x2000054c

0800afb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <tcp_trigger_input_pcb_close+0x1c>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f043 0310 	orr.w	r3, r3, #16
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4b03      	ldr	r3, [pc, #12]	; (800afd0 <tcp_trigger_input_pcb_close+0x1c>)
 800afc4:	701a      	strb	r2, [r3, #0]
}
 800afc6:	bf00      	nop
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	2000055d 	.word	0x2000055d

0800afd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <tcp_route+0x28>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7a1b      	ldrb	r3, [r3, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	7a1b      	ldrb	r3, [r3, #8]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fb f8a0 	bl	8006138 <netif_get_by_index>
 800aff8:	4603      	mov	r3, r0
 800affa:	e003      	b.n	800b004 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f003 fe8f 	bl	800ed20 <ip4_route>
 800b002:	4603      	mov	r3, r0
  }
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <tcp_create_segment+0x22>
 800b022:	4b44      	ldr	r3, [pc, #272]	; (800b134 <tcp_create_segment+0x128>)
 800b024:	22a3      	movs	r2, #163	; 0xa3
 800b026:	4944      	ldr	r1, [pc, #272]	; (800b138 <tcp_create_segment+0x12c>)
 800b028:	4844      	ldr	r0, [pc, #272]	; (800b13c <tcp_create_segment+0x130>)
 800b02a:	f005 f8c1 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d105      	bne.n	800b040 <tcp_create_segment+0x34>
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <tcp_create_segment+0x128>)
 800b036:	22a4      	movs	r2, #164	; 0xa4
 800b038:	4941      	ldr	r1, [pc, #260]	; (800b140 <tcp_create_segment+0x134>)
 800b03a:	4840      	ldr	r0, [pc, #256]	; (800b13c <tcp_create_segment+0x130>)
 800b03c:	f005 f8b8 	bl	80101b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b04e:	2003      	movs	r0, #3
 800b050:	f7fa fd74 	bl	8005b3c <memp_malloc>
 800b054:	6138      	str	r0, [r7, #16]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	f7fb fbcb 	bl	80067f8 <pbuf_free>
    return NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e061      	b.n	800b12a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b06c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	891a      	ldrh	r2, [r3, #8]
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	b29b      	uxth	r3, r3
 800b082:	429a      	cmp	r2, r3
 800b084:	d205      	bcs.n	800b092 <tcp_create_segment+0x86>
 800b086:	4b2b      	ldr	r3, [pc, #172]	; (800b134 <tcp_create_segment+0x128>)
 800b088:	22b0      	movs	r2, #176	; 0xb0
 800b08a:	492e      	ldr	r1, [pc, #184]	; (800b144 <tcp_create_segment+0x138>)
 800b08c:	482b      	ldr	r0, [pc, #172]	; (800b13c <tcp_create_segment+0x130>)
 800b08e:	f005 f88f 	bl	80101b0 <iprintf>
  seg->len = p->tot_len - optlen;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	891a      	ldrh	r2, [r3, #8]
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0a2:	2114      	movs	r1, #20
 800b0a4:	68b8      	ldr	r0, [r7, #8]
 800b0a6:	f7fb fb11 	bl	80066cc <pbuf_add_header>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b0b0:	6938      	ldr	r0, [r7, #16]
 800b0b2:	f7fc ffde 	bl	8008072 <tcp_seg_free>
    return NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e037      	b.n	800b12a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8ada      	ldrh	r2, [r3, #22]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	68dc      	ldr	r4, [r3, #12]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7fa f875 	bl	80051bc <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8b1a      	ldrh	r2, [r3, #24]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	68dc      	ldr	r4, [r3, #12]
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f7fa f86c 	bl	80051bc <lwip_htons>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	68dc      	ldr	r4, [r3, #12]
 800b0ec:	6838      	ldr	r0, [r7, #0]
 800b0ee:	f7fa f87a 	bl	80051e6 <lwip_htonl>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	089b      	lsrs	r3, r3, #2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3305      	adds	r3, #5
 800b100:	b29b      	uxth	r3, r3
 800b102:	031b      	lsls	r3, r3, #12
 800b104:	b29a      	uxth	r2, r3
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	4313      	orrs	r3, r2
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	68dc      	ldr	r4, [r3, #12]
 800b112:	4610      	mov	r0, r2
 800b114:	f7fa f852 	bl	80051bc <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	749a      	strb	r2, [r3, #18]
 800b124:	2200      	movs	r2, #0
 800b126:	74da      	strb	r2, [r3, #19]
  return seg;
 800b128:	693b      	ldr	r3, [r7, #16]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	371c      	adds	r7, #28
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd90      	pop	{r4, r7, pc}
 800b132:	bf00      	nop
 800b134:	08013014 	.word	0x08013014
 800b138:	08013048 	.word	0x08013048
 800b13c:	08013068 	.word	0x08013068
 800b140:	08013090 	.word	0x08013090
 800b144:	080130b4 	.word	0x080130b4

0800b148 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
 800b154:	460b      	mov	r3, r1
 800b156:	81bb      	strh	r3, [r7, #12]
 800b158:	4613      	mov	r3, r2
 800b15a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b15c:	89bb      	ldrh	r3, [r7, #12]
 800b15e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d105      	bne.n	800b172 <tcp_pbuf_prealloc+0x2a>
 800b166:	4b30      	ldr	r3, [pc, #192]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b168:	22e8      	movs	r2, #232	; 0xe8
 800b16a:	4930      	ldr	r1, [pc, #192]	; (800b22c <tcp_pbuf_prealloc+0xe4>)
 800b16c:	4830      	ldr	r0, [pc, #192]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b16e:	f005 f81f 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d105      	bne.n	800b184 <tcp_pbuf_prealloc+0x3c>
 800b178:	4b2b      	ldr	r3, [pc, #172]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b17a:	22e9      	movs	r2, #233	; 0xe9
 800b17c:	492d      	ldr	r1, [pc, #180]	; (800b234 <tcp_pbuf_prealloc+0xec>)
 800b17e:	482c      	ldr	r0, [pc, #176]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b180:	f005 f816 	bl	80101b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b184:	89ba      	ldrh	r2, [r7, #12]
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d221      	bcs.n	800b1d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b18c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d111      	bne.n	800b1bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	8b5b      	ldrh	r3, [r3, #26]
 800b19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d115      	bne.n	800b1d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b1a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b1bc:	89bb      	ldrh	r3, [r7, #12]
 800b1be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b1c2:	f023 0203 	bic.w	r2, r3, #3
 800b1c6:	897b      	ldrh	r3, [r7, #10]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	bf28      	it	cs
 800b1cc:	4613      	movcs	r3, r2
 800b1ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b1d0:	8af9      	ldrh	r1, [r7, #22]
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fb f829 	bl	8006230 <pbuf_alloc>
 800b1de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e019      	b.n	800b21e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <tcp_pbuf_prealloc+0xb8>
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b1f4:	f240 120b 	movw	r2, #267	; 0x10b
 800b1f8:	490f      	ldr	r1, [pc, #60]	; (800b238 <tcp_pbuf_prealloc+0xf0>)
 800b1fa:	480d      	ldr	r0, [pc, #52]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b1fc:	f004 ffd8 	bl	80101b0 <iprintf>
  *oversize = p->len - length;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	895a      	ldrh	r2, [r3, #10]
 800b204:	89bb      	ldrh	r3, [r7, #12]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	89ba      	ldrh	r2, [r7, #12]
 800b212:	811a      	strh	r2, [r3, #8]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	891a      	ldrh	r2, [r3, #8]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	815a      	strh	r2, [r3, #10]
  return p;
 800b21c:	693b      	ldr	r3, [r7, #16]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	08013014 	.word	0x08013014
 800b22c:	080130cc 	.word	0x080130cc
 800b230:	08013068 	.word	0x08013068
 800b234:	080130f0 	.word	0x080130f0
 800b238:	08013110 	.word	0x08013110

0800b23c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <tcp_write_checks+0x20>
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <tcp_write_checks+0xe0>)
 800b250:	f240 1233 	movw	r2, #307	; 0x133
 800b254:	4932      	ldr	r1, [pc, #200]	; (800b320 <tcp_write_checks+0xe4>)
 800b256:	4833      	ldr	r0, [pc, #204]	; (800b324 <tcp_write_checks+0xe8>)
 800b258:	f004 ffaa 	bl	80101b0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b04      	cmp	r3, #4
 800b262:	d00e      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b268:	2b07      	cmp	r3, #7
 800b26a:	d00a      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b270:	2b02      	cmp	r3, #2
 800b272:	d006      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d002      	beq.n	800b282 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b27c:	f06f 030a 	mvn.w	r3, #10
 800b280:	e048      	b.n	800b314 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b282:	887b      	ldrh	r3, [r7, #2]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <tcp_write_checks+0x50>
    return ERR_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	e043      	b.n	800b314 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b292:	887a      	ldrh	r2, [r7, #2]
 800b294:	429a      	cmp	r2, r3
 800b296:	d909      	bls.n	800b2ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8b5b      	ldrh	r3, [r3, #26]
 800b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	e033      	b.n	800b314 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2b2:	2b08      	cmp	r3, #8
 800b2b4:	d909      	bls.n	800b2ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	e024      	b.n	800b314 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00f      	beq.n	800b2f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d11a      	bne.n	800b312 <tcp_write_checks+0xd6>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d116      	bne.n	800b312 <tcp_write_checks+0xd6>
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <tcp_write_checks+0xe0>)
 800b2e6:	f240 1255 	movw	r2, #341	; 0x155
 800b2ea:	490f      	ldr	r1, [pc, #60]	; (800b328 <tcp_write_checks+0xec>)
 800b2ec:	480d      	ldr	r0, [pc, #52]	; (800b324 <tcp_write_checks+0xe8>)
 800b2ee:	f004 ff5f 	bl	80101b0 <iprintf>
 800b2f2:	e00e      	b.n	800b312 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d103      	bne.n	800b304 <tcp_write_checks+0xc8>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <tcp_write_checks+0xd6>
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <tcp_write_checks+0xe0>)
 800b306:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b30a:	4908      	ldr	r1, [pc, #32]	; (800b32c <tcp_write_checks+0xf0>)
 800b30c:	4805      	ldr	r0, [pc, #20]	; (800b324 <tcp_write_checks+0xe8>)
 800b30e:	f004 ff4f 	bl	80101b0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	08013014 	.word	0x08013014
 800b320:	08013124 	.word	0x08013124
 800b324:	08013068 	.word	0x08013068
 800b328:	08013144 	.word	0x08013144
 800b32c:	08013180 	.word	0x08013180

0800b330 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b09b      	sub	sp, #108	; 0x6c
 800b334:	af04      	add	r7, sp, #16
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4611      	mov	r1, r2
 800b33c:	461a      	mov	r2, r3
 800b33e:	460b      	mov	r3, r1
 800b340:	80fb      	strh	r3, [r7, #6]
 800b342:	4613      	mov	r3, r2
 800b344:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b346:	2300      	movs	r3, #0
 800b348:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	653b      	str	r3, [r7, #80]	; 0x50
 800b34e:	2300      	movs	r3, #0
 800b350:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b352:	2300      	movs	r3, #0
 800b354:	64bb      	str	r3, [r7, #72]	; 0x48
 800b356:	2300      	movs	r3, #0
 800b358:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <tcp_write+0x5c>
 800b378:	4ba4      	ldr	r3, [pc, #656]	; (800b60c <tcp_write+0x2dc>)
 800b37a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b37e:	49a4      	ldr	r1, [pc, #656]	; (800b610 <tcp_write+0x2e0>)
 800b380:	48a4      	ldr	r0, [pc, #656]	; (800b614 <tcp_write+0x2e4>)
 800b382:	f004 ff15 	bl	80101b0 <iprintf>
 800b386:	f06f 030f 	mvn.w	r3, #15
 800b38a:	e32a      	b.n	800b9e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bf28      	it	cs
 800b39e:	4613      	movcs	r3, r2
 800b3a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <tcp_write+0x7e>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ac:	e000      	b.n	800b3b0 <tcp_write+0x80>
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d109      	bne.n	800b3cc <tcp_write+0x9c>
 800b3b8:	4b94      	ldr	r3, [pc, #592]	; (800b60c <tcp_write+0x2dc>)
 800b3ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b3be:	4996      	ldr	r1, [pc, #600]	; (800b618 <tcp_write+0x2e8>)
 800b3c0:	4894      	ldr	r0, [pc, #592]	; (800b614 <tcp_write+0x2e4>)
 800b3c2:	f004 fef5 	bl	80101b0 <iprintf>
 800b3c6:	f06f 030f 	mvn.w	r3, #15
 800b3ca:	e30a      	b.n	800b9e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b3cc:	88fb      	ldrh	r3, [r7, #6]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ff33 	bl	800b23c <tcp_write_checks>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b3dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <tcp_write+0xba>
    return err;
 800b3e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3e8:	e2fb      	b.n	800b9e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 80f6 	beq.w	800b5f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b408:	653b      	str	r3, [r7, #80]	; 0x50
 800b40a:	e002      	b.n	800b412 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f8      	bne.n	800b40c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b41c:	7a9b      	ldrb	r3, [r3, #10]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	b29b      	uxth	r3, r3
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b42c:	891b      	ldrh	r3, [r3, #8]
 800b42e:	4619      	mov	r1, r3
 800b430:	8c3b      	ldrh	r3, [r7, #32]
 800b432:	440b      	add	r3, r1
 800b434:	429a      	cmp	r2, r3
 800b436:	da06      	bge.n	800b446 <tcp_write+0x116>
 800b438:	4b74      	ldr	r3, [pc, #464]	; (800b60c <tcp_write+0x2dc>)
 800b43a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b43e:	4977      	ldr	r1, [pc, #476]	; (800b61c <tcp_write+0x2ec>)
 800b440:	4874      	ldr	r0, [pc, #464]	; (800b614 <tcp_write+0x2e4>)
 800b442:	f004 feb5 	bl	80101b0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b448:	891a      	ldrh	r2, [r3, #8]
 800b44a:	8c3b      	ldrh	r3, [r7, #32]
 800b44c:	4413      	add	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b45c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b45e:	8a7b      	ldrh	r3, [r7, #18]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d026      	beq.n	800b4b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b468:	429a      	cmp	r2, r3
 800b46a:	d206      	bcs.n	800b47a <tcp_write+0x14a>
 800b46c:	4b67      	ldr	r3, [pc, #412]	; (800b60c <tcp_write+0x2dc>)
 800b46e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b472:	496b      	ldr	r1, [pc, #428]	; (800b620 <tcp_write+0x2f0>)
 800b474:	4867      	ldr	r0, [pc, #412]	; (800b614 <tcp_write+0x2e4>)
 800b476:	f004 fe9b 	bl	80101b0 <iprintf>
      seg = last_unsent;
 800b47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b47e:	8a7b      	ldrh	r3, [r7, #18]
 800b480:	88fa      	ldrh	r2, [r7, #6]
 800b482:	4293      	cmp	r3, r2
 800b484:	bf28      	it	cs
 800b486:	4613      	movcs	r3, r2
 800b488:	b29b      	uxth	r3, r3
 800b48a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bf28      	it	cs
 800b490:	4613      	movcs	r3, r2
 800b492:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b49a:	4413      	add	r3, r2
 800b49c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b4a0:	8a7a      	ldrh	r2, [r7, #18]
 800b4a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b4aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4b2:	8a7b      	ldrh	r3, [r7, #18]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00b      	beq.n	800b4d0 <tcp_write+0x1a0>
 800b4b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d006      	beq.n	800b4d0 <tcp_write+0x1a0>
 800b4c2:	4b52      	ldr	r3, [pc, #328]	; (800b60c <tcp_write+0x2dc>)
 800b4c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4c8:	4956      	ldr	r1, [pc, #344]	; (800b624 <tcp_write+0x2f4>)
 800b4ca:	4852      	ldr	r0, [pc, #328]	; (800b614 <tcp_write+0x2e4>)
 800b4cc:	f004 fe70 	bl	80101b0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b4d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	f080 8167 	bcs.w	800b7aa <tcp_write+0x47a>
 800b4dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8163 	beq.w	800b7aa <tcp_write+0x47a>
 800b4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e6:	891b      	ldrh	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 815e 	beq.w	800b7aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4f4:	1ad2      	subs	r2, r2, r3
 800b4f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	bfa8      	it	ge
 800b4fc:	4613      	movge	r3, r2
 800b4fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b502:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b504:	797b      	ldrb	r3, [r7, #5]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d027      	beq.n	800b55e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b50e:	f107 0012 	add.w	r0, r7, #18
 800b512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b514:	8bf9      	ldrh	r1, [r7, #30]
 800b516:	2301      	movs	r3, #1
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	797b      	ldrb	r3, [r7, #5]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4603      	mov	r3, r0
 800b524:	2000      	movs	r0, #0
 800b526:	f7ff fe0f 	bl	800b148 <tcp_pbuf_prealloc>
 800b52a:	6578      	str	r0, [r7, #84]	; 0x54
 800b52c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 8225 	beq.w	800b97e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b536:	6858      	ldr	r0, [r3, #4]
 800b538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	8bfa      	ldrh	r2, [r7, #30]
 800b542:	4619      	mov	r1, r3
 800b544:	f004 fe04 	bl	8010150 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b548:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b54a:	f7fb f9dd 	bl	8006908 <pbuf_clen>
 800b54e:	4603      	mov	r3, r0
 800b550:	461a      	mov	r2, r3
 800b552:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b556:	4413      	add	r3, r2
 800b558:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b55c:	e041      	b.n	800b5e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	637b      	str	r3, [r7, #52]	; 0x34
 800b564:	e002      	b.n	800b56c <tcp_write+0x23c>
 800b566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f8      	bne.n	800b566 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	7b1b      	ldrb	r3, [r3, #12]
 800b578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d115      	bne.n	800b5ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b586:	8952      	ldrh	r2, [r2, #10]
 800b588:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d10d      	bne.n	800b5ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b594:	2b00      	cmp	r3, #0
 800b596:	d006      	beq.n	800b5a6 <tcp_write+0x276>
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <tcp_write+0x2dc>)
 800b59a:	f240 2231 	movw	r2, #561	; 0x231
 800b59e:	4922      	ldr	r1, [pc, #136]	; (800b628 <tcp_write+0x2f8>)
 800b5a0:	481c      	ldr	r0, [pc, #112]	; (800b614 <tcp_write+0x2e4>)
 800b5a2:	f004 fe05 	bl	80101b0 <iprintf>
          extendlen = seglen;
 800b5a6:	8bfb      	ldrh	r3, [r7, #30]
 800b5a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b5aa:	e01a      	b.n	800b5e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5ac:	8bfb      	ldrh	r3, [r7, #30]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7fa fe3c 	bl	8006230 <pbuf_alloc>
 800b5b8:	6578      	str	r0, [r7, #84]	; 0x54
 800b5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 81e0 	beq.w	800b982 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b5c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	441a      	add	r2, r3
 800b5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b5ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b5d0:	f7fb f99a 	bl	8006908 <pbuf_clen>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5dc:	4413      	add	r3, r2
 800b5de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b5e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b5e6:	8bfb      	ldrh	r3, [r7, #30]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b5ee:	e0dc      	b.n	800b7aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80d7 	beq.w	800b7aa <tcp_write+0x47a>
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <tcp_write+0x2dc>)
 800b5fe:	f240 224a 	movw	r2, #586	; 0x24a
 800b602:	490a      	ldr	r1, [pc, #40]	; (800b62c <tcp_write+0x2fc>)
 800b604:	4803      	ldr	r0, [pc, #12]	; (800b614 <tcp_write+0x2e4>)
 800b606:	f004 fdd3 	bl	80101b0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b60a:	e0ce      	b.n	800b7aa <tcp_write+0x47a>
 800b60c:	08013014 	.word	0x08013014
 800b610:	080131b4 	.word	0x080131b4
 800b614:	08013068 	.word	0x08013068
 800b618:	080131cc 	.word	0x080131cc
 800b61c:	08013200 	.word	0x08013200
 800b620:	08013218 	.word	0x08013218
 800b624:	08013238 	.word	0x08013238
 800b628:	08013258 	.word	0x08013258
 800b62c:	08013284 	.word	0x08013284
    struct pbuf *p;
    u16_t left = len - pos;
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b63a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b63e:	b29b      	uxth	r3, r3
 800b640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b646:	8b7a      	ldrh	r2, [r7, #26]
 800b648:	8bbb      	ldrh	r3, [r7, #28]
 800b64a:	4293      	cmp	r3, r2
 800b64c:	bf28      	it	cs
 800b64e:	4613      	movcs	r3, r2
 800b650:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b652:	797b      	ldrb	r3, [r7, #5]
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d036      	beq.n	800b6ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b65c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b660:	b29a      	uxth	r2, r3
 800b662:	8b3b      	ldrh	r3, [r7, #24]
 800b664:	4413      	add	r3, r2
 800b666:	b299      	uxth	r1, r3
 800b668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	bf0c      	ite	eq
 800b66e:	2301      	moveq	r3, #1
 800b670:	2300      	movne	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	f107 0012 	add.w	r0, r7, #18
 800b678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	797b      	ldrb	r3, [r7, #5]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4603      	mov	r3, r0
 800b686:	2036      	movs	r0, #54	; 0x36
 800b688:	f7ff fd5e 	bl	800b148 <tcp_pbuf_prealloc>
 800b68c:	6338      	str	r0, [r7, #48]	; 0x30
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8178 	beq.w	800b986 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	895b      	ldrh	r3, [r3, #10]
 800b69a:	8b3a      	ldrh	r2, [r7, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d906      	bls.n	800b6ae <tcp_write+0x37e>
 800b6a0:	4b8c      	ldr	r3, [pc, #560]	; (800b8d4 <tcp_write+0x5a4>)
 800b6a2:	f240 2266 	movw	r2, #614	; 0x266
 800b6a6:	498c      	ldr	r1, [pc, #560]	; (800b8d8 <tcp_write+0x5a8>)
 800b6a8:	488c      	ldr	r0, [pc, #560]	; (800b8dc <tcp_write+0x5ac>)
 800b6aa:	f004 fd81 	bl	80101b0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6b6:	18d0      	adds	r0, r2, r3
 800b6b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4413      	add	r3, r2
 800b6c0:	8b3a      	ldrh	r2, [r7, #24]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f004 fd44 	bl	8010150 <memcpy>
 800b6c8:	e02f      	b.n	800b72a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b6ca:	8a7b      	ldrh	r3, [r7, #18]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <tcp_write+0x3ae>
 800b6d0:	4b80      	ldr	r3, [pc, #512]	; (800b8d4 <tcp_write+0x5a4>)
 800b6d2:	f240 2271 	movw	r2, #625	; 0x271
 800b6d6:	4982      	ldr	r1, [pc, #520]	; (800b8e0 <tcp_write+0x5b0>)
 800b6d8:	4880      	ldr	r0, [pc, #512]	; (800b8dc <tcp_write+0x5ac>)
 800b6da:	f004 fd69 	bl	80101b0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b6de:	8b3b      	ldrh	r3, [r7, #24]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	2036      	movs	r0, #54	; 0x36
 800b6e6:	f7fa fda3 	bl	8006230 <pbuf_alloc>
 800b6ea:	6178      	str	r0, [r7, #20]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 814b 	beq.w	800b98a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b6f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	441a      	add	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b704:	b29b      	uxth	r3, r3
 800b706:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b70a:	4619      	mov	r1, r3
 800b70c:	2036      	movs	r0, #54	; 0x36
 800b70e:	f7fa fd8f 	bl	8006230 <pbuf_alloc>
 800b712:	6338      	str	r0, [r7, #48]	; 0x30
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2b00      	cmp	r3, #0
 800b718:	d103      	bne.n	800b722 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	f7fb f86c 	bl	80067f8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b720:	e136      	b.n	800b990 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b726:	f7fb f929 	bl	800697c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b72c:	f7fb f8ec 	bl	8006908 <pbuf_clen>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b738:	4413      	add	r3, r2
 800b73a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b73e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b742:	2b09      	cmp	r3, #9
 800b744:	d903      	bls.n	800b74e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b748:	f7fb f856 	bl	80067f8 <pbuf_free>
      goto memerr;
 800b74c:	e120      	b.n	800b990 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b752:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b756:	441a      	add	r2, r3
 800b758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	4613      	mov	r3, r2
 800b760:	2200      	movs	r2, #0
 800b762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fc51 	bl	800b00c <tcp_create_segment>
 800b76a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 810d 	beq.w	800b98e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b776:	2b00      	cmp	r3, #0
 800b778:	d102      	bne.n	800b780 <tcp_write+0x450>
      queue = seg;
 800b77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77c:	647b      	str	r3, [r7, #68]	; 0x44
 800b77e:	e00c      	b.n	800b79a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <tcp_write+0x464>
 800b786:	4b53      	ldr	r3, [pc, #332]	; (800b8d4 <tcp_write+0x5a4>)
 800b788:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b78c:	4955      	ldr	r1, [pc, #340]	; (800b8e4 <tcp_write+0x5b4>)
 800b78e:	4853      	ldr	r0, [pc, #332]	; (800b8dc <tcp_write+0x5ac>)
 800b790:	f004 fd0e 	bl	80101b0 <iprintf>
      prev_seg->next = seg;
 800b794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b798:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b79e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7a2:	8b3b      	ldrh	r3, [r7, #24]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b7aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7ae:	88fb      	ldrh	r3, [r7, #6]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	f4ff af3d 	bcc.w	800b630 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b7b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d02c      	beq.n	800b816 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c2:	e01e      	b.n	800b802 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	891a      	ldrh	r2, [r3, #8]
 800b7c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7ca:	4413      	add	r3, r2
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d110      	bne.n	800b7fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	8952      	ldrh	r2, [r2, #10]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f004 fcb1 	bl	8010150 <memcpy>
        p->len += oversize_used;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	895a      	ldrh	r2, [r3, #10]
 800b7f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1dd      	bne.n	800b7c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b80a:	891a      	ldrh	r2, [r3, #8]
 800b80c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b80e:	4413      	add	r3, r2
 800b810:	b29a      	uxth	r2, r3
 800b812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b814:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b816:	8a7a      	ldrh	r2, [r7, #18]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b820:	2b00      	cmp	r3, #0
 800b822:	d018      	beq.n	800b856 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <tcp_write+0x508>
 800b82a:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <tcp_write+0x5a4>)
 800b82c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b830:	492d      	ldr	r1, [pc, #180]	; (800b8e8 <tcp_write+0x5b8>)
 800b832:	482a      	ldr	r0, [pc, #168]	; (800b8dc <tcp_write+0x5ac>)
 800b834:	f004 fcbc 	bl	80101b0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fb f89c 	bl	800697c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b846:	891a      	ldrh	r2, [r3, #8]
 800b848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	b29a      	uxth	r2, r3
 800b850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b852:	811a      	strh	r2, [r3, #8]
 800b854:	e037      	b.n	800b8c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d034      	beq.n	800b8c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <tcp_write+0x53a>
 800b862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <tcp_write+0x548>
 800b86a:	4b1a      	ldr	r3, [pc, #104]	; (800b8d4 <tcp_write+0x5a4>)
 800b86c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b870:	491e      	ldr	r1, [pc, #120]	; (800b8ec <tcp_write+0x5bc>)
 800b872:	481a      	ldr	r0, [pc, #104]	; (800b8dc <tcp_write+0x5ac>)
 800b874:	f004 fc9c 	bl	80101b0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b87e:	e009      	b.n	800b894 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	891a      	ldrh	r2, [r3, #8]
 800b884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b886:	4413      	add	r3, r2
 800b888:	b29a      	uxth	r2, r3
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f1      	bne.n	800b880 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	891a      	ldrh	r2, [r3, #8]
 800b8a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8a2:	4413      	add	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	895a      	ldrh	r2, [r3, #10]
 800b8ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8b0:	4413      	add	r3, r2
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ba:	891a      	ldrh	r2, [r3, #8]
 800b8bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8be:	4413      	add	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d111      	bne.n	800b8f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b8d2:	e010      	b.n	800b8f6 <tcp_write+0x5c6>
 800b8d4:	08013014 	.word	0x08013014
 800b8d8:	080132b4 	.word	0x080132b4
 800b8dc:	08013068 	.word	0x08013068
 800b8e0:	080132f4 	.word	0x080132f4
 800b8e4:	08013304 	.word	0x08013304
 800b8e8:	08013318 	.word	0x08013318
 800b8ec:	08013350 	.word	0x08013350
  } else {
    last_unsent->next = queue;
 800b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b91a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00e      	beq.n	800b946 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <tcp_write+0x616>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <tcp_write+0x616>
 800b938:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <tcp_write+0x6bc>)
 800b93a:	f240 3212 	movw	r2, #786	; 0x312
 800b93e:	492c      	ldr	r1, [pc, #176]	; (800b9f0 <tcp_write+0x6c0>)
 800b940:	482c      	ldr	r0, [pc, #176]	; (800b9f4 <tcp_write+0x6c4>)
 800b942:	f004 fc35 	bl	80101b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d016      	beq.n	800b97a <tcp_write+0x64a>
 800b94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d012      	beq.n	800b97a <tcp_write+0x64a>
 800b954:	797b      	ldrb	r3, [r7, #5]
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10d      	bne.n	800b97a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	899b      	ldrh	r3, [r3, #12]
 800b964:	b29c      	uxth	r4, r3
 800b966:	2008      	movs	r0, #8
 800b968:	f7f9 fc28 	bl	80051bc <lwip_htons>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	4322      	orrs	r2, r4
 800b976:	b292      	uxth	r2, r2
 800b978:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	e031      	b.n	800b9e2 <tcp_write+0x6b2>
          goto memerr;
 800b97e:	bf00      	nop
 800b980:	e006      	b.n	800b990 <tcp_write+0x660>
            goto memerr;
 800b982:	bf00      	nop
 800b984:	e004      	b.n	800b990 <tcp_write+0x660>
        goto memerr;
 800b986:	bf00      	nop
 800b988:	e002      	b.n	800b990 <tcp_write+0x660>
        goto memerr;
 800b98a:	bf00      	nop
 800b98c:	e000      	b.n	800b990 <tcp_write+0x660>
      goto memerr;
 800b98e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8b5b      	ldrh	r3, [r3, #26]
 800b994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b9a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9a6:	f7fa ff27 	bl	80067f8 <pbuf_free>
  }
  if (queue != NULL) {
 800b9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b9b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b9b2:	f7fc fb49 	bl	8008048 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00e      	beq.n	800b9de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <tcp_write+0x6ae>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <tcp_write+0x6ae>
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <tcp_write+0x6bc>)
 800b9d2:	f240 3227 	movw	r2, #807	; 0x327
 800b9d6:	4906      	ldr	r1, [pc, #24]	; (800b9f0 <tcp_write+0x6c0>)
 800b9d8:	4806      	ldr	r0, [pc, #24]	; (800b9f4 <tcp_write+0x6c4>)
 800b9da:	f004 fbe9 	bl	80101b0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	375c      	adds	r7, #92	; 0x5c
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd90      	pop	{r4, r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	08013014 	.word	0x08013014
 800b9f0:	08013388 	.word	0x08013388
 800b9f4:	08013068 	.word	0x08013068

0800b9f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b08b      	sub	sp, #44	; 0x2c
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ba04:	2300      	movs	r3, #0
 800ba06:	61fb      	str	r3, [r7, #28]
 800ba08:	2300      	movs	r3, #0
 800ba0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <tcp_split_unsent_seg+0x2c>
 800ba16:	4b95      	ldr	r3, [pc, #596]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba18:	f240 324b 	movw	r2, #843	; 0x34b
 800ba1c:	4994      	ldr	r1, [pc, #592]	; (800bc70 <tcp_split_unsent_seg+0x278>)
 800ba1e:	4895      	ldr	r0, [pc, #596]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba20:	f004 fbc6 	bl	80101b0 <iprintf>

  useg = pcb->unsent;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295
 800ba34:	e116      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ba36:	887b      	ldrh	r3, [r7, #2]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d109      	bne.n	800ba50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ba3c:	4b8b      	ldr	r3, [pc, #556]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba3e:	f240 3253 	movw	r2, #851	; 0x353
 800ba42:	498d      	ldr	r1, [pc, #564]	; (800bc78 <tcp_split_unsent_seg+0x280>)
 800ba44:	488b      	ldr	r0, [pc, #556]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba46:	f004 fbb3 	bl	80101b0 <iprintf>
    return ERR_VAL;
 800ba4a:	f06f 0305 	mvn.w	r3, #5
 800ba4e:	e109      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	887a      	ldrh	r2, [r7, #2]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d301      	bcc.n	800ba5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e102      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d906      	bls.n	800ba76 <tcp_split_unsent_seg+0x7e>
 800ba68:	4b80      	ldr	r3, [pc, #512]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba6a:	f240 325b 	movw	r2, #859	; 0x35b
 800ba6e:	4983      	ldr	r1, [pc, #524]	; (800bc7c <tcp_split_unsent_seg+0x284>)
 800ba70:	4880      	ldr	r0, [pc, #512]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba72:	f004 fb9d 	bl	80101b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	891b      	ldrh	r3, [r3, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_split_unsent_seg+0x94>
 800ba7e:	4b7b      	ldr	r3, [pc, #492]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ba84:	497e      	ldr	r1, [pc, #504]	; (800bc80 <tcp_split_unsent_seg+0x288>)
 800ba86:	487b      	ldr	r0, [pc, #492]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba88:	f004 fb92 	bl	80101b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	7a9b      	ldrb	r3, [r3, #10]
 800ba90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	891a      	ldrh	r2, [r3, #8]
 800baa2:	887b      	ldrh	r3, [r7, #2]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	b29a      	uxth	r2, r3
 800baac:	89bb      	ldrh	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bab6:	4619      	mov	r1, r3
 800bab8:	2036      	movs	r0, #54	; 0x36
 800baba:	f7fa fbb9 	bl	8006230 <pbuf_alloc>
 800babe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80b7 	beq.w	800bc36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	891a      	ldrh	r2, [r3, #8]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	891b      	ldrh	r3, [r3, #8]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	887b      	ldrh	r3, [r7, #2]
 800bad8:	4413      	add	r3, r2
 800bada:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	6858      	ldr	r0, [r3, #4]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	18d1      	adds	r1, r2, r3
 800bae8:	897b      	ldrh	r3, [r7, #10]
 800baea:	89ba      	ldrh	r2, [r7, #12]
 800baec:	f7fb f87e 	bl	8006bec <pbuf_copy_partial>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	89bb      	ldrh	r3, [r7, #12]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	f040 809f 	bne.w	800bc3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	899b      	ldrh	r3, [r3, #12]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f9 fb59 	bl	80051bc <lwip_htons>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bb14:	2300      	movs	r3, #0
 800bb16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bb18:	7efb      	ldrb	r3, [r7, #27]
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bb22:	7efb      	ldrb	r3, [r7, #27]
 800bb24:	f023 0308 	bic.w	r3, r3, #8
 800bb28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bb2a:	7ebb      	ldrb	r3, [r7, #26]
 800bb2c:	f043 0308 	orr.w	r3, r3, #8
 800bb30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bb32:	7efb      	ldrb	r3, [r7, #27]
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d007      	beq.n	800bb4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bb3c:	7efb      	ldrb	r3, [r7, #27]
 800bb3e:	f023 0301 	bic.w	r3, r3, #1
 800bb42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bb44:	7ebb      	ldrb	r3, [r7, #26]
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f9 fb47 	bl	80051e6 <lwip_htonl>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	887b      	ldrh	r3, [r7, #2]
 800bb5c:	18d1      	adds	r1, r2, r3
 800bb5e:	7eba      	ldrb	r2, [r7, #26]
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	460b      	mov	r3, r1
 800bb66:	6939      	ldr	r1, [r7, #16]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fa4f 	bl	800b00c <tcp_create_segment>
 800bb6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d063      	beq.n	800bc3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fa fec4 	bl	8006908 <pbuf_clen>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb8a:	1a9b      	subs	r3, r3, r2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	6858      	ldr	r0, [r3, #4]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	891a      	ldrh	r2, [r3, #8]
 800bb9e:	89bb      	ldrh	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7fa fca1 	bl	80064ec <pbuf_realloc>
  useg->len -= remainder;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	891a      	ldrh	r2, [r3, #8]
 800bbae:	89bb      	ldrh	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	899b      	ldrh	r3, [r3, #12]
 800bbbe:	b29c      	uxth	r4, r3
 800bbc0:	7efb      	ldrb	r3, [r7, #27]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7f9 faf9 	bl	80051bc <lwip_htons>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	4322      	orrs	r2, r4
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fa fe93 	bl	8006908 <pbuf_clen>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbec:	4413      	add	r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fa fe84 	bl	8006908 <pbuf_clen>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc0a:	4413      	add	r3, r2
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	69fa      	ldr	r2, [r7, #28]
 800bc20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d103      	bne.n	800bc32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e016      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bc36:	bf00      	nop
 800bc38:	e002      	b.n	800bc40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc3a:	bf00      	nop
 800bc3c:	e000      	b.n	800bc40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d006      	beq.n	800bc54 <tcp_split_unsent_seg+0x25c>
 800bc46:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800bc48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bc4c:	490d      	ldr	r1, [pc, #52]	; (800bc84 <tcp_split_unsent_seg+0x28c>)
 800bc4e:	4809      	ldr	r0, [pc, #36]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800bc50:	f004 faae 	bl	80101b0 <iprintf>
  if (p != NULL) {
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bc5a:	6938      	ldr	r0, [r7, #16]
 800bc5c:	f7fa fdcc 	bl	80067f8 <pbuf_free>
  }

  return ERR_MEM;
 800bc60:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3724      	adds	r7, #36	; 0x24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}
 800bc6c:	08013014 	.word	0x08013014
 800bc70:	080133a8 	.word	0x080133a8
 800bc74:	08013068 	.word	0x08013068
 800bc78:	080133cc 	.word	0x080133cc
 800bc7c:	080133f0 	.word	0x080133f0
 800bc80:	08013400 	.word	0x08013400
 800bc84:	08013410 	.word	0x08013410

0800bc88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <tcp_send_fin+0x1c>
 800bc96:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <tcp_send_fin+0x94>)
 800bc98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bc9c:	4920      	ldr	r1, [pc, #128]	; (800bd20 <tcp_send_fin+0x98>)
 800bc9e:	4821      	ldr	r0, [pc, #132]	; (800bd24 <tcp_send_fin+0x9c>)
 800bca0:	f004 fa86 	bl	80101b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d02e      	beq.n	800bd0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e002      	b.n	800bcba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1f8      	bne.n	800bcb4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	899b      	ldrh	r3, [r3, #12]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f9 fa76 	bl	80051bc <lwip_htons>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d116      	bne.n	800bd0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	899b      	ldrh	r3, [r3, #12]
 800bce2:	b29c      	uxth	r4, r3
 800bce4:	2001      	movs	r0, #1
 800bce6:	f7f9 fa69 	bl	80051bc <lwip_htons>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	4322      	orrs	r2, r4
 800bcf4:	b292      	uxth	r2, r2
 800bcf6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	8b5b      	ldrh	r3, [r3, #26]
 800bcfc:	f043 0320 	orr.w	r3, r3, #32
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e004      	b.n	800bd14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f80b 	bl	800bd28 <tcp_enqueue_flags>
 800bd12:	4603      	mov	r3, r0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	08013014 	.word	0x08013014
 800bd20:	0801341c 	.word	0x0801341c
 800bd24:	08013068 	.word	0x08013068

0800bd28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <tcp_enqueue_flags+0x2c>
 800bd46:	4b67      	ldr	r3, [pc, #412]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bd48:	f240 4211 	movw	r2, #1041	; 0x411
 800bd4c:	4966      	ldr	r1, [pc, #408]	; (800bee8 <tcp_enqueue_flags+0x1c0>)
 800bd4e:	4867      	ldr	r0, [pc, #412]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bd50:	f004 fa2e 	bl	80101b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <tcp_enqueue_flags+0x40>
 800bd5a:	4b62      	ldr	r3, [pc, #392]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bd5c:	f240 4213 	movw	r2, #1043	; 0x413
 800bd60:	4963      	ldr	r1, [pc, #396]	; (800bef0 <tcp_enqueue_flags+0x1c8>)
 800bd62:	4862      	ldr	r0, [pc, #392]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bd64:	f004 fa24 	bl	80101b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bd72:	2301      	movs	r3, #1
 800bd74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	2036      	movs	r0, #54	; 0x36
 800bd8e:	f7fa fa4f 	bl	8006230 <pbuf_alloc>
 800bd92:	6138      	str	r0, [r7, #16]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8b5b      	ldrh	r3, [r3, #26]
 800bd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bda8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdac:	e095      	b.n	800beda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	895a      	ldrh	r2, [r3, #10]
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d206      	bcs.n	800bdc8 <tcp_enqueue_flags+0xa0>
 800bdba:	4b4a      	ldr	r3, [pc, #296]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bdbc:	f240 4239 	movw	r2, #1081	; 0x439
 800bdc0:	494c      	ldr	r1, [pc, #304]	; (800bef4 <tcp_enqueue_flags+0x1cc>)
 800bdc2:	484a      	ldr	r0, [pc, #296]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bdc4:	f004 f9f4 	bl	80101b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	6939      	ldr	r1, [r7, #16]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff f918 	bl	800b00c <tcp_create_segment>
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8b5b      	ldrh	r3, [r3, #26]
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf6:	e070      	b.n	800beda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0303 	and.w	r3, r3, #3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <tcp_enqueue_flags+0xea>
 800be04:	4b37      	ldr	r3, [pc, #220]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800be06:	f240 4242 	movw	r2, #1090	; 0x442
 800be0a:	493b      	ldr	r1, [pc, #236]	; (800bef8 <tcp_enqueue_flags+0x1d0>)
 800be0c:	4837      	ldr	r0, [pc, #220]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800be0e:	f004 f9cf 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	891b      	ldrh	r3, [r3, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d006      	beq.n	800be28 <tcp_enqueue_flags+0x100>
 800be1a:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800be1c:	f240 4243 	movw	r2, #1091	; 0x443
 800be20:	4936      	ldr	r1, [pc, #216]	; (800befc <tcp_enqueue_flags+0x1d4>)
 800be22:	4832      	ldr	r0, [pc, #200]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800be24:	f004 f9c4 	bl	80101b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	66da      	str	r2, [r3, #108]	; 0x6c
 800be36:	e00d      	b.n	800be54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	61bb      	str	r3, [r7, #24]
 800be3e:	e002      	b.n	800be46 <tcp_enqueue_flags+0x11e>
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1f8      	bne.n	800be40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d104      	bne.n	800be70 <tcp_enqueue_flags+0x148>
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d004      	beq.n	800be7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	d006      	beq.n	800be92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	8b5b      	ldrh	r3, [r3, #26]
 800be88:	f043 0320 	orr.w	r3, r3, #32
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f7fa fd36 	bl	8006908 <pbuf_clen>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bea6:	4413      	add	r3, r2
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <tcp_enqueue_flags+0x1b0>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <tcp_enqueue_flags+0x1b0>
 800beca:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800becc:	f240 4265 	movw	r2, #1125	; 0x465
 800bed0:	490b      	ldr	r1, [pc, #44]	; (800bf00 <tcp_enqueue_flags+0x1d8>)
 800bed2:	4806      	ldr	r0, [pc, #24]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bed4:	f004 f96c 	bl	80101b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3720      	adds	r7, #32
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	08013014 	.word	0x08013014
 800bee8:	08013438 	.word	0x08013438
 800beec:	08013068 	.word	0x08013068
 800bef0:	08013490 	.word	0x08013490
 800bef4:	080134b0 	.word	0x080134b0
 800bef8:	080134ec 	.word	0x080134ec
 800befc:	08013504 	.word	0x08013504
 800bf00:	08013530 	.word	0x08013530

0800bf04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <tcp_output+0x1c>
 800bf12:	4b9e      	ldr	r3, [pc, #632]	; (800c18c <tcp_output+0x288>)
 800bf14:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf18:	499d      	ldr	r1, [pc, #628]	; (800c190 <tcp_output+0x28c>)
 800bf1a:	489e      	ldr	r0, [pc, #632]	; (800c194 <tcp_output+0x290>)
 800bf1c:	f004 f948 	bl	80101b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	7d1b      	ldrb	r3, [r3, #20]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d106      	bne.n	800bf36 <tcp_output+0x32>
 800bf28:	4b98      	ldr	r3, [pc, #608]	; (800c18c <tcp_output+0x288>)
 800bf2a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bf2e:	499a      	ldr	r1, [pc, #616]	; (800c198 <tcp_output+0x294>)
 800bf30:	4898      	ldr	r0, [pc, #608]	; (800c194 <tcp_output+0x290>)
 800bf32:	f004 f93d 	bl	80101b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bf36:	4b99      	ldr	r3, [pc, #612]	; (800c19c <tcp_output+0x298>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d101      	bne.n	800bf44 <tcp_output+0x40>
    return ERR_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e1ce      	b.n	800c2e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf50:	4293      	cmp	r3, r2
 800bf52:	bf28      	it	cs
 800bf54:	4613      	movcs	r3, r2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10b      	bne.n	800bf7e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8b5b      	ldrh	r3, [r3, #26]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 81aa 	beq.w	800c2c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fdcb 	bl	800cb10 <tcp_send_empty_ack>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	e1b1      	b.n	800c2e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3304      	adds	r3, #4
 800bf84:	461a      	mov	r2, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff f824 	bl	800afd4 <tcp_route>
 800bf8c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <tcp_output+0x96>
    return ERR_RTE;
 800bf94:	f06f 0303 	mvn.w	r3, #3
 800bf98:	e1a3      	b.n	800c2e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <tcp_output+0xa4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d111      	bne.n	800bfcc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <tcp_output+0xb0>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	e000      	b.n	800bfb6 <tcp_output+0xb2>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <tcp_output+0xc0>
      return ERR_RTE;
 800bfbe:	f06f 0303 	mvn.w	r3, #3
 800bfc2:	e18e      	b.n	800c2e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7f9 f907 	bl	80051e6 <lwip_htonl>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	8912      	ldrh	r2, [r2, #8]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d227      	bcs.n	800c03c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bff2:	461a      	mov	r2, r3
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d114      	bne.n	800c024 <tcp_output+0x120>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d110      	bne.n	800c024 <tcp_output+0x120>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10b      	bne.n	800c024 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	8b5b      	ldrh	r3, [r3, #26]
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 814d 	beq.w	800c2cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fd6c 	bl	800cb10 <tcp_send_empty_ack>
 800c038:	4603      	mov	r3, r0
 800c03a:	e152      	b.n	800c2e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c048:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 811c 	beq.w	800c28a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c052:	e002      	b.n	800c05a <tcp_output+0x156>
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	623b      	str	r3, [r7, #32]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f8      	bne.n	800c054 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c062:	e112      	b.n	800c28a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	899b      	ldrh	r3, [r3, #12]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f9 f8a5 	bl	80051bc <lwip_htons>
 800c072:	4603      	mov	r3, r0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d006      	beq.n	800c08c <tcp_output+0x188>
 800c07e:	4b43      	ldr	r3, [pc, #268]	; (800c18c <tcp_output+0x288>)
 800c080:	f240 5236 	movw	r2, #1334	; 0x536
 800c084:	4946      	ldr	r1, [pc, #280]	; (800c1a0 <tcp_output+0x29c>)
 800c086:	4843      	ldr	r0, [pc, #268]	; (800c194 <tcp_output+0x290>)
 800c088:	f004 f892 	bl	80101b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01f      	beq.n	800c0d4 <tcp_output+0x1d0>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8b5b      	ldrh	r3, [r3, #26]
 800c098:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d119      	bne.n	800c0d4 <tcp_output+0x1d0>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <tcp_output+0x1bc>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d110      	bne.n	800c0d4 <tcp_output+0x1d0>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b6:	891a      	ldrh	r2, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d209      	bcs.n	800c0d4 <tcp_output+0x1d0>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <tcp_output+0x1d0>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d901      	bls.n	800c0d8 <tcp_output+0x1d4>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e000      	b.n	800c0da <tcp_output+0x1d6>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8b5b      	ldrh	r3, [r3, #26]
 800c0e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80e4 	beq.w	800c2b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d00d      	beq.n	800c110 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	899b      	ldrh	r3, [r3, #12]
 800c0fa:	b29c      	uxth	r4, r3
 800c0fc:	2010      	movs	r0, #16
 800c0fe:	f7f9 f85d 	bl	80051bc <lwip_htons>
 800c102:	4603      	mov	r3, r0
 800c104:	461a      	mov	r2, r3
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	4322      	orrs	r2, r4
 800c10c:	b292      	uxth	r2, r2
 800c10e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c116:	f000 f909 	bl	800c32c <tcp_output_segment>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d009      	beq.n	800c13a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	8b5b      	ldrh	r3, [r3, #26]
 800c12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c12e:	b29a      	uxth	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	835a      	strh	r2, [r3, #26]
      return err;
 800c134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c138:	e0d3      	b.n	800c2e2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7d1b      	ldrb	r3, [r3, #20]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d006      	beq.n	800c158 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	8b5b      	ldrh	r3, [r3, #26]
 800c14e:	f023 0303 	bic.w	r3, r3, #3
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7f9 f841 	bl	80051e6 <lwip_htonl>
 800c164:	4604      	mov	r4, r0
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	891b      	ldrh	r3, [r3, #8]
 800c16a:	461d      	mov	r5, r3
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	899b      	ldrh	r3, [r3, #12]
 800c172:	b29b      	uxth	r3, r3
 800c174:	4618      	mov	r0, r3
 800c176:	f7f9 f821 	bl	80051bc <lwip_htons>
 800c17a:	4603      	mov	r3, r0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00e      	beq.n	800c1a4 <tcp_output+0x2a0>
 800c186:	2301      	movs	r3, #1
 800c188:	e00d      	b.n	800c1a6 <tcp_output+0x2a2>
 800c18a:	bf00      	nop
 800c18c:	08013014 	.word	0x08013014
 800c190:	08013558 	.word	0x08013558
 800c194:	08013068 	.word	0x08013068
 800c198:	08013570 	.word	0x08013570
 800c19c:	20006d0c 	.word	0x20006d0c
 800c1a0:	08013598 	.word	0x08013598
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	442b      	add	r3, r5
 800c1a8:	4423      	add	r3, r4
 800c1aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da02      	bge.n	800c1be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	899b      	ldrh	r3, [r3, #12]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7f8 fff5 	bl	80051bc <lwip_htons>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0303 	and.w	r3, r3, #3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <tcp_output+0x2de>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <tcp_output+0x2e0>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4423      	add	r3, r4
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d049      	beq.n	800c27e <tcp_output+0x37a>
      seg->next = NULL;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d105      	bne.n	800c204 <tcp_output+0x300>
        pcb->unacked = seg;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	623b      	str	r3, [r7, #32]
 800c202:	e03f      	b.n	800c284 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f8 ffeb 	bl	80051e6 <lwip_htonl>
 800c210:	4604      	mov	r4, r0
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f8 ffe4 	bl	80051e6 <lwip_htonl>
 800c21e:	4603      	mov	r3, r0
 800c220:	1ae3      	subs	r3, r4, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	da24      	bge.n	800c270 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3370      	adds	r3, #112	; 0x70
 800c22a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c22c:	e002      	b.n	800c234 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d011      	beq.n	800c260 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	4618      	mov	r0, r3
 800c246:	f7f8 ffce 	bl	80051e6 <lwip_htonl>
 800c24a:	4604      	mov	r4, r0
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f7f8 ffc7 	bl	80051e6 <lwip_htonl>
 800c258:	4603      	mov	r3, r0
 800c25a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dbe6      	blt.n	800c22e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e009      	b.n	800c284 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c274:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	623b      	str	r3, [r7, #32]
 800c27c:	e002      	b.n	800c284 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c27e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c280:	f7fb fef7 	bl	8008072 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c288:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d012      	beq.n	800c2b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	4618      	mov	r0, r3
 800c298:	f7f8 ffa5 	bl	80051e6 <lwip_htonl>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a6:	8912      	ldrh	r2, [r2, #8]
 800c2a8:	4413      	add	r3, r2
  while (seg != NULL &&
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	f4bf aed9 	bcs.w	800c064 <tcp_output+0x160>
 800c2b2:	e000      	b.n	800c2b6 <tcp_output+0x3b2>
      break;
 800c2b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d108      	bne.n	800c2d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c2c6:	e004      	b.n	800c2d2 <tcp_output+0x3ce>
    goto output_done;
 800c2c8:	bf00      	nop
 800c2ca:	e002      	b.n	800c2d2 <tcp_output+0x3ce>
    goto output_done;
 800c2cc:	bf00      	nop
 800c2ce:	e000      	b.n	800c2d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c2d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3728      	adds	r7, #40	; 0x28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ea:	bf00      	nop

0800c2ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <tcp_output_segment_busy+0x1c>
 800c2fa:	4b09      	ldr	r3, [pc, #36]	; (800c320 <tcp_output_segment_busy+0x34>)
 800c2fc:	f240 529a 	movw	r2, #1434	; 0x59a
 800c300:	4908      	ldr	r1, [pc, #32]	; (800c324 <tcp_output_segment_busy+0x38>)
 800c302:	4809      	ldr	r0, [pc, #36]	; (800c328 <tcp_output_segment_busy+0x3c>)
 800c304:	f003 ff54 	bl	80101b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	7b9b      	ldrb	r3, [r3, #14]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d001      	beq.n	800c316 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	08013014 	.word	0x08013014
 800c324:	080135b0 	.word	0x080135b0
 800c328:	08013068 	.word	0x08013068

0800c32c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c32c:	b5b0      	push	{r4, r5, r7, lr}
 800c32e:	b08c      	sub	sp, #48	; 0x30
 800c330:	af04      	add	r7, sp, #16
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <tcp_output_segment+0x20>
 800c33e:	4b63      	ldr	r3, [pc, #396]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c340:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c344:	4962      	ldr	r1, [pc, #392]	; (800c4d0 <tcp_output_segment+0x1a4>)
 800c346:	4863      	ldr	r0, [pc, #396]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c348:	f003 ff32 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <tcp_output_segment+0x34>
 800c352:	4b5e      	ldr	r3, [pc, #376]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c354:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c358:	495f      	ldr	r1, [pc, #380]	; (800c4d8 <tcp_output_segment+0x1ac>)
 800c35a:	485e      	ldr	r0, [pc, #376]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c35c:	f003 ff28 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <tcp_output_segment+0x48>
 800c366:	4b59      	ldr	r3, [pc, #356]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c368:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c36c:	495b      	ldr	r1, [pc, #364]	; (800c4dc <tcp_output_segment+0x1b0>)
 800c36e:	4859      	ldr	r0, [pc, #356]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c370:	f003 ff1e 	bl	80101b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff ffb9 	bl	800c2ec <tcp_output_segment_busy>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	e09f      	b.n	800c4c4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68dc      	ldr	r4, [r3, #12]
 800c38c:	4610      	mov	r0, r2
 800c38e:	f7f8 ff2a 	bl	80051e6 <lwip_htonl>
 800c392:	4603      	mov	r3, r0
 800c394:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68dc      	ldr	r4, [r3, #12]
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7f8 ff0c 	bl	80051bc <lwip_htons>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	7a9b      	ldrb	r3, [r3, #10]
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d015      	beq.n	800c3f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c3d6:	f7fc fa37 	bl	8008848 <tcp_eff_send_mss_netif>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c3de:	8b7b      	ldrh	r3, [r7, #26]
 800c3e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f8 fefe 	bl	80051e6 <lwip_htonl>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da02      	bge.n	800c406 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2200      	movs	r2, #0
 800c404:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10c      	bne.n	800c428 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c40e:	4b34      	ldr	r3, [pc, #208]	; (800c4e0 <tcp_output_segment+0x1b4>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f8 fee2 	bl	80051e6 <lwip_htonl>
 800c422:	4602      	mov	r2, r0
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	8959      	ldrh	r1, [r3, #10]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	8b3a      	ldrh	r2, [r7, #24]
 800c442:	1a8a      	subs	r2, r1, r2
 800c444:	b292      	uxth	r2, r2
 800c446:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	8919      	ldrh	r1, [r3, #8]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	8b3a      	ldrh	r2, [r7, #24]
 800c454:	1a8a      	subs	r2, r1, r2
 800c456:	b292      	uxth	r2, r2
 800c458:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	68d2      	ldr	r2, [r2, #12]
 800c462:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	741a      	strb	r2, [r3, #16]
 800c46c:	2200      	movs	r2, #0
 800c46e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f103 0214 	add.w	r2, r3, #20
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	7a9b      	ldrb	r3, [r3, #10]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	4413      	add	r3, r2
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	429a      	cmp	r2, r3
 800c488:	d006      	beq.n	800c498 <tcp_output_segment+0x16c>
 800c48a:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c48c:	f240 621c 	movw	r2, #1564	; 0x61c
 800c490:	4914      	ldr	r1, [pc, #80]	; (800c4e4 <tcp_output_segment+0x1b8>)
 800c492:	4810      	ldr	r0, [pc, #64]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c494:	f003 fe8c 	bl	80101b0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6858      	ldr	r0, [r3, #4]
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	1d1c      	adds	r4, r3, #4
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	7add      	ldrb	r5, [r3, #11]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	7a9b      	ldrb	r3, [r3, #10]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	9202      	str	r2, [sp, #8]
 800c4ae:	2206      	movs	r2, #6
 800c4b0:	9201      	str	r2, [sp, #4]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	f002 fdf0 	bl	800f09c <ip4_output_if>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c4cc:	08013014 	.word	0x08013014
 800c4d0:	080135d8 	.word	0x080135d8
 800c4d4:	08013068 	.word	0x08013068
 800c4d8:	080135f8 	.word	0x080135f8
 800c4dc:	08013618 	.word	0x08013618
 800c4e0:	20006cfc 	.word	0x20006cfc
 800c4e4:	0801363c 	.word	0x0801363c

0800c4e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c4e8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <tcp_rexmit_rto_prepare+0x1c>
 800c4f6:	4b31      	ldr	r3, [pc, #196]	; (800c5bc <tcp_rexmit_rto_prepare+0xd4>)
 800c4f8:	f240 6263 	movw	r2, #1635	; 0x663
 800c4fc:	4930      	ldr	r1, [pc, #192]	; (800c5c0 <tcp_rexmit_rto_prepare+0xd8>)
 800c4fe:	4831      	ldr	r0, [pc, #196]	; (800c5c4 <tcp_rexmit_rto_prepare+0xdc>)
 800c500:	f003 fe56 	bl	80101b0 <iprintf>

  if (pcb->unacked == NULL) {
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c50c:	f06f 0305 	mvn.w	r3, #5
 800c510:	e050      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	e00b      	b.n	800c532 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f7ff fee6 	bl	800c2ec <tcp_output_segment_busy>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c526:	f06f 0305 	mvn.w	r3, #5
 800c52a:	e043      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1ef      	bne.n	800c51a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7ff fed6 	bl	800c2ec <tcp_output_segment_busy>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c546:	f06f 0305 	mvn.w	r3, #5
 800c54a:	e033      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	8b5b      	ldrh	r3, [r3, #26]
 800c566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7f8 fe35 	bl	80051e6 <lwip_htonl>
 800c57c:	4604      	mov	r4, r0
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	891b      	ldrh	r3, [r3, #8]
 800c582:	461d      	mov	r5, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	899b      	ldrh	r3, [r3, #12]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f8 fe15 	bl	80051bc <lwip_htons>
 800c592:	4603      	mov	r3, r0
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <tcp_rexmit_rto_prepare+0xba>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <tcp_rexmit_rto_prepare+0xbc>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	442b      	add	r3, r5
 800c5a6:	18e2      	adds	r2, r4, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bdb0      	pop	{r4, r5, r7, pc}
 800c5bc:	08013014 	.word	0x08013014
 800c5c0:	08013650 	.word	0x08013650
 800c5c4:	08013068 	.word	0x08013068

0800c5c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_rexmit_rto_commit+0x1c>
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <tcp_rexmit_rto_commit+0x44>)
 800c5d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c5dc:	490c      	ldr	r1, [pc, #48]	; (800c610 <tcp_rexmit_rto_commit+0x48>)
 800c5de:	480d      	ldr	r0, [pc, #52]	; (800c614 <tcp_rexmit_rto_commit+0x4c>)
 800c5e0:	f003 fde6 	bl	80101b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5ea:	2bff      	cmp	r3, #255	; 0xff
 800c5ec:	d007      	beq.n	800c5fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fc80 	bl	800bf04 <tcp_output>
}
 800c604:	bf00      	nop
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	08013014 	.word	0x08013014
 800c610:	08013674 	.word	0x08013674
 800c614:	08013068 	.word	0x08013068

0800c618 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <tcp_rexmit_rto+0x1c>
 800c626:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <tcp_rexmit_rto+0x38>)
 800c628:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c62c:	4909      	ldr	r1, [pc, #36]	; (800c654 <tcp_rexmit_rto+0x3c>)
 800c62e:	480a      	ldr	r0, [pc, #40]	; (800c658 <tcp_rexmit_rto+0x40>)
 800c630:	f003 fdbe 	bl	80101b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ff57 	bl	800c4e8 <tcp_rexmit_rto_prepare>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff ffc1 	bl	800c5c8 <tcp_rexmit_rto_commit>
  }
}
 800c646:	bf00      	nop
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	08013014 	.word	0x08013014
 800c654:	08013698 	.word	0x08013698
 800c658:	08013068 	.word	0x08013068

0800c65c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <tcp_rexmit+0x1c>
 800c66a:	4b2f      	ldr	r3, [pc, #188]	; (800c728 <tcp_rexmit+0xcc>)
 800c66c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c670:	492e      	ldr	r1, [pc, #184]	; (800c72c <tcp_rexmit+0xd0>)
 800c672:	482f      	ldr	r0, [pc, #188]	; (800c730 <tcp_rexmit+0xd4>)
 800c674:	f003 fd9c 	bl	80101b0 <iprintf>

  if (pcb->unacked == NULL) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c680:	f06f 0305 	mvn.w	r3, #5
 800c684:	e04c      	b.n	800c720 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c68c:	68b8      	ldr	r0, [r7, #8]
 800c68e:	f7ff fe2d 	bl	800c2ec <tcp_output_segment_busy>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c698:	f06f 0305 	mvn.w	r3, #5
 800c69c:	e040      	b.n	800c720 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	336c      	adds	r3, #108	; 0x6c
 800c6aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6ac:	e002      	b.n	800c6b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d011      	beq.n	800c6e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f8 fd8e 	bl	80051e6 <lwip_htonl>
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7f8 fd87 	bl	80051e6 <lwip_htonl>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dbe6      	blt.n	800c6ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d103      	bne.n	800c6fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c704:	2bff      	cmp	r3, #255	; 0xff
 800c706:	d007      	beq.n	800c718 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c70e:	3301      	adds	r3, #1
 800c710:	b2da      	uxtb	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bd90      	pop	{r4, r7, pc}
 800c728:	08013014 	.word	0x08013014
 800c72c:	080136b4 	.word	0x080136b4
 800c730:	08013068 	.word	0x08013068

0800c734 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_rexmit_fast+0x1c>
 800c742:	4b2a      	ldr	r3, [pc, #168]	; (800c7ec <tcp_rexmit_fast+0xb8>)
 800c744:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c748:	4929      	ldr	r1, [pc, #164]	; (800c7f0 <tcp_rexmit_fast+0xbc>)
 800c74a:	482a      	ldr	r0, [pc, #168]	; (800c7f4 <tcp_rexmit_fast+0xc0>)
 800c74c:	f003 fd30 	bl	80101b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	2b00      	cmp	r3, #0
 800c756:	d044      	beq.n	800c7e2 <tcp_rexmit_fast+0xae>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8b5b      	ldrh	r3, [r3, #26]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d13e      	bne.n	800c7e2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff ff79 	bl	800c65c <tcp_rexmit>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d138      	bne.n	800c7e2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c77c:	4293      	cmp	r3, r2
 800c77e:	bf28      	it	cs
 800c780:	4613      	movcs	r3, r2
 800c782:	b29b      	uxth	r3, r3
 800c784:	0fda      	lsrs	r2, r3, #31
 800c786:	4413      	add	r3, r2
 800c788:	105b      	asrs	r3, r3, #1
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c798:	461a      	mov	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d206      	bcs.n	800c7b2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7bc:	4619      	mov	r1, r3
 800c7be:	0049      	lsls	r1, r1, #1
 800c7c0:	440b      	add	r3, r1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4413      	add	r3, r2
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	8b5b      	ldrh	r3, [r3, #26]
 800c7d2:	f043 0304 	orr.w	r3, r3, #4
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08013014 	.word	0x08013014
 800c7f0:	080136cc 	.word	0x080136cc
 800c7f4:	08013068 	.word	0x08013068

0800c7f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	817b      	strh	r3, [r7, #10]
 800c806:	4613      	mov	r3, r2
 800c808:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c80a:	897a      	ldrh	r2, [r7, #10]
 800c80c:	893b      	ldrh	r3, [r7, #8]
 800c80e:	4413      	add	r3, r2
 800c810:	b29b      	uxth	r3, r3
 800c812:	3314      	adds	r3, #20
 800c814:	b29b      	uxth	r3, r3
 800c816:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c81a:	4619      	mov	r1, r3
 800c81c:	2022      	movs	r0, #34	; 0x22
 800c81e:	f7f9 fd07 	bl	8006230 <pbuf_alloc>
 800c822:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d04d      	beq.n	800c8c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c82a:	897b      	ldrh	r3, [r7, #10]
 800c82c:	3313      	adds	r3, #19
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	8952      	ldrh	r2, [r2, #10]
 800c832:	4293      	cmp	r3, r2
 800c834:	db06      	blt.n	800c844 <tcp_output_alloc_header_common+0x4c>
 800c836:	4b26      	ldr	r3, [pc, #152]	; (800c8d0 <tcp_output_alloc_header_common+0xd8>)
 800c838:	f240 7223 	movw	r2, #1827	; 0x723
 800c83c:	4925      	ldr	r1, [pc, #148]	; (800c8d4 <tcp_output_alloc_header_common+0xdc>)
 800c83e:	4826      	ldr	r0, [pc, #152]	; (800c8d8 <tcp_output_alloc_header_common+0xe0>)
 800c840:	f003 fcb6 	bl	80101b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c84a:	8c3b      	ldrh	r3, [r7, #32]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f8 fcb5 	bl	80051bc <lwip_htons>
 800c852:	4603      	mov	r3, r0
 800c854:	461a      	mov	r2, r3
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f8 fcad 	bl	80051bc <lwip_htons>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7f8 fcb8 	bl	80051e6 <lwip_htonl>
 800c876:	4602      	mov	r2, r0
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c87c:	897b      	ldrh	r3, [r7, #10]
 800c87e:	089b      	lsrs	r3, r3, #2
 800c880:	b29b      	uxth	r3, r3
 800c882:	3305      	adds	r3, #5
 800c884:	b29b      	uxth	r3, r3
 800c886:	031b      	lsls	r3, r3, #12
 800c888:	b29a      	uxth	r2, r3
 800c88a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c88e:	b29b      	uxth	r3, r3
 800c890:	4313      	orrs	r3, r2
 800c892:	b29b      	uxth	r3, r3
 800c894:	4618      	mov	r0, r3
 800c896:	f7f8 fc91 	bl	80051bc <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	461a      	mov	r2, r3
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c8a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7f8 fc89 	bl	80051bc <lwip_htons>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	741a      	strb	r2, [r3, #16]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	749a      	strb	r2, [r3, #18]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c8c6:	697b      	ldr	r3, [r7, #20]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	08013014 	.word	0x08013014
 800c8d4:	080136ec 	.word	0x080136ec
 800c8d8:	08013068 	.word	0x08013068

0800c8dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c8dc:	b5b0      	push	{r4, r5, r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af04      	add	r7, sp, #16
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	817b      	strh	r3, [r7, #10]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d106      	bne.n	800c902 <tcp_output_alloc_header+0x26>
 800c8f4:	4b15      	ldr	r3, [pc, #84]	; (800c94c <tcp_output_alloc_header+0x70>)
 800c8f6:	f240 7242 	movw	r2, #1858	; 0x742
 800c8fa:	4915      	ldr	r1, [pc, #84]	; (800c950 <tcp_output_alloc_header+0x74>)
 800c8fc:	4815      	ldr	r0, [pc, #84]	; (800c954 <tcp_output_alloc_header+0x78>)
 800c8fe:	f003 fc57 	bl	80101b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8adb      	ldrh	r3, [r3, #22]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	8b12      	ldrh	r2, [r2, #24]
 800c90e:	68f9      	ldr	r1, [r7, #12]
 800c910:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c912:	893d      	ldrh	r5, [r7, #8]
 800c914:	897c      	ldrh	r4, [r7, #10]
 800c916:	9103      	str	r1, [sp, #12]
 800c918:	2110      	movs	r1, #16
 800c91a:	9102      	str	r1, [sp, #8]
 800c91c:	9201      	str	r2, [sp, #4]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	462a      	mov	r2, r5
 800c924:	4621      	mov	r1, r4
 800c926:	f7ff ff67 	bl	800c7f8 <tcp_output_alloc_header_common>
 800c92a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d006      	beq.n	800c940 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c93a:	441a      	add	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c940:	697b      	ldr	r3, [r7, #20]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bdb0      	pop	{r4, r5, r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08013014 	.word	0x08013014
 800c950:	0801371c 	.word	0x0801371c
 800c954:	08013068 	.word	0x08013068

0800c958 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	4611      	mov	r1, r2
 800c964:	461a      	mov	r2, r3
 800c966:	460b      	mov	r3, r1
 800c968:	71fb      	strb	r3, [r7, #7]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <tcp_output_fill_options+0x2e>
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <tcp_output_fill_options+0x70>)
 800c97a:	f240 7256 	movw	r2, #1878	; 0x756
 800c97e:	4913      	ldr	r1, [pc, #76]	; (800c9cc <tcp_output_fill_options+0x74>)
 800c980:	4813      	ldr	r0, [pc, #76]	; (800c9d0 <tcp_output_fill_options+0x78>)
 800c982:	f003 fc15 	bl	80101b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	3314      	adds	r3, #20
 800c990:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	f103 0214 	add.w	r2, r3, #20
 800c998:	8bfb      	ldrh	r3, [r7, #30]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4619      	mov	r1, r3
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	440b      	add	r3, r1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d006      	beq.n	800c9be <tcp_output_fill_options+0x66>
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <tcp_output_fill_options+0x70>)
 800c9b2:	f240 7275 	movw	r2, #1909	; 0x775
 800c9b6:	4907      	ldr	r1, [pc, #28]	; (800c9d4 <tcp_output_fill_options+0x7c>)
 800c9b8:	4805      	ldr	r0, [pc, #20]	; (800c9d0 <tcp_output_fill_options+0x78>)
 800c9ba:	f003 fbf9 	bl	80101b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c9be:	bf00      	nop
 800c9c0:	3720      	adds	r7, #32
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	08013014 	.word	0x08013014
 800c9cc:	08013744 	.word	0x08013744
 800c9d0:	08013068 	.word	0x08013068
 800c9d4:	0801363c 	.word	0x0801363c

0800c9d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08a      	sub	sp, #40	; 0x28
 800c9dc:	af04      	add	r7, sp, #16
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <tcp_output_control_segment+0x22>
 800c9ec:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <tcp_output_control_segment+0x88>)
 800c9ee:	f240 7287 	movw	r2, #1927	; 0x787
 800c9f2:	491c      	ldr	r1, [pc, #112]	; (800ca64 <tcp_output_control_segment+0x8c>)
 800c9f4:	481c      	ldr	r0, [pc, #112]	; (800ca68 <tcp_output_control_segment+0x90>)
 800c9f6:	f003 fbdb 	bl	80101b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7fe fae8 	bl	800afd4 <tcp_route>
 800ca04:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d102      	bne.n	800ca12 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ca0c:	23fc      	movs	r3, #252	; 0xfc
 800ca0e:	75fb      	strb	r3, [r7, #23]
 800ca10:	e01c      	b.n	800ca4c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d006      	beq.n	800ca26 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	7adb      	ldrb	r3, [r3, #11]
 800ca1c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	7a9b      	ldrb	r3, [r3, #10]
 800ca22:	757b      	strb	r3, [r7, #21]
 800ca24:	e003      	b.n	800ca2e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ca26:	23ff      	movs	r3, #255	; 0xff
 800ca28:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ca2e:	7dba      	ldrb	r2, [r7, #22]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	2306      	movs	r3, #6
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	7d7b      	ldrb	r3, [r7, #21]
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	68b8      	ldr	r0, [r7, #8]
 800ca44:	f002 fb2a 	bl	800f09c <ip4_output_if>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ca4c:	68b8      	ldr	r0, [r7, #8]
 800ca4e:	f7f9 fed3 	bl	80067f8 <pbuf_free>
  return err;
 800ca52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08013014 	.word	0x08013014
 800ca64:	0801376c 	.word	0x0801376c
 800ca68:	08013068 	.word	0x08013068

0800ca6c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b08b      	sub	sp, #44	; 0x2c
 800ca70:	af04      	add	r7, sp, #16
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <tcp_rst+0x22>
 800ca80:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <tcp_rst+0x94>)
 800ca82:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ca86:	491f      	ldr	r1, [pc, #124]	; (800cb04 <tcp_rst+0x98>)
 800ca88:	481f      	ldr	r0, [pc, #124]	; (800cb08 <tcp_rst+0x9c>)
 800ca8a:	f003 fb91 	bl	80101b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d106      	bne.n	800caa2 <tcp_rst+0x36>
 800ca94:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <tcp_rst+0x94>)
 800ca96:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ca9a:	491c      	ldr	r1, [pc, #112]	; (800cb0c <tcp_rst+0xa0>)
 800ca9c:	481a      	ldr	r0, [pc, #104]	; (800cb08 <tcp_rst+0x9c>)
 800ca9e:	f003 fb87 	bl	80101b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800caa2:	2300      	movs	r3, #0
 800caa4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800caa6:	f246 0308 	movw	r3, #24584	; 0x6008
 800caaa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	b29c      	uxth	r4, r3
 800cab0:	68b8      	ldr	r0, [r7, #8]
 800cab2:	f7f8 fb98 	bl	80051e6 <lwip_htonl>
 800cab6:	4602      	mov	r2, r0
 800cab8:	8abb      	ldrh	r3, [r7, #20]
 800caba:	9303      	str	r3, [sp, #12]
 800cabc:	2314      	movs	r3, #20
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	4613      	mov	r3, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	4621      	mov	r1, r4
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff fe92 	bl	800c7f8 <tcp_output_alloc_header_common>
 800cad4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	2200      	movs	r2, #0
 800cae0:	6939      	ldr	r1, [r7, #16]
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f7ff ff38 	bl	800c958 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	6939      	ldr	r1, [r7, #16]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7ff ff72 	bl	800c9d8 <tcp_output_control_segment>
 800caf4:	e000      	b.n	800caf8 <tcp_rst+0x8c>
    return;
 800caf6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd90      	pop	{r4, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08013014 	.word	0x08013014
 800cb04:	08013798 	.word	0x08013798
 800cb08:	08013068 	.word	0x08013068
 800cb0c:	080137b4 	.word	0x080137b4

0800cb10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <tcp_send_empty_ack+0x24>
 800cb26:	4b28      	ldr	r3, [pc, #160]	; (800cbc8 <tcp_send_empty_ack+0xb8>)
 800cb28:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cb2c:	4927      	ldr	r1, [pc, #156]	; (800cbcc <tcp_send_empty_ack+0xbc>)
 800cb2e:	4828      	ldr	r0, [pc, #160]	; (800cbd0 <tcp_send_empty_ack+0xc0>)
 800cb30:	f003 fb3e 	bl	80101b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cb40:	7d7b      	ldrb	r3, [r7, #21]
 800cb42:	b29c      	uxth	r4, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f8 fb4c 	bl	80051e6 <lwip_htonl>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2200      	movs	r2, #0
 800cb52:	4621      	mov	r1, r4
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff fec1 	bl	800c8dc <tcp_output_alloc_header>
 800cb5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d109      	bne.n	800cb76 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	8b5b      	ldrh	r3, [r3, #26]
 800cb66:	f043 0303 	orr.w	r3, r3, #3
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cb70:	f06f 0301 	mvn.w	r3, #1
 800cb74:	e023      	b.n	800cbbe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cb76:	7dbb      	ldrb	r3, [r7, #22]
 800cb78:	7dfa      	ldrb	r2, [r7, #23]
 800cb7a:	6939      	ldr	r1, [r7, #16]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff feeb 	bl	800c958 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3304      	adds	r3, #4
 800cb88:	6939      	ldr	r1, [r7, #16]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ff24 	bl	800c9d8 <tcp_output_control_segment>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	8b5b      	ldrh	r3, [r3, #26]
 800cba0:	f043 0303 	orr.w	r3, r3, #3
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	835a      	strh	r2, [r3, #26]
 800cbaa:	e006      	b.n	800cbba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8b5b      	ldrh	r3, [r3, #26]
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd90      	pop	{r4, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	08013014 	.word	0x08013014
 800cbcc:	080137d0 	.word	0x080137d0
 800cbd0:	08013068 	.word	0x08013068

0800cbd4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cbdc:	2300      	movs	r3, #0
 800cbde:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <tcp_keepalive+0x20>
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <tcp_keepalive+0x74>)
 800cbe8:	f640 0224 	movw	r2, #2084	; 0x824
 800cbec:	4917      	ldr	r1, [pc, #92]	; (800cc4c <tcp_keepalive+0x78>)
 800cbee:	4818      	ldr	r0, [pc, #96]	; (800cc50 <tcp_keepalive+0x7c>)
 800cbf0:	f003 fade 	bl	80101b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cbf4:	7dfb      	ldrb	r3, [r7, #23]
 800cbf6:	b29c      	uxth	r4, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f8 faf1 	bl	80051e6 <lwip_htonl>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2200      	movs	r2, #0
 800cc08:	4621      	mov	r1, r4
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fe66 	bl	800c8dc <tcp_output_alloc_header>
 800cc10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cc18:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1c:	e010      	b.n	800cc40 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	2200      	movs	r2, #0
 800cc22:	6939      	ldr	r1, [r7, #16]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff fe97 	bl	800c958 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	6939      	ldr	r1, [r7, #16]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fed0 	bl	800c9d8 <tcp_output_control_segment>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	371c      	adds	r7, #28
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}
 800cc48:	08013014 	.word	0x08013014
 800cc4c:	080137f0 	.word	0x080137f0
 800cc50:	08013068 	.word	0x08013068

0800cc54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b08b      	sub	sp, #44	; 0x2c
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <tcp_zero_window_probe+0x22>
 800cc68:	4b4c      	ldr	r3, [pc, #304]	; (800cd9c <tcp_zero_window_probe+0x148>)
 800cc6a:	f640 024f 	movw	r2, #2127	; 0x84f
 800cc6e:	494c      	ldr	r1, [pc, #304]	; (800cda0 <tcp_zero_window_probe+0x14c>)
 800cc70:	484c      	ldr	r0, [pc, #304]	; (800cda4 <tcp_zero_window_probe+0x150>)
 800cc72:	f003 fa9d 	bl	80101b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc7a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e086      	b.n	800cd94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc8c:	2bff      	cmp	r3, #255	; 0xff
 800cc8e:	d007      	beq.n	800cca0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc96:	3301      	adds	r3, #1
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cca0:	6a3b      	ldr	r3, [r7, #32]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	899b      	ldrh	r3, [r3, #12]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f8 fa87 	bl	80051bc <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <tcp_zero_window_probe+0x72>
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	891b      	ldrh	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <tcp_zero_window_probe+0x72>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <tcp_zero_window_probe+0x74>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bf0c      	ite	eq
 800ccd0:	2301      	moveq	r3, #1
 800ccd2:	2300      	movne	r3, #0
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ccd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccdc:	b299      	uxth	r1, r3
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	8bba      	ldrh	r2, [r7, #28]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fdf8 	bl	800c8dc <tcp_output_alloc_header>
 800ccec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf8:	e04c      	b.n	800cd94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cd00:	7ffb      	ldrb	r3, [r7, #31]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	b21b      	sxth	r3, r3
 800cd0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd12:	b21c      	sxth	r4, r3
 800cd14:	2011      	movs	r0, #17
 800cd16:	f7f8 fa51 	bl	80051bc <lwip_htons>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	b21b      	sxth	r3, r3
 800cd1e:	4323      	orrs	r3, r4
 800cd20:	b21b      	sxth	r3, r3
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	819a      	strh	r2, [r3, #12]
 800cd28:	e010      	b.n	800cd4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	3314      	adds	r3, #20
 800cd30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	6858      	ldr	r0, [r3, #4]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	891a      	ldrh	r2, [r3, #8]
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	891b      	ldrh	r3, [r3, #8]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	2201      	movs	r2, #1
 800cd46:	6939      	ldr	r1, [r7, #16]
 800cd48:	f7f9 ff50 	bl	8006bec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f8 fa47 	bl	80051e6 <lwip_htonl>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da02      	bge.n	800cd70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd74:	2200      	movs	r2, #0
 800cd76:	69b9      	ldr	r1, [r7, #24]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff fded 	bl	800c958 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	69b9      	ldr	r1, [r7, #24]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fe26 	bl	800c9d8 <tcp_output_control_segment>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cd90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	372c      	adds	r7, #44	; 0x2c
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}
 800cd9c:	08013014 	.word	0x08013014
 800cda0:	0801380c 	.word	0x0801380c
 800cda4:	08013068 	.word	0x08013068

0800cda8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cdb0:	f7fa f80a 	bl	8006dc8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <tcpip_tcp_timer+0x38>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d103      	bne.n	800cdc4 <tcpip_tcp_timer+0x1c>
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <tcpip_tcp_timer+0x3c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4908      	ldr	r1, [pc, #32]	; (800cde8 <tcpip_tcp_timer+0x40>)
 800cdc8:	20fa      	movs	r0, #250	; 0xfa
 800cdca:	f000 f8f3 	bl	800cfb4 <sys_timeout>
 800cdce:	e003      	b.n	800cdd8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cdd0:	4b06      	ldr	r3, [pc, #24]	; (800cdec <tcpip_tcp_timer+0x44>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20006cf8 	.word	0x20006cf8
 800cde4:	20006d08 	.word	0x20006d08
 800cde8:	0800cda9 	.word	0x0800cda9
 800cdec:	2000056c 	.word	0x2000056c

0800cdf0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cdf4:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <tcp_timer_needed+0x30>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10f      	bne.n	800ce1c <tcp_timer_needed+0x2c>
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <tcp_timer_needed+0x34>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d103      	bne.n	800ce0c <tcp_timer_needed+0x1c>
 800ce04:	4b08      	ldr	r3, [pc, #32]	; (800ce28 <tcp_timer_needed+0x38>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d007      	beq.n	800ce1c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ce0c:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <tcp_timer_needed+0x30>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce12:	2200      	movs	r2, #0
 800ce14:	4905      	ldr	r1, [pc, #20]	; (800ce2c <tcp_timer_needed+0x3c>)
 800ce16:	20fa      	movs	r0, #250	; 0xfa
 800ce18:	f000 f8cc 	bl	800cfb4 <sys_timeout>
  }
}
 800ce1c:	bf00      	nop
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000056c 	.word	0x2000056c
 800ce24:	20006cf8 	.word	0x20006cf8
 800ce28:	20006d08 	.word	0x20006d08
 800ce2c:	0800cda9 	.word	0x0800cda9

0800ce30 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce3c:	2006      	movs	r0, #6
 800ce3e:	f7f8 fe7d 	bl	8005b3c <memp_malloc>
 800ce42:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d109      	bne.n	800ce5e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d151      	bne.n	800cef4 <sys_timeout_abs+0xc4>
 800ce50:	4b2a      	ldr	r3, [pc, #168]	; (800cefc <sys_timeout_abs+0xcc>)
 800ce52:	22be      	movs	r2, #190	; 0xbe
 800ce54:	492a      	ldr	r1, [pc, #168]	; (800cf00 <sys_timeout_abs+0xd0>)
 800ce56:	482b      	ldr	r0, [pc, #172]	; (800cf04 <sys_timeout_abs+0xd4>)
 800ce58:	f003 f9aa 	bl	80101b0 <iprintf>
    return;
 800ce5c:	e04a      	b.n	800cef4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ce76:	4b24      	ldr	r3, [pc, #144]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d103      	bne.n	800ce86 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ce7e:	4a22      	ldr	r2, [pc, #136]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6013      	str	r3, [r2, #0]
    return;
 800ce84:	e037      	b.n	800cef6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	4b1f      	ldr	r3, [pc, #124]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	0fdb      	lsrs	r3, r3, #31
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d007      	beq.n	800ceae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ce9e:	4b1a      	ldr	r3, [pc, #104]	; (800cf08 <sys_timeout_abs+0xd8>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cea6:	4a18      	ldr	r2, [pc, #96]	; (800cf08 <sys_timeout_abs+0xd8>)
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	e023      	b.n	800cef6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	e01a      	b.n	800ceec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00b      	beq.n	800ced6 <sys_timeout_abs+0xa6>
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	0fdb      	lsrs	r3, r3, #31
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d007      	beq.n	800cee6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	601a      	str	r2, [r3, #0]
        break;
 800cee4:	e007      	b.n	800cef6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e1      	bne.n	800ceb6 <sys_timeout_abs+0x86>
 800cef2:	e000      	b.n	800cef6 <sys_timeout_abs+0xc6>
    return;
 800cef4:	bf00      	nop
      }
    }
  }
}
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	08013830 	.word	0x08013830
 800cf00:	08013864 	.word	0x08013864
 800cf04:	080138a4 	.word	0x080138a4
 800cf08:	20000564 	.word	0x20000564

0800cf0c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	4798      	blx	r3

  now = sys_now();
 800cf1e:	f7f6 fd31 	bl	8003984 <sys_now>
 800cf22:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <lwip_cyclic_timer+0x5c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	0fdb      	lsrs	r3, r3, #31
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d009      	beq.n	800cf56 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	4413      	add	r3, r2
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4907      	ldr	r1, [pc, #28]	; (800cf6c <lwip_cyclic_timer+0x60>)
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff ff6e 	bl	800ce30 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cf54:	e004      	b.n	800cf60 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	4904      	ldr	r1, [pc, #16]	; (800cf6c <lwip_cyclic_timer+0x60>)
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f7ff ff68 	bl	800ce30 <sys_timeout_abs>
}
 800cf60:	bf00      	nop
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20000568 	.word	0x20000568
 800cf6c:	0800cf0d 	.word	0x0800cf0d

0800cf70 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf76:	2301      	movs	r3, #1
 800cf78:	607b      	str	r3, [r7, #4]
 800cf7a:	e00e      	b.n	800cf9a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cf7c:	4a0b      	ldr	r2, [pc, #44]	; (800cfac <sys_timeouts_init+0x3c>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <sys_timeouts_init+0x3c>)
 800cf8a:	4413      	add	r3, r2
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	4908      	ldr	r1, [pc, #32]	; (800cfb0 <sys_timeouts_init+0x40>)
 800cf90:	f000 f810 	bl	800cfb4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3301      	adds	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d9ed      	bls.n	800cf7c <sys_timeouts_init+0xc>
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	08014894 	.word	0x08014894
 800cfb0:	0800cf0d 	.word	0x0800cf0d

0800cfb4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfc6:	d306      	bcc.n	800cfd6 <sys_timeout+0x22>
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <sys_timeout+0x40>)
 800cfca:	f240 1229 	movw	r2, #297	; 0x129
 800cfce:	490a      	ldr	r1, [pc, #40]	; (800cff8 <sys_timeout+0x44>)
 800cfd0:	480a      	ldr	r0, [pc, #40]	; (800cffc <sys_timeout+0x48>)
 800cfd2:	f003 f8ed 	bl	80101b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cfd6:	f7f6 fcd5 	bl	8003984 <sys_now>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	6978      	ldr	r0, [r7, #20]
 800cfe8:	f7ff ff22 	bl	800ce30 <sys_timeout_abs>
#endif
}
 800cfec:	bf00      	nop
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	08013830 	.word	0x08013830
 800cff8:	080138cc 	.word	0x080138cc
 800cffc:	080138a4 	.word	0x080138a4

0800d000 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d006:	f7f6 fcbd 	bl	8003984 <sys_now>
 800d00a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d00c:	4b1a      	ldr	r3, [pc, #104]	; (800d078 <sys_check_timeouts+0x78>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <sys_check_timeouts+0x1a>
 800d016:	f7f9 f8b5 	bl	8006184 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <sys_check_timeouts+0x7c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d022      	beq.n	800d06c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	0fdb      	lsrs	r3, r3, #31
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d11a      	bne.n	800d070 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a0f      	ldr	r2, [pc, #60]	; (800d07c <sys_check_timeouts+0x7c>)
 800d040:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	4a0b      	ldr	r2, [pc, #44]	; (800d080 <sys_check_timeouts+0x80>)
 800d054:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	2006      	movs	r0, #6
 800d05a:	f7f8 fdbb 	bl	8005bd4 <memp_free>
    if (handler != NULL) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0d3      	beq.n	800d00c <sys_check_timeouts+0xc>
      handler(arg);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6838      	ldr	r0, [r7, #0]
 800d068:	4798      	blx	r3
  do {
 800d06a:	e7cf      	b.n	800d00c <sys_check_timeouts+0xc>
      return;
 800d06c:	bf00      	nop
 800d06e:	e000      	b.n	800d072 <sys_check_timeouts+0x72>
      return;
 800d070:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20006cf0 	.word	0x20006cf0
 800d07c:	20000564 	.word	0x20000564
 800d080:	20000568 	.word	0x20000568

0800d084 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d088:	f003 f8aa 	bl	80101e0 <rand>
 800d08c:	4603      	mov	r3, r0
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d094:	b29b      	uxth	r3, r3
 800d096:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	4b01      	ldr	r3, [pc, #4]	; (800d0a4 <udp_init+0x20>)
 800d09e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0a0:	bf00      	nop
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	20000018 	.word	0x20000018

0800d0a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d0b2:	4b17      	ldr	r3, [pc, #92]	; (800d110 <udp_new_port+0x68>)
 800d0b4:	881b      	ldrh	r3, [r3, #0]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	b291      	uxth	r1, r2
 800d0ba:	4a15      	ldr	r2, [pc, #84]	; (800d110 <udp_new_port+0x68>)
 800d0bc:	8011      	strh	r1, [r2, #0]
 800d0be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d103      	bne.n	800d0ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d0c6:	4b12      	ldr	r3, [pc, #72]	; (800d110 <udp_new_port+0x68>)
 800d0c8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d0cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ce:	4b11      	ldr	r3, [pc, #68]	; (800d114 <udp_new_port+0x6c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	e011      	b.n	800d0fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	8a5a      	ldrh	r2, [r3, #18]
 800d0da:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <udp_new_port+0x68>)
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d108      	bne.n	800d0f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d0e2:	88fb      	ldrh	r3, [r7, #6]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	80fb      	strh	r3, [r7, #6]
 800d0e8:	88fb      	ldrh	r3, [r7, #6]
 800d0ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0ee:	d3e0      	bcc.n	800d0b2 <udp_new_port+0xa>
        return 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e007      	b.n	800d104 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	603b      	str	r3, [r7, #0]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1ea      	bne.n	800d0d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d100:	4b03      	ldr	r3, [pc, #12]	; (800d110 <udp_new_port+0x68>)
 800d102:	881b      	ldrh	r3, [r3, #0]
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	20000018 	.word	0x20000018
 800d114:	20006d10 	.word	0x20006d10

0800d118 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	4613      	mov	r3, r2
 800d124:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d105      	bne.n	800d138 <udp_input_local_match+0x20>
 800d12c:	4b27      	ldr	r3, [pc, #156]	; (800d1cc <udp_input_local_match+0xb4>)
 800d12e:	2287      	movs	r2, #135	; 0x87
 800d130:	4927      	ldr	r1, [pc, #156]	; (800d1d0 <udp_input_local_match+0xb8>)
 800d132:	4828      	ldr	r0, [pc, #160]	; (800d1d4 <udp_input_local_match+0xbc>)
 800d134:	f003 f83c 	bl	80101b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d105      	bne.n	800d14a <udp_input_local_match+0x32>
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <udp_input_local_match+0xb4>)
 800d140:	2288      	movs	r2, #136	; 0x88
 800d142:	4925      	ldr	r1, [pc, #148]	; (800d1d8 <udp_input_local_match+0xc0>)
 800d144:	4823      	ldr	r0, [pc, #140]	; (800d1d4 <udp_input_local_match+0xbc>)
 800d146:	f003 f833 	bl	80101b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	7a1b      	ldrb	r3, [r3, #8]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00b      	beq.n	800d16a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	7a1a      	ldrb	r2, [r3, #8]
 800d156:	4b21      	ldr	r3, [pc, #132]	; (800d1dc <udp_input_local_match+0xc4>)
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d15e:	3301      	adds	r3, #1
 800d160:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d162:	429a      	cmp	r2, r3
 800d164:	d001      	beq.n	800d16a <udp_input_local_match+0x52>
    return 0;
 800d166:	2300      	movs	r3, #0
 800d168:	e02b      	b.n	800d1c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d018      	beq.n	800d1a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d013      	beq.n	800d19e <udp_input_local_match+0x86>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00f      	beq.n	800d19e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d17e:	4b17      	ldr	r3, [pc, #92]	; (800d1dc <udp_input_local_match+0xc4>)
 800d180:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d186:	d00a      	beq.n	800d19e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <udp_input_local_match+0xc4>)
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	405a      	eors	r2, r3
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	3308      	adds	r3, #8
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d110      	bne.n	800d1c0 <udp_input_local_match+0xa8>
          return 1;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e00f      	b.n	800d1c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d009      	beq.n	800d1bc <udp_input_local_match+0xa4>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d005      	beq.n	800d1bc <udp_input_local_match+0xa4>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <udp_input_local_match+0xc4>)
 800d1b6:	695b      	ldr	r3, [r3, #20]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d101      	bne.n	800d1c0 <udp_input_local_match+0xa8>
        return 1;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e000      	b.n	800d1c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	08013918 	.word	0x08013918
 800d1d0:	08013948 	.word	0x08013948
 800d1d4:	0801396c 	.word	0x0801396c
 800d1d8:	08013994 	.word	0x08013994
 800d1dc:	200037b4 	.word	0x200037b4

0800d1e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1e0:	b590      	push	{r4, r7, lr}
 800d1e2:	b08d      	sub	sp, #52	; 0x34
 800d1e4:	af02      	add	r7, sp, #8
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d105      	bne.n	800d200 <udp_input+0x20>
 800d1f4:	4b7c      	ldr	r3, [pc, #496]	; (800d3e8 <udp_input+0x208>)
 800d1f6:	22cf      	movs	r2, #207	; 0xcf
 800d1f8:	497c      	ldr	r1, [pc, #496]	; (800d3ec <udp_input+0x20c>)
 800d1fa:	487d      	ldr	r0, [pc, #500]	; (800d3f0 <udp_input+0x210>)
 800d1fc:	f002 ffd8 	bl	80101b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d105      	bne.n	800d212 <udp_input+0x32>
 800d206:	4b78      	ldr	r3, [pc, #480]	; (800d3e8 <udp_input+0x208>)
 800d208:	22d0      	movs	r2, #208	; 0xd0
 800d20a:	497a      	ldr	r1, [pc, #488]	; (800d3f4 <udp_input+0x214>)
 800d20c:	4878      	ldr	r0, [pc, #480]	; (800d3f0 <udp_input+0x210>)
 800d20e:	f002 ffcf 	bl	80101b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	895b      	ldrh	r3, [r3, #10]
 800d216:	2b07      	cmp	r3, #7
 800d218:	d803      	bhi.n	800d222 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7f9 faec 	bl	80067f8 <pbuf_free>
    goto end;
 800d220:	e0de      	b.n	800d3e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d228:	4b73      	ldr	r3, [pc, #460]	; (800d3f8 <udp_input+0x218>)
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	4a72      	ldr	r2, [pc, #456]	; (800d3f8 <udp_input+0x218>)
 800d22e:	6812      	ldr	r2, [r2, #0]
 800d230:	4611      	mov	r1, r2
 800d232:	4618      	mov	r0, r3
 800d234:	f002 f80a 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800d238:	4603      	mov	r3, r0
 800d23a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29b      	uxth	r3, r3
 800d242:	4618      	mov	r0, r3
 800d244:	f7f7 ffba 	bl	80051bc <lwip_htons>
 800d248:	4603      	mov	r3, r0
 800d24a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	885b      	ldrh	r3, [r3, #2]
 800d250:	b29b      	uxth	r3, r3
 800d252:	4618      	mov	r0, r3
 800d254:	f7f7 ffb2 	bl	80051bc <lwip_htons>
 800d258:	4603      	mov	r3, r0
 800d25a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d25c:	2300      	movs	r3, #0
 800d25e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d260:	2300      	movs	r3, #0
 800d262:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d268:	4b64      	ldr	r3, [pc, #400]	; (800d3fc <udp_input+0x21c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	627b      	str	r3, [r7, #36]	; 0x24
 800d26e:	e054      	b.n	800d31a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	8a5b      	ldrh	r3, [r3, #18]
 800d274:	89fa      	ldrh	r2, [r7, #14]
 800d276:	429a      	cmp	r2, r3
 800d278:	d14a      	bne.n	800d310 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d27a:	7cfb      	ldrb	r3, [r7, #19]
 800d27c:	461a      	mov	r2, r3
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d282:	f7ff ff49 	bl	800d118 <udp_input_local_match>
 800d286:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d041      	beq.n	800d310 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	7c1b      	ldrb	r3, [r3, #16]
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d11d      	bne.n	800d2d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d102      	bne.n	800d2a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	61fb      	str	r3, [r7, #28]
 800d2a2:	e017      	b.n	800d2d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d2a4:	7cfb      	ldrb	r3, [r7, #19]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d014      	beq.n	800d2d4 <udp_input+0xf4>
 800d2aa:	4b53      	ldr	r3, [pc, #332]	; (800d3f8 <udp_input+0x218>)
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b2:	d10f      	bne.n	800d2d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d008      	beq.n	800d2d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d101      	bne.n	800d2d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	8a9b      	ldrh	r3, [r3, #20]
 800d2d8:	8a3a      	ldrh	r2, [r7, #16]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d118      	bne.n	800d310 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	4b43      	ldr	r3, [pc, #268]	; (800d3f8 <udp_input+0x218>)
 800d2ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d10e      	bne.n	800d310 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d014      	beq.n	800d322 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d300:	4b3e      	ldr	r3, [pc, #248]	; (800d3fc <udp_input+0x21c>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d308:	4a3c      	ldr	r2, [pc, #240]	; (800d3fc <udp_input+0x21c>)
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d30e:	e008      	b.n	800d322 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	627b      	str	r3, [r7, #36]	; 0x24
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1a7      	bne.n	800d270 <udp_input+0x90>
 800d320:	e000      	b.n	800d324 <udp_input+0x144>
        break;
 800d322:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <udp_input+0x14e>
    pcb = uncon_pcb;
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <udp_input+0x15a>
    for_us = 1;
 800d334:	2301      	movs	r3, #1
 800d336:	76fb      	strb	r3, [r7, #27]
 800d338:	e00a      	b.n	800d350 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	3304      	adds	r3, #4
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	4b2d      	ldr	r3, [pc, #180]	; (800d3f8 <udp_input+0x218>)
 800d342:	695b      	ldr	r3, [r3, #20]
 800d344:	429a      	cmp	r2, r3
 800d346:	bf0c      	ite	eq
 800d348:	2301      	moveq	r3, #1
 800d34a:	2300      	movne	r3, #0
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d350:	7efb      	ldrb	r3, [r7, #27]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d041      	beq.n	800d3da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d356:	2108      	movs	r1, #8
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7f9 f9c7 	bl	80066ec <pbuf_remove_header>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00a      	beq.n	800d37a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d364:	4b20      	ldr	r3, [pc, #128]	; (800d3e8 <udp_input+0x208>)
 800d366:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d36a:	4925      	ldr	r1, [pc, #148]	; (800d400 <udp_input+0x220>)
 800d36c:	4820      	ldr	r0, [pc, #128]	; (800d3f0 <udp_input+0x210>)
 800d36e:	f002 ff1f 	bl	80101b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7f9 fa40 	bl	80067f8 <pbuf_free>
      goto end;
 800d378:	e032      	b.n	800d3e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d012      	beq.n	800d3a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00a      	beq.n	800d39e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	699c      	ldr	r4, [r3, #24]
 800d38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38e:	69d8      	ldr	r0, [r3, #28]
 800d390:	8a3b      	ldrh	r3, [r7, #16]
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	4b1b      	ldr	r3, [pc, #108]	; (800d404 <udp_input+0x224>)
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d39a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d39c:	e021      	b.n	800d3e2 <udp_input+0x202>
        pbuf_free(p);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7f9 fa2a 	bl	80067f8 <pbuf_free>
        goto end;
 800d3a4:	e01c      	b.n	800d3e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d3a6:	7cfb      	ldrb	r3, [r7, #19]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d112      	bne.n	800d3d2 <udp_input+0x1f2>
 800d3ac:	4b12      	ldr	r3, [pc, #72]	; (800d3f8 <udp_input+0x218>)
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3b4:	2be0      	cmp	r3, #224	; 0xe0
 800d3b6:	d00c      	beq.n	800d3d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	; (800d3f8 <udp_input+0x218>)
 800d3ba:	899b      	ldrh	r3, [r3, #12]
 800d3bc:	3308      	adds	r3, #8
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	b21b      	sxth	r3, r3
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7f9 fa04 	bl	80067d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d3ca:	2103      	movs	r1, #3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f001 fc1d 	bl	800ec0c <icmp_dest_unreach>
      pbuf_free(p);
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7f9 fa10 	bl	80067f8 <pbuf_free>
  return;
 800d3d8:	e003      	b.n	800d3e2 <udp_input+0x202>
    pbuf_free(p);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7f9 fa0c 	bl	80067f8 <pbuf_free>
  return;
 800d3e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d3e2:	372c      	adds	r7, #44	; 0x2c
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd90      	pop	{r4, r7, pc}
 800d3e8:	08013918 	.word	0x08013918
 800d3ec:	080139bc 	.word	0x080139bc
 800d3f0:	0801396c 	.word	0x0801396c
 800d3f4:	080139d4 	.word	0x080139d4
 800d3f8:	200037b4 	.word	0x200037b4
 800d3fc:	20006d10 	.word	0x20006d10
 800d400:	080139f0 	.word	0x080139f0
 800d404:	200037c4 	.word	0x200037c4

0800d408 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d109      	bne.n	800d42c <udp_send+0x24>
 800d418:	4b11      	ldr	r3, [pc, #68]	; (800d460 <udp_send+0x58>)
 800d41a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d41e:	4911      	ldr	r1, [pc, #68]	; (800d464 <udp_send+0x5c>)
 800d420:	4811      	ldr	r0, [pc, #68]	; (800d468 <udp_send+0x60>)
 800d422:	f002 fec5 	bl	80101b0 <iprintf>
 800d426:	f06f 030f 	mvn.w	r3, #15
 800d42a:	e015      	b.n	800d458 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d109      	bne.n	800d446 <udp_send+0x3e>
 800d432:	4b0b      	ldr	r3, [pc, #44]	; (800d460 <udp_send+0x58>)
 800d434:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d438:	490c      	ldr	r1, [pc, #48]	; (800d46c <udp_send+0x64>)
 800d43a:	480b      	ldr	r0, [pc, #44]	; (800d468 <udp_send+0x60>)
 800d43c:	f002 feb8 	bl	80101b0 <iprintf>
 800d440:	f06f 030f 	mvn.w	r3, #15
 800d444:	e008      	b.n	800d458 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	8a9b      	ldrh	r3, [r3, #20]
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f80d 	bl	800d470 <udp_sendto>
 800d456:	4603      	mov	r3, r0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	08013918 	.word	0x08013918
 800d464:	08013a0c 	.word	0x08013a0c
 800d468:	0801396c 	.word	0x0801396c
 800d46c:	08013a24 	.word	0x08013a24

0800d470 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af02      	add	r7, sp, #8
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d109      	bne.n	800d498 <udp_sendto+0x28>
 800d484:	4b23      	ldr	r3, [pc, #140]	; (800d514 <udp_sendto+0xa4>)
 800d486:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d48a:	4923      	ldr	r1, [pc, #140]	; (800d518 <udp_sendto+0xa8>)
 800d48c:	4823      	ldr	r0, [pc, #140]	; (800d51c <udp_sendto+0xac>)
 800d48e:	f002 fe8f 	bl	80101b0 <iprintf>
 800d492:	f06f 030f 	mvn.w	r3, #15
 800d496:	e038      	b.n	800d50a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d109      	bne.n	800d4b2 <udp_sendto+0x42>
 800d49e:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <udp_sendto+0xa4>)
 800d4a0:	f240 2219 	movw	r2, #537	; 0x219
 800d4a4:	491e      	ldr	r1, [pc, #120]	; (800d520 <udp_sendto+0xb0>)
 800d4a6:	481d      	ldr	r0, [pc, #116]	; (800d51c <udp_sendto+0xac>)
 800d4a8:	f002 fe82 	bl	80101b0 <iprintf>
 800d4ac:	f06f 030f 	mvn.w	r3, #15
 800d4b0:	e02b      	b.n	800d50a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <udp_sendto+0x5c>
 800d4b8:	4b16      	ldr	r3, [pc, #88]	; (800d514 <udp_sendto+0xa4>)
 800d4ba:	f240 221a 	movw	r2, #538	; 0x21a
 800d4be:	4919      	ldr	r1, [pc, #100]	; (800d524 <udp_sendto+0xb4>)
 800d4c0:	4816      	ldr	r0, [pc, #88]	; (800d51c <udp_sendto+0xac>)
 800d4c2:	f002 fe75 	bl	80101b0 <iprintf>
 800d4c6:	f06f 030f 	mvn.w	r3, #15
 800d4ca:	e01e      	b.n	800d50a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	7a1b      	ldrb	r3, [r3, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	7a1b      	ldrb	r3, [r3, #8]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7f8 fe2d 	bl	8006138 <netif_get_by_index>
 800d4de:	6178      	str	r0, [r7, #20]
 800d4e0:	e003      	b.n	800d4ea <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 fc1c 	bl	800ed20 <ip4_route>
 800d4e8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800d4f0:	f06f 0303 	mvn.w	r3, #3
 800d4f4:	e009      	b.n	800d50a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d4f6:	887a      	ldrh	r2, [r7, #2]
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 f810 	bl	800d528 <udp_sendto_if>
 800d508:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	08013918 	.word	0x08013918
 800d518:	08013a3c 	.word	0x08013a3c
 800d51c:	0801396c 	.word	0x0801396c
 800d520:	08013a54 	.word	0x08013a54
 800d524:	08013a70 	.word	0x08013a70

0800d528 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
 800d534:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d109      	bne.n	800d550 <udp_sendto_if+0x28>
 800d53c:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <udp_sendto_if+0xd0>)
 800d53e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d542:	492e      	ldr	r1, [pc, #184]	; (800d5fc <udp_sendto_if+0xd4>)
 800d544:	482e      	ldr	r0, [pc, #184]	; (800d600 <udp_sendto_if+0xd8>)
 800d546:	f002 fe33 	bl	80101b0 <iprintf>
 800d54a:	f06f 030f 	mvn.w	r3, #15
 800d54e:	e04f      	b.n	800d5f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <udp_sendto_if+0x42>
 800d556:	4b28      	ldr	r3, [pc, #160]	; (800d5f8 <udp_sendto_if+0xd0>)
 800d558:	f240 2281 	movw	r2, #641	; 0x281
 800d55c:	4929      	ldr	r1, [pc, #164]	; (800d604 <udp_sendto_if+0xdc>)
 800d55e:	4828      	ldr	r0, [pc, #160]	; (800d600 <udp_sendto_if+0xd8>)
 800d560:	f002 fe26 	bl	80101b0 <iprintf>
 800d564:	f06f 030f 	mvn.w	r3, #15
 800d568:	e042      	b.n	800d5f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d109      	bne.n	800d584 <udp_sendto_if+0x5c>
 800d570:	4b21      	ldr	r3, [pc, #132]	; (800d5f8 <udp_sendto_if+0xd0>)
 800d572:	f240 2282 	movw	r2, #642	; 0x282
 800d576:	4924      	ldr	r1, [pc, #144]	; (800d608 <udp_sendto_if+0xe0>)
 800d578:	4821      	ldr	r0, [pc, #132]	; (800d600 <udp_sendto_if+0xd8>)
 800d57a:	f002 fe19 	bl	80101b0 <iprintf>
 800d57e:	f06f 030f 	mvn.w	r3, #15
 800d582:	e035      	b.n	800d5f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d109      	bne.n	800d59e <udp_sendto_if+0x76>
 800d58a:	4b1b      	ldr	r3, [pc, #108]	; (800d5f8 <udp_sendto_if+0xd0>)
 800d58c:	f240 2283 	movw	r2, #643	; 0x283
 800d590:	491e      	ldr	r1, [pc, #120]	; (800d60c <udp_sendto_if+0xe4>)
 800d592:	481b      	ldr	r0, [pc, #108]	; (800d600 <udp_sendto_if+0xd8>)
 800d594:	f002 fe0c 	bl	80101b0 <iprintf>
 800d598:	f06f 030f 	mvn.w	r3, #15
 800d59c:	e028      	b.n	800d5f0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d009      	beq.n	800d5b8 <udp_sendto_if+0x90>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d005      	beq.n	800d5b8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d5b4:	2be0      	cmp	r3, #224	; 0xe0
 800d5b6:	d103      	bne.n	800d5c0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	617b      	str	r3, [r7, #20]
 800d5be:	e00b      	b.n	800d5d8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d002      	beq.n	800d5d4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800d5ce:	f06f 0303 	mvn.w	r3, #3
 800d5d2:	e00d      	b.n	800d5f0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d5d8:	887a      	ldrh	r2, [r7, #2]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	9301      	str	r3, [sp, #4]
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f811 	bl	800d610 <udp_sendto_if_src>
 800d5ee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	08013918 	.word	0x08013918
 800d5fc:	08013a8c 	.word	0x08013a8c
 800d600:	0801396c 	.word	0x0801396c
 800d604:	08013aa8 	.word	0x08013aa8
 800d608:	08013ac4 	.word	0x08013ac4
 800d60c:	08013ae4 	.word	0x08013ae4

0800d610 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08c      	sub	sp, #48	; 0x30
 800d614:	af04      	add	r7, sp, #16
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d109      	bne.n	800d638 <udp_sendto_if_src+0x28>
 800d624:	4b65      	ldr	r3, [pc, #404]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d626:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d62a:	4965      	ldr	r1, [pc, #404]	; (800d7c0 <udp_sendto_if_src+0x1b0>)
 800d62c:	4865      	ldr	r0, [pc, #404]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d62e:	f002 fdbf 	bl	80101b0 <iprintf>
 800d632:	f06f 030f 	mvn.w	r3, #15
 800d636:	e0bc      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d109      	bne.n	800d652 <udp_sendto_if_src+0x42>
 800d63e:	4b5f      	ldr	r3, [pc, #380]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d640:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d644:	4960      	ldr	r1, [pc, #384]	; (800d7c8 <udp_sendto_if_src+0x1b8>)
 800d646:	485f      	ldr	r0, [pc, #380]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d648:	f002 fdb2 	bl	80101b0 <iprintf>
 800d64c:	f06f 030f 	mvn.w	r3, #15
 800d650:	e0af      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d109      	bne.n	800d66c <udp_sendto_if_src+0x5c>
 800d658:	4b58      	ldr	r3, [pc, #352]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d65a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d65e:	495b      	ldr	r1, [pc, #364]	; (800d7cc <udp_sendto_if_src+0x1bc>)
 800d660:	4858      	ldr	r0, [pc, #352]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d662:	f002 fda5 	bl	80101b0 <iprintf>
 800d666:	f06f 030f 	mvn.w	r3, #15
 800d66a:	e0a2      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <udp_sendto_if_src+0x76>
 800d672:	4b52      	ldr	r3, [pc, #328]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d674:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d678:	4955      	ldr	r1, [pc, #340]	; (800d7d0 <udp_sendto_if_src+0x1c0>)
 800d67a:	4852      	ldr	r0, [pc, #328]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d67c:	f002 fd98 	bl	80101b0 <iprintf>
 800d680:	f06f 030f 	mvn.w	r3, #15
 800d684:	e095      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d109      	bne.n	800d6a0 <udp_sendto_if_src+0x90>
 800d68c:	4b4b      	ldr	r3, [pc, #300]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d68e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d692:	4950      	ldr	r1, [pc, #320]	; (800d7d4 <udp_sendto_if_src+0x1c4>)
 800d694:	484b      	ldr	r0, [pc, #300]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d696:	f002 fd8b 	bl	80101b0 <iprintf>
 800d69a:	f06f 030f 	mvn.w	r3, #15
 800d69e:	e088      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	8a5b      	ldrh	r3, [r3, #18]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10f      	bne.n	800d6c8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d6a8:	68f9      	ldr	r1, [r7, #12]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	8a5b      	ldrh	r3, [r3, #18]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	f000 f893 	bl	800d7dc <udp_bind>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800d6ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800d6c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d6c6:	e074      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d902      	bls.n	800d6da <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	e06b      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d6da:	2108      	movs	r1, #8
 800d6dc:	68b8      	ldr	r0, [r7, #8]
 800d6de:	f7f8 fff5 	bl	80066cc <pbuf_add_header>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d015      	beq.n	800d714 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d6e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6ec:	2108      	movs	r1, #8
 800d6ee:	2022      	movs	r0, #34	; 0x22
 800d6f0:	f7f8 fd9e 	bl	8006230 <pbuf_alloc>
 800d6f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d700:	e057      	b.n	800d7b2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	891b      	ldrh	r3, [r3, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d006      	beq.n	800d718 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d70a:	68b9      	ldr	r1, [r7, #8]
 800d70c:	69f8      	ldr	r0, [r7, #28]
 800d70e:	f7f9 f98b 	bl	8006a28 <pbuf_chain>
 800d712:	e001      	b.n	800d718 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	895b      	ldrh	r3, [r3, #10]
 800d71c:	2b07      	cmp	r3, #7
 800d71e:	d806      	bhi.n	800d72e <udp_sendto_if_src+0x11e>
 800d720:	4b26      	ldr	r3, [pc, #152]	; (800d7bc <udp_sendto_if_src+0x1ac>)
 800d722:	f240 320d 	movw	r2, #781	; 0x30d
 800d726:	492c      	ldr	r1, [pc, #176]	; (800d7d8 <udp_sendto_if_src+0x1c8>)
 800d728:	4826      	ldr	r0, [pc, #152]	; (800d7c4 <udp_sendto_if_src+0x1b4>)
 800d72a:	f002 fd41 	bl	80101b0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	8a5b      	ldrh	r3, [r3, #18]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f7 fd3f 	bl	80051bc <lwip_htons>
 800d73e:	4603      	mov	r3, r0
 800d740:	461a      	mov	r2, r3
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d746:	887b      	ldrh	r3, [r7, #2]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7f7 fd37 	bl	80051bc <lwip_htons>
 800d74e:	4603      	mov	r3, r0
 800d750:	461a      	mov	r2, r3
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2200      	movs	r2, #0
 800d75a:	719a      	strb	r2, [r3, #6]
 800d75c:	2200      	movs	r2, #0
 800d75e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	891b      	ldrh	r3, [r3, #8]
 800d764:	4618      	mov	r0, r3
 800d766:	f7f7 fd29 	bl	80051bc <lwip_htons>
 800d76a:	4603      	mov	r3, r0
 800d76c:	461a      	mov	r2, r3
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d772:	2311      	movs	r3, #17
 800d774:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	7adb      	ldrb	r3, [r3, #11]
 800d77a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	7a9b      	ldrb	r3, [r3, #10]
 800d780:	7cb9      	ldrb	r1, [r7, #18]
 800d782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d784:	9202      	str	r2, [sp, #8]
 800d786:	7cfa      	ldrb	r2, [r7, #19]
 800d788:	9201      	str	r2, [sp, #4]
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	460b      	mov	r3, r1
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d792:	69f8      	ldr	r0, [r7, #28]
 800d794:	f001 fcac 	bl	800f0f0 <ip4_output_if_src>
 800d798:	4603      	mov	r3, r0
 800d79a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d79c:	69fa      	ldr	r2, [r7, #28]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d004      	beq.n	800d7ae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d7a4:	69f8      	ldr	r0, [r7, #28]
 800d7a6:	f7f9 f827 	bl	80067f8 <pbuf_free>
    q = NULL;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d7ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	08013918 	.word	0x08013918
 800d7c0:	08013b04 	.word	0x08013b04
 800d7c4:	0801396c 	.word	0x0801396c
 800d7c8:	08013b24 	.word	0x08013b24
 800d7cc:	08013b44 	.word	0x08013b44
 800d7d0:	08013b68 	.word	0x08013b68
 800d7d4:	08013b8c 	.word	0x08013b8c
 800d7d8:	08013bb0 	.word	0x08013bb0

0800d7dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d101      	bne.n	800d7f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d7f0:	4b39      	ldr	r3, [pc, #228]	; (800d8d8 <udp_bind+0xfc>)
 800d7f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d109      	bne.n	800d80e <udp_bind+0x32>
 800d7fa:	4b38      	ldr	r3, [pc, #224]	; (800d8dc <udp_bind+0x100>)
 800d7fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d800:	4937      	ldr	r1, [pc, #220]	; (800d8e0 <udp_bind+0x104>)
 800d802:	4838      	ldr	r0, [pc, #224]	; (800d8e4 <udp_bind+0x108>)
 800d804:	f002 fcd4 	bl	80101b0 <iprintf>
 800d808:	f06f 030f 	mvn.w	r3, #15
 800d80c:	e060      	b.n	800d8d0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d812:	4b35      	ldr	r3, [pc, #212]	; (800d8e8 <udp_bind+0x10c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	617b      	str	r3, [r7, #20]
 800d818:	e009      	b.n	800d82e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d102      	bne.n	800d828 <udp_bind+0x4c>
      rebind = 1;
 800d822:	2301      	movs	r3, #1
 800d824:	74fb      	strb	r3, [r7, #19]
      break;
 800d826:	e005      	b.n	800d834 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1f2      	bne.n	800d81a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d834:	88fb      	ldrh	r3, [r7, #6]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <udp_bind+0x72>
    port = udp_new_port();
 800d83a:	f7ff fc35 	bl	800d0a8 <udp_new_port>
 800d83e:	4603      	mov	r3, r0
 800d840:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d842:	88fb      	ldrh	r3, [r7, #6]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d12c      	bne.n	800d8a2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d848:	f06f 0307 	mvn.w	r3, #7
 800d84c:	e040      	b.n	800d8d0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d84e:	4b26      	ldr	r3, [pc, #152]	; (800d8e8 <udp_bind+0x10c>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	e022      	b.n	800d89c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d01b      	beq.n	800d896 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	8a5b      	ldrh	r3, [r3, #18]
 800d862:	88fa      	ldrh	r2, [r7, #6]
 800d864:	429a      	cmp	r2, r3
 800d866:	d116      	bne.n	800d896 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d870:	429a      	cmp	r2, r3
 800d872:	d00d      	beq.n	800d890 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00a      	beq.n	800d890 <udp_bind+0xb4>
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d006      	beq.n	800d890 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d882:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d102      	bne.n	800d896 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d890:	f06f 0307 	mvn.w	r3, #7
 800d894:	e01c      	b.n	800d8d0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1d9      	bne.n	800d856 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <udp_bind+0xd2>
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	e000      	b.n	800d8b0 <udp_bind+0xd4>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	88fa      	ldrh	r2, [r7, #6]
 800d8b8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d8ba:	7cfb      	ldrb	r3, [r7, #19]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d8c0:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <udp_bind+0x10c>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d8c8:	4a07      	ldr	r2, [pc, #28]	; (800d8e8 <udp_bind+0x10c>)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3718      	adds	r7, #24
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	080148ac 	.word	0x080148ac
 800d8dc:	08013918 	.word	0x08013918
 800d8e0:	08013be0 	.word	0x08013be0
 800d8e4:	0801396c 	.word	0x0801396c
 800d8e8:	20006d10 	.word	0x20006d10

0800d8ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d109      	bne.n	800d914 <udp_connect+0x28>
 800d900:	4b2c      	ldr	r3, [pc, #176]	; (800d9b4 <udp_connect+0xc8>)
 800d902:	f240 4235 	movw	r2, #1077	; 0x435
 800d906:	492c      	ldr	r1, [pc, #176]	; (800d9b8 <udp_connect+0xcc>)
 800d908:	482c      	ldr	r0, [pc, #176]	; (800d9bc <udp_connect+0xd0>)
 800d90a:	f002 fc51 	bl	80101b0 <iprintf>
 800d90e:	f06f 030f 	mvn.w	r3, #15
 800d912:	e04b      	b.n	800d9ac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <udp_connect+0x42>
 800d91a:	4b26      	ldr	r3, [pc, #152]	; (800d9b4 <udp_connect+0xc8>)
 800d91c:	f240 4236 	movw	r2, #1078	; 0x436
 800d920:	4927      	ldr	r1, [pc, #156]	; (800d9c0 <udp_connect+0xd4>)
 800d922:	4826      	ldr	r0, [pc, #152]	; (800d9bc <udp_connect+0xd0>)
 800d924:	f002 fc44 	bl	80101b0 <iprintf>
 800d928:	f06f 030f 	mvn.w	r3, #15
 800d92c:	e03e      	b.n	800d9ac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	8a5b      	ldrh	r3, [r3, #18]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10f      	bne.n	800d956 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d936:	68f9      	ldr	r1, [r7, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	8a5b      	ldrh	r3, [r3, #18]
 800d93c:	461a      	mov	r2, r3
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7ff ff4c 	bl	800d7dc <udp_bind>
 800d944:	4603      	mov	r3, r0
 800d946:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <udp_connect+0x6a>
      return err;
 800d950:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d954:	e02a      	b.n	800d9ac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <udp_connect+0x76>
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	e000      	b.n	800d964 <udp_connect+0x78>
 800d962:	2300      	movs	r3, #0
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	88fa      	ldrh	r2, [r7, #6]
 800d96c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	7c1b      	ldrb	r3, [r3, #16]
 800d972:	f043 0304 	orr.w	r3, r3, #4
 800d976:	b2da      	uxtb	r2, r3
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d97c:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <udp_connect+0xd8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	617b      	str	r3, [r7, #20]
 800d982:	e008      	b.n	800d996 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d101      	bne.n	800d990 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	e00d      	b.n	800d9ac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	617b      	str	r3, [r7, #20]
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1f3      	bne.n	800d984 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d99c:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <udp_connect+0xd8>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d9a4:	4a07      	ldr	r2, [pc, #28]	; (800d9c4 <udp_connect+0xd8>)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	08013918 	.word	0x08013918
 800d9b8:	08013bf8 	.word	0x08013bf8
 800d9bc:	0801396c 	.word	0x0801396c
 800d9c0:	08013c14 	.word	0x08013c14
 800d9c4:	20006d10 	.word	0x20006d10

0800d9c8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d107      	bne.n	800d9e6 <udp_disconnect+0x1e>
 800d9d6:	4b0d      	ldr	r3, [pc, #52]	; (800da0c <udp_disconnect+0x44>)
 800d9d8:	f240 426a 	movw	r2, #1130	; 0x46a
 800d9dc:	490c      	ldr	r1, [pc, #48]	; (800da10 <udp_disconnect+0x48>)
 800d9de:	480d      	ldr	r0, [pc, #52]	; (800da14 <udp_disconnect+0x4c>)
 800d9e0:	f002 fbe6 	bl	80101b0 <iprintf>
 800d9e4:	e00f      	b.n	800da06 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	7c1b      	ldrb	r3, [r3, #16]
 800d9fc:	f023 0304 	bic.w	r3, r3, #4
 800da00:	b2da      	uxtb	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	741a      	strb	r2, [r3, #16]
}
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	08013918 	.word	0x08013918
 800da10:	08013c30 	.word	0x08013c30
 800da14:	0801396c 	.word	0x0801396c

0800da18 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d107      	bne.n	800da3a <udp_recv+0x22>
 800da2a:	4b08      	ldr	r3, [pc, #32]	; (800da4c <udp_recv+0x34>)
 800da2c:	f240 428a 	movw	r2, #1162	; 0x48a
 800da30:	4907      	ldr	r1, [pc, #28]	; (800da50 <udp_recv+0x38>)
 800da32:	4808      	ldr	r0, [pc, #32]	; (800da54 <udp_recv+0x3c>)
 800da34:	f002 fbbc 	bl	80101b0 <iprintf>
 800da38:	e005      	b.n	800da46 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	61da      	str	r2, [r3, #28]
}
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	08013918 	.word	0x08013918
 800da50:	08013c4c 	.word	0x08013c4c
 800da54:	0801396c 	.word	0x0801396c

0800da58 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d107      	bne.n	800da76 <udp_remove+0x1e>
 800da66:	4b19      	ldr	r3, [pc, #100]	; (800dacc <udp_remove+0x74>)
 800da68:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800da6c:	4918      	ldr	r1, [pc, #96]	; (800dad0 <udp_remove+0x78>)
 800da6e:	4819      	ldr	r0, [pc, #100]	; (800dad4 <udp_remove+0x7c>)
 800da70:	f002 fb9e 	bl	80101b0 <iprintf>
 800da74:	e026      	b.n	800dac4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da76:	4b18      	ldr	r3, [pc, #96]	; (800dad8 <udp_remove+0x80>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d105      	bne.n	800da8c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da80:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <udp_remove+0x80>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	4a14      	ldr	r2, [pc, #80]	; (800dad8 <udp_remove+0x80>)
 800da88:	6013      	str	r3, [r2, #0]
 800da8a:	e017      	b.n	800dabc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da8c:	4b12      	ldr	r3, [pc, #72]	; (800dad8 <udp_remove+0x80>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e010      	b.n	800dab6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d009      	beq.n	800dab0 <udp_remove+0x58>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d104      	bne.n	800dab0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68da      	ldr	r2, [r3, #12]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	60da      	str	r2, [r3, #12]
        break;
 800daae:	e005      	b.n	800dabc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1eb      	bne.n	800da94 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	2000      	movs	r0, #0
 800dac0:	f7f8 f888 	bl	8005bd4 <memp_free>
}
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08013918 	.word	0x08013918
 800dad0:	08013c64 	.word	0x08013c64
 800dad4:	0801396c 	.word	0x0801396c
 800dad8:	20006d10 	.word	0x20006d10

0800dadc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dae2:	2000      	movs	r0, #0
 800dae4:	f7f8 f82a 	bl	8005b3c <memp_malloc>
 800dae8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800daf0:	2220      	movs	r2, #32
 800daf2:	2100      	movs	r1, #0
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f002 fb53 	bl	80101a0 <memset>
    pcb->ttl = UDP_TTL;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	22ff      	movs	r2, #255	; 0xff
 800dafe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800db00:	687b      	ldr	r3, [r7, #4]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d01e      	beq.n	800db5a <udp_netif_ip_addr_changed+0x4e>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01a      	beq.n	800db5a <udp_netif_ip_addr_changed+0x4e>
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d017      	beq.n	800db5a <udp_netif_ip_addr_changed+0x4e>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d013      	beq.n	800db5a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db32:	4b0d      	ldr	r3, [pc, #52]	; (800db68 <udp_netif_ip_addr_changed+0x5c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]
 800db38:	e00c      	b.n	800db54 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d103      	bne.n	800db4e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1ef      	bne.n	800db3a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800db5a:	bf00      	nop
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	20006d10 	.word	0x20006d10

0800db6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800db74:	4915      	ldr	r1, [pc, #84]	; (800dbcc <etharp_free_entry+0x60>)
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	4613      	mov	r3, r2
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4413      	add	r3, r2
 800db7e:	00db      	lsls	r3, r3, #3
 800db80:	440b      	add	r3, r1
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d013      	beq.n	800dbb0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800db88:	4910      	ldr	r1, [pc, #64]	; (800dbcc <etharp_free_entry+0x60>)
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	4613      	mov	r3, r2
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	4413      	add	r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	440b      	add	r3, r1
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f7f8 fe2d 	bl	80067f8 <pbuf_free>
    arp_table[i].q = NULL;
 800db9e:	490b      	ldr	r1, [pc, #44]	; (800dbcc <etharp_free_entry+0x60>)
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	4613      	mov	r3, r2
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	4413      	add	r3, r2
 800dba8:	00db      	lsls	r3, r3, #3
 800dbaa:	440b      	add	r3, r1
 800dbac:	2200      	movs	r2, #0
 800dbae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dbb0:	4906      	ldr	r1, [pc, #24]	; (800dbcc <etharp_free_entry+0x60>)
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	4413      	add	r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	440b      	add	r3, r1
 800dbbe:	3314      	adds	r3, #20
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	20000570 	.word	0x20000570

0800dbd0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	e096      	b.n	800dd0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800dbdc:	494f      	ldr	r1, [pc, #316]	; (800dd1c <etharp_tmr+0x14c>)
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	440b      	add	r3, r1
 800dbea:	3314      	adds	r3, #20
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800dbf0:	78fb      	ldrb	r3, [r7, #3]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 8086 	beq.w	800dd04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800dbf8:	4948      	ldr	r1, [pc, #288]	; (800dd1c <etharp_tmr+0x14c>)
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	005b      	lsls	r3, r3, #1
 800dc00:	4413      	add	r3, r2
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	440b      	add	r3, r1
 800dc06:	3312      	adds	r3, #18
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	b298      	uxth	r0, r3
 800dc0e:	4943      	ldr	r1, [pc, #268]	; (800dd1c <etharp_tmr+0x14c>)
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	005b      	lsls	r3, r3, #1
 800dc16:	4413      	add	r3, r2
 800dc18:	00db      	lsls	r3, r3, #3
 800dc1a:	440b      	add	r3, r1
 800dc1c:	3312      	adds	r3, #18
 800dc1e:	4602      	mov	r2, r0
 800dc20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc22:	493e      	ldr	r1, [pc, #248]	; (800dd1c <etharp_tmr+0x14c>)
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	4613      	mov	r3, r2
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	4413      	add	r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	440b      	add	r3, r1
 800dc30:	3312      	adds	r3, #18
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dc38:	d215      	bcs.n	800dc66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc3a:	4938      	ldr	r1, [pc, #224]	; (800dd1c <etharp_tmr+0x14c>)
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	4413      	add	r3, r2
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	440b      	add	r3, r1
 800dc48:	3314      	adds	r3, #20
 800dc4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d10e      	bne.n	800dc6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dc50:	4932      	ldr	r1, [pc, #200]	; (800dd1c <etharp_tmr+0x14c>)
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	440b      	add	r3, r1
 800dc5e:	3312      	adds	r3, #18
 800dc60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dc62:	2b04      	cmp	r3, #4
 800dc64:	d903      	bls.n	800dc6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff ff80 	bl	800db6c <etharp_free_entry>
 800dc6c:	e04a      	b.n	800dd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dc6e:	492b      	ldr	r1, [pc, #172]	; (800dd1c <etharp_tmr+0x14c>)
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d10a      	bne.n	800dc9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dc84:	4925      	ldr	r1, [pc, #148]	; (800dd1c <etharp_tmr+0x14c>)
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	440b      	add	r3, r1
 800dc92:	3314      	adds	r3, #20
 800dc94:	2204      	movs	r2, #4
 800dc96:	701a      	strb	r2, [r3, #0]
 800dc98:	e034      	b.n	800dd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dc9a:	4920      	ldr	r1, [pc, #128]	; (800dd1c <etharp_tmr+0x14c>)
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	4413      	add	r3, r2
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	440b      	add	r3, r1
 800dca8:	3314      	adds	r3, #20
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b04      	cmp	r3, #4
 800dcae:	d10a      	bne.n	800dcc6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dcb0:	491a      	ldr	r1, [pc, #104]	; (800dd1c <etharp_tmr+0x14c>)
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	4413      	add	r3, r2
 800dcba:	00db      	lsls	r3, r3, #3
 800dcbc:	440b      	add	r3, r1
 800dcbe:	3314      	adds	r3, #20
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	e01e      	b.n	800dd04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dcc6:	4915      	ldr	r1, [pc, #84]	; (800dd1c <etharp_tmr+0x14c>)
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	4613      	mov	r3, r2
 800dccc:	005b      	lsls	r3, r3, #1
 800dcce:	4413      	add	r3, r2
 800dcd0:	00db      	lsls	r3, r3, #3
 800dcd2:	440b      	add	r3, r1
 800dcd4:	3314      	adds	r3, #20
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d113      	bne.n	800dd04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dcdc:	490f      	ldr	r1, [pc, #60]	; (800dd1c <etharp_tmr+0x14c>)
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4613      	mov	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	4413      	add	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	440b      	add	r3, r1
 800dcea:	3308      	adds	r3, #8
 800dcec:	6818      	ldr	r0, [r3, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	4413      	add	r3, r2
 800dcf6:	00db      	lsls	r3, r3, #3
 800dcf8:	4a08      	ldr	r2, [pc, #32]	; (800dd1c <etharp_tmr+0x14c>)
 800dcfa:	4413      	add	r3, r2
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f000 fe6e 	bl	800e9e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3301      	adds	r3, #1
 800dd08:	607b      	str	r3, [r7, #4]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b09      	cmp	r3, #9
 800dd0e:	f77f af65 	ble.w	800dbdc <etharp_tmr+0xc>
      }
    }
  }
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20000570 	.word	0x20000570

0800dd20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08a      	sub	sp, #40	; 0x28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dd2e:	230a      	movs	r3, #10
 800dd30:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dd32:	230a      	movs	r3, #10
 800dd34:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dd36:	230a      	movs	r3, #10
 800dd38:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dd3e:	230a      	movs	r3, #10
 800dd40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	83bb      	strh	r3, [r7, #28]
 800dd46:	2300      	movs	r3, #0
 800dd48:	837b      	strh	r3, [r7, #26]
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dd4e:	2300      	movs	r3, #0
 800dd50:	843b      	strh	r3, [r7, #32]
 800dd52:	e0ae      	b.n	800deb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dd54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd58:	49a6      	ldr	r1, [pc, #664]	; (800dff4 <etharp_find_entry+0x2d4>)
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	4413      	add	r3, r2
 800dd60:	00db      	lsls	r3, r3, #3
 800dd62:	440b      	add	r3, r1
 800dd64:	3314      	adds	r3, #20
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dd6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dd6e:	2b0a      	cmp	r3, #10
 800dd70:	d105      	bne.n	800dd7e <etharp_find_entry+0x5e>
 800dd72:	7dfb      	ldrb	r3, [r7, #23]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dd78:	8c3b      	ldrh	r3, [r7, #32]
 800dd7a:	847b      	strh	r3, [r7, #34]	; 0x22
 800dd7c:	e095      	b.n	800deaa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 8092 	beq.w	800deaa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d009      	beq.n	800dda0 <etharp_find_entry+0x80>
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d806      	bhi.n	800dda0 <etharp_find_entry+0x80>
 800dd92:	4b99      	ldr	r3, [pc, #612]	; (800dff8 <etharp_find_entry+0x2d8>)
 800dd94:	f240 1223 	movw	r2, #291	; 0x123
 800dd98:	4998      	ldr	r1, [pc, #608]	; (800dffc <etharp_find_entry+0x2dc>)
 800dd9a:	4899      	ldr	r0, [pc, #612]	; (800e000 <etharp_find_entry+0x2e0>)
 800dd9c:	f002 fa08 	bl	80101b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d020      	beq.n	800dde8 <etharp_find_entry+0xc8>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6819      	ldr	r1, [r3, #0]
 800ddaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddae:	4891      	ldr	r0, [pc, #580]	; (800dff4 <etharp_find_entry+0x2d4>)
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	4413      	add	r3, r2
 800ddb6:	00db      	lsls	r3, r3, #3
 800ddb8:	4403      	add	r3, r0
 800ddba:	3304      	adds	r3, #4
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4299      	cmp	r1, r3
 800ddc0:	d112      	bne.n	800dde8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <etharp_find_entry+0xc2>
 800ddc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddcc:	4989      	ldr	r1, [pc, #548]	; (800dff4 <etharp_find_entry+0x2d4>)
 800ddce:	4613      	mov	r3, r2
 800ddd0:	005b      	lsls	r3, r3, #1
 800ddd2:	4413      	add	r3, r2
 800ddd4:	00db      	lsls	r3, r3, #3
 800ddd6:	440b      	add	r3, r1
 800ddd8:	3308      	adds	r3, #8
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d102      	bne.n	800dde8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dde2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dde6:	e100      	b.n	800dfea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d140      	bne.n	800de70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ddee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddf2:	4980      	ldr	r1, [pc, #512]	; (800dff4 <etharp_find_entry+0x2d4>)
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	005b      	lsls	r3, r3, #1
 800ddf8:	4413      	add	r3, r2
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	440b      	add	r3, r1
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01a      	beq.n	800de3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800de04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de08:	497a      	ldr	r1, [pc, #488]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de0a:	4613      	mov	r3, r2
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	4413      	add	r3, r2
 800de10:	00db      	lsls	r3, r3, #3
 800de12:	440b      	add	r3, r1
 800de14:	3312      	adds	r3, #18
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	8bba      	ldrh	r2, [r7, #28]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d845      	bhi.n	800deaa <etharp_find_entry+0x18a>
            old_queue = i;
 800de1e:	8c3b      	ldrh	r3, [r7, #32]
 800de20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800de22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de26:	4973      	ldr	r1, [pc, #460]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de28:	4613      	mov	r3, r2
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	4413      	add	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	440b      	add	r3, r1
 800de32:	3312      	adds	r3, #18
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	83bb      	strh	r3, [r7, #28]
 800de38:	e037      	b.n	800deaa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800de3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de3e:	496d      	ldr	r1, [pc, #436]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de40:	4613      	mov	r3, r2
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	4413      	add	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	440b      	add	r3, r1
 800de4a:	3312      	adds	r3, #18
 800de4c:	881b      	ldrh	r3, [r3, #0]
 800de4e:	8b7a      	ldrh	r2, [r7, #26]
 800de50:	429a      	cmp	r2, r3
 800de52:	d82a      	bhi.n	800deaa <etharp_find_entry+0x18a>
            old_pending = i;
 800de54:	8c3b      	ldrh	r3, [r7, #32]
 800de56:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800de58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de5c:	4965      	ldr	r1, [pc, #404]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	440b      	add	r3, r1
 800de68:	3312      	adds	r3, #18
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	837b      	strh	r3, [r7, #26]
 800de6e:	e01c      	b.n	800deaa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800de70:	7dfb      	ldrb	r3, [r7, #23]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d919      	bls.n	800deaa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800de76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de7a:	495e      	ldr	r1, [pc, #376]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de7c:	4613      	mov	r3, r2
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	4413      	add	r3, r2
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	440b      	add	r3, r1
 800de86:	3312      	adds	r3, #18
 800de88:	881b      	ldrh	r3, [r3, #0]
 800de8a:	8b3a      	ldrh	r2, [r7, #24]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d80c      	bhi.n	800deaa <etharp_find_entry+0x18a>
            old_stable = i;
 800de90:	8c3b      	ldrh	r3, [r7, #32]
 800de92:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800de94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de98:	4956      	ldr	r1, [pc, #344]	; (800dff4 <etharp_find_entry+0x2d4>)
 800de9a:	4613      	mov	r3, r2
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	440b      	add	r3, r1
 800dea4:	3312      	adds	r3, #18
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800deaa:	8c3b      	ldrh	r3, [r7, #32]
 800deac:	3301      	adds	r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	843b      	strh	r3, [r7, #32]
 800deb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800deb6:	2b09      	cmp	r3, #9
 800deb8:	f77f af4c 	ble.w	800dd54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800debc:	7afb      	ldrb	r3, [r7, #11]
 800debe:	f003 0302 	and.w	r3, r3, #2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d108      	bne.n	800ded8 <etharp_find_entry+0x1b8>
 800dec6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800deca:	2b0a      	cmp	r3, #10
 800decc:	d107      	bne.n	800dede <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dece:	7afb      	ldrb	r3, [r7, #11]
 800ded0:	f003 0301 	and.w	r3, r3, #1
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d102      	bne.n	800dede <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295
 800dedc:	e085      	b.n	800dfea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dee2:	2b09      	cmp	r3, #9
 800dee4:	dc02      	bgt.n	800deec <etharp_find_entry+0x1cc>
    i = empty;
 800dee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dee8:	843b      	strh	r3, [r7, #32]
 800deea:	e039      	b.n	800df60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800deec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800def0:	2b09      	cmp	r3, #9
 800def2:	dc14      	bgt.n	800df1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800def4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800def6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800def8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800defc:	493d      	ldr	r1, [pc, #244]	; (800dff4 <etharp_find_entry+0x2d4>)
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	440b      	add	r3, r1
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d018      	beq.n	800df40 <etharp_find_entry+0x220>
 800df0e:	4b3a      	ldr	r3, [pc, #232]	; (800dff8 <etharp_find_entry+0x2d8>)
 800df10:	f240 126d 	movw	r2, #365	; 0x16d
 800df14:	493b      	ldr	r1, [pc, #236]	; (800e004 <etharp_find_entry+0x2e4>)
 800df16:	483a      	ldr	r0, [pc, #232]	; (800e000 <etharp_find_entry+0x2e0>)
 800df18:	f002 f94a 	bl	80101b0 <iprintf>
 800df1c:	e010      	b.n	800df40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800df1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800df22:	2b09      	cmp	r3, #9
 800df24:	dc02      	bgt.n	800df2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800df26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df28:	843b      	strh	r3, [r7, #32]
 800df2a:	e009      	b.n	800df40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800df2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800df30:	2b09      	cmp	r3, #9
 800df32:	dc02      	bgt.n	800df3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800df34:	8bfb      	ldrh	r3, [r7, #30]
 800df36:	843b      	strh	r3, [r7, #32]
 800df38:	e002      	b.n	800df40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800df3a:	f04f 33ff 	mov.w	r3, #4294967295
 800df3e:	e054      	b.n	800dfea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df44:	2b09      	cmp	r3, #9
 800df46:	dd06      	ble.n	800df56 <etharp_find_entry+0x236>
 800df48:	4b2b      	ldr	r3, [pc, #172]	; (800dff8 <etharp_find_entry+0x2d8>)
 800df4a:	f240 127f 	movw	r2, #383	; 0x17f
 800df4e:	492e      	ldr	r1, [pc, #184]	; (800e008 <etharp_find_entry+0x2e8>)
 800df50:	482b      	ldr	r0, [pc, #172]	; (800e000 <etharp_find_entry+0x2e0>)
 800df52:	f002 f92d 	bl	80101b0 <iprintf>
    etharp_free_entry(i);
 800df56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fe06 	bl	800db6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800df60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800df64:	2b09      	cmp	r3, #9
 800df66:	dd06      	ble.n	800df76 <etharp_find_entry+0x256>
 800df68:	4b23      	ldr	r3, [pc, #140]	; (800dff8 <etharp_find_entry+0x2d8>)
 800df6a:	f240 1283 	movw	r2, #387	; 0x183
 800df6e:	4926      	ldr	r1, [pc, #152]	; (800e008 <etharp_find_entry+0x2e8>)
 800df70:	4823      	ldr	r0, [pc, #140]	; (800e000 <etharp_find_entry+0x2e0>)
 800df72:	f002 f91d 	bl	80101b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800df76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df7a:	491e      	ldr	r1, [pc, #120]	; (800dff4 <etharp_find_entry+0x2d4>)
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	440b      	add	r3, r1
 800df86:	3314      	adds	r3, #20
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d006      	beq.n	800df9c <etharp_find_entry+0x27c>
 800df8e:	4b1a      	ldr	r3, [pc, #104]	; (800dff8 <etharp_find_entry+0x2d8>)
 800df90:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800df94:	491d      	ldr	r1, [pc, #116]	; (800e00c <etharp_find_entry+0x2ec>)
 800df96:	481a      	ldr	r0, [pc, #104]	; (800e000 <etharp_find_entry+0x2e0>)
 800df98:	f002 f90a 	bl	80101b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00b      	beq.n	800dfba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dfa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6819      	ldr	r1, [r3, #0]
 800dfaa:	4812      	ldr	r0, [pc, #72]	; (800dff4 <etharp_find_entry+0x2d4>)
 800dfac:	4613      	mov	r3, r2
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	4413      	add	r3, r2
 800dfb2:	00db      	lsls	r3, r3, #3
 800dfb4:	4403      	add	r3, r0
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dfba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfbe:	490d      	ldr	r1, [pc, #52]	; (800dff4 <etharp_find_entry+0x2d4>)
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	005b      	lsls	r3, r3, #1
 800dfc4:	4413      	add	r3, r2
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	440b      	add	r3, r1
 800dfca:	3312      	adds	r3, #18
 800dfcc:	2200      	movs	r2, #0
 800dfce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dfd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfd4:	4907      	ldr	r1, [pc, #28]	; (800dff4 <etharp_find_entry+0x2d4>)
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	4413      	add	r3, r2
 800dfdc:	00db      	lsls	r3, r3, #3
 800dfde:	440b      	add	r3, r1
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800dfe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3728      	adds	r7, #40	; 0x28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000570 	.word	0x20000570
 800dff8:	08013c7c 	.word	0x08013c7c
 800dffc:	08013cb4 	.word	0x08013cb4
 800e000:	08013cf4 	.word	0x08013cf4
 800e004:	08013d1c 	.word	0x08013d1c
 800e008:	08013d34 	.word	0x08013d34
 800e00c:	08013d48 	.word	0x08013d48

0800e010 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af02      	add	r7, sp, #8
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
 800e01c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e024:	2b06      	cmp	r3, #6
 800e026:	d006      	beq.n	800e036 <etharp_update_arp_entry+0x26>
 800e028:	4b48      	ldr	r3, [pc, #288]	; (800e14c <etharp_update_arp_entry+0x13c>)
 800e02a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e02e:	4948      	ldr	r1, [pc, #288]	; (800e150 <etharp_update_arp_entry+0x140>)
 800e030:	4848      	ldr	r0, [pc, #288]	; (800e154 <etharp_update_arp_entry+0x144>)
 800e032:	f002 f8bd 	bl	80101b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d012      	beq.n	800e062 <etharp_update_arp_entry+0x52>
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00e      	beq.n	800e062 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68f9      	ldr	r1, [r7, #12]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f001 f8fe 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800e050:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e052:	2b00      	cmp	r3, #0
 800e054:	d105      	bne.n	800e062 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e05e:	2be0      	cmp	r3, #224	; 0xe0
 800e060:	d102      	bne.n	800e068 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e062:	f06f 030f 	mvn.w	r3, #15
 800e066:	e06c      	b.n	800e142 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	4619      	mov	r1, r3
 800e06e:	68b8      	ldr	r0, [r7, #8]
 800e070:	f7ff fe56 	bl	800dd20 <etharp_find_entry>
 800e074:	4603      	mov	r3, r0
 800e076:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e078:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da02      	bge.n	800e086 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e080:	8afb      	ldrh	r3, [r7, #22]
 800e082:	b25b      	sxtb	r3, r3
 800e084:	e05d      	b.n	800e142 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e086:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e08a:	4933      	ldr	r1, [pc, #204]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e08c:	4613      	mov	r3, r2
 800e08e:	005b      	lsls	r3, r3, #1
 800e090:	4413      	add	r3, r2
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	440b      	add	r3, r1
 800e096:	3314      	adds	r3, #20
 800e098:	2202      	movs	r2, #2
 800e09a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e09c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0a0:	492d      	ldr	r1, [pc, #180]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	4413      	add	r3, r2
 800e0a8:	00db      	lsls	r3, r3, #3
 800e0aa:	440b      	add	r3, r1
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e0b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	4413      	add	r3, r2
 800e0bc:	00db      	lsls	r3, r3, #3
 800e0be:	3308      	adds	r3, #8
 800e0c0:	4a25      	ldr	r2, [pc, #148]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e0c2:	4413      	add	r3, r2
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	2206      	movs	r2, #6
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f002 f840 	bl	8010150 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e0d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0d4:	4920      	ldr	r1, [pc, #128]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	4413      	add	r3, r2
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	440b      	add	r3, r1
 800e0e0:	3312      	adds	r3, #18
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e0e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e0ea:	491b      	ldr	r1, [pc, #108]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	4413      	add	r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	440b      	add	r3, r1
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d021      	beq.n	800e140 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e0fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e100:	4915      	ldr	r1, [pc, #84]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e102:	4613      	mov	r3, r2
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	4413      	add	r3, r2
 800e108:	00db      	lsls	r3, r3, #3
 800e10a:	440b      	add	r3, r1
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e110:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e114:	4910      	ldr	r1, [pc, #64]	; (800e158 <etharp_update_arp_entry+0x148>)
 800e116:	4613      	mov	r3, r2
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	4413      	add	r3, r2
 800e11c:	00db      	lsls	r3, r3, #3
 800e11e:	440b      	add	r3, r1
 800e120:	2200      	movs	r2, #0
 800e122:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e12a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6939      	ldr	r1, [r7, #16]
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f001 ff91 	bl	801005c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e13a:	6938      	ldr	r0, [r7, #16]
 800e13c:	f7f8 fb5c 	bl	80067f8 <pbuf_free>
  }
  return ERR_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08013c7c 	.word	0x08013c7c
 800e150:	08013d74 	.word	0x08013d74
 800e154:	08013cf4 	.word	0x08013cf4
 800e158:	20000570 	.word	0x20000570

0800e15c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e164:	2300      	movs	r3, #0
 800e166:	60fb      	str	r3, [r7, #12]
 800e168:	e01e      	b.n	800e1a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e16a:	4913      	ldr	r1, [pc, #76]	; (800e1b8 <etharp_cleanup_netif+0x5c>)
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	4613      	mov	r3, r2
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	4413      	add	r3, r2
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	440b      	add	r3, r1
 800e178:	3314      	adds	r3, #20
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e17e:	7afb      	ldrb	r3, [r7, #11]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00e      	beq.n	800e1a2 <etharp_cleanup_netif+0x46>
 800e184:	490c      	ldr	r1, [pc, #48]	; (800e1b8 <etharp_cleanup_netif+0x5c>)
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	4613      	mov	r3, r2
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	4413      	add	r3, r2
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	440b      	add	r3, r1
 800e192:	3308      	adds	r3, #8
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d102      	bne.n	800e1a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff fce5 	bl	800db6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b09      	cmp	r3, #9
 800e1ac:	dddd      	ble.n	800e16a <etharp_cleanup_netif+0xe>
    }
  }
}
 800e1ae:	bf00      	nop
 800e1b0:	bf00      	nop
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20000570 	.word	0x20000570

0800e1bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e1bc:	b5b0      	push	{r4, r5, r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af04      	add	r7, sp, #16
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d107      	bne.n	800e1dc <etharp_input+0x20>
 800e1cc:	4b3d      	ldr	r3, [pc, #244]	; (800e2c4 <etharp_input+0x108>)
 800e1ce:	f240 228a 	movw	r2, #650	; 0x28a
 800e1d2:	493d      	ldr	r1, [pc, #244]	; (800e2c8 <etharp_input+0x10c>)
 800e1d4:	483d      	ldr	r0, [pc, #244]	; (800e2cc <etharp_input+0x110>)
 800e1d6:	f001 ffeb 	bl	80101b0 <iprintf>
 800e1da:	e06f      	b.n	800e2bc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ec:	d10c      	bne.n	800e208 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e1f2:	2b06      	cmp	r3, #6
 800e1f4:	d108      	bne.n	800e208 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e1fa:	2b04      	cmp	r3, #4
 800e1fc:	d104      	bne.n	800e208 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	885b      	ldrh	r3, [r3, #2]
 800e202:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e204:	2b08      	cmp	r3, #8
 800e206:	d003      	beq.n	800e210 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7f8 faf5 	bl	80067f8 <pbuf_free>
    return;
 800e20e:	e055      	b.n	800e2bc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	330e      	adds	r3, #14
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	3318      	adds	r3, #24
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	3304      	adds	r3, #4
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d102      	bne.n	800e230 <etharp_input+0x74>
    for_us = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	75fb      	strb	r3, [r7, #23]
 800e22e:	e009      	b.n	800e244 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	3304      	adds	r3, #4
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	429a      	cmp	r2, r3
 800e23a:	bf0c      	ite	eq
 800e23c:	2301      	moveq	r3, #1
 800e23e:	2300      	movne	r3, #0
 800e240:	b2db      	uxtb	r3, r3
 800e242:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	f103 0208 	add.w	r2, r3, #8
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d001      	beq.n	800e254 <etharp_input+0x98>
 800e250:	2301      	movs	r3, #1
 800e252:	e000      	b.n	800e256 <etharp_input+0x9a>
 800e254:	2302      	movs	r3, #2
 800e256:	f107 010c 	add.w	r1, r7, #12
 800e25a:	6838      	ldr	r0, [r7, #0]
 800e25c:	f7ff fed8 	bl	800e010 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	88db      	ldrh	r3, [r3, #6]
 800e264:	b29b      	uxth	r3, r3
 800e266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e26a:	d003      	beq.n	800e274 <etharp_input+0xb8>
 800e26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e270:	d01e      	beq.n	800e2b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e272:	e020      	b.n	800e2b6 <etharp_input+0xfa>
      if (for_us) {
 800e274:	7dfb      	ldrb	r3, [r7, #23]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d01c      	beq.n	800e2b4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e294:	2102      	movs	r1, #2
 800e296:	9103      	str	r1, [sp, #12]
 800e298:	f107 010c 	add.w	r1, r7, #12
 800e29c:	9102      	str	r1, [sp, #8]
 800e29e:	9201      	str	r2, [sp, #4]
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	4601      	mov	r1, r0
 800e2a8:	6838      	ldr	r0, [r7, #0]
 800e2aa:	f000 faeb 	bl	800e884 <etharp_raw>
      break;
 800e2ae:	e001      	b.n	800e2b4 <etharp_input+0xf8>
      break;
 800e2b0:	bf00      	nop
 800e2b2:	e000      	b.n	800e2b6 <etharp_input+0xfa>
      break;
 800e2b4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7f8 fa9e 	bl	80067f8 <pbuf_free>
}
 800e2bc:	3718      	adds	r7, #24
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	08013c7c 	.word	0x08013c7c
 800e2c8:	08013dcc 	.word	0x08013dcc
 800e2cc:	08013cf4 	.word	0x08013cf4

0800e2d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af02      	add	r7, sp, #8
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e2de:	79fa      	ldrb	r2, [r7, #7]
 800e2e0:	4944      	ldr	r1, [pc, #272]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
 800e2e8:	00db      	lsls	r3, r3, #3
 800e2ea:	440b      	add	r3, r1
 800e2ec:	3314      	adds	r3, #20
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d806      	bhi.n	800e302 <etharp_output_to_arp_index+0x32>
 800e2f4:	4b40      	ldr	r3, [pc, #256]	; (800e3f8 <etharp_output_to_arp_index+0x128>)
 800e2f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e2fa:	4940      	ldr	r1, [pc, #256]	; (800e3fc <etharp_output_to_arp_index+0x12c>)
 800e2fc:	4840      	ldr	r0, [pc, #256]	; (800e400 <etharp_output_to_arp_index+0x130>)
 800e2fe:	f001 ff57 	bl	80101b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e302:	79fa      	ldrb	r2, [r7, #7]
 800e304:	493b      	ldr	r1, [pc, #236]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e306:	4613      	mov	r3, r2
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	4413      	add	r3, r2
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	440b      	add	r3, r1
 800e310:	3314      	adds	r3, #20
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b02      	cmp	r3, #2
 800e316:	d153      	bne.n	800e3c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e318:	79fa      	ldrb	r2, [r7, #7]
 800e31a:	4936      	ldr	r1, [pc, #216]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e31c:	4613      	mov	r3, r2
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	4413      	add	r3, r2
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	440b      	add	r3, r1
 800e326:	3312      	adds	r3, #18
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e32e:	d919      	bls.n	800e364 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e330:	79fa      	ldrb	r2, [r7, #7]
 800e332:	4613      	mov	r3, r2
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4413      	add	r3, r2
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	4a2e      	ldr	r2, [pc, #184]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e33c:	4413      	add	r3, r2
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 fb4c 	bl	800e9e0 <etharp_request>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d138      	bne.n	800e3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e34e:	79fa      	ldrb	r2, [r7, #7]
 800e350:	4928      	ldr	r1, [pc, #160]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e352:	4613      	mov	r3, r2
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	4413      	add	r3, r2
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	440b      	add	r3, r1
 800e35c:	3314      	adds	r3, #20
 800e35e:	2203      	movs	r2, #3
 800e360:	701a      	strb	r2, [r3, #0]
 800e362:	e02d      	b.n	800e3c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e364:	79fa      	ldrb	r2, [r7, #7]
 800e366:	4923      	ldr	r1, [pc, #140]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e368:	4613      	mov	r3, r2
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	4413      	add	r3, r2
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	440b      	add	r3, r1
 800e372:	3312      	adds	r3, #18
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e37a:	d321      	bcc.n	800e3c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e37c:	79fa      	ldrb	r2, [r7, #7]
 800e37e:	4613      	mov	r3, r2
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	4413      	add	r3, r2
 800e384:	00db      	lsls	r3, r3, #3
 800e386:	4a1b      	ldr	r2, [pc, #108]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e388:	4413      	add	r3, r2
 800e38a:	1d19      	adds	r1, r3, #4
 800e38c:	79fa      	ldrb	r2, [r7, #7]
 800e38e:	4613      	mov	r3, r2
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	4413      	add	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	3308      	adds	r3, #8
 800e398:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e39a:	4413      	add	r3, r2
 800e39c:	3304      	adds	r3, #4
 800e39e:	461a      	mov	r2, r3
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 fafb 	bl	800e99c <etharp_request_dst>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e3ac:	79fa      	ldrb	r2, [r7, #7]
 800e3ae:	4911      	ldr	r1, [pc, #68]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	4413      	add	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	440b      	add	r3, r1
 800e3ba:	3314      	adds	r3, #20
 800e3bc:	2203      	movs	r2, #3
 800e3be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e3c6:	79fa      	ldrb	r2, [r7, #7]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	4413      	add	r3, r2
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	4a08      	ldr	r2, [pc, #32]	; (800e3f4 <etharp_output_to_arp_index+0x124>)
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3dc:	9200      	str	r2, [sp, #0]
 800e3de:	460a      	mov	r2, r1
 800e3e0:	68b9      	ldr	r1, [r7, #8]
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f001 fe3a 	bl	801005c <ethernet_output>
 800e3e8:	4603      	mov	r3, r0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	20000570 	.word	0x20000570
 800e3f8:	08013c7c 	.word	0x08013c7c
 800e3fc:	08013dec 	.word	0x08013dec
 800e400:	08013cf4 	.word	0x08013cf4

0800e404 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08a      	sub	sp, #40	; 0x28
 800e408:	af02      	add	r7, sp, #8
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d106      	bne.n	800e428 <etharp_output+0x24>
 800e41a:	4b73      	ldr	r3, [pc, #460]	; (800e5e8 <etharp_output+0x1e4>)
 800e41c:	f240 321e 	movw	r2, #798	; 0x31e
 800e420:	4972      	ldr	r1, [pc, #456]	; (800e5ec <etharp_output+0x1e8>)
 800e422:	4873      	ldr	r0, [pc, #460]	; (800e5f0 <etharp_output+0x1ec>)
 800e424:	f001 fec4 	bl	80101b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <etharp_output+0x38>
 800e42e:	4b6e      	ldr	r3, [pc, #440]	; (800e5e8 <etharp_output+0x1e4>)
 800e430:	f240 321f 	movw	r2, #799	; 0x31f
 800e434:	496f      	ldr	r1, [pc, #444]	; (800e5f4 <etharp_output+0x1f0>)
 800e436:	486e      	ldr	r0, [pc, #440]	; (800e5f0 <etharp_output+0x1ec>)
 800e438:	f001 feba 	bl	80101b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d106      	bne.n	800e450 <etharp_output+0x4c>
 800e442:	4b69      	ldr	r3, [pc, #420]	; (800e5e8 <etharp_output+0x1e4>)
 800e444:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e448:	496b      	ldr	r1, [pc, #428]	; (800e5f8 <etharp_output+0x1f4>)
 800e44a:	4869      	ldr	r0, [pc, #420]	; (800e5f0 <etharp_output+0x1ec>)
 800e44c:	f001 feb0 	bl	80101b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	68f9      	ldr	r1, [r7, #12]
 800e456:	4618      	mov	r0, r3
 800e458:	f000 fef8 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d002      	beq.n	800e468 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e462:	4b66      	ldr	r3, [pc, #408]	; (800e5fc <etharp_output+0x1f8>)
 800e464:	61fb      	str	r3, [r7, #28]
 800e466:	e0af      	b.n	800e5c8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e470:	2be0      	cmp	r3, #224	; 0xe0
 800e472:	d118      	bne.n	800e4a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e474:	2301      	movs	r3, #1
 800e476:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e478:	2300      	movs	r3, #0
 800e47a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e47c:	235e      	movs	r3, #94	; 0x5e
 800e47e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3301      	adds	r3, #1
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3302      	adds	r3, #2
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	3303      	adds	r3, #3
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e49e:	f107 0310 	add.w	r3, r7, #16
 800e4a2:	61fb      	str	r3, [r7, #28]
 800e4a4:	e090      	b.n	800e5c8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	405a      	eors	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4013      	ands	r3, r2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d012      	beq.n	800e4e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e4c4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d00b      	beq.n	800e4e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	330c      	adds	r3, #12
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	330c      	adds	r3, #12
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	e002      	b.n	800e4e4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e4de:	f06f 0303 	mvn.w	r3, #3
 800e4e2:	e07d      	b.n	800e5e0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e4e4:	4b46      	ldr	r3, [pc, #280]	; (800e600 <etharp_output+0x1fc>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4a46      	ldr	r2, [pc, #280]	; (800e604 <etharp_output+0x200>)
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	440b      	add	r3, r1
 800e4f2:	00db      	lsls	r3, r3, #3
 800e4f4:	4413      	add	r3, r2
 800e4f6:	3314      	adds	r3, #20
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d925      	bls.n	800e54a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e4fe:	4b40      	ldr	r3, [pc, #256]	; (800e600 <etharp_output+0x1fc>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	4619      	mov	r1, r3
 800e504:	4a3f      	ldr	r2, [pc, #252]	; (800e604 <etharp_output+0x200>)
 800e506:	460b      	mov	r3, r1
 800e508:	005b      	lsls	r3, r3, #1
 800e50a:	440b      	add	r3, r1
 800e50c:	00db      	lsls	r3, r3, #3
 800e50e:	4413      	add	r3, r2
 800e510:	3308      	adds	r3, #8
 800e512:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d117      	bne.n	800e54a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4b38      	ldr	r3, [pc, #224]	; (800e600 <etharp_output+0x1fc>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	4618      	mov	r0, r3
 800e524:	4937      	ldr	r1, [pc, #220]	; (800e604 <etharp_output+0x200>)
 800e526:	4603      	mov	r3, r0
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	4403      	add	r3, r0
 800e52c:	00db      	lsls	r3, r3, #3
 800e52e:	440b      	add	r3, r1
 800e530:	3304      	adds	r3, #4
 800e532:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e534:	429a      	cmp	r2, r3
 800e536:	d108      	bne.n	800e54a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e538:	4b31      	ldr	r3, [pc, #196]	; (800e600 <etharp_output+0x1fc>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	461a      	mov	r2, r3
 800e53e:	68b9      	ldr	r1, [r7, #8]
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f7ff fec5 	bl	800e2d0 <etharp_output_to_arp_index>
 800e546:	4603      	mov	r3, r0
 800e548:	e04a      	b.n	800e5e0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e54a:	2300      	movs	r3, #0
 800e54c:	75fb      	strb	r3, [r7, #23]
 800e54e:	e031      	b.n	800e5b4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e550:	7dfa      	ldrb	r2, [r7, #23]
 800e552:	492c      	ldr	r1, [pc, #176]	; (800e604 <etharp_output+0x200>)
 800e554:	4613      	mov	r3, r2
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	4413      	add	r3, r2
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	440b      	add	r3, r1
 800e55e:	3314      	adds	r3, #20
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d923      	bls.n	800e5ae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e566:	7dfa      	ldrb	r2, [r7, #23]
 800e568:	4926      	ldr	r1, [pc, #152]	; (800e604 <etharp_output+0x200>)
 800e56a:	4613      	mov	r3, r2
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	4413      	add	r3, r2
 800e570:	00db      	lsls	r3, r3, #3
 800e572:	440b      	add	r3, r1
 800e574:	3308      	adds	r3, #8
 800e576:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d117      	bne.n	800e5ae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	6819      	ldr	r1, [r3, #0]
 800e582:	7dfa      	ldrb	r2, [r7, #23]
 800e584:	481f      	ldr	r0, [pc, #124]	; (800e604 <etharp_output+0x200>)
 800e586:	4613      	mov	r3, r2
 800e588:	005b      	lsls	r3, r3, #1
 800e58a:	4413      	add	r3, r2
 800e58c:	00db      	lsls	r3, r3, #3
 800e58e:	4403      	add	r3, r0
 800e590:	3304      	adds	r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e594:	4299      	cmp	r1, r3
 800e596:	d10a      	bne.n	800e5ae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e598:	4a19      	ldr	r2, [pc, #100]	; (800e600 <etharp_output+0x1fc>)
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e59e:	7dfb      	ldrb	r3, [r7, #23]
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f7ff fe93 	bl	800e2d0 <etharp_output_to_arp_index>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	e018      	b.n	800e5e0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e5ae:	7dfb      	ldrb	r3, [r7, #23]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	75fb      	strb	r3, [r7, #23]
 800e5b4:	7dfb      	ldrb	r3, [r7, #23]
 800e5b6:	2b09      	cmp	r3, #9
 800e5b8:	d9ca      	bls.n	800e550 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	69b9      	ldr	r1, [r7, #24]
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 f822 	bl	800e608 <etharp_query>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	e00b      	b.n	800e5e0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e5ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5d2:	9300      	str	r3, [sp, #0]
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f001 fd3f 	bl	801005c <ethernet_output>
 800e5de:	4603      	mov	r3, r0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3720      	adds	r7, #32
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	08013c7c 	.word	0x08013c7c
 800e5ec:	08013dcc 	.word	0x08013dcc
 800e5f0:	08013cf4 	.word	0x08013cf4
 800e5f4:	08013e1c 	.word	0x08013e1c
 800e5f8:	08013dbc 	.word	0x08013dbc
 800e5fc:	080148b0 	.word	0x080148b0
 800e600:	20000660 	.word	0x20000660
 800e604:	20000570 	.word	0x20000570

0800e608 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08c      	sub	sp, #48	; 0x30
 800e60c:	af02      	add	r7, sp, #8
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	3326      	adds	r3, #38	; 0x26
 800e618:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e61a:	23ff      	movs	r3, #255	; 0xff
 800e61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e620:	2300      	movs	r3, #0
 800e622:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68f9      	ldr	r1, [r7, #12]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f000 fe0e 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10c      	bne.n	800e650 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e63e:	2be0      	cmp	r3, #224	; 0xe0
 800e640:	d006      	beq.n	800e650 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e650:	f06f 030f 	mvn.w	r3, #15
 800e654:	e101      	b.n	800e85a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	2101      	movs	r1, #1
 800e65a:	68b8      	ldr	r0, [r7, #8]
 800e65c:	f7ff fb60 	bl	800dd20 <etharp_find_entry>
 800e660:	4603      	mov	r3, r0
 800e662:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	da02      	bge.n	800e672 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e66c:	8a7b      	ldrh	r3, [r7, #18]
 800e66e:	b25b      	sxtb	r3, r3
 800e670:	e0f3      	b.n	800e85a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e672:	8a7b      	ldrh	r3, [r7, #18]
 800e674:	2b7e      	cmp	r3, #126	; 0x7e
 800e676:	d906      	bls.n	800e686 <etharp_query+0x7e>
 800e678:	4b7a      	ldr	r3, [pc, #488]	; (800e864 <etharp_query+0x25c>)
 800e67a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e67e:	497a      	ldr	r1, [pc, #488]	; (800e868 <etharp_query+0x260>)
 800e680:	487a      	ldr	r0, [pc, #488]	; (800e86c <etharp_query+0x264>)
 800e682:	f001 fd95 	bl	80101b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e686:	8a7b      	ldrh	r3, [r7, #18]
 800e688:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e68a:	7c7a      	ldrb	r2, [r7, #17]
 800e68c:	4978      	ldr	r1, [pc, #480]	; (800e870 <etharp_query+0x268>)
 800e68e:	4613      	mov	r3, r2
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	4413      	add	r3, r2
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	440b      	add	r3, r1
 800e698:	3314      	adds	r3, #20
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d115      	bne.n	800e6cc <etharp_query+0xc4>
    is_new_entry = 1;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e6a4:	7c7a      	ldrb	r2, [r7, #17]
 800e6a6:	4972      	ldr	r1, [pc, #456]	; (800e870 <etharp_query+0x268>)
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	4413      	add	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	440b      	add	r3, r1
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e6b8:	7c7a      	ldrb	r2, [r7, #17]
 800e6ba:	496d      	ldr	r1, [pc, #436]	; (800e870 <etharp_query+0x268>)
 800e6bc:	4613      	mov	r3, r2
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	4413      	add	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	440b      	add	r3, r1
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e6cc:	7c7a      	ldrb	r2, [r7, #17]
 800e6ce:	4968      	ldr	r1, [pc, #416]	; (800e870 <etharp_query+0x268>)
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	4413      	add	r3, r2
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	440b      	add	r3, r1
 800e6da:	3314      	adds	r3, #20
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d011      	beq.n	800e706 <etharp_query+0xfe>
 800e6e2:	7c7a      	ldrb	r2, [r7, #17]
 800e6e4:	4962      	ldr	r1, [pc, #392]	; (800e870 <etharp_query+0x268>)
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	005b      	lsls	r3, r3, #1
 800e6ea:	4413      	add	r3, r2
 800e6ec:	00db      	lsls	r3, r3, #3
 800e6ee:	440b      	add	r3, r1
 800e6f0:	3314      	adds	r3, #20
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d806      	bhi.n	800e706 <etharp_query+0xfe>
 800e6f8:	4b5a      	ldr	r3, [pc, #360]	; (800e864 <etharp_query+0x25c>)
 800e6fa:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e6fe:	495d      	ldr	r1, [pc, #372]	; (800e874 <etharp_query+0x26c>)
 800e700:	485a      	ldr	r0, [pc, #360]	; (800e86c <etharp_query+0x264>)
 800e702:	f001 fd55 	bl	80101b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <etharp_query+0x10a>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10c      	bne.n	800e72c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e712:	68b9      	ldr	r1, [r7, #8]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 f963 	bl	800e9e0 <etharp_request>
 800e71a:	4603      	mov	r3, r0
 800e71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d102      	bne.n	800e72c <etharp_query+0x124>
      return result;
 800e726:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e72a:	e096      	b.n	800e85a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d106      	bne.n	800e740 <etharp_query+0x138>
 800e732:	4b4c      	ldr	r3, [pc, #304]	; (800e864 <etharp_query+0x25c>)
 800e734:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e738:	494f      	ldr	r1, [pc, #316]	; (800e878 <etharp_query+0x270>)
 800e73a:	484c      	ldr	r0, [pc, #304]	; (800e86c <etharp_query+0x264>)
 800e73c:	f001 fd38 	bl	80101b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e740:	7c7a      	ldrb	r2, [r7, #17]
 800e742:	494b      	ldr	r1, [pc, #300]	; (800e870 <etharp_query+0x268>)
 800e744:	4613      	mov	r3, r2
 800e746:	005b      	lsls	r3, r3, #1
 800e748:	4413      	add	r3, r2
 800e74a:	00db      	lsls	r3, r3, #3
 800e74c:	440b      	add	r3, r1
 800e74e:	3314      	adds	r3, #20
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d917      	bls.n	800e786 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e756:	4a49      	ldr	r2, [pc, #292]	; (800e87c <etharp_query+0x274>)
 800e758:	7c7b      	ldrb	r3, [r7, #17]
 800e75a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e75c:	7c7a      	ldrb	r2, [r7, #17]
 800e75e:	4613      	mov	r3, r2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4413      	add	r3, r2
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	3308      	adds	r3, #8
 800e768:	4a41      	ldr	r2, [pc, #260]	; (800e870 <etharp_query+0x268>)
 800e76a:	4413      	add	r3, r2
 800e76c:	3304      	adds	r3, #4
 800e76e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e772:	9200      	str	r2, [sp, #0]
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f001 fc6f 	bl	801005c <ethernet_output>
 800e77e:	4603      	mov	r3, r0
 800e780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e784:	e067      	b.n	800e856 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e786:	7c7a      	ldrb	r2, [r7, #17]
 800e788:	4939      	ldr	r1, [pc, #228]	; (800e870 <etharp_query+0x268>)
 800e78a:	4613      	mov	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4413      	add	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	440b      	add	r3, r1
 800e794:	3314      	adds	r3, #20
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d15c      	bne.n	800e856 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e7a4:	e01c      	b.n	800e7e0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	895a      	ldrh	r2, [r3, #10]
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	891b      	ldrh	r3, [r3, #8]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d10a      	bne.n	800e7c8 <etharp_query+0x1c0>
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d006      	beq.n	800e7c8 <etharp_query+0x1c0>
 800e7ba:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <etharp_query+0x25c>)
 800e7bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e7c0:	492f      	ldr	r1, [pc, #188]	; (800e880 <etharp_query+0x278>)
 800e7c2:	482a      	ldr	r0, [pc, #168]	; (800e86c <etharp_query+0x264>)
 800e7c4:	f001 fcf4 	bl	80101b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	7b1b      	ldrb	r3, [r3, #12]
 800e7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d002      	beq.n	800e7da <etharp_query+0x1d2>
        copy_needed = 1;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	61bb      	str	r3, [r7, #24]
        break;
 800e7d8:	e005      	b.n	800e7e6 <etharp_query+0x1de>
      }
      p = p->next;
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1df      	bne.n	800e7a6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d007      	beq.n	800e7fc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e7f2:	200e      	movs	r0, #14
 800e7f4:	f7f8 fa6c 	bl	8006cd0 <pbuf_clone>
 800e7f8:	61f8      	str	r0, [r7, #28]
 800e7fa:	e004      	b.n	800e806 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e800:	69f8      	ldr	r0, [r7, #28]
 800e802:	f7f8 f899 	bl	8006938 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d021      	beq.n	800e850 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e80c:	7c7a      	ldrb	r2, [r7, #17]
 800e80e:	4918      	ldr	r1, [pc, #96]	; (800e870 <etharp_query+0x268>)
 800e810:	4613      	mov	r3, r2
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	4413      	add	r3, r2
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	440b      	add	r3, r1
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e820:	7c7a      	ldrb	r2, [r7, #17]
 800e822:	4913      	ldr	r1, [pc, #76]	; (800e870 <etharp_query+0x268>)
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	00db      	lsls	r3, r3, #3
 800e82c:	440b      	add	r3, r1
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4618      	mov	r0, r3
 800e832:	f7f7 ffe1 	bl	80067f8 <pbuf_free>
      }
      arp_table[i].q = p;
 800e836:	7c7a      	ldrb	r2, [r7, #17]
 800e838:	490d      	ldr	r1, [pc, #52]	; (800e870 <etharp_query+0x268>)
 800e83a:	4613      	mov	r3, r2
 800e83c:	005b      	lsls	r3, r3, #1
 800e83e:	4413      	add	r3, r2
 800e840:	00db      	lsls	r3, r3, #3
 800e842:	440b      	add	r3, r1
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e84e:	e002      	b.n	800e856 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e850:	23ff      	movs	r3, #255	; 0xff
 800e852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e856:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3728      	adds	r7, #40	; 0x28
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	08013c7c 	.word	0x08013c7c
 800e868:	08013e28 	.word	0x08013e28
 800e86c:	08013cf4 	.word	0x08013cf4
 800e870:	20000570 	.word	0x20000570
 800e874:	08013e38 	.word	0x08013e38
 800e878:	08013e1c 	.word	0x08013e1c
 800e87c:	20000660 	.word	0x20000660
 800e880:	08013e60 	.word	0x08013e60

0800e884 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08a      	sub	sp, #40	; 0x28
 800e888:	af02      	add	r7, sp, #8
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e892:	2300      	movs	r3, #0
 800e894:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <etharp_raw+0x26>
 800e89c:	4b3a      	ldr	r3, [pc, #232]	; (800e988 <etharp_raw+0x104>)
 800e89e:	f240 4257 	movw	r2, #1111	; 0x457
 800e8a2:	493a      	ldr	r1, [pc, #232]	; (800e98c <etharp_raw+0x108>)
 800e8a4:	483a      	ldr	r0, [pc, #232]	; (800e990 <etharp_raw+0x10c>)
 800e8a6:	f001 fc83 	bl	80101b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e8aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8ae:	211c      	movs	r1, #28
 800e8b0:	200e      	movs	r0, #14
 800e8b2:	f7f7 fcbd 	bl	8006230 <pbuf_alloc>
 800e8b6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e8be:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c2:	e05d      	b.n	800e980 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	895b      	ldrh	r3, [r3, #10]
 800e8c8:	2b1b      	cmp	r3, #27
 800e8ca:	d806      	bhi.n	800e8da <etharp_raw+0x56>
 800e8cc:	4b2e      	ldr	r3, [pc, #184]	; (800e988 <etharp_raw+0x104>)
 800e8ce:	f240 4262 	movw	r2, #1122	; 0x462
 800e8d2:	4930      	ldr	r1, [pc, #192]	; (800e994 <etharp_raw+0x110>)
 800e8d4:	482e      	ldr	r0, [pc, #184]	; (800e990 <etharp_raw+0x10c>)
 800e8d6:	f001 fc6b 	bl	80101b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e8e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f6 fc6a 	bl	80051bc <lwip_htons>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8f6:	2b06      	cmp	r3, #6
 800e8f8:	d006      	beq.n	800e908 <etharp_raw+0x84>
 800e8fa:	4b23      	ldr	r3, [pc, #140]	; (800e988 <etharp_raw+0x104>)
 800e8fc:	f240 4269 	movw	r2, #1129	; 0x469
 800e900:	4925      	ldr	r1, [pc, #148]	; (800e998 <etharp_raw+0x114>)
 800e902:	4823      	ldr	r0, [pc, #140]	; (800e990 <etharp_raw+0x10c>)
 800e904:	f001 fc54 	bl	80101b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	3308      	adds	r3, #8
 800e90c:	2206      	movs	r2, #6
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	4618      	mov	r0, r3
 800e912:	f001 fc1d 	bl	8010150 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	3312      	adds	r3, #18
 800e91a:	2206      	movs	r2, #6
 800e91c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e91e:	4618      	mov	r0, r3
 800e920:	f001 fc16 	bl	8010150 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	330e      	adds	r3, #14
 800e928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e92a:	6812      	ldr	r2, [r2, #0]
 800e92c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	3318      	adds	r3, #24
 800e932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e934:	6812      	ldr	r2, [r2, #0]
 800e936:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	f042 0201 	orr.w	r2, r2, #1
 800e944:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	2200      	movs	r2, #0
 800e94a:	f042 0208 	orr.w	r2, r2, #8
 800e94e:	709a      	strb	r2, [r3, #2]
 800e950:	2200      	movs	r2, #0
 800e952:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	2206      	movs	r2, #6
 800e958:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	2204      	movs	r2, #4
 800e95e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e960:	f640 0306 	movw	r3, #2054	; 0x806
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	69b9      	ldr	r1, [r7, #24]
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f001 fb75 	bl	801005c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e972:	69b8      	ldr	r0, [r7, #24]
 800e974:	f7f7 ff40 	bl	80067f8 <pbuf_free>
  p = NULL;
 800e978:	2300      	movs	r3, #0
 800e97a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e97c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3720      	adds	r7, #32
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	08013c7c 	.word	0x08013c7c
 800e98c:	08013dcc 	.word	0x08013dcc
 800e990:	08013cf4 	.word	0x08013cf4
 800e994:	08013e7c 	.word	0x08013e7c
 800e998:	08013eb0 	.word	0x08013eb0

0800e99c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b088      	sub	sp, #32
 800e9a0:	af04      	add	r7, sp, #16
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	9203      	str	r2, [sp, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	9202      	str	r2, [sp, #8]
 800e9c0:	4a06      	ldr	r2, [pc, #24]	; (800e9dc <etharp_request_dst+0x40>)
 800e9c2:	9201      	str	r2, [sp, #4]
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7ff ff5a 	bl	800e884 <etharp_raw>
 800e9d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	080148b8 	.word	0x080148b8

0800e9e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e9ea:	4a05      	ldr	r2, [pc, #20]	; (800ea00 <etharp_request+0x20>)
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff ffd4 	bl	800e99c <etharp_request_dst>
 800e9f4:	4603      	mov	r3, r0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	080148b0 	.word	0x080148b0

0800ea04 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08e      	sub	sp, #56	; 0x38
 800ea08:	af04      	add	r7, sp, #16
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ea0e:	4b79      	ldr	r3, [pc, #484]	; (800ebf4 <icmp_input+0x1f0>)
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	f003 030f 	and.w	r3, r3, #15
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ea24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea26:	2b13      	cmp	r3, #19
 800ea28:	f240 80cd 	bls.w	800ebc6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	895b      	ldrh	r3, [r3, #10]
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	f240 80ca 	bls.w	800ebca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ea40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 80b7 	beq.w	800ebb8 <icmp_input+0x1b4>
 800ea4a:	2b08      	cmp	r3, #8
 800ea4c:	f040 80b7 	bne.w	800ebbe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ea50:	4b69      	ldr	r3, [pc, #420]	; (800ebf8 <icmp_input+0x1f4>)
 800ea52:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea54:	4b67      	ldr	r3, [pc, #412]	; (800ebf4 <icmp_input+0x1f0>)
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea5c:	2be0      	cmp	r3, #224	; 0xe0
 800ea5e:	f000 80bb 	beq.w	800ebd8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ea62:	4b64      	ldr	r3, [pc, #400]	; (800ebf4 <icmp_input+0x1f0>)
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	4a63      	ldr	r2, [pc, #396]	; (800ebf4 <icmp_input+0x1f0>)
 800ea68:	6812      	ldr	r2, [r2, #0]
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fbed 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f040 80b1 	bne.w	800ebdc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	891b      	ldrh	r3, [r3, #8]
 800ea7e:	2b07      	cmp	r3, #7
 800ea80:	f240 80a5 	bls.w	800ebce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ea84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea86:	330e      	adds	r3, #14
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7f7 fe1e 	bl	80066cc <pbuf_add_header>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d04b      	beq.n	800eb2e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	891a      	ldrh	r2, [r3, #8]
 800ea9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea9c:	4413      	add	r3, r2
 800ea9e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	891b      	ldrh	r3, [r3, #8]
 800eaa4:	8b7a      	ldrh	r2, [r7, #26]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	f0c0 809a 	bcc.w	800ebe0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800eaac:	8b7b      	ldrh	r3, [r7, #26]
 800eaae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eab2:	4619      	mov	r1, r3
 800eab4:	200e      	movs	r0, #14
 800eab6:	f7f7 fbbb 	bl	8006230 <pbuf_alloc>
 800eaba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	f000 8090 	beq.w	800ebe4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	895b      	ldrh	r3, [r3, #10]
 800eac8:	461a      	mov	r2, r3
 800eaca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eacc:	3308      	adds	r3, #8
 800eace:	429a      	cmp	r2, r3
 800ead0:	d203      	bcs.n	800eada <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ead2:	6978      	ldr	r0, [r7, #20]
 800ead4:	f7f7 fe90 	bl	80067f8 <pbuf_free>
          goto icmperr;
 800ead8:	e085      	b.n	800ebe6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 fb34 	bl	8010150 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaea:	4619      	mov	r1, r3
 800eaec:	6978      	ldr	r0, [r7, #20]
 800eaee:	f7f7 fdfd 	bl	80066ec <pbuf_remove_header>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d009      	beq.n	800eb0c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eaf8:	4b40      	ldr	r3, [pc, #256]	; (800ebfc <icmp_input+0x1f8>)
 800eafa:	22b6      	movs	r2, #182	; 0xb6
 800eafc:	4940      	ldr	r1, [pc, #256]	; (800ec00 <icmp_input+0x1fc>)
 800eafe:	4841      	ldr	r0, [pc, #260]	; (800ec04 <icmp_input+0x200>)
 800eb00:	f001 fb56 	bl	80101b0 <iprintf>
          pbuf_free(r);
 800eb04:	6978      	ldr	r0, [r7, #20]
 800eb06:	f7f7 fe77 	bl	80067f8 <pbuf_free>
          goto icmperr;
 800eb0a:	e06c      	b.n	800ebe6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	6978      	ldr	r0, [r7, #20]
 800eb10:	f7f7 ff9a 	bl	8006a48 <pbuf_copy>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eb1a:	6978      	ldr	r0, [r7, #20]
 800eb1c:	f7f7 fe6c 	bl	80067f8 <pbuf_free>
          goto icmperr;
 800eb20:	e061      	b.n	800ebe6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7f7 fe68 	bl	80067f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	e00f      	b.n	800eb4e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eb2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb30:	330e      	adds	r3, #14
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f7 fdd9 	bl	80066ec <pbuf_remove_header>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d006      	beq.n	800eb4e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800eb40:	4b2e      	ldr	r3, [pc, #184]	; (800ebfc <icmp_input+0x1f8>)
 800eb42:	22c7      	movs	r2, #199	; 0xc7
 800eb44:	4930      	ldr	r1, [pc, #192]	; (800ec08 <icmp_input+0x204>)
 800eb46:	482f      	ldr	r0, [pc, #188]	; (800ec04 <icmp_input+0x200>)
 800eb48:	f001 fb32 	bl	80101b0 <iprintf>
          goto icmperr;
 800eb4c:	e04b      	b.n	800ebe6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800eb54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb56:	4619      	mov	r1, r3
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7f7 fdb7 	bl	80066cc <pbuf_add_header>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d12b      	bne.n	800ebbc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <icmp_input+0x1f0>)
 800eb74:	691a      	ldr	r2, [r3, #16]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	2200      	movs	r2, #0
 800eb84:	709a      	strb	r2, [r3, #2]
 800eb86:	2200      	movs	r2, #0
 800eb88:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	22ff      	movs	r2, #255	; 0xff
 800eb8e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	729a      	strb	r2, [r3, #10]
 800eb96:	2200      	movs	r2, #0
 800eb98:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	9302      	str	r3, [sp, #8]
 800eb9e:	2301      	movs	r3, #1
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	2300      	movs	r3, #0
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	23ff      	movs	r3, #255	; 0xff
 800eba8:	2200      	movs	r2, #0
 800ebaa:	69f9      	ldr	r1, [r7, #28]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 fa75 	bl	800f09c <ip4_output_if>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ebb6:	e001      	b.n	800ebbc <icmp_input+0x1b8>
      break;
 800ebb8:	bf00      	nop
 800ebba:	e000      	b.n	800ebbe <icmp_input+0x1ba>
      break;
 800ebbc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7f7 fe1a 	bl	80067f8 <pbuf_free>
  return;
 800ebc4:	e013      	b.n	800ebee <icmp_input+0x1ea>
    goto lenerr;
 800ebc6:	bf00      	nop
 800ebc8:	e002      	b.n	800ebd0 <icmp_input+0x1cc>
    goto lenerr;
 800ebca:	bf00      	nop
 800ebcc:	e000      	b.n	800ebd0 <icmp_input+0x1cc>
        goto lenerr;
 800ebce:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7f7 fe11 	bl	80067f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ebd6:	e00a      	b.n	800ebee <icmp_input+0x1ea>
        goto icmperr;
 800ebd8:	bf00      	nop
 800ebda:	e004      	b.n	800ebe6 <icmp_input+0x1e2>
        goto icmperr;
 800ebdc:	bf00      	nop
 800ebde:	e002      	b.n	800ebe6 <icmp_input+0x1e2>
          goto icmperr;
 800ebe0:	bf00      	nop
 800ebe2:	e000      	b.n	800ebe6 <icmp_input+0x1e2>
          goto icmperr;
 800ebe4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7f7 fe06 	bl	80067f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ebec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ebee:	3728      	adds	r7, #40	; 0x28
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	200037b4 	.word	0x200037b4
 800ebf8:	200037c8 	.word	0x200037c8
 800ebfc:	08013ef4 	.word	0x08013ef4
 800ec00:	08013f2c 	.word	0x08013f2c
 800ec04:	08013f64 	.word	0x08013f64
 800ec08:	08013f8c 	.word	0x08013f8c

0800ec0c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ec18:	78fb      	ldrb	r3, [r7, #3]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	2103      	movs	r1, #3
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f814 	bl	800ec4c <icmp_send_response>
}
 800ec24:	bf00      	nop
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	210b      	movs	r1, #11
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 f804 	bl	800ec4c <icmp_send_response>
}
 800ec44:	bf00      	nop
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08c      	sub	sp, #48	; 0x30
 800ec50:	af04      	add	r7, sp, #16
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	460b      	mov	r3, r1
 800ec56:	70fb      	strb	r3, [r7, #3]
 800ec58:	4613      	mov	r3, r2
 800ec5a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ec5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ec60:	2124      	movs	r1, #36	; 0x24
 800ec62:	2022      	movs	r0, #34	; 0x22
 800ec64:	f7f7 fae4 	bl	8006230 <pbuf_alloc>
 800ec68:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d04c      	beq.n	800ed0a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	895b      	ldrh	r3, [r3, #10]
 800ec74:	2b23      	cmp	r3, #35	; 0x23
 800ec76:	d806      	bhi.n	800ec86 <icmp_send_response+0x3a>
 800ec78:	4b26      	ldr	r3, [pc, #152]	; (800ed14 <icmp_send_response+0xc8>)
 800ec7a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ec7e:	4926      	ldr	r1, [pc, #152]	; (800ed18 <icmp_send_response+0xcc>)
 800ec80:	4826      	ldr	r0, [pc, #152]	; (800ed1c <icmp_send_response+0xd0>)
 800ec82:	f001 fa95 	bl	80101b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	78fa      	ldrb	r2, [r7, #3]
 800ec96:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	78ba      	ldrb	r2, [r7, #2]
 800ec9c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2200      	movs	r2, #0
 800eca2:	711a      	strb	r2, [r3, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	719a      	strb	r2, [r3, #6]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	f103 0008 	add.w	r0, r3, #8
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	221c      	movs	r2, #28
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	f001 fa45 	bl	8010150 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800eccc:	f107 030c 	add.w	r3, r7, #12
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f000 f825 	bl	800ed20 <ip4_route>
 800ecd6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d011      	beq.n	800ed02 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2200      	movs	r2, #0
 800ece2:	709a      	strb	r2, [r3, #2]
 800ece4:	2200      	movs	r2, #0
 800ece6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ece8:	f107 020c 	add.w	r2, r7, #12
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	9302      	str	r3, [sp, #8]
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	23ff      	movs	r3, #255	; 0xff
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	69f8      	ldr	r0, [r7, #28]
 800ecfe:	f000 f9cd 	bl	800f09c <ip4_output_if>
  }
  pbuf_free(q);
 800ed02:	69f8      	ldr	r0, [r7, #28]
 800ed04:	f7f7 fd78 	bl	80067f8 <pbuf_free>
 800ed08:	e000      	b.n	800ed0c <icmp_send_response+0xc0>
    return;
 800ed0a:	bf00      	nop
}
 800ed0c:	3720      	adds	r7, #32
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	08013ef4 	.word	0x08013ef4
 800ed18:	08013fc0 	.word	0x08013fc0
 800ed1c:	08013f64 	.word	0x08013f64

0800ed20 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ed28:	4b33      	ldr	r3, [pc, #204]	; (800edf8 <ip4_route+0xd8>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	60fb      	str	r3, [r7, #12]
 800ed2e:	e036      	b.n	800ed9e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d02b      	beq.n	800ed98 <ip4_route+0x78>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed46:	089b      	lsrs	r3, r3, #2
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d022      	beq.n	800ed98 <ip4_route+0x78>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3304      	adds	r3, #4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d01d      	beq.n	800ed98 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	3304      	adds	r3, #4
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	405a      	eors	r2, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	3308      	adds	r3, #8
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4013      	ands	r3, r2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	e038      	b.n	800edea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d108      	bne.n	800ed98 <ip4_route+0x78>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	330c      	adds	r3, #12
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d101      	bne.n	800ed98 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	e028      	b.n	800edea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	60fb      	str	r3, [r7, #12]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1c5      	bne.n	800ed30 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eda4:	4b15      	ldr	r3, [pc, #84]	; (800edfc <ip4_route+0xdc>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d01a      	beq.n	800ede2 <ip4_route+0xc2>
 800edac:	4b13      	ldr	r3, [pc, #76]	; (800edfc <ip4_route+0xdc>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d012      	beq.n	800ede2 <ip4_route+0xc2>
 800edbc:	4b0f      	ldr	r3, [pc, #60]	; (800edfc <ip4_route+0xdc>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00a      	beq.n	800ede2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800edcc:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <ip4_route+0xdc>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3304      	adds	r3, #4
 800edd2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d004      	beq.n	800ede2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b7f      	cmp	r3, #127	; 0x7f
 800ede0:	d101      	bne.n	800ede6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e001      	b.n	800edea <ip4_route+0xca>
  }

  return netif_default;
 800ede6:	4b05      	ldr	r3, [pc, #20]	; (800edfc <ip4_route+0xdc>)
 800ede8:	681b      	ldr	r3, [r3, #0]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	20006ce8 	.word	0x20006ce8
 800edfc:	20006cec 	.word	0x20006cec

0800ee00 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d016      	beq.n	800ee46 <ip4_input_accept+0x46>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d011      	beq.n	800ee46 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee22:	4b0b      	ldr	r3, [pc, #44]	; (800ee50 <ip4_input_accept+0x50>)
 800ee24:	695a      	ldr	r2, [r3, #20]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d008      	beq.n	800ee42 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ee30:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <ip4_input_accept+0x50>)
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	6879      	ldr	r1, [r7, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f000 fa08 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800ee3c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	200037b4 	.word	0x200037b4

0800ee54 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	091b      	lsrs	r3, r3, #4
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d004      	beq.n	800ee7a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7f7 fcc1 	bl	80067f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	e107      	b.n	800f08a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	f003 030f 	and.w	r3, r3, #15
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	885b      	ldrh	r3, [r3, #2]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f6 f993 	bl	80051bc <lwip_htons>
 800ee96:	4603      	mov	r3, r0
 800ee98:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	891b      	ldrh	r3, [r3, #8]
 800ee9e:	89ba      	ldrh	r2, [r7, #12]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d204      	bcs.n	800eeae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800eea4:	89bb      	ldrh	r3, [r7, #12]
 800eea6:	4619      	mov	r1, r3
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7f7 fb1f 	bl	80064ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	895b      	ldrh	r3, [r3, #10]
 800eeb2:	89fa      	ldrh	r2, [r7, #14]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d807      	bhi.n	800eec8 <ip4_input+0x74>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	891b      	ldrh	r3, [r3, #8]
 800eebc:	89ba      	ldrh	r2, [r7, #12]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d802      	bhi.n	800eec8 <ip4_input+0x74>
 800eec2:	89fb      	ldrh	r3, [r7, #14]
 800eec4:	2b13      	cmp	r3, #19
 800eec6:	d804      	bhi.n	800eed2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7f7 fc95 	bl	80067f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	e0db      	b.n	800f08a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	4a6f      	ldr	r2, [pc, #444]	; (800f094 <ip4_input+0x240>)
 800eed8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	4a6d      	ldr	r2, [pc, #436]	; (800f094 <ip4_input+0x240>)
 800eee0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eee2:	4b6c      	ldr	r3, [pc, #432]	; (800f094 <ip4_input+0x240>)
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eeea:	2be0      	cmp	r3, #224	; 0xe0
 800eeec:	d112      	bne.n	800ef14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eef4:	f003 0301 	and.w	r3, r3, #1
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <ip4_input+0xba>
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	3304      	adds	r3, #4
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <ip4_input+0xba>
      netif = inp;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	e02a      	b.n	800ef64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	613b      	str	r3, [r7, #16]
 800ef12:	e027      	b.n	800ef64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ef14:	6838      	ldr	r0, [r7, #0]
 800ef16:	f7ff ff73 	bl	800ee00 <ip4_input_accept>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <ip4_input+0xd2>
      netif = inp;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	613b      	str	r3, [r7, #16]
 800ef24:	e01e      	b.n	800ef64 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ef2a:	4b5a      	ldr	r3, [pc, #360]	; (800f094 <ip4_input+0x240>)
 800ef2c:	695b      	ldr	r3, [r3, #20]
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b7f      	cmp	r3, #127	; 0x7f
 800ef32:	d017      	beq.n	800ef64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ef34:	4b58      	ldr	r3, [pc, #352]	; (800f098 <ip4_input+0x244>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	613b      	str	r3, [r7, #16]
 800ef3a:	e00e      	b.n	800ef5a <ip4_input+0x106>
          if (netif == inp) {
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d006      	beq.n	800ef52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ef44:	6938      	ldr	r0, [r7, #16]
 800ef46:	f7ff ff5b 	bl	800ee00 <ip4_input_accept>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d108      	bne.n	800ef62 <ip4_input+0x10e>
 800ef50:	e000      	b.n	800ef54 <ip4_input+0x100>
            continue;
 800ef52:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	613b      	str	r3, [r7, #16]
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1ed      	bne.n	800ef3c <ip4_input+0xe8>
 800ef60:	e000      	b.n	800ef64 <ip4_input+0x110>
            break;
 800ef62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef64:	4b4b      	ldr	r3, [pc, #300]	; (800f094 <ip4_input+0x240>)
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 f96e 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d105      	bne.n	800ef82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ef76:	4b47      	ldr	r3, [pc, #284]	; (800f094 <ip4_input+0x240>)
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ef7e:	2be0      	cmp	r3, #224	; 0xe0
 800ef80:	d104      	bne.n	800ef8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7f7 fc38 	bl	80067f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	e07e      	b.n	800f08a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d104      	bne.n	800ef9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7f7 fc30 	bl	80067f8 <pbuf_free>
    return ERR_OK;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	e076      	b.n	800f08a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	88db      	ldrh	r3, [r3, #6]
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	461a      	mov	r2, r3
 800efa4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800efa8:	4013      	ands	r3, r2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00b      	beq.n	800efc6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fc92 	bl	800f8d8 <ip4_reass>
 800efb4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <ip4_input+0x16c>
      return ERR_OK;
 800efbc:	2300      	movs	r3, #0
 800efbe:	e064      	b.n	800f08a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800efc6:	4a33      	ldr	r2, [pc, #204]	; (800f094 <ip4_input+0x240>)
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800efcc:	4a31      	ldr	r2, [pc, #196]	; (800f094 <ip4_input+0x240>)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800efd2:	4a30      	ldr	r2, [pc, #192]	; (800f094 <ip4_input+0x240>)
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 030f 	and.w	r3, r3, #15
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	4b2a      	ldr	r3, [pc, #168]	; (800f094 <ip4_input+0x240>)
 800efea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800efec:	89fb      	ldrh	r3, [r7, #14]
 800efee:	4619      	mov	r1, r3
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7f7 fb7b 	bl	80066ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	7a5b      	ldrb	r3, [r3, #9]
 800effa:	2b11      	cmp	r3, #17
 800effc:	d006      	beq.n	800f00c <ip4_input+0x1b8>
 800effe:	2b11      	cmp	r3, #17
 800f000:	dc13      	bgt.n	800f02a <ip4_input+0x1d6>
 800f002:	2b01      	cmp	r3, #1
 800f004:	d00c      	beq.n	800f020 <ip4_input+0x1cc>
 800f006:	2b06      	cmp	r3, #6
 800f008:	d005      	beq.n	800f016 <ip4_input+0x1c2>
 800f00a:	e00e      	b.n	800f02a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f00c:	6839      	ldr	r1, [r7, #0]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7fe f8e6 	bl	800d1e0 <udp_input>
        break;
 800f014:	e026      	b.n	800f064 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7f9 fcd3 	bl	80089c4 <tcp_input>
        break;
 800f01e:	e021      	b.n	800f064 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f020:	6839      	ldr	r1, [r7, #0]
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7ff fcee 	bl	800ea04 <icmp_input>
        break;
 800f028:	e01c      	b.n	800f064 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f02a:	4b1a      	ldr	r3, [pc, #104]	; (800f094 <ip4_input+0x240>)
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	6939      	ldr	r1, [r7, #16]
 800f030:	4618      	mov	r0, r3
 800f032:	f000 f90b 	bl	800f24c <ip4_addr_isbroadcast_u32>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10f      	bne.n	800f05c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f03c:	4b15      	ldr	r3, [pc, #84]	; (800f094 <ip4_input+0x240>)
 800f03e:	695b      	ldr	r3, [r3, #20]
 800f040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f044:	2be0      	cmp	r3, #224	; 0xe0
 800f046:	d009      	beq.n	800f05c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f04c:	4619      	mov	r1, r3
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7f7 fbbf 	bl	80067d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f054:	2102      	movs	r1, #2
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff fdd8 	bl	800ec0c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7f7 fbcb 	bl	80067f8 <pbuf_free>
        break;
 800f062:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f064:	4b0b      	ldr	r3, [pc, #44]	; (800f094 <ip4_input+0x240>)
 800f066:	2200      	movs	r2, #0
 800f068:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f06a:	4b0a      	ldr	r3, [pc, #40]	; (800f094 <ip4_input+0x240>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f070:	4b08      	ldr	r3, [pc, #32]	; (800f094 <ip4_input+0x240>)
 800f072:	2200      	movs	r2, #0
 800f074:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f076:	4b07      	ldr	r3, [pc, #28]	; (800f094 <ip4_input+0x240>)
 800f078:	2200      	movs	r2, #0
 800f07a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f07c:	4b05      	ldr	r3, [pc, #20]	; (800f094 <ip4_input+0x240>)
 800f07e:	2200      	movs	r2, #0
 800f080:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f082:	4b04      	ldr	r3, [pc, #16]	; (800f094 <ip4_input+0x240>)
 800f084:	2200      	movs	r2, #0
 800f086:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	200037b4 	.word	0x200037b4
 800f098:	20006ce8 	.word	0x20006ce8

0800f09c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	; 0x28
 800f0a0:	af04      	add	r7, sp, #16
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
 800f0a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d009      	beq.n	800f0c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d003      	beq.n	800f0c2 <ip4_output_if+0x26>
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d102      	bne.n	800f0c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f0c8:	78fa      	ldrb	r2, [r7, #3]
 800f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0cc:	9302      	str	r3, [sp, #8]
 800f0ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	6979      	ldr	r1, [r7, #20]
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f805 	bl	800f0f0 <ip4_output_if_src>
 800f0e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3718      	adds	r7, #24
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
 800f0fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	7b9b      	ldrb	r3, [r3, #14]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d006      	beq.n	800f114 <ip4_output_if_src+0x24>
 800f106:	4b4b      	ldr	r3, [pc, #300]	; (800f234 <ip4_output_if_src+0x144>)
 800f108:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f10c:	494a      	ldr	r1, [pc, #296]	; (800f238 <ip4_output_if_src+0x148>)
 800f10e:	484b      	ldr	r0, [pc, #300]	; (800f23c <ip4_output_if_src+0x14c>)
 800f110:	f001 f84e 	bl	80101b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d060      	beq.n	800f1dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f11a:	2314      	movs	r3, #20
 800f11c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f11e:	2114      	movs	r1, #20
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f7f7 fad3 	bl	80066cc <pbuf_add_header>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f12c:	f06f 0301 	mvn.w	r3, #1
 800f130:	e07c      	b.n	800f22c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	895b      	ldrh	r3, [r3, #10]
 800f13c:	2b13      	cmp	r3, #19
 800f13e:	d806      	bhi.n	800f14e <ip4_output_if_src+0x5e>
 800f140:	4b3c      	ldr	r3, [pc, #240]	; (800f234 <ip4_output_if_src+0x144>)
 800f142:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f146:	493e      	ldr	r1, [pc, #248]	; (800f240 <ip4_output_if_src+0x150>)
 800f148:	483c      	ldr	r0, [pc, #240]	; (800f23c <ip4_output_if_src+0x14c>)
 800f14a:	f001 f831 	bl	80101b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	78fa      	ldrb	r2, [r7, #3]
 800f152:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f15a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f164:	8b7b      	ldrh	r3, [r7, #26]
 800f166:	089b      	lsrs	r3, r3, #2
 800f168:	b29b      	uxth	r3, r3
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f170:	b2da      	uxtb	r2, r3
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f17c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	891b      	ldrh	r3, [r3, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f7f6 f81a 	bl	80051bc <lwip_htons>
 800f188:	4603      	mov	r3, r0
 800f18a:	461a      	mov	r2, r3
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	2200      	movs	r2, #0
 800f194:	719a      	strb	r2, [r3, #6]
 800f196:	2200      	movs	r2, #0
 800f198:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f19a:	4b2a      	ldr	r3, [pc, #168]	; (800f244 <ip4_output_if_src+0x154>)
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7f6 f80c 	bl	80051bc <lwip_htons>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f1ac:	4b25      	ldr	r3, [pc, #148]	; (800f244 <ip4_output_if_src+0x154>)
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	4b23      	ldr	r3, [pc, #140]	; (800f244 <ip4_output_if_src+0x154>)
 800f1b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d104      	bne.n	800f1c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f1be:	4b22      	ldr	r3, [pc, #136]	; (800f248 <ip4_output_if_src+0x158>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	60da      	str	r2, [r3, #12]
 800f1c6:	e003      	b.n	800f1d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	729a      	strb	r2, [r3, #10]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	72da      	strb	r2, [r3, #11]
 800f1da:	e00f      	b.n	800f1fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	895b      	ldrh	r3, [r3, #10]
 800f1e0:	2b13      	cmp	r3, #19
 800f1e2:	d802      	bhi.n	800f1ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f1e4:	f06f 0301 	mvn.w	r3, #1
 800f1e8:	e020      	b.n	800f22c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f1f6:	f107 0314 	add.w	r3, r7, #20
 800f1fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00c      	beq.n	800f21e <ip4_output_if_src+0x12e>
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	891a      	ldrh	r2, [r3, #8]
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d906      	bls.n	800f21e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f000 fd4d 	bl	800fcb4 <ip4_frag>
 800f21a:	4603      	mov	r3, r0
 800f21c:	e006      	b.n	800f22c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	695b      	ldr	r3, [r3, #20]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	68f9      	ldr	r1, [r7, #12]
 800f226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f228:	4798      	blx	r3
 800f22a:	4603      	mov	r3, r0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3720      	adds	r7, #32
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	08013fec 	.word	0x08013fec
 800f238:	08014020 	.word	0x08014020
 800f23c:	0801402c 	.word	0x0801402c
 800f240:	08014054 	.word	0x08014054
 800f244:	20000662 	.word	0x20000662
 800f248:	080148ac 	.word	0x080148ac

0800f24c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f260:	d002      	beq.n	800f268 <ip4_addr_isbroadcast_u32+0x1c>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f268:	2301      	movs	r3, #1
 800f26a:	e02a      	b.n	800f2c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f272:	f003 0302 	and.w	r3, r3, #2
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	e021      	b.n	800f2c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	3304      	adds	r3, #4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	429a      	cmp	r2, r3
 800f288:	d101      	bne.n	800f28e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	e019      	b.n	800f2c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	3304      	adds	r3, #4
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	405a      	eors	r2, r3
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	3308      	adds	r3, #8
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4013      	ands	r3, r2
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d10d      	bne.n	800f2c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	43da      	mvns	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	3308      	adds	r3, #8
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d101      	bne.n	800f2c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e000      	b.n	800f2c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f2c0:	2300      	movs	r3, #0
  }
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3714      	adds	r7, #20
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr
	...

0800f2d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f2da:	4b12      	ldr	r3, [pc, #72]	; (800f324 <ip_reass_tmr+0x54>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f2e0:	e018      	b.n	800f314 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	7fdb      	ldrb	r3, [r3, #31]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00b      	beq.n	800f302 <ip_reass_tmr+0x32>
      r->timer--;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	7fdb      	ldrb	r3, [r3, #31]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	e008      	b.n	800f314 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f80a 	bl	800f328 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1e3      	bne.n	800f2e2 <ip_reass_tmr+0x12>
    }
  }
}
 800f31a:	bf00      	nop
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	20000664 	.word	0x20000664

0800f328 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b088      	sub	sp, #32
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d105      	bne.n	800f34a <ip_reass_free_complete_datagram+0x22>
 800f33e:	4b45      	ldr	r3, [pc, #276]	; (800f454 <ip_reass_free_complete_datagram+0x12c>)
 800f340:	22ab      	movs	r2, #171	; 0xab
 800f342:	4945      	ldr	r1, [pc, #276]	; (800f458 <ip_reass_free_complete_datagram+0x130>)
 800f344:	4845      	ldr	r0, [pc, #276]	; (800f45c <ip_reass_free_complete_datagram+0x134>)
 800f346:	f000 ff33 	bl	80101b0 <iprintf>
  if (prev != NULL) {
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00a      	beq.n	800f366 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	429a      	cmp	r2, r3
 800f358:	d005      	beq.n	800f366 <ip_reass_free_complete_datagram+0x3e>
 800f35a:	4b3e      	ldr	r3, [pc, #248]	; (800f454 <ip_reass_free_complete_datagram+0x12c>)
 800f35c:	22ad      	movs	r2, #173	; 0xad
 800f35e:	4940      	ldr	r1, [pc, #256]	; (800f460 <ip_reass_free_complete_datagram+0x138>)
 800f360:	483e      	ldr	r0, [pc, #248]	; (800f45c <ip_reass_free_complete_datagram+0x134>)
 800f362:	f000 ff25 	bl	80101b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	889b      	ldrh	r3, [r3, #4]
 800f372:	b29b      	uxth	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d12a      	bne.n	800f3ce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	6858      	ldr	r0, [r3, #4]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	3308      	adds	r3, #8
 800f38e:	2214      	movs	r2, #20
 800f390:	4619      	mov	r1, r3
 800f392:	f000 fedd 	bl	8010150 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f396:	2101      	movs	r1, #1
 800f398:	69b8      	ldr	r0, [r7, #24]
 800f39a:	f7ff fc47 	bl	800ec2c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f39e:	69b8      	ldr	r0, [r7, #24]
 800f3a0:	f7f7 fab2 	bl	8006908 <pbuf_clen>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f3a8:	8bfa      	ldrh	r2, [r7, #30]
 800f3aa:	8a7b      	ldrh	r3, [r7, #18]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3b2:	db05      	blt.n	800f3c0 <ip_reass_free_complete_datagram+0x98>
 800f3b4:	4b27      	ldr	r3, [pc, #156]	; (800f454 <ip_reass_free_complete_datagram+0x12c>)
 800f3b6:	22bc      	movs	r2, #188	; 0xbc
 800f3b8:	492a      	ldr	r1, [pc, #168]	; (800f464 <ip_reass_free_complete_datagram+0x13c>)
 800f3ba:	4828      	ldr	r0, [pc, #160]	; (800f45c <ip_reass_free_complete_datagram+0x134>)
 800f3bc:	f000 fef8 	bl	80101b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f3c0:	8bfa      	ldrh	r2, [r7, #30]
 800f3c2:	8a7b      	ldrh	r3, [r7, #18]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f3c8:	69b8      	ldr	r0, [r7, #24]
 800f3ca:	f7f7 fa15 	bl	80067f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f3d4:	e01f      	b.n	800f416 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f7f7 fa8e 	bl	8006908 <pbuf_clen>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f3f0:	8bfa      	ldrh	r2, [r7, #30]
 800f3f2:	8a7b      	ldrh	r3, [r7, #18]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3fa:	db05      	blt.n	800f408 <ip_reass_free_complete_datagram+0xe0>
 800f3fc:	4b15      	ldr	r3, [pc, #84]	; (800f454 <ip_reass_free_complete_datagram+0x12c>)
 800f3fe:	22cc      	movs	r2, #204	; 0xcc
 800f400:	4918      	ldr	r1, [pc, #96]	; (800f464 <ip_reass_free_complete_datagram+0x13c>)
 800f402:	4816      	ldr	r0, [pc, #88]	; (800f45c <ip_reass_free_complete_datagram+0x134>)
 800f404:	f000 fed4 	bl	80101b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f408:	8bfa      	ldrh	r2, [r7, #30]
 800f40a:	8a7b      	ldrh	r3, [r7, #18]
 800f40c:	4413      	add	r3, r2
 800f40e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7f7 f9f1 	bl	80067f8 <pbuf_free>
  while (p != NULL) {
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1dc      	bne.n	800f3d6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f8c2 	bl	800f5a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f424:	4b10      	ldr	r3, [pc, #64]	; (800f468 <ip_reass_free_complete_datagram+0x140>)
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	8bfa      	ldrh	r2, [r7, #30]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d905      	bls.n	800f43a <ip_reass_free_complete_datagram+0x112>
 800f42e:	4b09      	ldr	r3, [pc, #36]	; (800f454 <ip_reass_free_complete_datagram+0x12c>)
 800f430:	22d2      	movs	r2, #210	; 0xd2
 800f432:	490e      	ldr	r1, [pc, #56]	; (800f46c <ip_reass_free_complete_datagram+0x144>)
 800f434:	4809      	ldr	r0, [pc, #36]	; (800f45c <ip_reass_free_complete_datagram+0x134>)
 800f436:	f000 febb 	bl	80101b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <ip_reass_free_complete_datagram+0x140>)
 800f43c:	881a      	ldrh	r2, [r3, #0]
 800f43e:	8bfb      	ldrh	r3, [r7, #30]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	b29a      	uxth	r2, r3
 800f444:	4b08      	ldr	r3, [pc, #32]	; (800f468 <ip_reass_free_complete_datagram+0x140>)
 800f446:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f448:	8bfb      	ldrh	r3, [r7, #30]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3720      	adds	r7, #32
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	08014084 	.word	0x08014084
 800f458:	080140c0 	.word	0x080140c0
 800f45c:	080140cc 	.word	0x080140cc
 800f460:	080140f4 	.word	0x080140f4
 800f464:	08014108 	.word	0x08014108
 800f468:	20000668 	.word	0x20000668
 800f46c:	08014128 	.word	0x08014128

0800f470 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08a      	sub	sp, #40	; 0x28
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f47a:	2300      	movs	r3, #0
 800f47c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f47e:	2300      	movs	r3, #0
 800f480:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f482:	2300      	movs	r3, #0
 800f484:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f486:	2300      	movs	r3, #0
 800f488:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f48e:	4b28      	ldr	r3, [pc, #160]	; (800f530 <ip_reass_remove_oldest_datagram+0xc0>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f494:	e030      	b.n	800f4f8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f498:	695a      	ldr	r2, [r3, #20]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d10c      	bne.n	800f4bc <ip_reass_remove_oldest_datagram+0x4c>
 800f4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a4:	699a      	ldr	r2, [r3, #24]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d106      	bne.n	800f4bc <ip_reass_remove_oldest_datagram+0x4c>
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b0:	899a      	ldrh	r2, [r3, #12]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	889b      	ldrh	r3, [r3, #4]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d014      	beq.n	800f4e6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d104      	bne.n	800f4d2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	61bb      	str	r3, [r7, #24]
 800f4d0:	e009      	b.n	800f4e6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d4:	7fda      	ldrb	r2, [r3, #31]
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	7fdb      	ldrb	r3, [r3, #31]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d803      	bhi.n	800f4e6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d001      	beq.n	800f4f2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1cb      	bne.n	800f496 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f504:	69b9      	ldr	r1, [r7, #24]
 800f506:	6a38      	ldr	r0, [r7, #32]
 800f508:	f7ff ff0e 	bl	800f328 <ip_reass_free_complete_datagram>
 800f50c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f50e:	697a      	ldr	r2, [r7, #20]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	4413      	add	r3, r2
 800f514:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	da02      	bge.n	800f524 <ip_reass_remove_oldest_datagram+0xb4>
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	2b01      	cmp	r3, #1
 800f522:	dcac      	bgt.n	800f47e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f524:	697b      	ldr	r3, [r7, #20]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3728      	adds	r7, #40	; 0x28
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	20000664 	.word	0x20000664

0800f534 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f53e:	2004      	movs	r0, #4
 800f540:	f7f6 fafc 	bl	8005b3c <memp_malloc>
 800f544:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d110      	bne.n	800f56e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7ff ff8e 	bl	800f470 <ip_reass_remove_oldest_datagram>
 800f554:	4602      	mov	r2, r0
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	4293      	cmp	r3, r2
 800f55a:	dc03      	bgt.n	800f564 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f55c:	2004      	movs	r0, #4
 800f55e:	f7f6 faed 	bl	8005b3c <memp_malloc>
 800f562:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e016      	b.n	800f59c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f56e:	2220      	movs	r2, #32
 800f570:	2100      	movs	r1, #0
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	f000 fe14 	bl	80101a0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	220f      	movs	r2, #15
 800f57c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f57e:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f586:	4a07      	ldr	r2, [pc, #28]	; (800f5a4 <ip_reass_enqueue_new_datagram+0x70>)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	3308      	adds	r3, #8
 800f590:	2214      	movs	r2, #20
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	4618      	mov	r0, r3
 800f596:	f000 fddb 	bl	8010150 <memcpy>
  return ipr;
 800f59a:	68fb      	ldr	r3, [r7, #12]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	20000664 	.word	0x20000664

0800f5a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f5b2:	4b10      	ldr	r3, [pc, #64]	; (800f5f4 <ip_reass_dequeue_datagram+0x4c>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d104      	bne.n	800f5c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a0c      	ldr	r2, [pc, #48]	; (800f5f4 <ip_reass_dequeue_datagram+0x4c>)
 800f5c2:	6013      	str	r3, [r2, #0]
 800f5c4:	e00d      	b.n	800f5e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d106      	bne.n	800f5da <ip_reass_dequeue_datagram+0x32>
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	; (800f5f8 <ip_reass_dequeue_datagram+0x50>)
 800f5ce:	f240 1245 	movw	r2, #325	; 0x145
 800f5d2:	490a      	ldr	r1, [pc, #40]	; (800f5fc <ip_reass_dequeue_datagram+0x54>)
 800f5d4:	480a      	ldr	r0, [pc, #40]	; (800f600 <ip_reass_dequeue_datagram+0x58>)
 800f5d6:	f000 fdeb 	bl	80101b0 <iprintf>
    prev->next = ipr->next;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	2004      	movs	r0, #4
 800f5e6:	f7f6 faf5 	bl	8005bd4 <memp_free>
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	20000664 	.word	0x20000664
 800f5f8:	08014084 	.word	0x08014084
 800f5fc:	0801414c 	.word	0x0801414c
 800f600:	080140cc 	.word	0x080140cc

0800f604 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08c      	sub	sp, #48	; 0x30
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f610:	2300      	movs	r3, #0
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f614:	2301      	movs	r3, #1
 800f616:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	885b      	ldrh	r3, [r3, #2]
 800f622:	b29b      	uxth	r3, r3
 800f624:	4618      	mov	r0, r3
 800f626:	f7f5 fdc9 	bl	80051bc <lwip_htons>
 800f62a:	4603      	mov	r3, r0
 800f62c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	f003 030f 	and.w	r3, r3, #15
 800f636:	b2db      	uxtb	r3, r3
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f63c:	7e7b      	ldrb	r3, [r7, #25]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	8b7a      	ldrh	r2, [r7, #26]
 800f642:	429a      	cmp	r2, r3
 800f644:	d202      	bcs.n	800f64c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e135      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f64c:	7e7b      	ldrb	r3, [r7, #25]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	8b7a      	ldrh	r2, [r7, #26]
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	88db      	ldrh	r3, [r3, #6]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7f5 fdad 	bl	80051bc <lwip_htons>
 800f662:	4603      	mov	r3, r0
 800f664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f668:	b29b      	uxth	r3, r3
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f676:	2200      	movs	r2, #0
 800f678:	701a      	strb	r2, [r3, #0]
 800f67a:	2200      	movs	r2, #0
 800f67c:	705a      	strb	r2, [r3, #1]
 800f67e:	2200      	movs	r2, #0
 800f680:	709a      	strb	r2, [r3, #2]
 800f682:	2200      	movs	r2, #0
 800f684:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	8afa      	ldrh	r2, [r7, #22]
 800f68a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f68c:	8afa      	ldrh	r2, [r7, #22]
 800f68e:	8b7b      	ldrh	r3, [r7, #26]
 800f690:	4413      	add	r3, r2
 800f692:	b29a      	uxth	r2, r3
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	88db      	ldrh	r3, [r3, #6]
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	8afa      	ldrh	r2, [r7, #22]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d902      	bls.n	800f6aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6a8:	e106      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f6b0:	e068      	b.n	800f784 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	889b      	ldrh	r3, [r3, #4]
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	889b      	ldrh	r3, [r3, #4]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d235      	bcs.n	800f734 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d020      	beq.n	800f716 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d6:	889b      	ldrh	r3, [r3, #4]
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	88db      	ldrh	r3, [r3, #6]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d307      	bcc.n	800f6f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e6:	88db      	ldrh	r3, [r3, #6]
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	889b      	ldrh	r3, [r3, #4]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d902      	bls.n	800f6fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f8:	e0de      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	88db      	ldrh	r3, [r3, #6]
 800f704:	b29a      	uxth	r2, r3
 800f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f708:	889b      	ldrh	r3, [r3, #4]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d03d      	beq.n	800f78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f710:	2300      	movs	r3, #0
 800f712:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f714:	e03a      	b.n	800f78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f718:	88db      	ldrh	r3, [r3, #6]
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	889b      	ldrh	r3, [r3, #4]
 800f720:	b29b      	uxth	r3, r3
 800f722:	429a      	cmp	r2, r3
 800f724:	d902      	bls.n	800f72c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f726:	f04f 33ff 	mov.w	r3, #4294967295
 800f72a:	e0c5      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	605a      	str	r2, [r3, #4]
      break;
 800f732:	e02b      	b.n	800f78c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f736:	889b      	ldrh	r3, [r3, #4]
 800f738:	b29a      	uxth	r2, r3
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	889b      	ldrh	r3, [r3, #4]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	429a      	cmp	r2, r3
 800f742:	d102      	bne.n	800f74a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f744:	f04f 33ff 	mov.w	r3, #4294967295
 800f748:	e0b6      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	889b      	ldrh	r3, [r3, #4]
 800f74e:	b29a      	uxth	r2, r3
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	88db      	ldrh	r3, [r3, #6]
 800f754:	b29b      	uxth	r3, r3
 800f756:	429a      	cmp	r2, r3
 800f758:	d202      	bcs.n	800f760 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295
 800f75e:	e0ab      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	2b00      	cmp	r3, #0
 800f764:	d009      	beq.n	800f77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f768:	88db      	ldrh	r3, [r3, #6]
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	889b      	ldrh	r3, [r3, #4]
 800f770:	b29b      	uxth	r3, r3
 800f772:	429a      	cmp	r2, r3
 800f774:	d001      	beq.n	800f77a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	2b00      	cmp	r3, #0
 800f788:	d193      	bne.n	800f6b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f78a:	e000      	b.n	800f78e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f78c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	2b00      	cmp	r3, #0
 800f792:	d12d      	bne.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	2b00      	cmp	r3, #0
 800f798:	d01c      	beq.n	800f7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79c:	88db      	ldrh	r3, [r3, #6]
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a2:	889b      	ldrh	r3, [r3, #4]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d906      	bls.n	800f7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f7aa:	4b45      	ldr	r3, [pc, #276]	; (800f8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7ac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f7b0:	4944      	ldr	r1, [pc, #272]	; (800f8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f7b2:	4845      	ldr	r0, [pc, #276]	; (800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7b4:	f000 fcfc 	bl	80101b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	68ba      	ldr	r2, [r7, #8]
 800f7bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c0:	88db      	ldrh	r3, [r3, #6]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c6:	889b      	ldrh	r3, [r3, #4]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d010      	beq.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	623b      	str	r3, [r7, #32]
 800f7d2:	e00d      	b.n	800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d006      	beq.n	800f7ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f7dc:	4b38      	ldr	r3, [pc, #224]	; (800f8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f7e2:	493a      	ldr	r1, [pc, #232]	; (800f8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f7e4:	4838      	ldr	r0, [pc, #224]	; (800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7e6:	f000 fce3 	bl	80101b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d105      	bne.n	800f802 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	7f9b      	ldrb	r3, [r3, #30]
 800f7fa:	f003 0301 	and.w	r3, r3, #1
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d059      	beq.n	800f8b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d04f      	beq.n	800f8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d006      	beq.n	800f81e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	889b      	ldrh	r3, [r3, #4]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	623b      	str	r3, [r7, #32]
 800f822:	e041      	b.n	800f8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f82e:	e012      	b.n	800f856 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f838:	88db      	ldrh	r3, [r3, #6]
 800f83a:	b29a      	uxth	r2, r3
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	889b      	ldrh	r3, [r3, #4]
 800f840:	b29b      	uxth	r3, r3
 800f842:	429a      	cmp	r2, r3
 800f844:	d002      	beq.n	800f84c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f846:	2300      	movs	r3, #0
 800f848:	623b      	str	r3, [r7, #32]
            break;
 800f84a:	e007      	b.n	800f85c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1e9      	bne.n	800f830 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d022      	beq.n	800f8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f86a:	4b15      	ldr	r3, [pc, #84]	; (800f8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f86c:	f240 12df 	movw	r2, #479	; 0x1df
 800f870:	4917      	ldr	r1, [pc, #92]	; (800f8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f872:	4815      	ldr	r0, [pc, #84]	; (800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f874:	f000 fc9c 	bl	80101b0 <iprintf>
          LWIP_ASSERT("sanity check",
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f880:	429a      	cmp	r2, r3
 800f882:	d106      	bne.n	800f892 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f884:	4b0e      	ldr	r3, [pc, #56]	; (800f8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f886:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f88a:	4911      	ldr	r1, [pc, #68]	; (800f8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f88c:	480e      	ldr	r0, [pc, #56]	; (800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f88e:	f000 fc8f 	bl	80101b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d006      	beq.n	800f8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f89a:	4b09      	ldr	r3, [pc, #36]	; (800f8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f89c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f8a0:	490c      	ldr	r1, [pc, #48]	; (800f8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f8a2:	4809      	ldr	r0, [pc, #36]	; (800f8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f8a4:	f000 fc84 	bl	80101b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	bf14      	ite	ne
 800f8ae:	2301      	movne	r3, #1
 800f8b0:	2300      	moveq	r3, #0
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	e000      	b.n	800f8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f8b6:	2300      	movs	r3, #0
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3730      	adds	r7, #48	; 0x30
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	08014084 	.word	0x08014084
 800f8c4:	08014168 	.word	0x08014168
 800f8c8:	080140cc 	.word	0x080140cc
 800f8cc:	08014188 	.word	0x08014188
 800f8d0:	080141c0 	.word	0x080141c0
 800f8d4:	080141d0 	.word	0x080141d0

0800f8d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08e      	sub	sp, #56	; 0x38
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	f003 030f 	and.w	r3, r3, #15
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	b2db      	uxtb	r3, r3
 800f8f4:	2b14      	cmp	r3, #20
 800f8f6:	f040 8167 	bne.w	800fbc8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	88db      	ldrh	r3, [r3, #6]
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	4618      	mov	r0, r3
 800f902:	f7f5 fc5b 	bl	80051bc <lwip_htons>
 800f906:	4603      	mov	r3, r0
 800f908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	885b      	ldrh	r3, [r3, #2]
 800f916:	b29b      	uxth	r3, r3
 800f918:	4618      	mov	r0, r3
 800f91a:	f7f5 fc4f 	bl	80051bc <lwip_htons>
 800f91e:	4603      	mov	r3, r0
 800f920:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	f003 030f 	and.w	r3, r3, #15
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f936:	b29b      	uxth	r3, r3
 800f938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f93a:	429a      	cmp	r2, r3
 800f93c:	f0c0 8146 	bcc.w	800fbcc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f944:	b29b      	uxth	r3, r3
 800f946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7f6 ffdb 	bl	8006908 <pbuf_clen>
 800f952:	4603      	mov	r3, r0
 800f954:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f956:	4b9f      	ldr	r3, [pc, #636]	; (800fbd4 <ip4_reass+0x2fc>)
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	461a      	mov	r2, r3
 800f95c:	8c3b      	ldrh	r3, [r7, #32]
 800f95e:	4413      	add	r3, r2
 800f960:	2b0a      	cmp	r3, #10
 800f962:	dd10      	ble.n	800f986 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f964:	8c3b      	ldrh	r3, [r7, #32]
 800f966:	4619      	mov	r1, r3
 800f968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f96a:	f7ff fd81 	bl	800f470 <ip_reass_remove_oldest_datagram>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 812d 	beq.w	800fbd0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f976:	4b97      	ldr	r3, [pc, #604]	; (800fbd4 <ip4_reass+0x2fc>)
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	8c3b      	ldrh	r3, [r7, #32]
 800f97e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f980:	2b0a      	cmp	r3, #10
 800f982:	f300 8125 	bgt.w	800fbd0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f986:	4b94      	ldr	r3, [pc, #592]	; (800fbd8 <ip4_reass+0x300>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	633b      	str	r3, [r7, #48]	; 0x30
 800f98c:	e015      	b.n	800f9ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f990:	695a      	ldr	r2, [r3, #20]
 800f992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	429a      	cmp	r2, r3
 800f998:	d10c      	bne.n	800f9b4 <ip4_reass+0xdc>
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	699a      	ldr	r2, [r3, #24]
 800f99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d106      	bne.n	800f9b4 <ip4_reass+0xdc>
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	899a      	ldrh	r2, [r3, #12]
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	889b      	ldrh	r3, [r3, #4]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d006      	beq.n	800f9c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	633b      	str	r3, [r7, #48]	; 0x30
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d1e6      	bne.n	800f98e <ip4_reass+0xb6>
 800f9c0:	e000      	b.n	800f9c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f9c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d109      	bne.n	800f9de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f9ca:	8c3b      	ldrh	r3, [r7, #32]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9d0:	f7ff fdb0 	bl	800f534 <ip_reass_enqueue_new_datagram>
 800f9d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d11c      	bne.n	800fa16 <ip4_reass+0x13e>
      goto nullreturn;
 800f9dc:	e109      	b.n	800fbf2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e0:	88db      	ldrh	r3, [r3, #6]
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7f5 fbe9 	bl	80051bc <lwip_htons>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d110      	bne.n	800fa16 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f6:	89db      	ldrh	r3, [r3, #14]
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7f5 fbdf 	bl	80051bc <lwip_htons>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d006      	beq.n	800fa16 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0a:	3308      	adds	r3, #8
 800fa0c:	2214      	movs	r2, #20
 800fa0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 fb9d 	bl	8010150 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa18:	88db      	ldrh	r3, [r3, #6]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	f003 0320 	and.w	r3, r3, #32
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	bf0c      	ite	eq
 800fa24:	2301      	moveq	r3, #1
 800fa26:	2300      	movne	r3, #0
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00e      	beq.n	800fa50 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fa32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa36:	4413      	add	r3, r2
 800fa38:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fa3a:	8b7a      	ldrh	r2, [r7, #26]
 800fa3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	f0c0 80a0 	bcc.w	800fb84 <ip4_reass+0x2ac>
 800fa44:	8b7b      	ldrh	r3, [r7, #26]
 800fa46:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	f200 809a 	bhi.w	800fb84 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fa50:	69fa      	ldr	r2, [r7, #28]
 800fa52:	6879      	ldr	r1, [r7, #4]
 800fa54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa56:	f7ff fdd5 	bl	800f604 <ip_reass_chain_frag_into_datagram_and_validate>
 800fa5a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa62:	f000 8091 	beq.w	800fb88 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fa66:	4b5b      	ldr	r3, [pc, #364]	; (800fbd4 <ip4_reass+0x2fc>)
 800fa68:	881a      	ldrh	r2, [r3, #0]
 800fa6a:	8c3b      	ldrh	r3, [r7, #32]
 800fa6c:	4413      	add	r3, r2
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	4b58      	ldr	r3, [pc, #352]	; (800fbd4 <ip4_reass+0x2fc>)
 800fa72:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00d      	beq.n	800fa96 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fa7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fa7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa7e:	4413      	add	r3, r2
 800fa80:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	8a7a      	ldrh	r2, [r7, #18]
 800fa86:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8a:	7f9b      	ldrb	r3, [r3, #30]
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa94:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d171      	bne.n	800fb80 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9e:	8b9b      	ldrh	r3, [r3, #28]
 800faa0:	3314      	adds	r3, #20
 800faa2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800faa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab8:	3308      	adds	r3, #8
 800faba:	2214      	movs	r2, #20
 800fabc:	4619      	mov	r1, r3
 800fabe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fac0:	f000 fb46 	bl	8010150 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fac4:	8a3b      	ldrh	r3, [r7, #16]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7f5 fb78 	bl	80051bc <lwip_htons>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad6:	2200      	movs	r2, #0
 800fad8:	719a      	strb	r2, [r3, #6]
 800fada:	2200      	movs	r2, #0
 800fadc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	2200      	movs	r2, #0
 800fae2:	729a      	strb	r2, [r3, #10]
 800fae4:	2200      	movs	r2, #0
 800fae6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faea:	685b      	ldr	r3, [r3, #4]
 800faec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800faee:	e00d      	b.n	800fb0c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800faf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800faf6:	2114      	movs	r1, #20
 800faf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fafa:	f7f6 fdf7 	bl	80066ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800fafe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7f6 ff3b 	bl	800697c <pbuf_cat>
      r = iprh->next_pbuf;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1ee      	bne.n	800faf0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fb12:	4b31      	ldr	r3, [pc, #196]	; (800fbd8 <ip4_reass+0x300>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d102      	bne.n	800fb22 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb20:	e010      	b.n	800fb44 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb22:	4b2d      	ldr	r3, [pc, #180]	; (800fbd8 <ip4_reass+0x300>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb28:	e007      	b.n	800fb3a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d006      	beq.n	800fb42 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1f4      	bne.n	800fb2a <ip4_reass+0x252>
 800fb40:	e000      	b.n	800fb44 <ip4_reass+0x26c>
          break;
 800fb42:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fb44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb48:	f7ff fd2e 	bl	800f5a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7f6 fedb 	bl	8006908 <pbuf_clen>
 800fb52:	4603      	mov	r3, r0
 800fb54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fb56:	4b1f      	ldr	r3, [pc, #124]	; (800fbd4 <ip4_reass+0x2fc>)
 800fb58:	881b      	ldrh	r3, [r3, #0]
 800fb5a:	8c3a      	ldrh	r2, [r7, #32]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d906      	bls.n	800fb6e <ip4_reass+0x296>
 800fb60:	4b1e      	ldr	r3, [pc, #120]	; (800fbdc <ip4_reass+0x304>)
 800fb62:	f240 229b 	movw	r2, #667	; 0x29b
 800fb66:	491e      	ldr	r1, [pc, #120]	; (800fbe0 <ip4_reass+0x308>)
 800fb68:	481e      	ldr	r0, [pc, #120]	; (800fbe4 <ip4_reass+0x30c>)
 800fb6a:	f000 fb21 	bl	80101b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fb6e:	4b19      	ldr	r3, [pc, #100]	; (800fbd4 <ip4_reass+0x2fc>)
 800fb70:	881a      	ldrh	r2, [r3, #0]
 800fb72:	8c3b      	ldrh	r3, [r7, #32]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	4b16      	ldr	r3, [pc, #88]	; (800fbd4 <ip4_reass+0x2fc>)
 800fb7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	e03c      	b.n	800fbfa <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	e03a      	b.n	800fbfa <ip4_reass+0x322>
      goto nullreturn_ipr;
 800fb84:	bf00      	nop
 800fb86:	e000      	b.n	800fb8a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fb88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <ip4_reass+0x2c6>
 800fb90:	4b12      	ldr	r3, [pc, #72]	; (800fbdc <ip4_reass+0x304>)
 800fb92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fb96:	4914      	ldr	r1, [pc, #80]	; (800fbe8 <ip4_reass+0x310>)
 800fb98:	4812      	ldr	r0, [pc, #72]	; (800fbe4 <ip4_reass+0x30c>)
 800fb9a:	f000 fb09 	bl	80101b0 <iprintf>
  if (ipr->p == NULL) {
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d124      	bne.n	800fbf0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fba6:	4b0c      	ldr	r3, [pc, #48]	; (800fbd8 <ip4_reass+0x300>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d006      	beq.n	800fbbe <ip4_reass+0x2e6>
 800fbb0:	4b0a      	ldr	r3, [pc, #40]	; (800fbdc <ip4_reass+0x304>)
 800fbb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fbb6:	490d      	ldr	r1, [pc, #52]	; (800fbec <ip4_reass+0x314>)
 800fbb8:	480a      	ldr	r0, [pc, #40]	; (800fbe4 <ip4_reass+0x30c>)
 800fbba:	f000 faf9 	bl	80101b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbc2:	f7ff fcf1 	bl	800f5a8 <ip_reass_dequeue_datagram>
 800fbc6:	e014      	b.n	800fbf2 <ip4_reass+0x31a>
    goto nullreturn;
 800fbc8:	bf00      	nop
 800fbca:	e012      	b.n	800fbf2 <ip4_reass+0x31a>
    goto nullreturn;
 800fbcc:	bf00      	nop
 800fbce:	e010      	b.n	800fbf2 <ip4_reass+0x31a>
      goto nullreturn;
 800fbd0:	bf00      	nop
 800fbd2:	e00e      	b.n	800fbf2 <ip4_reass+0x31a>
 800fbd4:	20000668 	.word	0x20000668
 800fbd8:	20000664 	.word	0x20000664
 800fbdc:	08014084 	.word	0x08014084
 800fbe0:	080141f4 	.word	0x080141f4
 800fbe4:	080140cc 	.word	0x080140cc
 800fbe8:	08014210 	.word	0x08014210
 800fbec:	0801421c 	.word	0x0801421c
  }

nullreturn:
 800fbf0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7f6 fe00 	bl	80067f8 <pbuf_free>
  return NULL;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3738      	adds	r7, #56	; 0x38
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop

0800fc04 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fc08:	2005      	movs	r0, #5
 800fc0a:	f7f5 ff97 	bl	8005b3c <memp_malloc>
 800fc0e:	4603      	mov	r3, r0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fc22:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fc24:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fc28:	4906      	ldr	r1, [pc, #24]	; (800fc44 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fc2a:	4807      	ldr	r0, [pc, #28]	; (800fc48 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fc2c:	f000 fac0 	bl	80101b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fc30:	6879      	ldr	r1, [r7, #4]
 800fc32:	2005      	movs	r0, #5
 800fc34:	f7f5 ffce 	bl	8005bd4 <memp_free>
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	08014084 	.word	0x08014084
 800fc44:	0801423c 	.word	0x0801423c
 800fc48:	080140cc 	.word	0x080140cc

0800fc4c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d106      	bne.n	800fc6c <ipfrag_free_pbuf_custom+0x20>
 800fc5e:	4b11      	ldr	r3, [pc, #68]	; (800fca4 <ipfrag_free_pbuf_custom+0x58>)
 800fc60:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fc64:	4910      	ldr	r1, [pc, #64]	; (800fca8 <ipfrag_free_pbuf_custom+0x5c>)
 800fc66:	4811      	ldr	r0, [pc, #68]	; (800fcac <ipfrag_free_pbuf_custom+0x60>)
 800fc68:	f000 faa2 	bl	80101b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d006      	beq.n	800fc82 <ipfrag_free_pbuf_custom+0x36>
 800fc74:	4b0b      	ldr	r3, [pc, #44]	; (800fca4 <ipfrag_free_pbuf_custom+0x58>)
 800fc76:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fc7a:	490d      	ldr	r1, [pc, #52]	; (800fcb0 <ipfrag_free_pbuf_custom+0x64>)
 800fc7c:	480b      	ldr	r0, [pc, #44]	; (800fcac <ipfrag_free_pbuf_custom+0x60>)
 800fc7e:	f000 fa97 	bl	80101b0 <iprintf>
  if (pcr->original != NULL) {
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	695b      	ldr	r3, [r3, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d004      	beq.n	800fc94 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	695b      	ldr	r3, [r3, #20]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7f6 fdb2 	bl	80067f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7ff ffbd 	bl	800fc14 <ip_frag_free_pbuf_custom_ref>
}
 800fc9a:	bf00      	nop
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	08014084 	.word	0x08014084
 800fca8:	08014248 	.word	0x08014248
 800fcac:	080140cc 	.word	0x080140cc
 800fcb0:	08014254 	.word	0x08014254

0800fcb4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b094      	sub	sp, #80	; 0x50
 800fcb8:	af02      	add	r7, sp, #8
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcca:	3b14      	subs	r3, #20
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	da00      	bge.n	800fcd2 <ip4_frag+0x1e>
 800fcd0:	3307      	adds	r3, #7
 800fcd2:	10db      	asrs	r3, r3, #3
 800fcd4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fcd6:	2314      	movs	r3, #20
 800fcd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 030f 	and.w	r3, r3, #15
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b14      	cmp	r3, #20
 800fcf4:	d002      	beq.n	800fcfc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fcf6:	f06f 0305 	mvn.w	r3, #5
 800fcfa:	e110      	b.n	800ff1e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	895b      	ldrh	r3, [r3, #10]
 800fd00:	2b13      	cmp	r3, #19
 800fd02:	d809      	bhi.n	800fd18 <ip4_frag+0x64>
 800fd04:	4b88      	ldr	r3, [pc, #544]	; (800ff28 <ip4_frag+0x274>)
 800fd06:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fd0a:	4988      	ldr	r1, [pc, #544]	; (800ff2c <ip4_frag+0x278>)
 800fd0c:	4888      	ldr	r0, [pc, #544]	; (800ff30 <ip4_frag+0x27c>)
 800fd0e:	f000 fa4f 	bl	80101b0 <iprintf>
 800fd12:	f06f 0305 	mvn.w	r3, #5
 800fd16:	e102      	b.n	800ff1e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1a:	88db      	ldrh	r3, [r3, #6]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7f5 fa4c 	bl	80051bc <lwip_htons>
 800fd24:	4603      	mov	r3, r0
 800fd26:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fd28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fd32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fd38:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	891b      	ldrh	r3, [r3, #8]
 800fd3e:	3b14      	subs	r3, #20
 800fd40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fd44:	e0e1      	b.n	800ff0a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fd46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd50:	4293      	cmp	r3, r2
 800fd52:	bf28      	it	cs
 800fd54:	4613      	movcs	r3, r2
 800fd56:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fd58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd5c:	2114      	movs	r1, #20
 800fd5e:	200e      	movs	r0, #14
 800fd60:	f7f6 fa66 	bl	8006230 <pbuf_alloc>
 800fd64:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f000 80d5 	beq.w	800ff18 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd70:	895b      	ldrh	r3, [r3, #10]
 800fd72:	2b13      	cmp	r3, #19
 800fd74:	d806      	bhi.n	800fd84 <ip4_frag+0xd0>
 800fd76:	4b6c      	ldr	r3, [pc, #432]	; (800ff28 <ip4_frag+0x274>)
 800fd78:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fd7c:	496d      	ldr	r1, [pc, #436]	; (800ff34 <ip4_frag+0x280>)
 800fd7e:	486c      	ldr	r0, [pc, #432]	; (800ff30 <ip4_frag+0x27c>)
 800fd80:	f000 fa16 	bl	80101b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	2214      	movs	r2, #20
 800fd8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f000 f9df 	bl	8010150 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fd98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fd9e:	e064      	b.n	800fe6a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	895a      	ldrh	r2, [r3, #10]
 800fda4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	895b      	ldrh	r3, [r3, #10]
 800fdae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d906      	bls.n	800fdc2 <ip4_frag+0x10e>
 800fdb4:	4b5c      	ldr	r3, [pc, #368]	; (800ff28 <ip4_frag+0x274>)
 800fdb6:	f240 322d 	movw	r2, #813	; 0x32d
 800fdba:	495f      	ldr	r1, [pc, #380]	; (800ff38 <ip4_frag+0x284>)
 800fdbc:	485c      	ldr	r0, [pc, #368]	; (800ff30 <ip4_frag+0x27c>)
 800fdbe:	f000 f9f7 	bl	80101b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fdc2:	8bfa      	ldrh	r2, [r7, #30]
 800fdc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	bf28      	it	cs
 800fdcc:	4613      	movcs	r3, r2
 800fdce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fdd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d105      	bne.n	800fde6 <ip4_frag+0x132>
        poff = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	60fb      	str	r3, [r7, #12]
        continue;
 800fde4:	e041      	b.n	800fe6a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fde6:	f7ff ff0d 	bl	800fc04 <ip_frag_alloc_pbuf_custom_ref>
 800fdea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d103      	bne.n	800fdfa <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fdf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fdf4:	f7f6 fd00 	bl	80067f8 <pbuf_free>
        goto memerr;
 800fdf8:	e08f      	b.n	800ff1a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fdfa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fe00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe02:	4413      	add	r3, r2
 800fe04:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fe08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fe0c:	9201      	str	r2, [sp, #4]
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	4603      	mov	r3, r0
 800fe12:	2241      	movs	r2, #65	; 0x41
 800fe14:	2000      	movs	r0, #0
 800fe16:	f7f6 fb35 	bl	8006484 <pbuf_alloced_custom>
 800fe1a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d106      	bne.n	800fe30 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fe22:	69b8      	ldr	r0, [r7, #24]
 800fe24:	f7ff fef6 	bl	800fc14 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fe28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe2a:	f7f6 fce5 	bl	80067f8 <pbuf_free>
        goto memerr;
 800fe2e:	e074      	b.n	800ff1a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f7f6 fd81 	bl	8006938 <pbuf_ref>
      pcr->original = p;
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fe3c:	69bb      	ldr	r3, [r7, #24]
 800fe3e:	4a3f      	ldr	r2, [pc, #252]	; (800ff3c <ip4_frag+0x288>)
 800fe40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fe42:	6979      	ldr	r1, [r7, #20]
 800fe44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe46:	f7f6 fd99 	bl	800697c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fe4a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fe4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fe58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <ip4_frag+0x1b6>
        poff = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fe6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d196      	bne.n	800fda0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fe72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fe74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe78:	4413      	add	r3, r2
 800fe7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe80:	f1a3 0213 	sub.w	r2, r3, #19
 800fe84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	bfcc      	ite	gt
 800fe8c:	2301      	movgt	r3, #1
 800fe8e:	2300      	movle	r3, #0
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fe94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <ip4_frag+0x1f6>
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800feaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800feac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800feb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800feb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f5 f981 	bl	80051bc <lwip_htons>
 800feba:	4603      	mov	r3, r0
 800febc:	461a      	mov	r2, r3
 800febe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fec2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fec4:	3314      	adds	r3, #20
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	4618      	mov	r0, r3
 800feca:	f7f5 f977 	bl	80051bc <lwip_htons>
 800fece:	4603      	mov	r3, r0
 800fed0:	461a      	mov	r2, r3
 800fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed8:	2200      	movs	r2, #0
 800feda:	729a      	strb	r2, [r3, #10]
 800fedc:	2200      	movs	r2, #0
 800fede:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fee8:	68b8      	ldr	r0, [r7, #8]
 800feea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800feec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800feee:	f7f6 fc83 	bl	80067f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fef2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fefe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ff02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ff04:	4413      	add	r3, r2
 800ff06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ff0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f47f af19 	bne.w	800fd46 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	e002      	b.n	800ff1e <ip4_frag+0x26a>
      goto memerr;
 800ff18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ff1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3748      	adds	r7, #72	; 0x48
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	08014084 	.word	0x08014084
 800ff2c:	08014260 	.word	0x08014260
 800ff30:	080140cc 	.word	0x080140cc
 800ff34:	0801427c 	.word	0x0801427c
 800ff38:	0801429c 	.word	0x0801429c
 800ff3c:	0800fc4d 	.word	0x0800fc4d

0800ff40 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ff4a:	230e      	movs	r3, #14
 800ff4c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	895b      	ldrh	r3, [r3, #10]
 800ff52:	2b0e      	cmp	r3, #14
 800ff54:	d96e      	bls.n	8010034 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	7bdb      	ldrb	r3, [r3, #15]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff64:	3301      	adds	r3, #1
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	7b1a      	ldrb	r2, [r3, #12]
 800ff76:	7b5b      	ldrb	r3, [r3, #13]
 800ff78:	021b      	lsls	r3, r3, #8
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d023      	beq.n	800ffd2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d10f      	bne.n	800ffb2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	785b      	ldrb	r3, [r3, #1]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d11b      	bne.n	800ffd2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ff9e:	2b5e      	cmp	r3, #94	; 0x5e
 800ffa0:	d117      	bne.n	800ffd2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	7b5b      	ldrb	r3, [r3, #13]
 800ffa6:	f043 0310 	orr.w	r3, r3, #16
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	735a      	strb	r2, [r3, #13]
 800ffb0:	e00f      	b.n	800ffd2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2206      	movs	r2, #6
 800ffb6:	4928      	ldr	r1, [pc, #160]	; (8010058 <ethernet_input+0x118>)
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 f8bb 	bl	8010134 <memcmp>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d106      	bne.n	800ffd2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	7b5b      	ldrb	r3, [r3, #13]
 800ffc8:	f043 0308 	orr.w	r3, r3, #8
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ffd2:	89fb      	ldrh	r3, [r7, #14]
 800ffd4:	2b08      	cmp	r3, #8
 800ffd6:	d003      	beq.n	800ffe0 <ethernet_input+0xa0>
 800ffd8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ffdc:	d014      	beq.n	8010008 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ffde:	e032      	b.n	8010046 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffe6:	f003 0308 	and.w	r3, r3, #8
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d024      	beq.n	8010038 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ffee:	8afb      	ldrh	r3, [r7, #22]
 800fff0:	4619      	mov	r1, r3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7f6 fb7a 	bl	80066ec <pbuf_remove_header>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d11e      	bne.n	801003c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fffe:	6839      	ldr	r1, [r7, #0]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7fe ff27 	bl	800ee54 <ip4_input>
      break;
 8010006:	e013      	b.n	8010030 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801000e:	f003 0308 	and.w	r3, r3, #8
 8010012:	2b00      	cmp	r3, #0
 8010014:	d014      	beq.n	8010040 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010016:	8afb      	ldrh	r3, [r7, #22]
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7f6 fb66 	bl	80066ec <pbuf_remove_header>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d10e      	bne.n	8010044 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7fe f8c7 	bl	800e1bc <etharp_input>
      break;
 801002e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	e00c      	b.n	801004e <ethernet_input+0x10e>
    goto free_and_return;
 8010034:	bf00      	nop
 8010036:	e006      	b.n	8010046 <ethernet_input+0x106>
        goto free_and_return;
 8010038:	bf00      	nop
 801003a:	e004      	b.n	8010046 <ethernet_input+0x106>
        goto free_and_return;
 801003c:	bf00      	nop
 801003e:	e002      	b.n	8010046 <ethernet_input+0x106>
        goto free_and_return;
 8010040:	bf00      	nop
 8010042:	e000      	b.n	8010046 <ethernet_input+0x106>
        goto free_and_return;
 8010044:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7f6 fbd6 	bl	80067f8 <pbuf_free>
  return ERR_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	080148b0 	.word	0x080148b0

0801005c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
 8010068:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801006a:	8c3b      	ldrh	r3, [r7, #32]
 801006c:	4618      	mov	r0, r3
 801006e:	f7f5 f8a5 	bl	80051bc <lwip_htons>
 8010072:	4603      	mov	r3, r0
 8010074:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010076:	210e      	movs	r1, #14
 8010078:	68b8      	ldr	r0, [r7, #8]
 801007a:	f7f6 fb27 	bl	80066cc <pbuf_add_header>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d125      	bne.n	80100d0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	8afa      	ldrh	r2, [r7, #22]
 801008e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	2206      	movs	r2, #6
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	4618      	mov	r0, r3
 8010098:	f000 f85a 	bl	8010150 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	3306      	adds	r3, #6
 80100a0:	2206      	movs	r2, #6
 80100a2:	6879      	ldr	r1, [r7, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f853 	bl	8010150 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80100b0:	2b06      	cmp	r3, #6
 80100b2:	d006      	beq.n	80100c2 <ethernet_output+0x66>
 80100b4:	4b0a      	ldr	r3, [pc, #40]	; (80100e0 <ethernet_output+0x84>)
 80100b6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80100ba:	490a      	ldr	r1, [pc, #40]	; (80100e4 <ethernet_output+0x88>)
 80100bc:	480a      	ldr	r0, [pc, #40]	; (80100e8 <ethernet_output+0x8c>)
 80100be:	f000 f877 	bl	80101b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	699b      	ldr	r3, [r3, #24]
 80100c6:	68b9      	ldr	r1, [r7, #8]
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	4798      	blx	r3
 80100cc:	4603      	mov	r3, r0
 80100ce:	e002      	b.n	80100d6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80100d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80100d2:	f06f 0301 	mvn.w	r3, #1
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	080142ac 	.word	0x080142ac
 80100e4:	080142e4 	.word	0x080142e4
 80100e8:	08014318 	.word	0x08014318

080100ec <__libc_init_array>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4d0d      	ldr	r5, [pc, #52]	; (8010124 <__libc_init_array+0x38>)
 80100f0:	4c0d      	ldr	r4, [pc, #52]	; (8010128 <__libc_init_array+0x3c>)
 80100f2:	1b64      	subs	r4, r4, r5
 80100f4:	10a4      	asrs	r4, r4, #2
 80100f6:	2600      	movs	r6, #0
 80100f8:	42a6      	cmp	r6, r4
 80100fa:	d109      	bne.n	8010110 <__libc_init_array+0x24>
 80100fc:	4d0b      	ldr	r5, [pc, #44]	; (801012c <__libc_init_array+0x40>)
 80100fe:	4c0c      	ldr	r4, [pc, #48]	; (8010130 <__libc_init_array+0x44>)
 8010100:	f001 fa3a 	bl	8011578 <_init>
 8010104:	1b64      	subs	r4, r4, r5
 8010106:	10a4      	asrs	r4, r4, #2
 8010108:	2600      	movs	r6, #0
 801010a:	42a6      	cmp	r6, r4
 801010c:	d105      	bne.n	801011a <__libc_init_array+0x2e>
 801010e:	bd70      	pop	{r4, r5, r6, pc}
 8010110:	f855 3b04 	ldr.w	r3, [r5], #4
 8010114:	4798      	blx	r3
 8010116:	3601      	adds	r6, #1
 8010118:	e7ee      	b.n	80100f8 <__libc_init_array+0xc>
 801011a:	f855 3b04 	ldr.w	r3, [r5], #4
 801011e:	4798      	blx	r3
 8010120:	3601      	adds	r6, #1
 8010122:	e7f2      	b.n	801010a <__libc_init_array+0x1e>
 8010124:	08014a14 	.word	0x08014a14
 8010128:	08014a14 	.word	0x08014a14
 801012c:	08014a14 	.word	0x08014a14
 8010130:	08014a18 	.word	0x08014a18

08010134 <memcmp>:
 8010134:	b530      	push	{r4, r5, lr}
 8010136:	3901      	subs	r1, #1
 8010138:	2400      	movs	r4, #0
 801013a:	42a2      	cmp	r2, r4
 801013c:	d101      	bne.n	8010142 <memcmp+0xe>
 801013e:	2000      	movs	r0, #0
 8010140:	e005      	b.n	801014e <memcmp+0x1a>
 8010142:	5d03      	ldrb	r3, [r0, r4]
 8010144:	3401      	adds	r4, #1
 8010146:	5d0d      	ldrb	r5, [r1, r4]
 8010148:	42ab      	cmp	r3, r5
 801014a:	d0f6      	beq.n	801013a <memcmp+0x6>
 801014c:	1b58      	subs	r0, r3, r5
 801014e:	bd30      	pop	{r4, r5, pc}

08010150 <memcpy>:
 8010150:	440a      	add	r2, r1
 8010152:	4291      	cmp	r1, r2
 8010154:	f100 33ff 	add.w	r3, r0, #4294967295
 8010158:	d100      	bne.n	801015c <memcpy+0xc>
 801015a:	4770      	bx	lr
 801015c:	b510      	push	{r4, lr}
 801015e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010166:	4291      	cmp	r1, r2
 8010168:	d1f9      	bne.n	801015e <memcpy+0xe>
 801016a:	bd10      	pop	{r4, pc}

0801016c <memmove>:
 801016c:	4288      	cmp	r0, r1
 801016e:	b510      	push	{r4, lr}
 8010170:	eb01 0402 	add.w	r4, r1, r2
 8010174:	d902      	bls.n	801017c <memmove+0x10>
 8010176:	4284      	cmp	r4, r0
 8010178:	4623      	mov	r3, r4
 801017a:	d807      	bhi.n	801018c <memmove+0x20>
 801017c:	1e43      	subs	r3, r0, #1
 801017e:	42a1      	cmp	r1, r4
 8010180:	d008      	beq.n	8010194 <memmove+0x28>
 8010182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010186:	f803 2f01 	strb.w	r2, [r3, #1]!
 801018a:	e7f8      	b.n	801017e <memmove+0x12>
 801018c:	4402      	add	r2, r0
 801018e:	4601      	mov	r1, r0
 8010190:	428a      	cmp	r2, r1
 8010192:	d100      	bne.n	8010196 <memmove+0x2a>
 8010194:	bd10      	pop	{r4, pc}
 8010196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801019a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801019e:	e7f7      	b.n	8010190 <memmove+0x24>

080101a0 <memset>:
 80101a0:	4402      	add	r2, r0
 80101a2:	4603      	mov	r3, r0
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d100      	bne.n	80101aa <memset+0xa>
 80101a8:	4770      	bx	lr
 80101aa:	f803 1b01 	strb.w	r1, [r3], #1
 80101ae:	e7f9      	b.n	80101a4 <memset+0x4>

080101b0 <iprintf>:
 80101b0:	b40f      	push	{r0, r1, r2, r3}
 80101b2:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <iprintf+0x2c>)
 80101b4:	b513      	push	{r0, r1, r4, lr}
 80101b6:	681c      	ldr	r4, [r3, #0]
 80101b8:	b124      	cbz	r4, 80101c4 <iprintf+0x14>
 80101ba:	69a3      	ldr	r3, [r4, #24]
 80101bc:	b913      	cbnz	r3, 80101c4 <iprintf+0x14>
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 f904 	bl	80103cc <__sinit>
 80101c4:	ab05      	add	r3, sp, #20
 80101c6:	9a04      	ldr	r2, [sp, #16]
 80101c8:	68a1      	ldr	r1, [r4, #8]
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	4620      	mov	r0, r4
 80101ce:	f000 fbe7 	bl	80109a0 <_vfiprintf_r>
 80101d2:	b002      	add	sp, #8
 80101d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101d8:	b004      	add	sp, #16
 80101da:	4770      	bx	lr
 80101dc:	2000001c 	.word	0x2000001c

080101e0 <rand>:
 80101e0:	4b17      	ldr	r3, [pc, #92]	; (8010240 <rand+0x60>)
 80101e2:	b510      	push	{r4, lr}
 80101e4:	681c      	ldr	r4, [r3, #0]
 80101e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80101e8:	b9b3      	cbnz	r3, 8010218 <rand+0x38>
 80101ea:	2018      	movs	r0, #24
 80101ec:	f000 f9a0 	bl	8010530 <malloc>
 80101f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80101f2:	b928      	cbnz	r0, 8010200 <rand+0x20>
 80101f4:	4602      	mov	r2, r0
 80101f6:	4b13      	ldr	r3, [pc, #76]	; (8010244 <rand+0x64>)
 80101f8:	4813      	ldr	r0, [pc, #76]	; (8010248 <rand+0x68>)
 80101fa:	214e      	movs	r1, #78	; 0x4e
 80101fc:	f000 f870 	bl	80102e0 <__assert_func>
 8010200:	4a12      	ldr	r2, [pc, #72]	; (801024c <rand+0x6c>)
 8010202:	4b13      	ldr	r3, [pc, #76]	; (8010250 <rand+0x70>)
 8010204:	e9c0 2300 	strd	r2, r3, [r0]
 8010208:	4b12      	ldr	r3, [pc, #72]	; (8010254 <rand+0x74>)
 801020a:	6083      	str	r3, [r0, #8]
 801020c:	230b      	movs	r3, #11
 801020e:	8183      	strh	r3, [r0, #12]
 8010210:	2201      	movs	r2, #1
 8010212:	2300      	movs	r3, #0
 8010214:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010218:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801021a:	480f      	ldr	r0, [pc, #60]	; (8010258 <rand+0x78>)
 801021c:	690a      	ldr	r2, [r1, #16]
 801021e:	694b      	ldr	r3, [r1, #20]
 8010220:	4c0e      	ldr	r4, [pc, #56]	; (801025c <rand+0x7c>)
 8010222:	4350      	muls	r0, r2
 8010224:	fb04 0003 	mla	r0, r4, r3, r0
 8010228:	fba2 3404 	umull	r3, r4, r2, r4
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	4404      	add	r4, r0
 8010230:	f144 0000 	adc.w	r0, r4, #0
 8010234:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8010238:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801023c:	bd10      	pop	{r4, pc}
 801023e:	bf00      	nop
 8010240:	2000001c 	.word	0x2000001c
 8010244:	080148c4 	.word	0x080148c4
 8010248:	080148db 	.word	0x080148db
 801024c:	abcd330e 	.word	0xabcd330e
 8010250:	e66d1234 	.word	0xe66d1234
 8010254:	0005deec 	.word	0x0005deec
 8010258:	5851f42d 	.word	0x5851f42d
 801025c:	4c957f2d 	.word	0x4c957f2d

08010260 <siprintf>:
 8010260:	b40e      	push	{r1, r2, r3}
 8010262:	b500      	push	{lr}
 8010264:	b09c      	sub	sp, #112	; 0x70
 8010266:	ab1d      	add	r3, sp, #116	; 0x74
 8010268:	9002      	str	r0, [sp, #8]
 801026a:	9006      	str	r0, [sp, #24]
 801026c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010270:	4809      	ldr	r0, [pc, #36]	; (8010298 <siprintf+0x38>)
 8010272:	9107      	str	r1, [sp, #28]
 8010274:	9104      	str	r1, [sp, #16]
 8010276:	4909      	ldr	r1, [pc, #36]	; (801029c <siprintf+0x3c>)
 8010278:	f853 2b04 	ldr.w	r2, [r3], #4
 801027c:	9105      	str	r1, [sp, #20]
 801027e:	6800      	ldr	r0, [r0, #0]
 8010280:	9301      	str	r3, [sp, #4]
 8010282:	a902      	add	r1, sp, #8
 8010284:	f000 fa62 	bl	801074c <_svfiprintf_r>
 8010288:	9b02      	ldr	r3, [sp, #8]
 801028a:	2200      	movs	r2, #0
 801028c:	701a      	strb	r2, [r3, #0]
 801028e:	b01c      	add	sp, #112	; 0x70
 8010290:	f85d eb04 	ldr.w	lr, [sp], #4
 8010294:	b003      	add	sp, #12
 8010296:	4770      	bx	lr
 8010298:	2000001c 	.word	0x2000001c
 801029c:	ffff0208 	.word	0xffff0208

080102a0 <strchr>:
 80102a0:	b2c9      	uxtb	r1, r1
 80102a2:	4603      	mov	r3, r0
 80102a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102a8:	b11a      	cbz	r2, 80102b2 <strchr+0x12>
 80102aa:	428a      	cmp	r2, r1
 80102ac:	d1f9      	bne.n	80102a2 <strchr+0x2>
 80102ae:	4618      	mov	r0, r3
 80102b0:	4770      	bx	lr
 80102b2:	2900      	cmp	r1, #0
 80102b4:	bf18      	it	ne
 80102b6:	2300      	movne	r3, #0
 80102b8:	e7f9      	b.n	80102ae <strchr+0xe>

080102ba <strncmp>:
 80102ba:	b510      	push	{r4, lr}
 80102bc:	b16a      	cbz	r2, 80102da <strncmp+0x20>
 80102be:	3901      	subs	r1, #1
 80102c0:	1884      	adds	r4, r0, r2
 80102c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80102c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d103      	bne.n	80102d6 <strncmp+0x1c>
 80102ce:	42a0      	cmp	r0, r4
 80102d0:	d001      	beq.n	80102d6 <strncmp+0x1c>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1f5      	bne.n	80102c2 <strncmp+0x8>
 80102d6:	1a98      	subs	r0, r3, r2
 80102d8:	bd10      	pop	{r4, pc}
 80102da:	4610      	mov	r0, r2
 80102dc:	e7fc      	b.n	80102d8 <strncmp+0x1e>
	...

080102e0 <__assert_func>:
 80102e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102e2:	4614      	mov	r4, r2
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b09      	ldr	r3, [pc, #36]	; (801030c <__assert_func+0x2c>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4605      	mov	r5, r0
 80102ec:	68d8      	ldr	r0, [r3, #12]
 80102ee:	b14c      	cbz	r4, 8010304 <__assert_func+0x24>
 80102f0:	4b07      	ldr	r3, [pc, #28]	; (8010310 <__assert_func+0x30>)
 80102f2:	9100      	str	r1, [sp, #0]
 80102f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102f8:	4906      	ldr	r1, [pc, #24]	; (8010314 <__assert_func+0x34>)
 80102fa:	462b      	mov	r3, r5
 80102fc:	f000 f8e4 	bl	80104c8 <fiprintf>
 8010300:	f000 ff38 	bl	8011174 <abort>
 8010304:	4b04      	ldr	r3, [pc, #16]	; (8010318 <__assert_func+0x38>)
 8010306:	461c      	mov	r4, r3
 8010308:	e7f3      	b.n	80102f2 <__assert_func+0x12>
 801030a:	bf00      	nop
 801030c:	2000001c 	.word	0x2000001c
 8010310:	0801493a 	.word	0x0801493a
 8010314:	08014947 	.word	0x08014947
 8010318:	08014975 	.word	0x08014975

0801031c <std>:
 801031c:	2300      	movs	r3, #0
 801031e:	b510      	push	{r4, lr}
 8010320:	4604      	mov	r4, r0
 8010322:	e9c0 3300 	strd	r3, r3, [r0]
 8010326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801032a:	6083      	str	r3, [r0, #8]
 801032c:	8181      	strh	r1, [r0, #12]
 801032e:	6643      	str	r3, [r0, #100]	; 0x64
 8010330:	81c2      	strh	r2, [r0, #14]
 8010332:	6183      	str	r3, [r0, #24]
 8010334:	4619      	mov	r1, r3
 8010336:	2208      	movs	r2, #8
 8010338:	305c      	adds	r0, #92	; 0x5c
 801033a:	f7ff ff31 	bl	80101a0 <memset>
 801033e:	4b05      	ldr	r3, [pc, #20]	; (8010354 <std+0x38>)
 8010340:	6263      	str	r3, [r4, #36]	; 0x24
 8010342:	4b05      	ldr	r3, [pc, #20]	; (8010358 <std+0x3c>)
 8010344:	62a3      	str	r3, [r4, #40]	; 0x28
 8010346:	4b05      	ldr	r3, [pc, #20]	; (801035c <std+0x40>)
 8010348:	62e3      	str	r3, [r4, #44]	; 0x2c
 801034a:	4b05      	ldr	r3, [pc, #20]	; (8010360 <std+0x44>)
 801034c:	6224      	str	r4, [r4, #32]
 801034e:	6323      	str	r3, [r4, #48]	; 0x30
 8010350:	bd10      	pop	{r4, pc}
 8010352:	bf00      	nop
 8010354:	08010f49 	.word	0x08010f49
 8010358:	08010f6b 	.word	0x08010f6b
 801035c:	08010fa3 	.word	0x08010fa3
 8010360:	08010fc7 	.word	0x08010fc7

08010364 <_cleanup_r>:
 8010364:	4901      	ldr	r1, [pc, #4]	; (801036c <_cleanup_r+0x8>)
 8010366:	f000 b8c1 	b.w	80104ec <_fwalk_reent>
 801036a:	bf00      	nop
 801036c:	080112b1 	.word	0x080112b1

08010370 <__sfmoreglue>:
 8010370:	b570      	push	{r4, r5, r6, lr}
 8010372:	1e4a      	subs	r2, r1, #1
 8010374:	2568      	movs	r5, #104	; 0x68
 8010376:	4355      	muls	r5, r2
 8010378:	460e      	mov	r6, r1
 801037a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801037e:	f000 f92f 	bl	80105e0 <_malloc_r>
 8010382:	4604      	mov	r4, r0
 8010384:	b140      	cbz	r0, 8010398 <__sfmoreglue+0x28>
 8010386:	2100      	movs	r1, #0
 8010388:	e9c0 1600 	strd	r1, r6, [r0]
 801038c:	300c      	adds	r0, #12
 801038e:	60a0      	str	r0, [r4, #8]
 8010390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010394:	f7ff ff04 	bl	80101a0 <memset>
 8010398:	4620      	mov	r0, r4
 801039a:	bd70      	pop	{r4, r5, r6, pc}

0801039c <__sfp_lock_acquire>:
 801039c:	4801      	ldr	r0, [pc, #4]	; (80103a4 <__sfp_lock_acquire+0x8>)
 801039e:	f000 b8c5 	b.w	801052c <__retarget_lock_acquire_recursive>
 80103a2:	bf00      	nop
 80103a4:	20006d20 	.word	0x20006d20

080103a8 <__sfp_lock_release>:
 80103a8:	4801      	ldr	r0, [pc, #4]	; (80103b0 <__sfp_lock_release+0x8>)
 80103aa:	f000 b8c0 	b.w	801052e <__retarget_lock_release_recursive>
 80103ae:	bf00      	nop
 80103b0:	20006d20 	.word	0x20006d20

080103b4 <__sinit_lock_acquire>:
 80103b4:	4801      	ldr	r0, [pc, #4]	; (80103bc <__sinit_lock_acquire+0x8>)
 80103b6:	f000 b8b9 	b.w	801052c <__retarget_lock_acquire_recursive>
 80103ba:	bf00      	nop
 80103bc:	20006d1b 	.word	0x20006d1b

080103c0 <__sinit_lock_release>:
 80103c0:	4801      	ldr	r0, [pc, #4]	; (80103c8 <__sinit_lock_release+0x8>)
 80103c2:	f000 b8b4 	b.w	801052e <__retarget_lock_release_recursive>
 80103c6:	bf00      	nop
 80103c8:	20006d1b 	.word	0x20006d1b

080103cc <__sinit>:
 80103cc:	b510      	push	{r4, lr}
 80103ce:	4604      	mov	r4, r0
 80103d0:	f7ff fff0 	bl	80103b4 <__sinit_lock_acquire>
 80103d4:	69a3      	ldr	r3, [r4, #24]
 80103d6:	b11b      	cbz	r3, 80103e0 <__sinit+0x14>
 80103d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103dc:	f7ff bff0 	b.w	80103c0 <__sinit_lock_release>
 80103e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80103e4:	6523      	str	r3, [r4, #80]	; 0x50
 80103e6:	4b13      	ldr	r3, [pc, #76]	; (8010434 <__sinit+0x68>)
 80103e8:	4a13      	ldr	r2, [pc, #76]	; (8010438 <__sinit+0x6c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80103ee:	42a3      	cmp	r3, r4
 80103f0:	bf04      	itt	eq
 80103f2:	2301      	moveq	r3, #1
 80103f4:	61a3      	streq	r3, [r4, #24]
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 f820 	bl	801043c <__sfp>
 80103fc:	6060      	str	r0, [r4, #4]
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 f81c 	bl	801043c <__sfp>
 8010404:	60a0      	str	r0, [r4, #8]
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f818 	bl	801043c <__sfp>
 801040c:	2200      	movs	r2, #0
 801040e:	60e0      	str	r0, [r4, #12]
 8010410:	2104      	movs	r1, #4
 8010412:	6860      	ldr	r0, [r4, #4]
 8010414:	f7ff ff82 	bl	801031c <std>
 8010418:	68a0      	ldr	r0, [r4, #8]
 801041a:	2201      	movs	r2, #1
 801041c:	2109      	movs	r1, #9
 801041e:	f7ff ff7d 	bl	801031c <std>
 8010422:	68e0      	ldr	r0, [r4, #12]
 8010424:	2202      	movs	r2, #2
 8010426:	2112      	movs	r1, #18
 8010428:	f7ff ff78 	bl	801031c <std>
 801042c:	2301      	movs	r3, #1
 801042e:	61a3      	str	r3, [r4, #24]
 8010430:	e7d2      	b.n	80103d8 <__sinit+0xc>
 8010432:	bf00      	nop
 8010434:	080148c0 	.word	0x080148c0
 8010438:	08010365 	.word	0x08010365

0801043c <__sfp>:
 801043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043e:	4607      	mov	r7, r0
 8010440:	f7ff ffac 	bl	801039c <__sfp_lock_acquire>
 8010444:	4b1e      	ldr	r3, [pc, #120]	; (80104c0 <__sfp+0x84>)
 8010446:	681e      	ldr	r6, [r3, #0]
 8010448:	69b3      	ldr	r3, [r6, #24]
 801044a:	b913      	cbnz	r3, 8010452 <__sfp+0x16>
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff ffbd 	bl	80103cc <__sinit>
 8010452:	3648      	adds	r6, #72	; 0x48
 8010454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010458:	3b01      	subs	r3, #1
 801045a:	d503      	bpl.n	8010464 <__sfp+0x28>
 801045c:	6833      	ldr	r3, [r6, #0]
 801045e:	b30b      	cbz	r3, 80104a4 <__sfp+0x68>
 8010460:	6836      	ldr	r6, [r6, #0]
 8010462:	e7f7      	b.n	8010454 <__sfp+0x18>
 8010464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010468:	b9d5      	cbnz	r5, 80104a0 <__sfp+0x64>
 801046a:	4b16      	ldr	r3, [pc, #88]	; (80104c4 <__sfp+0x88>)
 801046c:	60e3      	str	r3, [r4, #12]
 801046e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010472:	6665      	str	r5, [r4, #100]	; 0x64
 8010474:	f000 f859 	bl	801052a <__retarget_lock_init_recursive>
 8010478:	f7ff ff96 	bl	80103a8 <__sfp_lock_release>
 801047c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010484:	6025      	str	r5, [r4, #0]
 8010486:	61a5      	str	r5, [r4, #24]
 8010488:	2208      	movs	r2, #8
 801048a:	4629      	mov	r1, r5
 801048c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010490:	f7ff fe86 	bl	80101a0 <memset>
 8010494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801049c:	4620      	mov	r0, r4
 801049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a0:	3468      	adds	r4, #104	; 0x68
 80104a2:	e7d9      	b.n	8010458 <__sfp+0x1c>
 80104a4:	2104      	movs	r1, #4
 80104a6:	4638      	mov	r0, r7
 80104a8:	f7ff ff62 	bl	8010370 <__sfmoreglue>
 80104ac:	4604      	mov	r4, r0
 80104ae:	6030      	str	r0, [r6, #0]
 80104b0:	2800      	cmp	r0, #0
 80104b2:	d1d5      	bne.n	8010460 <__sfp+0x24>
 80104b4:	f7ff ff78 	bl	80103a8 <__sfp_lock_release>
 80104b8:	230c      	movs	r3, #12
 80104ba:	603b      	str	r3, [r7, #0]
 80104bc:	e7ee      	b.n	801049c <__sfp+0x60>
 80104be:	bf00      	nop
 80104c0:	080148c0 	.word	0x080148c0
 80104c4:	ffff0001 	.word	0xffff0001

080104c8 <fiprintf>:
 80104c8:	b40e      	push	{r1, r2, r3}
 80104ca:	b503      	push	{r0, r1, lr}
 80104cc:	4601      	mov	r1, r0
 80104ce:	ab03      	add	r3, sp, #12
 80104d0:	4805      	ldr	r0, [pc, #20]	; (80104e8 <fiprintf+0x20>)
 80104d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d6:	6800      	ldr	r0, [r0, #0]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f000 fa61 	bl	80109a0 <_vfiprintf_r>
 80104de:	b002      	add	sp, #8
 80104e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104e4:	b003      	add	sp, #12
 80104e6:	4770      	bx	lr
 80104e8:	2000001c 	.word	0x2000001c

080104ec <_fwalk_reent>:
 80104ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f0:	4606      	mov	r6, r0
 80104f2:	4688      	mov	r8, r1
 80104f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104f8:	2700      	movs	r7, #0
 80104fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104fe:	f1b9 0901 	subs.w	r9, r9, #1
 8010502:	d505      	bpl.n	8010510 <_fwalk_reent+0x24>
 8010504:	6824      	ldr	r4, [r4, #0]
 8010506:	2c00      	cmp	r4, #0
 8010508:	d1f7      	bne.n	80104fa <_fwalk_reent+0xe>
 801050a:	4638      	mov	r0, r7
 801050c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010510:	89ab      	ldrh	r3, [r5, #12]
 8010512:	2b01      	cmp	r3, #1
 8010514:	d907      	bls.n	8010526 <_fwalk_reent+0x3a>
 8010516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801051a:	3301      	adds	r3, #1
 801051c:	d003      	beq.n	8010526 <_fwalk_reent+0x3a>
 801051e:	4629      	mov	r1, r5
 8010520:	4630      	mov	r0, r6
 8010522:	47c0      	blx	r8
 8010524:	4307      	orrs	r7, r0
 8010526:	3568      	adds	r5, #104	; 0x68
 8010528:	e7e9      	b.n	80104fe <_fwalk_reent+0x12>

0801052a <__retarget_lock_init_recursive>:
 801052a:	4770      	bx	lr

0801052c <__retarget_lock_acquire_recursive>:
 801052c:	4770      	bx	lr

0801052e <__retarget_lock_release_recursive>:
 801052e:	4770      	bx	lr

08010530 <malloc>:
 8010530:	4b02      	ldr	r3, [pc, #8]	; (801053c <malloc+0xc>)
 8010532:	4601      	mov	r1, r0
 8010534:	6818      	ldr	r0, [r3, #0]
 8010536:	f000 b853 	b.w	80105e0 <_malloc_r>
 801053a:	bf00      	nop
 801053c:	2000001c 	.word	0x2000001c

08010540 <_free_r>:
 8010540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010542:	2900      	cmp	r1, #0
 8010544:	d048      	beq.n	80105d8 <_free_r+0x98>
 8010546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801054a:	9001      	str	r0, [sp, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f1a1 0404 	sub.w	r4, r1, #4
 8010552:	bfb8      	it	lt
 8010554:	18e4      	addlt	r4, r4, r3
 8010556:	f000 ff5d 	bl	8011414 <__malloc_lock>
 801055a:	4a20      	ldr	r2, [pc, #128]	; (80105dc <_free_r+0x9c>)
 801055c:	9801      	ldr	r0, [sp, #4]
 801055e:	6813      	ldr	r3, [r2, #0]
 8010560:	4615      	mov	r5, r2
 8010562:	b933      	cbnz	r3, 8010572 <_free_r+0x32>
 8010564:	6063      	str	r3, [r4, #4]
 8010566:	6014      	str	r4, [r2, #0]
 8010568:	b003      	add	sp, #12
 801056a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801056e:	f000 bf57 	b.w	8011420 <__malloc_unlock>
 8010572:	42a3      	cmp	r3, r4
 8010574:	d90b      	bls.n	801058e <_free_r+0x4e>
 8010576:	6821      	ldr	r1, [r4, #0]
 8010578:	1862      	adds	r2, r4, r1
 801057a:	4293      	cmp	r3, r2
 801057c:	bf04      	itt	eq
 801057e:	681a      	ldreq	r2, [r3, #0]
 8010580:	685b      	ldreq	r3, [r3, #4]
 8010582:	6063      	str	r3, [r4, #4]
 8010584:	bf04      	itt	eq
 8010586:	1852      	addeq	r2, r2, r1
 8010588:	6022      	streq	r2, [r4, #0]
 801058a:	602c      	str	r4, [r5, #0]
 801058c:	e7ec      	b.n	8010568 <_free_r+0x28>
 801058e:	461a      	mov	r2, r3
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	b10b      	cbz	r3, 8010598 <_free_r+0x58>
 8010594:	42a3      	cmp	r3, r4
 8010596:	d9fa      	bls.n	801058e <_free_r+0x4e>
 8010598:	6811      	ldr	r1, [r2, #0]
 801059a:	1855      	adds	r5, r2, r1
 801059c:	42a5      	cmp	r5, r4
 801059e:	d10b      	bne.n	80105b8 <_free_r+0x78>
 80105a0:	6824      	ldr	r4, [r4, #0]
 80105a2:	4421      	add	r1, r4
 80105a4:	1854      	adds	r4, r2, r1
 80105a6:	42a3      	cmp	r3, r4
 80105a8:	6011      	str	r1, [r2, #0]
 80105aa:	d1dd      	bne.n	8010568 <_free_r+0x28>
 80105ac:	681c      	ldr	r4, [r3, #0]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	6053      	str	r3, [r2, #4]
 80105b2:	4421      	add	r1, r4
 80105b4:	6011      	str	r1, [r2, #0]
 80105b6:	e7d7      	b.n	8010568 <_free_r+0x28>
 80105b8:	d902      	bls.n	80105c0 <_free_r+0x80>
 80105ba:	230c      	movs	r3, #12
 80105bc:	6003      	str	r3, [r0, #0]
 80105be:	e7d3      	b.n	8010568 <_free_r+0x28>
 80105c0:	6825      	ldr	r5, [r4, #0]
 80105c2:	1961      	adds	r1, r4, r5
 80105c4:	428b      	cmp	r3, r1
 80105c6:	bf04      	itt	eq
 80105c8:	6819      	ldreq	r1, [r3, #0]
 80105ca:	685b      	ldreq	r3, [r3, #4]
 80105cc:	6063      	str	r3, [r4, #4]
 80105ce:	bf04      	itt	eq
 80105d0:	1949      	addeq	r1, r1, r5
 80105d2:	6021      	streq	r1, [r4, #0]
 80105d4:	6054      	str	r4, [r2, #4]
 80105d6:	e7c7      	b.n	8010568 <_free_r+0x28>
 80105d8:	b003      	add	sp, #12
 80105da:	bd30      	pop	{r4, r5, pc}
 80105dc:	2000066c 	.word	0x2000066c

080105e0 <_malloc_r>:
 80105e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e2:	1ccd      	adds	r5, r1, #3
 80105e4:	f025 0503 	bic.w	r5, r5, #3
 80105e8:	3508      	adds	r5, #8
 80105ea:	2d0c      	cmp	r5, #12
 80105ec:	bf38      	it	cc
 80105ee:	250c      	movcc	r5, #12
 80105f0:	2d00      	cmp	r5, #0
 80105f2:	4606      	mov	r6, r0
 80105f4:	db01      	blt.n	80105fa <_malloc_r+0x1a>
 80105f6:	42a9      	cmp	r1, r5
 80105f8:	d903      	bls.n	8010602 <_malloc_r+0x22>
 80105fa:	230c      	movs	r3, #12
 80105fc:	6033      	str	r3, [r6, #0]
 80105fe:	2000      	movs	r0, #0
 8010600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010602:	f000 ff07 	bl	8011414 <__malloc_lock>
 8010606:	4921      	ldr	r1, [pc, #132]	; (801068c <_malloc_r+0xac>)
 8010608:	680a      	ldr	r2, [r1, #0]
 801060a:	4614      	mov	r4, r2
 801060c:	b99c      	cbnz	r4, 8010636 <_malloc_r+0x56>
 801060e:	4f20      	ldr	r7, [pc, #128]	; (8010690 <_malloc_r+0xb0>)
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	b923      	cbnz	r3, 801061e <_malloc_r+0x3e>
 8010614:	4621      	mov	r1, r4
 8010616:	4630      	mov	r0, r6
 8010618:	f000 fc86 	bl	8010f28 <_sbrk_r>
 801061c:	6038      	str	r0, [r7, #0]
 801061e:	4629      	mov	r1, r5
 8010620:	4630      	mov	r0, r6
 8010622:	f000 fc81 	bl	8010f28 <_sbrk_r>
 8010626:	1c43      	adds	r3, r0, #1
 8010628:	d123      	bne.n	8010672 <_malloc_r+0x92>
 801062a:	230c      	movs	r3, #12
 801062c:	6033      	str	r3, [r6, #0]
 801062e:	4630      	mov	r0, r6
 8010630:	f000 fef6 	bl	8011420 <__malloc_unlock>
 8010634:	e7e3      	b.n	80105fe <_malloc_r+0x1e>
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	1b5b      	subs	r3, r3, r5
 801063a:	d417      	bmi.n	801066c <_malloc_r+0x8c>
 801063c:	2b0b      	cmp	r3, #11
 801063e:	d903      	bls.n	8010648 <_malloc_r+0x68>
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	441c      	add	r4, r3
 8010644:	6025      	str	r5, [r4, #0]
 8010646:	e004      	b.n	8010652 <_malloc_r+0x72>
 8010648:	6863      	ldr	r3, [r4, #4]
 801064a:	42a2      	cmp	r2, r4
 801064c:	bf0c      	ite	eq
 801064e:	600b      	streq	r3, [r1, #0]
 8010650:	6053      	strne	r3, [r2, #4]
 8010652:	4630      	mov	r0, r6
 8010654:	f000 fee4 	bl	8011420 <__malloc_unlock>
 8010658:	f104 000b 	add.w	r0, r4, #11
 801065c:	1d23      	adds	r3, r4, #4
 801065e:	f020 0007 	bic.w	r0, r0, #7
 8010662:	1ac2      	subs	r2, r0, r3
 8010664:	d0cc      	beq.n	8010600 <_malloc_r+0x20>
 8010666:	1a1b      	subs	r3, r3, r0
 8010668:	50a3      	str	r3, [r4, r2]
 801066a:	e7c9      	b.n	8010600 <_malloc_r+0x20>
 801066c:	4622      	mov	r2, r4
 801066e:	6864      	ldr	r4, [r4, #4]
 8010670:	e7cc      	b.n	801060c <_malloc_r+0x2c>
 8010672:	1cc4      	adds	r4, r0, #3
 8010674:	f024 0403 	bic.w	r4, r4, #3
 8010678:	42a0      	cmp	r0, r4
 801067a:	d0e3      	beq.n	8010644 <_malloc_r+0x64>
 801067c:	1a21      	subs	r1, r4, r0
 801067e:	4630      	mov	r0, r6
 8010680:	f000 fc52 	bl	8010f28 <_sbrk_r>
 8010684:	3001      	adds	r0, #1
 8010686:	d1dd      	bne.n	8010644 <_malloc_r+0x64>
 8010688:	e7cf      	b.n	801062a <_malloc_r+0x4a>
 801068a:	bf00      	nop
 801068c:	2000066c 	.word	0x2000066c
 8010690:	20000670 	.word	0x20000670

08010694 <__ssputs_r>:
 8010694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010698:	688e      	ldr	r6, [r1, #8]
 801069a:	429e      	cmp	r6, r3
 801069c:	4682      	mov	sl, r0
 801069e:	460c      	mov	r4, r1
 80106a0:	4690      	mov	r8, r2
 80106a2:	461f      	mov	r7, r3
 80106a4:	d838      	bhi.n	8010718 <__ssputs_r+0x84>
 80106a6:	898a      	ldrh	r2, [r1, #12]
 80106a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106ac:	d032      	beq.n	8010714 <__ssputs_r+0x80>
 80106ae:	6825      	ldr	r5, [r4, #0]
 80106b0:	6909      	ldr	r1, [r1, #16]
 80106b2:	eba5 0901 	sub.w	r9, r5, r1
 80106b6:	6965      	ldr	r5, [r4, #20]
 80106b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106c0:	3301      	adds	r3, #1
 80106c2:	444b      	add	r3, r9
 80106c4:	106d      	asrs	r5, r5, #1
 80106c6:	429d      	cmp	r5, r3
 80106c8:	bf38      	it	cc
 80106ca:	461d      	movcc	r5, r3
 80106cc:	0553      	lsls	r3, r2, #21
 80106ce:	d531      	bpl.n	8010734 <__ssputs_r+0xa0>
 80106d0:	4629      	mov	r1, r5
 80106d2:	f7ff ff85 	bl	80105e0 <_malloc_r>
 80106d6:	4606      	mov	r6, r0
 80106d8:	b950      	cbnz	r0, 80106f0 <__ssputs_r+0x5c>
 80106da:	230c      	movs	r3, #12
 80106dc:	f8ca 3000 	str.w	r3, [sl]
 80106e0:	89a3      	ldrh	r3, [r4, #12]
 80106e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e6:	81a3      	strh	r3, [r4, #12]
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f0:	6921      	ldr	r1, [r4, #16]
 80106f2:	464a      	mov	r2, r9
 80106f4:	f7ff fd2c 	bl	8010150 <memcpy>
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010702:	81a3      	strh	r3, [r4, #12]
 8010704:	6126      	str	r6, [r4, #16]
 8010706:	6165      	str	r5, [r4, #20]
 8010708:	444e      	add	r6, r9
 801070a:	eba5 0509 	sub.w	r5, r5, r9
 801070e:	6026      	str	r6, [r4, #0]
 8010710:	60a5      	str	r5, [r4, #8]
 8010712:	463e      	mov	r6, r7
 8010714:	42be      	cmp	r6, r7
 8010716:	d900      	bls.n	801071a <__ssputs_r+0x86>
 8010718:	463e      	mov	r6, r7
 801071a:	4632      	mov	r2, r6
 801071c:	6820      	ldr	r0, [r4, #0]
 801071e:	4641      	mov	r1, r8
 8010720:	f7ff fd24 	bl	801016c <memmove>
 8010724:	68a3      	ldr	r3, [r4, #8]
 8010726:	6822      	ldr	r2, [r4, #0]
 8010728:	1b9b      	subs	r3, r3, r6
 801072a:	4432      	add	r2, r6
 801072c:	60a3      	str	r3, [r4, #8]
 801072e:	6022      	str	r2, [r4, #0]
 8010730:	2000      	movs	r0, #0
 8010732:	e7db      	b.n	80106ec <__ssputs_r+0x58>
 8010734:	462a      	mov	r2, r5
 8010736:	f000 fe79 	bl	801142c <_realloc_r>
 801073a:	4606      	mov	r6, r0
 801073c:	2800      	cmp	r0, #0
 801073e:	d1e1      	bne.n	8010704 <__ssputs_r+0x70>
 8010740:	6921      	ldr	r1, [r4, #16]
 8010742:	4650      	mov	r0, sl
 8010744:	f7ff fefc 	bl	8010540 <_free_r>
 8010748:	e7c7      	b.n	80106da <__ssputs_r+0x46>
	...

0801074c <_svfiprintf_r>:
 801074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010750:	4698      	mov	r8, r3
 8010752:	898b      	ldrh	r3, [r1, #12]
 8010754:	061b      	lsls	r3, r3, #24
 8010756:	b09d      	sub	sp, #116	; 0x74
 8010758:	4607      	mov	r7, r0
 801075a:	460d      	mov	r5, r1
 801075c:	4614      	mov	r4, r2
 801075e:	d50e      	bpl.n	801077e <_svfiprintf_r+0x32>
 8010760:	690b      	ldr	r3, [r1, #16]
 8010762:	b963      	cbnz	r3, 801077e <_svfiprintf_r+0x32>
 8010764:	2140      	movs	r1, #64	; 0x40
 8010766:	f7ff ff3b 	bl	80105e0 <_malloc_r>
 801076a:	6028      	str	r0, [r5, #0]
 801076c:	6128      	str	r0, [r5, #16]
 801076e:	b920      	cbnz	r0, 801077a <_svfiprintf_r+0x2e>
 8010770:	230c      	movs	r3, #12
 8010772:	603b      	str	r3, [r7, #0]
 8010774:	f04f 30ff 	mov.w	r0, #4294967295
 8010778:	e0d1      	b.n	801091e <_svfiprintf_r+0x1d2>
 801077a:	2340      	movs	r3, #64	; 0x40
 801077c:	616b      	str	r3, [r5, #20]
 801077e:	2300      	movs	r3, #0
 8010780:	9309      	str	r3, [sp, #36]	; 0x24
 8010782:	2320      	movs	r3, #32
 8010784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010788:	f8cd 800c 	str.w	r8, [sp, #12]
 801078c:	2330      	movs	r3, #48	; 0x30
 801078e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010938 <_svfiprintf_r+0x1ec>
 8010792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010796:	f04f 0901 	mov.w	r9, #1
 801079a:	4623      	mov	r3, r4
 801079c:	469a      	mov	sl, r3
 801079e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107a2:	b10a      	cbz	r2, 80107a8 <_svfiprintf_r+0x5c>
 80107a4:	2a25      	cmp	r2, #37	; 0x25
 80107a6:	d1f9      	bne.n	801079c <_svfiprintf_r+0x50>
 80107a8:	ebba 0b04 	subs.w	fp, sl, r4
 80107ac:	d00b      	beq.n	80107c6 <_svfiprintf_r+0x7a>
 80107ae:	465b      	mov	r3, fp
 80107b0:	4622      	mov	r2, r4
 80107b2:	4629      	mov	r1, r5
 80107b4:	4638      	mov	r0, r7
 80107b6:	f7ff ff6d 	bl	8010694 <__ssputs_r>
 80107ba:	3001      	adds	r0, #1
 80107bc:	f000 80aa 	beq.w	8010914 <_svfiprintf_r+0x1c8>
 80107c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107c2:	445a      	add	r2, fp
 80107c4:	9209      	str	r2, [sp, #36]	; 0x24
 80107c6:	f89a 3000 	ldrb.w	r3, [sl]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f000 80a2 	beq.w	8010914 <_svfiprintf_r+0x1c8>
 80107d0:	2300      	movs	r3, #0
 80107d2:	f04f 32ff 	mov.w	r2, #4294967295
 80107d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107da:	f10a 0a01 	add.w	sl, sl, #1
 80107de:	9304      	str	r3, [sp, #16]
 80107e0:	9307      	str	r3, [sp, #28]
 80107e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107e6:	931a      	str	r3, [sp, #104]	; 0x68
 80107e8:	4654      	mov	r4, sl
 80107ea:	2205      	movs	r2, #5
 80107ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107f0:	4851      	ldr	r0, [pc, #324]	; (8010938 <_svfiprintf_r+0x1ec>)
 80107f2:	f7ef fd05 	bl	8000200 <memchr>
 80107f6:	9a04      	ldr	r2, [sp, #16]
 80107f8:	b9d8      	cbnz	r0, 8010832 <_svfiprintf_r+0xe6>
 80107fa:	06d0      	lsls	r0, r2, #27
 80107fc:	bf44      	itt	mi
 80107fe:	2320      	movmi	r3, #32
 8010800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010804:	0711      	lsls	r1, r2, #28
 8010806:	bf44      	itt	mi
 8010808:	232b      	movmi	r3, #43	; 0x2b
 801080a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801080e:	f89a 3000 	ldrb.w	r3, [sl]
 8010812:	2b2a      	cmp	r3, #42	; 0x2a
 8010814:	d015      	beq.n	8010842 <_svfiprintf_r+0xf6>
 8010816:	9a07      	ldr	r2, [sp, #28]
 8010818:	4654      	mov	r4, sl
 801081a:	2000      	movs	r0, #0
 801081c:	f04f 0c0a 	mov.w	ip, #10
 8010820:	4621      	mov	r1, r4
 8010822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010826:	3b30      	subs	r3, #48	; 0x30
 8010828:	2b09      	cmp	r3, #9
 801082a:	d94e      	bls.n	80108ca <_svfiprintf_r+0x17e>
 801082c:	b1b0      	cbz	r0, 801085c <_svfiprintf_r+0x110>
 801082e:	9207      	str	r2, [sp, #28]
 8010830:	e014      	b.n	801085c <_svfiprintf_r+0x110>
 8010832:	eba0 0308 	sub.w	r3, r0, r8
 8010836:	fa09 f303 	lsl.w	r3, r9, r3
 801083a:	4313      	orrs	r3, r2
 801083c:	9304      	str	r3, [sp, #16]
 801083e:	46a2      	mov	sl, r4
 8010840:	e7d2      	b.n	80107e8 <_svfiprintf_r+0x9c>
 8010842:	9b03      	ldr	r3, [sp, #12]
 8010844:	1d19      	adds	r1, r3, #4
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	9103      	str	r1, [sp, #12]
 801084a:	2b00      	cmp	r3, #0
 801084c:	bfbb      	ittet	lt
 801084e:	425b      	neglt	r3, r3
 8010850:	f042 0202 	orrlt.w	r2, r2, #2
 8010854:	9307      	strge	r3, [sp, #28]
 8010856:	9307      	strlt	r3, [sp, #28]
 8010858:	bfb8      	it	lt
 801085a:	9204      	strlt	r2, [sp, #16]
 801085c:	7823      	ldrb	r3, [r4, #0]
 801085e:	2b2e      	cmp	r3, #46	; 0x2e
 8010860:	d10c      	bne.n	801087c <_svfiprintf_r+0x130>
 8010862:	7863      	ldrb	r3, [r4, #1]
 8010864:	2b2a      	cmp	r3, #42	; 0x2a
 8010866:	d135      	bne.n	80108d4 <_svfiprintf_r+0x188>
 8010868:	9b03      	ldr	r3, [sp, #12]
 801086a:	1d1a      	adds	r2, r3, #4
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	9203      	str	r2, [sp, #12]
 8010870:	2b00      	cmp	r3, #0
 8010872:	bfb8      	it	lt
 8010874:	f04f 33ff 	movlt.w	r3, #4294967295
 8010878:	3402      	adds	r4, #2
 801087a:	9305      	str	r3, [sp, #20]
 801087c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010948 <_svfiprintf_r+0x1fc>
 8010880:	7821      	ldrb	r1, [r4, #0]
 8010882:	2203      	movs	r2, #3
 8010884:	4650      	mov	r0, sl
 8010886:	f7ef fcbb 	bl	8000200 <memchr>
 801088a:	b140      	cbz	r0, 801089e <_svfiprintf_r+0x152>
 801088c:	2340      	movs	r3, #64	; 0x40
 801088e:	eba0 000a 	sub.w	r0, r0, sl
 8010892:	fa03 f000 	lsl.w	r0, r3, r0
 8010896:	9b04      	ldr	r3, [sp, #16]
 8010898:	4303      	orrs	r3, r0
 801089a:	3401      	adds	r4, #1
 801089c:	9304      	str	r3, [sp, #16]
 801089e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108a2:	4826      	ldr	r0, [pc, #152]	; (801093c <_svfiprintf_r+0x1f0>)
 80108a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108a8:	2206      	movs	r2, #6
 80108aa:	f7ef fca9 	bl	8000200 <memchr>
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d038      	beq.n	8010924 <_svfiprintf_r+0x1d8>
 80108b2:	4b23      	ldr	r3, [pc, #140]	; (8010940 <_svfiprintf_r+0x1f4>)
 80108b4:	bb1b      	cbnz	r3, 80108fe <_svfiprintf_r+0x1b2>
 80108b6:	9b03      	ldr	r3, [sp, #12]
 80108b8:	3307      	adds	r3, #7
 80108ba:	f023 0307 	bic.w	r3, r3, #7
 80108be:	3308      	adds	r3, #8
 80108c0:	9303      	str	r3, [sp, #12]
 80108c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c4:	4433      	add	r3, r6
 80108c6:	9309      	str	r3, [sp, #36]	; 0x24
 80108c8:	e767      	b.n	801079a <_svfiprintf_r+0x4e>
 80108ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80108ce:	460c      	mov	r4, r1
 80108d0:	2001      	movs	r0, #1
 80108d2:	e7a5      	b.n	8010820 <_svfiprintf_r+0xd4>
 80108d4:	2300      	movs	r3, #0
 80108d6:	3401      	adds	r4, #1
 80108d8:	9305      	str	r3, [sp, #20]
 80108da:	4619      	mov	r1, r3
 80108dc:	f04f 0c0a 	mov.w	ip, #10
 80108e0:	4620      	mov	r0, r4
 80108e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108e6:	3a30      	subs	r2, #48	; 0x30
 80108e8:	2a09      	cmp	r2, #9
 80108ea:	d903      	bls.n	80108f4 <_svfiprintf_r+0x1a8>
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d0c5      	beq.n	801087c <_svfiprintf_r+0x130>
 80108f0:	9105      	str	r1, [sp, #20]
 80108f2:	e7c3      	b.n	801087c <_svfiprintf_r+0x130>
 80108f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80108f8:	4604      	mov	r4, r0
 80108fa:	2301      	movs	r3, #1
 80108fc:	e7f0      	b.n	80108e0 <_svfiprintf_r+0x194>
 80108fe:	ab03      	add	r3, sp, #12
 8010900:	9300      	str	r3, [sp, #0]
 8010902:	462a      	mov	r2, r5
 8010904:	4b0f      	ldr	r3, [pc, #60]	; (8010944 <_svfiprintf_r+0x1f8>)
 8010906:	a904      	add	r1, sp, #16
 8010908:	4638      	mov	r0, r7
 801090a:	f3af 8000 	nop.w
 801090e:	1c42      	adds	r2, r0, #1
 8010910:	4606      	mov	r6, r0
 8010912:	d1d6      	bne.n	80108c2 <_svfiprintf_r+0x176>
 8010914:	89ab      	ldrh	r3, [r5, #12]
 8010916:	065b      	lsls	r3, r3, #25
 8010918:	f53f af2c 	bmi.w	8010774 <_svfiprintf_r+0x28>
 801091c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801091e:	b01d      	add	sp, #116	; 0x74
 8010920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010924:	ab03      	add	r3, sp, #12
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	462a      	mov	r2, r5
 801092a:	4b06      	ldr	r3, [pc, #24]	; (8010944 <_svfiprintf_r+0x1f8>)
 801092c:	a904      	add	r1, sp, #16
 801092e:	4638      	mov	r0, r7
 8010930:	f000 f9d4 	bl	8010cdc <_printf_i>
 8010934:	e7eb      	b.n	801090e <_svfiprintf_r+0x1c2>
 8010936:	bf00      	nop
 8010938:	080149d8 	.word	0x080149d8
 801093c:	080149e2 	.word	0x080149e2
 8010940:	00000000 	.word	0x00000000
 8010944:	08010695 	.word	0x08010695
 8010948:	080149de 	.word	0x080149de

0801094c <__sfputc_r>:
 801094c:	6893      	ldr	r3, [r2, #8]
 801094e:	3b01      	subs	r3, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	b410      	push	{r4}
 8010954:	6093      	str	r3, [r2, #8]
 8010956:	da08      	bge.n	801096a <__sfputc_r+0x1e>
 8010958:	6994      	ldr	r4, [r2, #24]
 801095a:	42a3      	cmp	r3, r4
 801095c:	db01      	blt.n	8010962 <__sfputc_r+0x16>
 801095e:	290a      	cmp	r1, #10
 8010960:	d103      	bne.n	801096a <__sfputc_r+0x1e>
 8010962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010966:	f000 bb33 	b.w	8010fd0 <__swbuf_r>
 801096a:	6813      	ldr	r3, [r2, #0]
 801096c:	1c58      	adds	r0, r3, #1
 801096e:	6010      	str	r0, [r2, #0]
 8010970:	7019      	strb	r1, [r3, #0]
 8010972:	4608      	mov	r0, r1
 8010974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010978:	4770      	bx	lr

0801097a <__sfputs_r>:
 801097a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097c:	4606      	mov	r6, r0
 801097e:	460f      	mov	r7, r1
 8010980:	4614      	mov	r4, r2
 8010982:	18d5      	adds	r5, r2, r3
 8010984:	42ac      	cmp	r4, r5
 8010986:	d101      	bne.n	801098c <__sfputs_r+0x12>
 8010988:	2000      	movs	r0, #0
 801098a:	e007      	b.n	801099c <__sfputs_r+0x22>
 801098c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010990:	463a      	mov	r2, r7
 8010992:	4630      	mov	r0, r6
 8010994:	f7ff ffda 	bl	801094c <__sfputc_r>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d1f3      	bne.n	8010984 <__sfputs_r+0xa>
 801099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109a0 <_vfiprintf_r>:
 80109a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	460d      	mov	r5, r1
 80109a6:	b09d      	sub	sp, #116	; 0x74
 80109a8:	4614      	mov	r4, r2
 80109aa:	4698      	mov	r8, r3
 80109ac:	4606      	mov	r6, r0
 80109ae:	b118      	cbz	r0, 80109b8 <_vfiprintf_r+0x18>
 80109b0:	6983      	ldr	r3, [r0, #24]
 80109b2:	b90b      	cbnz	r3, 80109b8 <_vfiprintf_r+0x18>
 80109b4:	f7ff fd0a 	bl	80103cc <__sinit>
 80109b8:	4b89      	ldr	r3, [pc, #548]	; (8010be0 <_vfiprintf_r+0x240>)
 80109ba:	429d      	cmp	r5, r3
 80109bc:	d11b      	bne.n	80109f6 <_vfiprintf_r+0x56>
 80109be:	6875      	ldr	r5, [r6, #4]
 80109c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109c2:	07d9      	lsls	r1, r3, #31
 80109c4:	d405      	bmi.n	80109d2 <_vfiprintf_r+0x32>
 80109c6:	89ab      	ldrh	r3, [r5, #12]
 80109c8:	059a      	lsls	r2, r3, #22
 80109ca:	d402      	bmi.n	80109d2 <_vfiprintf_r+0x32>
 80109cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80109ce:	f7ff fdad 	bl	801052c <__retarget_lock_acquire_recursive>
 80109d2:	89ab      	ldrh	r3, [r5, #12]
 80109d4:	071b      	lsls	r3, r3, #28
 80109d6:	d501      	bpl.n	80109dc <_vfiprintf_r+0x3c>
 80109d8:	692b      	ldr	r3, [r5, #16]
 80109da:	b9eb      	cbnz	r3, 8010a18 <_vfiprintf_r+0x78>
 80109dc:	4629      	mov	r1, r5
 80109de:	4630      	mov	r0, r6
 80109e0:	f000 fb5a 	bl	8011098 <__swsetup_r>
 80109e4:	b1c0      	cbz	r0, 8010a18 <_vfiprintf_r+0x78>
 80109e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80109e8:	07dc      	lsls	r4, r3, #31
 80109ea:	d50e      	bpl.n	8010a0a <_vfiprintf_r+0x6a>
 80109ec:	f04f 30ff 	mov.w	r0, #4294967295
 80109f0:	b01d      	add	sp, #116	; 0x74
 80109f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f6:	4b7b      	ldr	r3, [pc, #492]	; (8010be4 <_vfiprintf_r+0x244>)
 80109f8:	429d      	cmp	r5, r3
 80109fa:	d101      	bne.n	8010a00 <_vfiprintf_r+0x60>
 80109fc:	68b5      	ldr	r5, [r6, #8]
 80109fe:	e7df      	b.n	80109c0 <_vfiprintf_r+0x20>
 8010a00:	4b79      	ldr	r3, [pc, #484]	; (8010be8 <_vfiprintf_r+0x248>)
 8010a02:	429d      	cmp	r5, r3
 8010a04:	bf08      	it	eq
 8010a06:	68f5      	ldreq	r5, [r6, #12]
 8010a08:	e7da      	b.n	80109c0 <_vfiprintf_r+0x20>
 8010a0a:	89ab      	ldrh	r3, [r5, #12]
 8010a0c:	0598      	lsls	r0, r3, #22
 8010a0e:	d4ed      	bmi.n	80109ec <_vfiprintf_r+0x4c>
 8010a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a12:	f7ff fd8c 	bl	801052e <__retarget_lock_release_recursive>
 8010a16:	e7e9      	b.n	80109ec <_vfiprintf_r+0x4c>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a1c:	2320      	movs	r3, #32
 8010a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a26:	2330      	movs	r3, #48	; 0x30
 8010a28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010bec <_vfiprintf_r+0x24c>
 8010a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a30:	f04f 0901 	mov.w	r9, #1
 8010a34:	4623      	mov	r3, r4
 8010a36:	469a      	mov	sl, r3
 8010a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a3c:	b10a      	cbz	r2, 8010a42 <_vfiprintf_r+0xa2>
 8010a3e:	2a25      	cmp	r2, #37	; 0x25
 8010a40:	d1f9      	bne.n	8010a36 <_vfiprintf_r+0x96>
 8010a42:	ebba 0b04 	subs.w	fp, sl, r4
 8010a46:	d00b      	beq.n	8010a60 <_vfiprintf_r+0xc0>
 8010a48:	465b      	mov	r3, fp
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f7ff ff93 	bl	801097a <__sfputs_r>
 8010a54:	3001      	adds	r0, #1
 8010a56:	f000 80aa 	beq.w	8010bae <_vfiprintf_r+0x20e>
 8010a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a5c:	445a      	add	r2, fp
 8010a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8010a60:	f89a 3000 	ldrb.w	r3, [sl]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	f000 80a2 	beq.w	8010bae <_vfiprintf_r+0x20e>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a74:	f10a 0a01 	add.w	sl, sl, #1
 8010a78:	9304      	str	r3, [sp, #16]
 8010a7a:	9307      	str	r3, [sp, #28]
 8010a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a80:	931a      	str	r3, [sp, #104]	; 0x68
 8010a82:	4654      	mov	r4, sl
 8010a84:	2205      	movs	r2, #5
 8010a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a8a:	4858      	ldr	r0, [pc, #352]	; (8010bec <_vfiprintf_r+0x24c>)
 8010a8c:	f7ef fbb8 	bl	8000200 <memchr>
 8010a90:	9a04      	ldr	r2, [sp, #16]
 8010a92:	b9d8      	cbnz	r0, 8010acc <_vfiprintf_r+0x12c>
 8010a94:	06d1      	lsls	r1, r2, #27
 8010a96:	bf44      	itt	mi
 8010a98:	2320      	movmi	r3, #32
 8010a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a9e:	0713      	lsls	r3, r2, #28
 8010aa0:	bf44      	itt	mi
 8010aa2:	232b      	movmi	r3, #43	; 0x2b
 8010aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8010aac:	2b2a      	cmp	r3, #42	; 0x2a
 8010aae:	d015      	beq.n	8010adc <_vfiprintf_r+0x13c>
 8010ab0:	9a07      	ldr	r2, [sp, #28]
 8010ab2:	4654      	mov	r4, sl
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	f04f 0c0a 	mov.w	ip, #10
 8010aba:	4621      	mov	r1, r4
 8010abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ac0:	3b30      	subs	r3, #48	; 0x30
 8010ac2:	2b09      	cmp	r3, #9
 8010ac4:	d94e      	bls.n	8010b64 <_vfiprintf_r+0x1c4>
 8010ac6:	b1b0      	cbz	r0, 8010af6 <_vfiprintf_r+0x156>
 8010ac8:	9207      	str	r2, [sp, #28]
 8010aca:	e014      	b.n	8010af6 <_vfiprintf_r+0x156>
 8010acc:	eba0 0308 	sub.w	r3, r0, r8
 8010ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	9304      	str	r3, [sp, #16]
 8010ad8:	46a2      	mov	sl, r4
 8010ada:	e7d2      	b.n	8010a82 <_vfiprintf_r+0xe2>
 8010adc:	9b03      	ldr	r3, [sp, #12]
 8010ade:	1d19      	adds	r1, r3, #4
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	9103      	str	r1, [sp, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	bfbb      	ittet	lt
 8010ae8:	425b      	neglt	r3, r3
 8010aea:	f042 0202 	orrlt.w	r2, r2, #2
 8010aee:	9307      	strge	r3, [sp, #28]
 8010af0:	9307      	strlt	r3, [sp, #28]
 8010af2:	bfb8      	it	lt
 8010af4:	9204      	strlt	r2, [sp, #16]
 8010af6:	7823      	ldrb	r3, [r4, #0]
 8010af8:	2b2e      	cmp	r3, #46	; 0x2e
 8010afa:	d10c      	bne.n	8010b16 <_vfiprintf_r+0x176>
 8010afc:	7863      	ldrb	r3, [r4, #1]
 8010afe:	2b2a      	cmp	r3, #42	; 0x2a
 8010b00:	d135      	bne.n	8010b6e <_vfiprintf_r+0x1ce>
 8010b02:	9b03      	ldr	r3, [sp, #12]
 8010b04:	1d1a      	adds	r2, r3, #4
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	9203      	str	r2, [sp, #12]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	bfb8      	it	lt
 8010b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b12:	3402      	adds	r4, #2
 8010b14:	9305      	str	r3, [sp, #20]
 8010b16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010bfc <_vfiprintf_r+0x25c>
 8010b1a:	7821      	ldrb	r1, [r4, #0]
 8010b1c:	2203      	movs	r2, #3
 8010b1e:	4650      	mov	r0, sl
 8010b20:	f7ef fb6e 	bl	8000200 <memchr>
 8010b24:	b140      	cbz	r0, 8010b38 <_vfiprintf_r+0x198>
 8010b26:	2340      	movs	r3, #64	; 0x40
 8010b28:	eba0 000a 	sub.w	r0, r0, sl
 8010b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8010b30:	9b04      	ldr	r3, [sp, #16]
 8010b32:	4303      	orrs	r3, r0
 8010b34:	3401      	adds	r4, #1
 8010b36:	9304      	str	r3, [sp, #16]
 8010b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b3c:	482c      	ldr	r0, [pc, #176]	; (8010bf0 <_vfiprintf_r+0x250>)
 8010b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b42:	2206      	movs	r2, #6
 8010b44:	f7ef fb5c 	bl	8000200 <memchr>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d03f      	beq.n	8010bcc <_vfiprintf_r+0x22c>
 8010b4c:	4b29      	ldr	r3, [pc, #164]	; (8010bf4 <_vfiprintf_r+0x254>)
 8010b4e:	bb1b      	cbnz	r3, 8010b98 <_vfiprintf_r+0x1f8>
 8010b50:	9b03      	ldr	r3, [sp, #12]
 8010b52:	3307      	adds	r3, #7
 8010b54:	f023 0307 	bic.w	r3, r3, #7
 8010b58:	3308      	adds	r3, #8
 8010b5a:	9303      	str	r3, [sp, #12]
 8010b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5e:	443b      	add	r3, r7
 8010b60:	9309      	str	r3, [sp, #36]	; 0x24
 8010b62:	e767      	b.n	8010a34 <_vfiprintf_r+0x94>
 8010b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b68:	460c      	mov	r4, r1
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	e7a5      	b.n	8010aba <_vfiprintf_r+0x11a>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	3401      	adds	r4, #1
 8010b72:	9305      	str	r3, [sp, #20]
 8010b74:	4619      	mov	r1, r3
 8010b76:	f04f 0c0a 	mov.w	ip, #10
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b80:	3a30      	subs	r2, #48	; 0x30
 8010b82:	2a09      	cmp	r2, #9
 8010b84:	d903      	bls.n	8010b8e <_vfiprintf_r+0x1ee>
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d0c5      	beq.n	8010b16 <_vfiprintf_r+0x176>
 8010b8a:	9105      	str	r1, [sp, #20]
 8010b8c:	e7c3      	b.n	8010b16 <_vfiprintf_r+0x176>
 8010b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b92:	4604      	mov	r4, r0
 8010b94:	2301      	movs	r3, #1
 8010b96:	e7f0      	b.n	8010b7a <_vfiprintf_r+0x1da>
 8010b98:	ab03      	add	r3, sp, #12
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	462a      	mov	r2, r5
 8010b9e:	4b16      	ldr	r3, [pc, #88]	; (8010bf8 <_vfiprintf_r+0x258>)
 8010ba0:	a904      	add	r1, sp, #16
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f3af 8000 	nop.w
 8010ba8:	4607      	mov	r7, r0
 8010baa:	1c78      	adds	r0, r7, #1
 8010bac:	d1d6      	bne.n	8010b5c <_vfiprintf_r+0x1bc>
 8010bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bb0:	07d9      	lsls	r1, r3, #31
 8010bb2:	d405      	bmi.n	8010bc0 <_vfiprintf_r+0x220>
 8010bb4:	89ab      	ldrh	r3, [r5, #12]
 8010bb6:	059a      	lsls	r2, r3, #22
 8010bb8:	d402      	bmi.n	8010bc0 <_vfiprintf_r+0x220>
 8010bba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bbc:	f7ff fcb7 	bl	801052e <__retarget_lock_release_recursive>
 8010bc0:	89ab      	ldrh	r3, [r5, #12]
 8010bc2:	065b      	lsls	r3, r3, #25
 8010bc4:	f53f af12 	bmi.w	80109ec <_vfiprintf_r+0x4c>
 8010bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bca:	e711      	b.n	80109f0 <_vfiprintf_r+0x50>
 8010bcc:	ab03      	add	r3, sp, #12
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	462a      	mov	r2, r5
 8010bd2:	4b09      	ldr	r3, [pc, #36]	; (8010bf8 <_vfiprintf_r+0x258>)
 8010bd4:	a904      	add	r1, sp, #16
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f000 f880 	bl	8010cdc <_printf_i>
 8010bdc:	e7e4      	b.n	8010ba8 <_vfiprintf_r+0x208>
 8010bde:	bf00      	nop
 8010be0:	08014998 	.word	0x08014998
 8010be4:	080149b8 	.word	0x080149b8
 8010be8:	08014978 	.word	0x08014978
 8010bec:	080149d8 	.word	0x080149d8
 8010bf0:	080149e2 	.word	0x080149e2
 8010bf4:	00000000 	.word	0x00000000
 8010bf8:	0801097b 	.word	0x0801097b
 8010bfc:	080149de 	.word	0x080149de

08010c00 <_printf_common>:
 8010c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c04:	4616      	mov	r6, r2
 8010c06:	4699      	mov	r9, r3
 8010c08:	688a      	ldr	r2, [r1, #8]
 8010c0a:	690b      	ldr	r3, [r1, #16]
 8010c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c10:	4293      	cmp	r3, r2
 8010c12:	bfb8      	it	lt
 8010c14:	4613      	movlt	r3, r2
 8010c16:	6033      	str	r3, [r6, #0]
 8010c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	460c      	mov	r4, r1
 8010c20:	b10a      	cbz	r2, 8010c26 <_printf_common+0x26>
 8010c22:	3301      	adds	r3, #1
 8010c24:	6033      	str	r3, [r6, #0]
 8010c26:	6823      	ldr	r3, [r4, #0]
 8010c28:	0699      	lsls	r1, r3, #26
 8010c2a:	bf42      	ittt	mi
 8010c2c:	6833      	ldrmi	r3, [r6, #0]
 8010c2e:	3302      	addmi	r3, #2
 8010c30:	6033      	strmi	r3, [r6, #0]
 8010c32:	6825      	ldr	r5, [r4, #0]
 8010c34:	f015 0506 	ands.w	r5, r5, #6
 8010c38:	d106      	bne.n	8010c48 <_printf_common+0x48>
 8010c3a:	f104 0a19 	add.w	sl, r4, #25
 8010c3e:	68e3      	ldr	r3, [r4, #12]
 8010c40:	6832      	ldr	r2, [r6, #0]
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	42ab      	cmp	r3, r5
 8010c46:	dc26      	bgt.n	8010c96 <_printf_common+0x96>
 8010c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010c4c:	1e13      	subs	r3, r2, #0
 8010c4e:	6822      	ldr	r2, [r4, #0]
 8010c50:	bf18      	it	ne
 8010c52:	2301      	movne	r3, #1
 8010c54:	0692      	lsls	r2, r2, #26
 8010c56:	d42b      	bmi.n	8010cb0 <_printf_common+0xb0>
 8010c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	4638      	mov	r0, r7
 8010c60:	47c0      	blx	r8
 8010c62:	3001      	adds	r0, #1
 8010c64:	d01e      	beq.n	8010ca4 <_printf_common+0xa4>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	68e5      	ldr	r5, [r4, #12]
 8010c6a:	6832      	ldr	r2, [r6, #0]
 8010c6c:	f003 0306 	and.w	r3, r3, #6
 8010c70:	2b04      	cmp	r3, #4
 8010c72:	bf08      	it	eq
 8010c74:	1aad      	subeq	r5, r5, r2
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	6922      	ldr	r2, [r4, #16]
 8010c7a:	bf0c      	ite	eq
 8010c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c80:	2500      	movne	r5, #0
 8010c82:	4293      	cmp	r3, r2
 8010c84:	bfc4      	itt	gt
 8010c86:	1a9b      	subgt	r3, r3, r2
 8010c88:	18ed      	addgt	r5, r5, r3
 8010c8a:	2600      	movs	r6, #0
 8010c8c:	341a      	adds	r4, #26
 8010c8e:	42b5      	cmp	r5, r6
 8010c90:	d11a      	bne.n	8010cc8 <_printf_common+0xc8>
 8010c92:	2000      	movs	r0, #0
 8010c94:	e008      	b.n	8010ca8 <_printf_common+0xa8>
 8010c96:	2301      	movs	r3, #1
 8010c98:	4652      	mov	r2, sl
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	47c0      	blx	r8
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d103      	bne.n	8010cac <_printf_common+0xac>
 8010ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cac:	3501      	adds	r5, #1
 8010cae:	e7c6      	b.n	8010c3e <_printf_common+0x3e>
 8010cb0:	18e1      	adds	r1, r4, r3
 8010cb2:	1c5a      	adds	r2, r3, #1
 8010cb4:	2030      	movs	r0, #48	; 0x30
 8010cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cba:	4422      	add	r2, r4
 8010cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cc4:	3302      	adds	r3, #2
 8010cc6:	e7c7      	b.n	8010c58 <_printf_common+0x58>
 8010cc8:	2301      	movs	r3, #1
 8010cca:	4622      	mov	r2, r4
 8010ccc:	4649      	mov	r1, r9
 8010cce:	4638      	mov	r0, r7
 8010cd0:	47c0      	blx	r8
 8010cd2:	3001      	adds	r0, #1
 8010cd4:	d0e6      	beq.n	8010ca4 <_printf_common+0xa4>
 8010cd6:	3601      	adds	r6, #1
 8010cd8:	e7d9      	b.n	8010c8e <_printf_common+0x8e>
	...

08010cdc <_printf_i>:
 8010cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce0:	460c      	mov	r4, r1
 8010ce2:	4691      	mov	r9, r2
 8010ce4:	7e27      	ldrb	r7, [r4, #24]
 8010ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ce8:	2f78      	cmp	r7, #120	; 0x78
 8010cea:	4680      	mov	r8, r0
 8010cec:	469a      	mov	sl, r3
 8010cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cf2:	d807      	bhi.n	8010d04 <_printf_i+0x28>
 8010cf4:	2f62      	cmp	r7, #98	; 0x62
 8010cf6:	d80a      	bhi.n	8010d0e <_printf_i+0x32>
 8010cf8:	2f00      	cmp	r7, #0
 8010cfa:	f000 80d8 	beq.w	8010eae <_printf_i+0x1d2>
 8010cfe:	2f58      	cmp	r7, #88	; 0x58
 8010d00:	f000 80a3 	beq.w	8010e4a <_printf_i+0x16e>
 8010d04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d0c:	e03a      	b.n	8010d84 <_printf_i+0xa8>
 8010d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d12:	2b15      	cmp	r3, #21
 8010d14:	d8f6      	bhi.n	8010d04 <_printf_i+0x28>
 8010d16:	a001      	add	r0, pc, #4	; (adr r0, 8010d1c <_printf_i+0x40>)
 8010d18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d1c:	08010d75 	.word	0x08010d75
 8010d20:	08010d89 	.word	0x08010d89
 8010d24:	08010d05 	.word	0x08010d05
 8010d28:	08010d05 	.word	0x08010d05
 8010d2c:	08010d05 	.word	0x08010d05
 8010d30:	08010d05 	.word	0x08010d05
 8010d34:	08010d89 	.word	0x08010d89
 8010d38:	08010d05 	.word	0x08010d05
 8010d3c:	08010d05 	.word	0x08010d05
 8010d40:	08010d05 	.word	0x08010d05
 8010d44:	08010d05 	.word	0x08010d05
 8010d48:	08010e95 	.word	0x08010e95
 8010d4c:	08010db9 	.word	0x08010db9
 8010d50:	08010e77 	.word	0x08010e77
 8010d54:	08010d05 	.word	0x08010d05
 8010d58:	08010d05 	.word	0x08010d05
 8010d5c:	08010eb7 	.word	0x08010eb7
 8010d60:	08010d05 	.word	0x08010d05
 8010d64:	08010db9 	.word	0x08010db9
 8010d68:	08010d05 	.word	0x08010d05
 8010d6c:	08010d05 	.word	0x08010d05
 8010d70:	08010e7f 	.word	0x08010e7f
 8010d74:	680b      	ldr	r3, [r1, #0]
 8010d76:	1d1a      	adds	r2, r3, #4
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	600a      	str	r2, [r1, #0]
 8010d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d84:	2301      	movs	r3, #1
 8010d86:	e0a3      	b.n	8010ed0 <_printf_i+0x1f4>
 8010d88:	6825      	ldr	r5, [r4, #0]
 8010d8a:	6808      	ldr	r0, [r1, #0]
 8010d8c:	062e      	lsls	r6, r5, #24
 8010d8e:	f100 0304 	add.w	r3, r0, #4
 8010d92:	d50a      	bpl.n	8010daa <_printf_i+0xce>
 8010d94:	6805      	ldr	r5, [r0, #0]
 8010d96:	600b      	str	r3, [r1, #0]
 8010d98:	2d00      	cmp	r5, #0
 8010d9a:	da03      	bge.n	8010da4 <_printf_i+0xc8>
 8010d9c:	232d      	movs	r3, #45	; 0x2d
 8010d9e:	426d      	negs	r5, r5
 8010da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010da4:	485e      	ldr	r0, [pc, #376]	; (8010f20 <_printf_i+0x244>)
 8010da6:	230a      	movs	r3, #10
 8010da8:	e019      	b.n	8010dde <_printf_i+0x102>
 8010daa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010dae:	6805      	ldr	r5, [r0, #0]
 8010db0:	600b      	str	r3, [r1, #0]
 8010db2:	bf18      	it	ne
 8010db4:	b22d      	sxthne	r5, r5
 8010db6:	e7ef      	b.n	8010d98 <_printf_i+0xbc>
 8010db8:	680b      	ldr	r3, [r1, #0]
 8010dba:	6825      	ldr	r5, [r4, #0]
 8010dbc:	1d18      	adds	r0, r3, #4
 8010dbe:	6008      	str	r0, [r1, #0]
 8010dc0:	0628      	lsls	r0, r5, #24
 8010dc2:	d501      	bpl.n	8010dc8 <_printf_i+0xec>
 8010dc4:	681d      	ldr	r5, [r3, #0]
 8010dc6:	e002      	b.n	8010dce <_printf_i+0xf2>
 8010dc8:	0669      	lsls	r1, r5, #25
 8010dca:	d5fb      	bpl.n	8010dc4 <_printf_i+0xe8>
 8010dcc:	881d      	ldrh	r5, [r3, #0]
 8010dce:	4854      	ldr	r0, [pc, #336]	; (8010f20 <_printf_i+0x244>)
 8010dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8010dd2:	bf0c      	ite	eq
 8010dd4:	2308      	moveq	r3, #8
 8010dd6:	230a      	movne	r3, #10
 8010dd8:	2100      	movs	r1, #0
 8010dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010dde:	6866      	ldr	r6, [r4, #4]
 8010de0:	60a6      	str	r6, [r4, #8]
 8010de2:	2e00      	cmp	r6, #0
 8010de4:	bfa2      	ittt	ge
 8010de6:	6821      	ldrge	r1, [r4, #0]
 8010de8:	f021 0104 	bicge.w	r1, r1, #4
 8010dec:	6021      	strge	r1, [r4, #0]
 8010dee:	b90d      	cbnz	r5, 8010df4 <_printf_i+0x118>
 8010df0:	2e00      	cmp	r6, #0
 8010df2:	d04d      	beq.n	8010e90 <_printf_i+0x1b4>
 8010df4:	4616      	mov	r6, r2
 8010df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8010dfe:	5dc7      	ldrb	r7, [r0, r7]
 8010e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e04:	462f      	mov	r7, r5
 8010e06:	42bb      	cmp	r3, r7
 8010e08:	460d      	mov	r5, r1
 8010e0a:	d9f4      	bls.n	8010df6 <_printf_i+0x11a>
 8010e0c:	2b08      	cmp	r3, #8
 8010e0e:	d10b      	bne.n	8010e28 <_printf_i+0x14c>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	07df      	lsls	r7, r3, #31
 8010e14:	d508      	bpl.n	8010e28 <_printf_i+0x14c>
 8010e16:	6923      	ldr	r3, [r4, #16]
 8010e18:	6861      	ldr	r1, [r4, #4]
 8010e1a:	4299      	cmp	r1, r3
 8010e1c:	bfde      	ittt	le
 8010e1e:	2330      	movle	r3, #48	; 0x30
 8010e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e28:	1b92      	subs	r2, r2, r6
 8010e2a:	6122      	str	r2, [r4, #16]
 8010e2c:	f8cd a000 	str.w	sl, [sp]
 8010e30:	464b      	mov	r3, r9
 8010e32:	aa03      	add	r2, sp, #12
 8010e34:	4621      	mov	r1, r4
 8010e36:	4640      	mov	r0, r8
 8010e38:	f7ff fee2 	bl	8010c00 <_printf_common>
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d14c      	bne.n	8010eda <_printf_i+0x1fe>
 8010e40:	f04f 30ff 	mov.w	r0, #4294967295
 8010e44:	b004      	add	sp, #16
 8010e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e4a:	4835      	ldr	r0, [pc, #212]	; (8010f20 <_printf_i+0x244>)
 8010e4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	680e      	ldr	r6, [r1, #0]
 8010e54:	061f      	lsls	r7, r3, #24
 8010e56:	f856 5b04 	ldr.w	r5, [r6], #4
 8010e5a:	600e      	str	r6, [r1, #0]
 8010e5c:	d514      	bpl.n	8010e88 <_printf_i+0x1ac>
 8010e5e:	07d9      	lsls	r1, r3, #31
 8010e60:	bf44      	itt	mi
 8010e62:	f043 0320 	orrmi.w	r3, r3, #32
 8010e66:	6023      	strmi	r3, [r4, #0]
 8010e68:	b91d      	cbnz	r5, 8010e72 <_printf_i+0x196>
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	f023 0320 	bic.w	r3, r3, #32
 8010e70:	6023      	str	r3, [r4, #0]
 8010e72:	2310      	movs	r3, #16
 8010e74:	e7b0      	b.n	8010dd8 <_printf_i+0xfc>
 8010e76:	6823      	ldr	r3, [r4, #0]
 8010e78:	f043 0320 	orr.w	r3, r3, #32
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	2378      	movs	r3, #120	; 0x78
 8010e80:	4828      	ldr	r0, [pc, #160]	; (8010f24 <_printf_i+0x248>)
 8010e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e86:	e7e3      	b.n	8010e50 <_printf_i+0x174>
 8010e88:	065e      	lsls	r6, r3, #25
 8010e8a:	bf48      	it	mi
 8010e8c:	b2ad      	uxthmi	r5, r5
 8010e8e:	e7e6      	b.n	8010e5e <_printf_i+0x182>
 8010e90:	4616      	mov	r6, r2
 8010e92:	e7bb      	b.n	8010e0c <_printf_i+0x130>
 8010e94:	680b      	ldr	r3, [r1, #0]
 8010e96:	6826      	ldr	r6, [r4, #0]
 8010e98:	6960      	ldr	r0, [r4, #20]
 8010e9a:	1d1d      	adds	r5, r3, #4
 8010e9c:	600d      	str	r5, [r1, #0]
 8010e9e:	0635      	lsls	r5, r6, #24
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	d501      	bpl.n	8010ea8 <_printf_i+0x1cc>
 8010ea4:	6018      	str	r0, [r3, #0]
 8010ea6:	e002      	b.n	8010eae <_printf_i+0x1d2>
 8010ea8:	0671      	lsls	r1, r6, #25
 8010eaa:	d5fb      	bpl.n	8010ea4 <_printf_i+0x1c8>
 8010eac:	8018      	strh	r0, [r3, #0]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	6123      	str	r3, [r4, #16]
 8010eb2:	4616      	mov	r6, r2
 8010eb4:	e7ba      	b.n	8010e2c <_printf_i+0x150>
 8010eb6:	680b      	ldr	r3, [r1, #0]
 8010eb8:	1d1a      	adds	r2, r3, #4
 8010eba:	600a      	str	r2, [r1, #0]
 8010ebc:	681e      	ldr	r6, [r3, #0]
 8010ebe:	6862      	ldr	r2, [r4, #4]
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	f7ef f99c 	bl	8000200 <memchr>
 8010ec8:	b108      	cbz	r0, 8010ece <_printf_i+0x1f2>
 8010eca:	1b80      	subs	r0, r0, r6
 8010ecc:	6060      	str	r0, [r4, #4]
 8010ece:	6863      	ldr	r3, [r4, #4]
 8010ed0:	6123      	str	r3, [r4, #16]
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ed8:	e7a8      	b.n	8010e2c <_printf_i+0x150>
 8010eda:	6923      	ldr	r3, [r4, #16]
 8010edc:	4632      	mov	r2, r6
 8010ede:	4649      	mov	r1, r9
 8010ee0:	4640      	mov	r0, r8
 8010ee2:	47d0      	blx	sl
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	d0ab      	beq.n	8010e40 <_printf_i+0x164>
 8010ee8:	6823      	ldr	r3, [r4, #0]
 8010eea:	079b      	lsls	r3, r3, #30
 8010eec:	d413      	bmi.n	8010f16 <_printf_i+0x23a>
 8010eee:	68e0      	ldr	r0, [r4, #12]
 8010ef0:	9b03      	ldr	r3, [sp, #12]
 8010ef2:	4298      	cmp	r0, r3
 8010ef4:	bfb8      	it	lt
 8010ef6:	4618      	movlt	r0, r3
 8010ef8:	e7a4      	b.n	8010e44 <_printf_i+0x168>
 8010efa:	2301      	movs	r3, #1
 8010efc:	4632      	mov	r2, r6
 8010efe:	4649      	mov	r1, r9
 8010f00:	4640      	mov	r0, r8
 8010f02:	47d0      	blx	sl
 8010f04:	3001      	adds	r0, #1
 8010f06:	d09b      	beq.n	8010e40 <_printf_i+0x164>
 8010f08:	3501      	adds	r5, #1
 8010f0a:	68e3      	ldr	r3, [r4, #12]
 8010f0c:	9903      	ldr	r1, [sp, #12]
 8010f0e:	1a5b      	subs	r3, r3, r1
 8010f10:	42ab      	cmp	r3, r5
 8010f12:	dcf2      	bgt.n	8010efa <_printf_i+0x21e>
 8010f14:	e7eb      	b.n	8010eee <_printf_i+0x212>
 8010f16:	2500      	movs	r5, #0
 8010f18:	f104 0619 	add.w	r6, r4, #25
 8010f1c:	e7f5      	b.n	8010f0a <_printf_i+0x22e>
 8010f1e:	bf00      	nop
 8010f20:	080149e9 	.word	0x080149e9
 8010f24:	080149fa 	.word	0x080149fa

08010f28 <_sbrk_r>:
 8010f28:	b538      	push	{r3, r4, r5, lr}
 8010f2a:	4d06      	ldr	r5, [pc, #24]	; (8010f44 <_sbrk_r+0x1c>)
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	4604      	mov	r4, r0
 8010f30:	4608      	mov	r0, r1
 8010f32:	602b      	str	r3, [r5, #0]
 8010f34:	f7ef fda4 	bl	8000a80 <_sbrk>
 8010f38:	1c43      	adds	r3, r0, #1
 8010f3a:	d102      	bne.n	8010f42 <_sbrk_r+0x1a>
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	b103      	cbz	r3, 8010f42 <_sbrk_r+0x1a>
 8010f40:	6023      	str	r3, [r4, #0]
 8010f42:	bd38      	pop	{r3, r4, r5, pc}
 8010f44:	20006d14 	.word	0x20006d14

08010f48 <__sread>:
 8010f48:	b510      	push	{r4, lr}
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f50:	f000 fa92 	bl	8011478 <_read_r>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	bfab      	itete	ge
 8010f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8010f5c:	181b      	addge	r3, r3, r0
 8010f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f62:	bfac      	ite	ge
 8010f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f66:	81a3      	strhlt	r3, [r4, #12]
 8010f68:	bd10      	pop	{r4, pc}

08010f6a <__swrite>:
 8010f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6e:	461f      	mov	r7, r3
 8010f70:	898b      	ldrh	r3, [r1, #12]
 8010f72:	05db      	lsls	r3, r3, #23
 8010f74:	4605      	mov	r5, r0
 8010f76:	460c      	mov	r4, r1
 8010f78:	4616      	mov	r6, r2
 8010f7a:	d505      	bpl.n	8010f88 <__swrite+0x1e>
 8010f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f80:	2302      	movs	r3, #2
 8010f82:	2200      	movs	r2, #0
 8010f84:	f000 f9d0 	bl	8011328 <_lseek_r>
 8010f88:	89a3      	ldrh	r3, [r4, #12]
 8010f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f92:	81a3      	strh	r3, [r4, #12]
 8010f94:	4632      	mov	r2, r6
 8010f96:	463b      	mov	r3, r7
 8010f98:	4628      	mov	r0, r5
 8010f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f9e:	f000 b869 	b.w	8011074 <_write_r>

08010fa2 <__sseek>:
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010faa:	f000 f9bd 	bl	8011328 <_lseek_r>
 8010fae:	1c43      	adds	r3, r0, #1
 8010fb0:	89a3      	ldrh	r3, [r4, #12]
 8010fb2:	bf15      	itete	ne
 8010fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010fbe:	81a3      	strheq	r3, [r4, #12]
 8010fc0:	bf18      	it	ne
 8010fc2:	81a3      	strhne	r3, [r4, #12]
 8010fc4:	bd10      	pop	{r4, pc}

08010fc6 <__sclose>:
 8010fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fca:	f000 b8db 	b.w	8011184 <_close_r>
	...

08010fd0 <__swbuf_r>:
 8010fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd2:	460e      	mov	r6, r1
 8010fd4:	4614      	mov	r4, r2
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	b118      	cbz	r0, 8010fe2 <__swbuf_r+0x12>
 8010fda:	6983      	ldr	r3, [r0, #24]
 8010fdc:	b90b      	cbnz	r3, 8010fe2 <__swbuf_r+0x12>
 8010fde:	f7ff f9f5 	bl	80103cc <__sinit>
 8010fe2:	4b21      	ldr	r3, [pc, #132]	; (8011068 <__swbuf_r+0x98>)
 8010fe4:	429c      	cmp	r4, r3
 8010fe6:	d12b      	bne.n	8011040 <__swbuf_r+0x70>
 8010fe8:	686c      	ldr	r4, [r5, #4]
 8010fea:	69a3      	ldr	r3, [r4, #24]
 8010fec:	60a3      	str	r3, [r4, #8]
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	071a      	lsls	r2, r3, #28
 8010ff2:	d52f      	bpl.n	8011054 <__swbuf_r+0x84>
 8010ff4:	6923      	ldr	r3, [r4, #16]
 8010ff6:	b36b      	cbz	r3, 8011054 <__swbuf_r+0x84>
 8010ff8:	6923      	ldr	r3, [r4, #16]
 8010ffa:	6820      	ldr	r0, [r4, #0]
 8010ffc:	1ac0      	subs	r0, r0, r3
 8010ffe:	6963      	ldr	r3, [r4, #20]
 8011000:	b2f6      	uxtb	r6, r6
 8011002:	4283      	cmp	r3, r0
 8011004:	4637      	mov	r7, r6
 8011006:	dc04      	bgt.n	8011012 <__swbuf_r+0x42>
 8011008:	4621      	mov	r1, r4
 801100a:	4628      	mov	r0, r5
 801100c:	f000 f950 	bl	80112b0 <_fflush_r>
 8011010:	bb30      	cbnz	r0, 8011060 <__swbuf_r+0x90>
 8011012:	68a3      	ldr	r3, [r4, #8]
 8011014:	3b01      	subs	r3, #1
 8011016:	60a3      	str	r3, [r4, #8]
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	1c5a      	adds	r2, r3, #1
 801101c:	6022      	str	r2, [r4, #0]
 801101e:	701e      	strb	r6, [r3, #0]
 8011020:	6963      	ldr	r3, [r4, #20]
 8011022:	3001      	adds	r0, #1
 8011024:	4283      	cmp	r3, r0
 8011026:	d004      	beq.n	8011032 <__swbuf_r+0x62>
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	07db      	lsls	r3, r3, #31
 801102c:	d506      	bpl.n	801103c <__swbuf_r+0x6c>
 801102e:	2e0a      	cmp	r6, #10
 8011030:	d104      	bne.n	801103c <__swbuf_r+0x6c>
 8011032:	4621      	mov	r1, r4
 8011034:	4628      	mov	r0, r5
 8011036:	f000 f93b 	bl	80112b0 <_fflush_r>
 801103a:	b988      	cbnz	r0, 8011060 <__swbuf_r+0x90>
 801103c:	4638      	mov	r0, r7
 801103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011040:	4b0a      	ldr	r3, [pc, #40]	; (801106c <__swbuf_r+0x9c>)
 8011042:	429c      	cmp	r4, r3
 8011044:	d101      	bne.n	801104a <__swbuf_r+0x7a>
 8011046:	68ac      	ldr	r4, [r5, #8]
 8011048:	e7cf      	b.n	8010fea <__swbuf_r+0x1a>
 801104a:	4b09      	ldr	r3, [pc, #36]	; (8011070 <__swbuf_r+0xa0>)
 801104c:	429c      	cmp	r4, r3
 801104e:	bf08      	it	eq
 8011050:	68ec      	ldreq	r4, [r5, #12]
 8011052:	e7ca      	b.n	8010fea <__swbuf_r+0x1a>
 8011054:	4621      	mov	r1, r4
 8011056:	4628      	mov	r0, r5
 8011058:	f000 f81e 	bl	8011098 <__swsetup_r>
 801105c:	2800      	cmp	r0, #0
 801105e:	d0cb      	beq.n	8010ff8 <__swbuf_r+0x28>
 8011060:	f04f 37ff 	mov.w	r7, #4294967295
 8011064:	e7ea      	b.n	801103c <__swbuf_r+0x6c>
 8011066:	bf00      	nop
 8011068:	08014998 	.word	0x08014998
 801106c:	080149b8 	.word	0x080149b8
 8011070:	08014978 	.word	0x08014978

08011074 <_write_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4d07      	ldr	r5, [pc, #28]	; (8011094 <_write_r+0x20>)
 8011078:	4604      	mov	r4, r0
 801107a:	4608      	mov	r0, r1
 801107c:	4611      	mov	r1, r2
 801107e:	2200      	movs	r2, #0
 8011080:	602a      	str	r2, [r5, #0]
 8011082:	461a      	mov	r2, r3
 8011084:	f7ef fcab 	bl	80009de <_write>
 8011088:	1c43      	adds	r3, r0, #1
 801108a:	d102      	bne.n	8011092 <_write_r+0x1e>
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	b103      	cbz	r3, 8011092 <_write_r+0x1e>
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	bd38      	pop	{r3, r4, r5, pc}
 8011094:	20006d14 	.word	0x20006d14

08011098 <__swsetup_r>:
 8011098:	4b32      	ldr	r3, [pc, #200]	; (8011164 <__swsetup_r+0xcc>)
 801109a:	b570      	push	{r4, r5, r6, lr}
 801109c:	681d      	ldr	r5, [r3, #0]
 801109e:	4606      	mov	r6, r0
 80110a0:	460c      	mov	r4, r1
 80110a2:	b125      	cbz	r5, 80110ae <__swsetup_r+0x16>
 80110a4:	69ab      	ldr	r3, [r5, #24]
 80110a6:	b913      	cbnz	r3, 80110ae <__swsetup_r+0x16>
 80110a8:	4628      	mov	r0, r5
 80110aa:	f7ff f98f 	bl	80103cc <__sinit>
 80110ae:	4b2e      	ldr	r3, [pc, #184]	; (8011168 <__swsetup_r+0xd0>)
 80110b0:	429c      	cmp	r4, r3
 80110b2:	d10f      	bne.n	80110d4 <__swsetup_r+0x3c>
 80110b4:	686c      	ldr	r4, [r5, #4]
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110bc:	0719      	lsls	r1, r3, #28
 80110be:	d42c      	bmi.n	801111a <__swsetup_r+0x82>
 80110c0:	06dd      	lsls	r5, r3, #27
 80110c2:	d411      	bmi.n	80110e8 <__swsetup_r+0x50>
 80110c4:	2309      	movs	r3, #9
 80110c6:	6033      	str	r3, [r6, #0]
 80110c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	f04f 30ff 	mov.w	r0, #4294967295
 80110d2:	e03e      	b.n	8011152 <__swsetup_r+0xba>
 80110d4:	4b25      	ldr	r3, [pc, #148]	; (801116c <__swsetup_r+0xd4>)
 80110d6:	429c      	cmp	r4, r3
 80110d8:	d101      	bne.n	80110de <__swsetup_r+0x46>
 80110da:	68ac      	ldr	r4, [r5, #8]
 80110dc:	e7eb      	b.n	80110b6 <__swsetup_r+0x1e>
 80110de:	4b24      	ldr	r3, [pc, #144]	; (8011170 <__swsetup_r+0xd8>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	bf08      	it	eq
 80110e4:	68ec      	ldreq	r4, [r5, #12]
 80110e6:	e7e6      	b.n	80110b6 <__swsetup_r+0x1e>
 80110e8:	0758      	lsls	r0, r3, #29
 80110ea:	d512      	bpl.n	8011112 <__swsetup_r+0x7a>
 80110ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ee:	b141      	cbz	r1, 8011102 <__swsetup_r+0x6a>
 80110f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110f4:	4299      	cmp	r1, r3
 80110f6:	d002      	beq.n	80110fe <__swsetup_r+0x66>
 80110f8:	4630      	mov	r0, r6
 80110fa:	f7ff fa21 	bl	8010540 <_free_r>
 80110fe:	2300      	movs	r3, #0
 8011100:	6363      	str	r3, [r4, #52]	; 0x34
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	2300      	movs	r3, #0
 801110c:	6063      	str	r3, [r4, #4]
 801110e:	6923      	ldr	r3, [r4, #16]
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	89a3      	ldrh	r3, [r4, #12]
 8011114:	f043 0308 	orr.w	r3, r3, #8
 8011118:	81a3      	strh	r3, [r4, #12]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	b94b      	cbnz	r3, 8011132 <__swsetup_r+0x9a>
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011128:	d003      	beq.n	8011132 <__swsetup_r+0x9a>
 801112a:	4621      	mov	r1, r4
 801112c:	4630      	mov	r0, r6
 801112e:	f000 f931 	bl	8011394 <__smakebuf_r>
 8011132:	89a0      	ldrh	r0, [r4, #12]
 8011134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011138:	f010 0301 	ands.w	r3, r0, #1
 801113c:	d00a      	beq.n	8011154 <__swsetup_r+0xbc>
 801113e:	2300      	movs	r3, #0
 8011140:	60a3      	str	r3, [r4, #8]
 8011142:	6963      	ldr	r3, [r4, #20]
 8011144:	425b      	negs	r3, r3
 8011146:	61a3      	str	r3, [r4, #24]
 8011148:	6923      	ldr	r3, [r4, #16]
 801114a:	b943      	cbnz	r3, 801115e <__swsetup_r+0xc6>
 801114c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011150:	d1ba      	bne.n	80110c8 <__swsetup_r+0x30>
 8011152:	bd70      	pop	{r4, r5, r6, pc}
 8011154:	0781      	lsls	r1, r0, #30
 8011156:	bf58      	it	pl
 8011158:	6963      	ldrpl	r3, [r4, #20]
 801115a:	60a3      	str	r3, [r4, #8]
 801115c:	e7f4      	b.n	8011148 <__swsetup_r+0xb0>
 801115e:	2000      	movs	r0, #0
 8011160:	e7f7      	b.n	8011152 <__swsetup_r+0xba>
 8011162:	bf00      	nop
 8011164:	2000001c 	.word	0x2000001c
 8011168:	08014998 	.word	0x08014998
 801116c:	080149b8 	.word	0x080149b8
 8011170:	08014978 	.word	0x08014978

08011174 <abort>:
 8011174:	b508      	push	{r3, lr}
 8011176:	2006      	movs	r0, #6
 8011178:	f000 f9b8 	bl	80114ec <raise>
 801117c:	2001      	movs	r0, #1
 801117e:	f7ef fc07 	bl	8000990 <_exit>
	...

08011184 <_close_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d06      	ldr	r5, [pc, #24]	; (80111a0 <_close_r+0x1c>)
 8011188:	2300      	movs	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	602b      	str	r3, [r5, #0]
 8011190:	f7ef fc41 	bl	8000a16 <_close>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_close_r+0x1a>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_close_r+0x1a>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	20006d14 	.word	0x20006d14

080111a4 <__sflush_r>:
 80111a4:	898a      	ldrh	r2, [r1, #12]
 80111a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111aa:	4605      	mov	r5, r0
 80111ac:	0710      	lsls	r0, r2, #28
 80111ae:	460c      	mov	r4, r1
 80111b0:	d458      	bmi.n	8011264 <__sflush_r+0xc0>
 80111b2:	684b      	ldr	r3, [r1, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	dc05      	bgt.n	80111c4 <__sflush_r+0x20>
 80111b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dc02      	bgt.n	80111c4 <__sflush_r+0x20>
 80111be:	2000      	movs	r0, #0
 80111c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111c6:	2e00      	cmp	r6, #0
 80111c8:	d0f9      	beq.n	80111be <__sflush_r+0x1a>
 80111ca:	2300      	movs	r3, #0
 80111cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80111d0:	682f      	ldr	r7, [r5, #0]
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	d032      	beq.n	801123c <__sflush_r+0x98>
 80111d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	075a      	lsls	r2, r3, #29
 80111dc:	d505      	bpl.n	80111ea <__sflush_r+0x46>
 80111de:	6863      	ldr	r3, [r4, #4]
 80111e0:	1ac0      	subs	r0, r0, r3
 80111e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111e4:	b10b      	cbz	r3, 80111ea <__sflush_r+0x46>
 80111e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111e8:	1ac0      	subs	r0, r0, r3
 80111ea:	2300      	movs	r3, #0
 80111ec:	4602      	mov	r2, r0
 80111ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111f0:	6a21      	ldr	r1, [r4, #32]
 80111f2:	4628      	mov	r0, r5
 80111f4:	47b0      	blx	r6
 80111f6:	1c43      	adds	r3, r0, #1
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	d106      	bne.n	801120a <__sflush_r+0x66>
 80111fc:	6829      	ldr	r1, [r5, #0]
 80111fe:	291d      	cmp	r1, #29
 8011200:	d82c      	bhi.n	801125c <__sflush_r+0xb8>
 8011202:	4a2a      	ldr	r2, [pc, #168]	; (80112ac <__sflush_r+0x108>)
 8011204:	40ca      	lsrs	r2, r1
 8011206:	07d6      	lsls	r6, r2, #31
 8011208:	d528      	bpl.n	801125c <__sflush_r+0xb8>
 801120a:	2200      	movs	r2, #0
 801120c:	6062      	str	r2, [r4, #4]
 801120e:	04d9      	lsls	r1, r3, #19
 8011210:	6922      	ldr	r2, [r4, #16]
 8011212:	6022      	str	r2, [r4, #0]
 8011214:	d504      	bpl.n	8011220 <__sflush_r+0x7c>
 8011216:	1c42      	adds	r2, r0, #1
 8011218:	d101      	bne.n	801121e <__sflush_r+0x7a>
 801121a:	682b      	ldr	r3, [r5, #0]
 801121c:	b903      	cbnz	r3, 8011220 <__sflush_r+0x7c>
 801121e:	6560      	str	r0, [r4, #84]	; 0x54
 8011220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011222:	602f      	str	r7, [r5, #0]
 8011224:	2900      	cmp	r1, #0
 8011226:	d0ca      	beq.n	80111be <__sflush_r+0x1a>
 8011228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801122c:	4299      	cmp	r1, r3
 801122e:	d002      	beq.n	8011236 <__sflush_r+0x92>
 8011230:	4628      	mov	r0, r5
 8011232:	f7ff f985 	bl	8010540 <_free_r>
 8011236:	2000      	movs	r0, #0
 8011238:	6360      	str	r0, [r4, #52]	; 0x34
 801123a:	e7c1      	b.n	80111c0 <__sflush_r+0x1c>
 801123c:	6a21      	ldr	r1, [r4, #32]
 801123e:	2301      	movs	r3, #1
 8011240:	4628      	mov	r0, r5
 8011242:	47b0      	blx	r6
 8011244:	1c41      	adds	r1, r0, #1
 8011246:	d1c7      	bne.n	80111d8 <__sflush_r+0x34>
 8011248:	682b      	ldr	r3, [r5, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d0c4      	beq.n	80111d8 <__sflush_r+0x34>
 801124e:	2b1d      	cmp	r3, #29
 8011250:	d001      	beq.n	8011256 <__sflush_r+0xb2>
 8011252:	2b16      	cmp	r3, #22
 8011254:	d101      	bne.n	801125a <__sflush_r+0xb6>
 8011256:	602f      	str	r7, [r5, #0]
 8011258:	e7b1      	b.n	80111be <__sflush_r+0x1a>
 801125a:	89a3      	ldrh	r3, [r4, #12]
 801125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011260:	81a3      	strh	r3, [r4, #12]
 8011262:	e7ad      	b.n	80111c0 <__sflush_r+0x1c>
 8011264:	690f      	ldr	r7, [r1, #16]
 8011266:	2f00      	cmp	r7, #0
 8011268:	d0a9      	beq.n	80111be <__sflush_r+0x1a>
 801126a:	0793      	lsls	r3, r2, #30
 801126c:	680e      	ldr	r6, [r1, #0]
 801126e:	bf08      	it	eq
 8011270:	694b      	ldreq	r3, [r1, #20]
 8011272:	600f      	str	r7, [r1, #0]
 8011274:	bf18      	it	ne
 8011276:	2300      	movne	r3, #0
 8011278:	eba6 0807 	sub.w	r8, r6, r7
 801127c:	608b      	str	r3, [r1, #8]
 801127e:	f1b8 0f00 	cmp.w	r8, #0
 8011282:	dd9c      	ble.n	80111be <__sflush_r+0x1a>
 8011284:	6a21      	ldr	r1, [r4, #32]
 8011286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011288:	4643      	mov	r3, r8
 801128a:	463a      	mov	r2, r7
 801128c:	4628      	mov	r0, r5
 801128e:	47b0      	blx	r6
 8011290:	2800      	cmp	r0, #0
 8011292:	dc06      	bgt.n	80112a2 <__sflush_r+0xfe>
 8011294:	89a3      	ldrh	r3, [r4, #12]
 8011296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801129a:	81a3      	strh	r3, [r4, #12]
 801129c:	f04f 30ff 	mov.w	r0, #4294967295
 80112a0:	e78e      	b.n	80111c0 <__sflush_r+0x1c>
 80112a2:	4407      	add	r7, r0
 80112a4:	eba8 0800 	sub.w	r8, r8, r0
 80112a8:	e7e9      	b.n	801127e <__sflush_r+0xda>
 80112aa:	bf00      	nop
 80112ac:	20400001 	.word	0x20400001

080112b0 <_fflush_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	690b      	ldr	r3, [r1, #16]
 80112b4:	4605      	mov	r5, r0
 80112b6:	460c      	mov	r4, r1
 80112b8:	b913      	cbnz	r3, 80112c0 <_fflush_r+0x10>
 80112ba:	2500      	movs	r5, #0
 80112bc:	4628      	mov	r0, r5
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	b118      	cbz	r0, 80112ca <_fflush_r+0x1a>
 80112c2:	6983      	ldr	r3, [r0, #24]
 80112c4:	b90b      	cbnz	r3, 80112ca <_fflush_r+0x1a>
 80112c6:	f7ff f881 	bl	80103cc <__sinit>
 80112ca:	4b14      	ldr	r3, [pc, #80]	; (801131c <_fflush_r+0x6c>)
 80112cc:	429c      	cmp	r4, r3
 80112ce:	d11b      	bne.n	8011308 <_fflush_r+0x58>
 80112d0:	686c      	ldr	r4, [r5, #4]
 80112d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0ef      	beq.n	80112ba <_fflush_r+0xa>
 80112da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112dc:	07d0      	lsls	r0, r2, #31
 80112de:	d404      	bmi.n	80112ea <_fflush_r+0x3a>
 80112e0:	0599      	lsls	r1, r3, #22
 80112e2:	d402      	bmi.n	80112ea <_fflush_r+0x3a>
 80112e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112e6:	f7ff f921 	bl	801052c <__retarget_lock_acquire_recursive>
 80112ea:	4628      	mov	r0, r5
 80112ec:	4621      	mov	r1, r4
 80112ee:	f7ff ff59 	bl	80111a4 <__sflush_r>
 80112f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112f4:	07da      	lsls	r2, r3, #31
 80112f6:	4605      	mov	r5, r0
 80112f8:	d4e0      	bmi.n	80112bc <_fflush_r+0xc>
 80112fa:	89a3      	ldrh	r3, [r4, #12]
 80112fc:	059b      	lsls	r3, r3, #22
 80112fe:	d4dd      	bmi.n	80112bc <_fflush_r+0xc>
 8011300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011302:	f7ff f914 	bl	801052e <__retarget_lock_release_recursive>
 8011306:	e7d9      	b.n	80112bc <_fflush_r+0xc>
 8011308:	4b05      	ldr	r3, [pc, #20]	; (8011320 <_fflush_r+0x70>)
 801130a:	429c      	cmp	r4, r3
 801130c:	d101      	bne.n	8011312 <_fflush_r+0x62>
 801130e:	68ac      	ldr	r4, [r5, #8]
 8011310:	e7df      	b.n	80112d2 <_fflush_r+0x22>
 8011312:	4b04      	ldr	r3, [pc, #16]	; (8011324 <_fflush_r+0x74>)
 8011314:	429c      	cmp	r4, r3
 8011316:	bf08      	it	eq
 8011318:	68ec      	ldreq	r4, [r5, #12]
 801131a:	e7da      	b.n	80112d2 <_fflush_r+0x22>
 801131c:	08014998 	.word	0x08014998
 8011320:	080149b8 	.word	0x080149b8
 8011324:	08014978 	.word	0x08014978

08011328 <_lseek_r>:
 8011328:	b538      	push	{r3, r4, r5, lr}
 801132a:	4d07      	ldr	r5, [pc, #28]	; (8011348 <_lseek_r+0x20>)
 801132c:	4604      	mov	r4, r0
 801132e:	4608      	mov	r0, r1
 8011330:	4611      	mov	r1, r2
 8011332:	2200      	movs	r2, #0
 8011334:	602a      	str	r2, [r5, #0]
 8011336:	461a      	mov	r2, r3
 8011338:	f7ef fb94 	bl	8000a64 <_lseek>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_lseek_r+0x1e>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_lseek_r+0x1e>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	20006d14 	.word	0x20006d14

0801134c <__swhatbuf_r>:
 801134c:	b570      	push	{r4, r5, r6, lr}
 801134e:	460e      	mov	r6, r1
 8011350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011354:	2900      	cmp	r1, #0
 8011356:	b096      	sub	sp, #88	; 0x58
 8011358:	4614      	mov	r4, r2
 801135a:	461d      	mov	r5, r3
 801135c:	da07      	bge.n	801136e <__swhatbuf_r+0x22>
 801135e:	2300      	movs	r3, #0
 8011360:	602b      	str	r3, [r5, #0]
 8011362:	89b3      	ldrh	r3, [r6, #12]
 8011364:	061a      	lsls	r2, r3, #24
 8011366:	d410      	bmi.n	801138a <__swhatbuf_r+0x3e>
 8011368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801136c:	e00e      	b.n	801138c <__swhatbuf_r+0x40>
 801136e:	466a      	mov	r2, sp
 8011370:	f000 f8d8 	bl	8011524 <_fstat_r>
 8011374:	2800      	cmp	r0, #0
 8011376:	dbf2      	blt.n	801135e <__swhatbuf_r+0x12>
 8011378:	9a01      	ldr	r2, [sp, #4]
 801137a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801137e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011382:	425a      	negs	r2, r3
 8011384:	415a      	adcs	r2, r3
 8011386:	602a      	str	r2, [r5, #0]
 8011388:	e7ee      	b.n	8011368 <__swhatbuf_r+0x1c>
 801138a:	2340      	movs	r3, #64	; 0x40
 801138c:	2000      	movs	r0, #0
 801138e:	6023      	str	r3, [r4, #0]
 8011390:	b016      	add	sp, #88	; 0x58
 8011392:	bd70      	pop	{r4, r5, r6, pc}

08011394 <__smakebuf_r>:
 8011394:	898b      	ldrh	r3, [r1, #12]
 8011396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011398:	079d      	lsls	r5, r3, #30
 801139a:	4606      	mov	r6, r0
 801139c:	460c      	mov	r4, r1
 801139e:	d507      	bpl.n	80113b0 <__smakebuf_r+0x1c>
 80113a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	6123      	str	r3, [r4, #16]
 80113a8:	2301      	movs	r3, #1
 80113aa:	6163      	str	r3, [r4, #20]
 80113ac:	b002      	add	sp, #8
 80113ae:	bd70      	pop	{r4, r5, r6, pc}
 80113b0:	ab01      	add	r3, sp, #4
 80113b2:	466a      	mov	r2, sp
 80113b4:	f7ff ffca 	bl	801134c <__swhatbuf_r>
 80113b8:	9900      	ldr	r1, [sp, #0]
 80113ba:	4605      	mov	r5, r0
 80113bc:	4630      	mov	r0, r6
 80113be:	f7ff f90f 	bl	80105e0 <_malloc_r>
 80113c2:	b948      	cbnz	r0, 80113d8 <__smakebuf_r+0x44>
 80113c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c8:	059a      	lsls	r2, r3, #22
 80113ca:	d4ef      	bmi.n	80113ac <__smakebuf_r+0x18>
 80113cc:	f023 0303 	bic.w	r3, r3, #3
 80113d0:	f043 0302 	orr.w	r3, r3, #2
 80113d4:	81a3      	strh	r3, [r4, #12]
 80113d6:	e7e3      	b.n	80113a0 <__smakebuf_r+0xc>
 80113d8:	4b0d      	ldr	r3, [pc, #52]	; (8011410 <__smakebuf_r+0x7c>)
 80113da:	62b3      	str	r3, [r6, #40]	; 0x28
 80113dc:	89a3      	ldrh	r3, [r4, #12]
 80113de:	6020      	str	r0, [r4, #0]
 80113e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	9b00      	ldr	r3, [sp, #0]
 80113e8:	6163      	str	r3, [r4, #20]
 80113ea:	9b01      	ldr	r3, [sp, #4]
 80113ec:	6120      	str	r0, [r4, #16]
 80113ee:	b15b      	cbz	r3, 8011408 <__smakebuf_r+0x74>
 80113f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113f4:	4630      	mov	r0, r6
 80113f6:	f000 f8a7 	bl	8011548 <_isatty_r>
 80113fa:	b128      	cbz	r0, 8011408 <__smakebuf_r+0x74>
 80113fc:	89a3      	ldrh	r3, [r4, #12]
 80113fe:	f023 0303 	bic.w	r3, r3, #3
 8011402:	f043 0301 	orr.w	r3, r3, #1
 8011406:	81a3      	strh	r3, [r4, #12]
 8011408:	89a0      	ldrh	r0, [r4, #12]
 801140a:	4305      	orrs	r5, r0
 801140c:	81a5      	strh	r5, [r4, #12]
 801140e:	e7cd      	b.n	80113ac <__smakebuf_r+0x18>
 8011410:	08010365 	.word	0x08010365

08011414 <__malloc_lock>:
 8011414:	4801      	ldr	r0, [pc, #4]	; (801141c <__malloc_lock+0x8>)
 8011416:	f7ff b889 	b.w	801052c <__retarget_lock_acquire_recursive>
 801141a:	bf00      	nop
 801141c:	20006d1c 	.word	0x20006d1c

08011420 <__malloc_unlock>:
 8011420:	4801      	ldr	r0, [pc, #4]	; (8011428 <__malloc_unlock+0x8>)
 8011422:	f7ff b884 	b.w	801052e <__retarget_lock_release_recursive>
 8011426:	bf00      	nop
 8011428:	20006d1c 	.word	0x20006d1c

0801142c <_realloc_r>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	4607      	mov	r7, r0
 8011430:	4614      	mov	r4, r2
 8011432:	460e      	mov	r6, r1
 8011434:	b921      	cbnz	r1, 8011440 <_realloc_r+0x14>
 8011436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801143a:	4611      	mov	r1, r2
 801143c:	f7ff b8d0 	b.w	80105e0 <_malloc_r>
 8011440:	b922      	cbnz	r2, 801144c <_realloc_r+0x20>
 8011442:	f7ff f87d 	bl	8010540 <_free_r>
 8011446:	4625      	mov	r5, r4
 8011448:	4628      	mov	r0, r5
 801144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801144c:	f000 f88c 	bl	8011568 <_malloc_usable_size_r>
 8011450:	42a0      	cmp	r0, r4
 8011452:	d20f      	bcs.n	8011474 <_realloc_r+0x48>
 8011454:	4621      	mov	r1, r4
 8011456:	4638      	mov	r0, r7
 8011458:	f7ff f8c2 	bl	80105e0 <_malloc_r>
 801145c:	4605      	mov	r5, r0
 801145e:	2800      	cmp	r0, #0
 8011460:	d0f2      	beq.n	8011448 <_realloc_r+0x1c>
 8011462:	4631      	mov	r1, r6
 8011464:	4622      	mov	r2, r4
 8011466:	f7fe fe73 	bl	8010150 <memcpy>
 801146a:	4631      	mov	r1, r6
 801146c:	4638      	mov	r0, r7
 801146e:	f7ff f867 	bl	8010540 <_free_r>
 8011472:	e7e9      	b.n	8011448 <_realloc_r+0x1c>
 8011474:	4635      	mov	r5, r6
 8011476:	e7e7      	b.n	8011448 <_realloc_r+0x1c>

08011478 <_read_r>:
 8011478:	b538      	push	{r3, r4, r5, lr}
 801147a:	4d07      	ldr	r5, [pc, #28]	; (8011498 <_read_r+0x20>)
 801147c:	4604      	mov	r4, r0
 801147e:	4608      	mov	r0, r1
 8011480:	4611      	mov	r1, r2
 8011482:	2200      	movs	r2, #0
 8011484:	602a      	str	r2, [r5, #0]
 8011486:	461a      	mov	r2, r3
 8011488:	f7ef fa8c 	bl	80009a4 <_read>
 801148c:	1c43      	adds	r3, r0, #1
 801148e:	d102      	bne.n	8011496 <_read_r+0x1e>
 8011490:	682b      	ldr	r3, [r5, #0]
 8011492:	b103      	cbz	r3, 8011496 <_read_r+0x1e>
 8011494:	6023      	str	r3, [r4, #0]
 8011496:	bd38      	pop	{r3, r4, r5, pc}
 8011498:	20006d14 	.word	0x20006d14

0801149c <_raise_r>:
 801149c:	291f      	cmp	r1, #31
 801149e:	b538      	push	{r3, r4, r5, lr}
 80114a0:	4604      	mov	r4, r0
 80114a2:	460d      	mov	r5, r1
 80114a4:	d904      	bls.n	80114b0 <_raise_r+0x14>
 80114a6:	2316      	movs	r3, #22
 80114a8:	6003      	str	r3, [r0, #0]
 80114aa:	f04f 30ff 	mov.w	r0, #4294967295
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114b2:	b112      	cbz	r2, 80114ba <_raise_r+0x1e>
 80114b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114b8:	b94b      	cbnz	r3, 80114ce <_raise_r+0x32>
 80114ba:	4620      	mov	r0, r4
 80114bc:	f000 f830 	bl	8011520 <_getpid_r>
 80114c0:	462a      	mov	r2, r5
 80114c2:	4601      	mov	r1, r0
 80114c4:	4620      	mov	r0, r4
 80114c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114ca:	f000 b817 	b.w	80114fc <_kill_r>
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d00a      	beq.n	80114e8 <_raise_r+0x4c>
 80114d2:	1c59      	adds	r1, r3, #1
 80114d4:	d103      	bne.n	80114de <_raise_r+0x42>
 80114d6:	2316      	movs	r3, #22
 80114d8:	6003      	str	r3, [r0, #0]
 80114da:	2001      	movs	r0, #1
 80114dc:	e7e7      	b.n	80114ae <_raise_r+0x12>
 80114de:	2400      	movs	r4, #0
 80114e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114e4:	4628      	mov	r0, r5
 80114e6:	4798      	blx	r3
 80114e8:	2000      	movs	r0, #0
 80114ea:	e7e0      	b.n	80114ae <_raise_r+0x12>

080114ec <raise>:
 80114ec:	4b02      	ldr	r3, [pc, #8]	; (80114f8 <raise+0xc>)
 80114ee:	4601      	mov	r1, r0
 80114f0:	6818      	ldr	r0, [r3, #0]
 80114f2:	f7ff bfd3 	b.w	801149c <_raise_r>
 80114f6:	bf00      	nop
 80114f8:	2000001c 	.word	0x2000001c

080114fc <_kill_r>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4d07      	ldr	r5, [pc, #28]	; (801151c <_kill_r+0x20>)
 8011500:	2300      	movs	r3, #0
 8011502:	4604      	mov	r4, r0
 8011504:	4608      	mov	r0, r1
 8011506:	4611      	mov	r1, r2
 8011508:	602b      	str	r3, [r5, #0]
 801150a:	f7ef fa2f 	bl	800096c <_kill>
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	d102      	bne.n	8011518 <_kill_r+0x1c>
 8011512:	682b      	ldr	r3, [r5, #0]
 8011514:	b103      	cbz	r3, 8011518 <_kill_r+0x1c>
 8011516:	6023      	str	r3, [r4, #0]
 8011518:	bd38      	pop	{r3, r4, r5, pc}
 801151a:	bf00      	nop
 801151c:	20006d14 	.word	0x20006d14

08011520 <_getpid_r>:
 8011520:	f7ef ba1c 	b.w	800095c <_getpid>

08011524 <_fstat_r>:
 8011524:	b538      	push	{r3, r4, r5, lr}
 8011526:	4d07      	ldr	r5, [pc, #28]	; (8011544 <_fstat_r+0x20>)
 8011528:	2300      	movs	r3, #0
 801152a:	4604      	mov	r4, r0
 801152c:	4608      	mov	r0, r1
 801152e:	4611      	mov	r1, r2
 8011530:	602b      	str	r3, [r5, #0]
 8011532:	f7ef fa7c 	bl	8000a2e <_fstat>
 8011536:	1c43      	adds	r3, r0, #1
 8011538:	d102      	bne.n	8011540 <_fstat_r+0x1c>
 801153a:	682b      	ldr	r3, [r5, #0]
 801153c:	b103      	cbz	r3, 8011540 <_fstat_r+0x1c>
 801153e:	6023      	str	r3, [r4, #0]
 8011540:	bd38      	pop	{r3, r4, r5, pc}
 8011542:	bf00      	nop
 8011544:	20006d14 	.word	0x20006d14

08011548 <_isatty_r>:
 8011548:	b538      	push	{r3, r4, r5, lr}
 801154a:	4d06      	ldr	r5, [pc, #24]	; (8011564 <_isatty_r+0x1c>)
 801154c:	2300      	movs	r3, #0
 801154e:	4604      	mov	r4, r0
 8011550:	4608      	mov	r0, r1
 8011552:	602b      	str	r3, [r5, #0]
 8011554:	f7ef fa7b 	bl	8000a4e <_isatty>
 8011558:	1c43      	adds	r3, r0, #1
 801155a:	d102      	bne.n	8011562 <_isatty_r+0x1a>
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	b103      	cbz	r3, 8011562 <_isatty_r+0x1a>
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	20006d14 	.word	0x20006d14

08011568 <_malloc_usable_size_r>:
 8011568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801156c:	1f18      	subs	r0, r3, #4
 801156e:	2b00      	cmp	r3, #0
 8011570:	bfbc      	itt	lt
 8011572:	580b      	ldrlt	r3, [r1, r0]
 8011574:	18c0      	addlt	r0, r0, r3
 8011576:	4770      	bx	lr

08011578 <_init>:
 8011578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801157a:	bf00      	nop
 801157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801157e:	bc08      	pop	{r3}
 8011580:	469e      	mov	lr, r3
 8011582:	4770      	bx	lr

08011584 <_fini>:
 8011584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011586:	bf00      	nop
 8011588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801158a:	bc08      	pop	{r3}
 801158c:	469e      	mov	lr, r3
 801158e:	4770      	bx	lr
