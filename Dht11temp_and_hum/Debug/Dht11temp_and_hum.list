
Dht11temp_and_hum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000128c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001414  08001414  00011414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001424  08001424  00011424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001430  08001430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b28b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001905  00000000  00000000  0002b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00006aa1  00000000  00000000  0002cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00033670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00033da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa88  00000000  00000000  00034750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b98b  00000000  00000000  000541d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4588  00000000  00000000  0005fb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001240eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  00124140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013fc 	.word	0x080013fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080013fc 	.word	0x080013fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_InitTick+0x3c>)
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x40>)
{
 80004c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	7818      	ldrb	r0, [r3, #0]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80004d2:	6810      	ldr	r0, [r2, #0]
 80004d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004d8:	f000 f89a 	bl	8000610 <HAL_SYSTICK_Config>
 80004dc:	4604      	mov	r4, r0
 80004de:	b958      	cbnz	r0, 80004f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e0:	2d0f      	cmp	r5, #15
 80004e2:	d809      	bhi.n	80004f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e4:	4602      	mov	r2, r0
 80004e6:	4629      	mov	r1, r5
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f000 f85e 	bl	80005ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_InitTick+0x44>)
 80004f2:	4620      	mov	r0, r4
 80004f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7fc      	b.n	80004f6 <HAL_InitTick+0x36>
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000000 	.word	0x20000000
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_Init>:
{
 8000508:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_Init+0x30>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f82f 	bl	8000588 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffc8 	bl	80004c0 <HAL_InitTick>
  HAL_MspInit();
 8000530:	f000 fec2 	bl	80012b8 <HAL_MspInit>
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd08      	pop	{r3, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <HAL_IncTick+0x10>)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_IncTick+0x14>)
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	440b      	add	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000038 	.word	0x20000038
 8000550:	20000000 	.word	0x20000000

08000554 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000554:	4b01      	ldr	r3, [pc, #4]	; (800055c <HAL_GetTick+0x8>)
 8000556:	6818      	ldr	r0, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000038 	.word	0x20000038

08000560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000560:	b538      	push	{r3, r4, r5, lr}
 8000562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000564:	f7ff fff6 	bl	8000554 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000568:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf1c      	itt	ne
 800056c:	4b05      	ldrne	r3, [pc, #20]	; (8000584 <HAL_Delay+0x24>)
 800056e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000570:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000572:	bf18      	it	ne
 8000574:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000576:	f7ff ffed 	bl	8000554 <HAL_GetTick>
 800057a:	1b43      	subs	r3, r0, r5
 800057c:	42a3      	cmp	r3, r4
 800057e:	d3fa      	bcc.n	8000576 <HAL_Delay+0x16>
  {
  }
}
 8000580:	bd38      	pop	{r3, r4, r5, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4907      	ldr	r1, [pc, #28]	; (80005a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800058a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000590:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000592:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000598:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	68dc      	ldr	r4, [r3, #12]
 80005b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	2d04      	cmp	r5, #4
 80005be:	bf28      	it	cs
 80005c0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	fa03 f505 	lsl.w	r5, r3, r5
 80005d2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d6:	40a3      	lsls	r3, r4
 80005d8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80005de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfac      	ite	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	4a08      	ldrlt	r2, [pc, #32]	; (800060c <HAL_NVIC_SetPriority+0x60>)
 80005ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80005f0:	bfb8      	it	lt
 80005f2:	f000 000f 	andlt.w	r0, r0, #15
 80005f6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	bfaa      	itet	ge
 80005fa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000ed14 	.word	0xe000ed14

08000610 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	3801      	subs	r0, #1
 8000612:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000616:	d20a      	bcs.n	800062e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	21f0      	movs	r1, #240	; 0xf0
 8000620:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000626:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800062c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800062e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800063c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80007ec <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000644:	4a67      	ldr	r2, [pc, #412]	; (80007e4 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000646:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000648:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800064a:	2401      	movs	r4, #1
 800064c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800064e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000652:	43ac      	bics	r4, r5
 8000654:	f040 80b1 	bne.w	80007ba <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000658:	684d      	ldr	r5, [r1, #4]
 800065a:	f005 0403 	and.w	r4, r5, #3
 800065e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000662:	2603      	movs	r6, #3
 8000664:	1e67      	subs	r7, r4, #1
 8000666:	fa06 f608 	lsl.w	r6, r6, r8
 800066a:	2f01      	cmp	r7, #1
 800066c:	ea6f 0606 	mvn.w	r6, r6
 8000670:	d834      	bhi.n	80006dc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000672:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000674:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000678:	68cf      	ldr	r7, [r1, #12]
 800067a:	fa07 f708 	lsl.w	r7, r7, r8
 800067e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000682:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000684:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000686:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800068a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800068e:	409f      	lsls	r7, r3
 8000690:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000694:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000696:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000698:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800069c:	688f      	ldr	r7, [r1, #8]
 800069e:	fa07 f708 	lsl.w	r7, r7, r8
 80006a2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006a6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80006a8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006aa:	d119      	bne.n	80006e0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80006ac:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006b0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006b8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006c0:	f04f 0e0f 	mov.w	lr, #15
 80006c4:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006c8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006cc:	690f      	ldr	r7, [r1, #16]
 80006ce:	fa07 f70b 	lsl.w	r7, r7, fp
 80006d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006d6:	f8ca 7020 	str.w	r7, [sl, #32]
 80006da:	e001      	b.n	80006e0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006dc:	2c03      	cmp	r4, #3
 80006de:	d1da      	bne.n	8000696 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80006e0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80006ea:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80006ee:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80006f0:	d063      	beq.n	80007ba <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	f04f 0a00 	mov.w	sl, #0
 80006f6:	f8cd a004 	str.w	sl, [sp, #4]
 80006fa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006fe:	4c3a      	ldr	r4, [pc, #232]	; (80007e8 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000704:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000708:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800070c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000710:	9601      	str	r6, [sp, #4]
 8000712:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000714:	f023 0603 	bic.w	r6, r3, #3
 8000718:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800071c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000720:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000724:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000728:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800072c:	270f      	movs	r7, #15
 800072e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000732:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000734:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000738:	d046      	beq.n	80007c8 <HAL_GPIO_Init+0x18c>
 800073a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800073e:	42a0      	cmp	r0, r4
 8000740:	d044      	beq.n	80007cc <HAL_GPIO_Init+0x190>
 8000742:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000746:	42a0      	cmp	r0, r4
 8000748:	d042      	beq.n	80007d0 <HAL_GPIO_Init+0x194>
 800074a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800074e:	42a0      	cmp	r0, r4
 8000750:	d040      	beq.n	80007d4 <HAL_GPIO_Init+0x198>
 8000752:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000756:	42a0      	cmp	r0, r4
 8000758:	d03e      	beq.n	80007d8 <HAL_GPIO_Init+0x19c>
 800075a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800075e:	42a0      	cmp	r0, r4
 8000760:	d03c      	beq.n	80007dc <HAL_GPIO_Init+0x1a0>
 8000762:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000766:	42a0      	cmp	r0, r4
 8000768:	d03a      	beq.n	80007e0 <HAL_GPIO_Init+0x1a4>
 800076a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800076e:	42a0      	cmp	r0, r4
 8000770:	bf0c      	ite	eq
 8000772:	2407      	moveq	r4, #7
 8000774:	2408      	movne	r4, #8
 8000776:	fa04 f40e 	lsl.w	r4, r4, lr
 800077a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800077c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800077e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000780:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000784:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000786:	bf54      	ite	pl
 8000788:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800078a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800078e:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8000790:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000792:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000794:	bf54      	ite	pl
 8000796:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000798:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800079c:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800079e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80007a0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80007a2:	bf54      	ite	pl
 80007a4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80007aa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80007ac:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80007ae:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80007b0:	bf54      	ite	pl
 80007b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80007b8:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ba:	3301      	adds	r3, #1
 80007bc:	2b10      	cmp	r3, #16
 80007be:	f47f af43 	bne.w	8000648 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80007c2:	b003      	add	sp, #12
 80007c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c8:	4654      	mov	r4, sl
 80007ca:	e7d4      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007cc:	2401      	movs	r4, #1
 80007ce:	e7d2      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007d0:	2402      	movs	r4, #2
 80007d2:	e7d0      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007d4:	2403      	movs	r4, #3
 80007d6:	e7ce      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007d8:	2404      	movs	r4, #4
 80007da:	e7cc      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007dc:	2405      	movs	r4, #5
 80007de:	e7ca      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007e0:	2406      	movs	r4, #6
 80007e2:	e7c8      	b.n	8000776 <HAL_GPIO_Init+0x13a>
 80007e4:	40013c00 	.word	0x40013c00
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007f0:	6903      	ldr	r3, [r0, #16]
 80007f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80007f4:	bf14      	ite	ne
 80007f6:	2001      	movne	r0, #1
 80007f8:	2000      	moveq	r0, #0
 80007fa:	4770      	bx	lr

080007fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007fc:	b10a      	cbz	r2, 8000802 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fe:	6181      	str	r1, [r0, #24]
  }
}
 8000800:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000802:	0409      	lsls	r1, r1, #16
 8000804:	e7fb      	b.n	80007fe <HAL_GPIO_WritePin+0x2>
	...

08000808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800080c:	4604      	mov	r4, r0
 800080e:	b340      	cbz	r0, 8000862 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000810:	6803      	ldr	r3, [r0, #0]
 8000812:	07dd      	lsls	r5, r3, #31
 8000814:	d410      	bmi.n	8000838 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	0798      	lsls	r0, r3, #30
 800081a:	d45e      	bmi.n	80008da <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	071a      	lsls	r2, r3, #28
 8000820:	f100 80a0 	bmi.w	8000964 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	075b      	lsls	r3, r3, #29
 8000828:	f100 80be 	bmi.w	80009a8 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800082c:	69a0      	ldr	r0, [r4, #24]
 800082e:	2800      	cmp	r0, #0
 8000830:	f040 811f 	bne.w	8000a72 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000834:	2000      	movs	r0, #0
 8000836:	e02b      	b.n	8000890 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000838:	4ba6      	ldr	r3, [pc, #664]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	f002 020c 	and.w	r2, r2, #12
 8000840:	2a04      	cmp	r2, #4
 8000842:	d007      	beq.n	8000854 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800084a:	2a08      	cmp	r2, #8
 800084c:	d10b      	bne.n	8000866 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	0251      	lsls	r1, r2, #9
 8000852:	d508      	bpl.n	8000866 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000854:	4b9f      	ldr	r3, [pc, #636]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	039a      	lsls	r2, r3, #14
 800085a:	d5dc      	bpl.n	8000816 <HAL_RCC_OscConfig+0xe>
 800085c:	6863      	ldr	r3, [r4, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1d9      	bne.n	8000816 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	e014      	b.n	8000890 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000866:	6862      	ldr	r2, [r4, #4]
 8000868:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800086c:	d113      	bne.n	8000896 <HAL_RCC_OscConfig+0x8e>
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000874:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000876:	f7ff fe6d 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	4e96      	ldr	r6, [pc, #600]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800087c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	6833      	ldr	r3, [r6, #0]
 8000880:	039b      	lsls	r3, r3, #14
 8000882:	d4c8      	bmi.n	8000816 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000884:	f7ff fe66 	bl	8000554 <HAL_GetTick>
 8000888:	1b40      	subs	r0, r0, r5
 800088a:	2864      	cmp	r0, #100	; 0x64
 800088c:	d9f7      	bls.n	800087e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
}
 8000890:	b002      	add	sp, #8
 8000892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000896:	4d8f      	ldr	r5, [pc, #572]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 8000898:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	d107      	bne.n	80008b0 <HAL_RCC_OscConfig+0xa8>
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a4:	602b      	str	r3, [r5, #0]
 80008a6:	682b      	ldr	r3, [r5, #0]
 80008a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ac:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008ae:	e7e2      	b.n	8000876 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b4:	602b      	str	r3, [r5, #0]
 80008b6:	682b      	ldr	r3, [r5, #0]
 80008b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008bc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d1d9      	bne.n	8000876 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe47 	bl	8000554 <HAL_GetTick>
 80008c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	039f      	lsls	r7, r3, #14
 80008cc:	d5a3      	bpl.n	8000816 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ce:	f7ff fe41 	bl	8000554 <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2864      	cmp	r0, #100	; 0x64
 80008d6:	d9f7      	bls.n	80008c8 <HAL_RCC_OscConfig+0xc0>
 80008d8:	e7d9      	b.n	800088e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008da:	4b7e      	ldr	r3, [pc, #504]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	f012 0f0c 	tst.w	r2, #12
 80008e2:	d007      	beq.n	80008f4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ea:	2a08      	cmp	r2, #8
 80008ec:	d111      	bne.n	8000912 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	025e      	lsls	r6, r3, #9
 80008f2:	d40e      	bmi.n	8000912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	0795      	lsls	r5, r2, #30
 80008fa:	d502      	bpl.n	8000902 <HAL_RCC_OscConfig+0xfa>
 80008fc:	68e2      	ldr	r2, [r4, #12]
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d1af      	bne.n	8000862 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	6921      	ldr	r1, [r4, #16]
 8000906:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800090a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800090e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	e784      	b.n	800081c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000912:	68e2      	ldr	r2, [r4, #12]
 8000914:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <HAL_RCC_OscConfig+0x2d0>)
 8000916:	b1b2      	cbz	r2, 8000946 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800091c:	f7ff fe1a 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000920:	4d6c      	ldr	r5, [pc, #432]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	0798      	lsls	r0, r3, #30
 8000928:	d507      	bpl.n	800093a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800092a:	682b      	ldr	r3, [r5, #0]
 800092c:	6922      	ldr	r2, [r4, #16]
 800092e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000932:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000936:	602b      	str	r3, [r5, #0]
 8000938:	e770      	b.n	800081c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093a:	f7ff fe0b 	bl	8000554 <HAL_GetTick>
 800093e:	1b80      	subs	r0, r0, r6
 8000940:	2802      	cmp	r0, #2
 8000942:	d9ef      	bls.n	8000924 <HAL_RCC_OscConfig+0x11c>
 8000944:	e7a3      	b.n	800088e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000948:	f7ff fe04 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094c:	4e61      	ldr	r6, [pc, #388]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800094e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000950:	6833      	ldr	r3, [r6, #0]
 8000952:	0799      	lsls	r1, r3, #30
 8000954:	f57f af62 	bpl.w	800081c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000958:	f7ff fdfc 	bl	8000554 <HAL_GetTick>
 800095c:	1b40      	subs	r0, r0, r5
 800095e:	2802      	cmp	r0, #2
 8000960:	d9f6      	bls.n	8000950 <HAL_RCC_OscConfig+0x148>
 8000962:	e794      	b.n	800088e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000964:	6962      	ldr	r2, [r4, #20]
 8000966:	4b5d      	ldr	r3, [pc, #372]	; (8000adc <HAL_RCC_OscConfig+0x2d4>)
 8000968:	b17a      	cbz	r2, 800098a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800096e:	f7ff fdf1 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000972:	4e58      	ldr	r6, [pc, #352]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000974:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000978:	079f      	lsls	r7, r3, #30
 800097a:	f53f af53 	bmi.w	8000824 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fde9 	bl	8000554 <HAL_GetTick>
 8000982:	1b40      	subs	r0, r0, r5
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x16e>
 8000988:	e781      	b.n	800088e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800098a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800098c:	f7ff fde2 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000990:	4e50      	ldr	r6, [pc, #320]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000992:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000994:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000996:	0798      	lsls	r0, r3, #30
 8000998:	f57f af44 	bpl.w	8000824 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800099c:	f7ff fdda 	bl	8000554 <HAL_GetTick>
 80009a0:	1b40      	subs	r0, r0, r5
 80009a2:	2802      	cmp	r0, #2
 80009a4:	d9f6      	bls.n	8000994 <HAL_RCC_OscConfig+0x18c>
 80009a6:	e772      	b.n	800088e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a8:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 80009aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009b0:	d128      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	9201      	str	r2, [sp, #4]
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009c6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c8:	4d45      	ldr	r5, [pc, #276]	; (8000ae0 <HAL_RCC_OscConfig+0x2d8>)
 80009ca:	682b      	ldr	r3, [r5, #0]
 80009cc:	05d9      	lsls	r1, r3, #23
 80009ce:	d51b      	bpl.n	8000a08 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d0:	68a3      	ldr	r3, [r4, #8]
 80009d2:	4d40      	ldr	r5, [pc, #256]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d127      	bne.n	8000a28 <HAL_RCC_OscConfig+0x220>
 80009d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009e0:	f7ff fdb8 	bl	8000554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e4:	4e3b      	ldr	r6, [pc, #236]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80009e6:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009e8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ec:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80009ee:	079b      	lsls	r3, r3, #30
 80009f0:	d539      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 80009f2:	2f00      	cmp	r7, #0
 80009f4:	f43f af1a 	beq.w	800082c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009f8:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 80009fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	e713      	b.n	800082c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000a04:	2700      	movs	r7, #0
 8000a06:	e7df      	b.n	80009c8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a10:	f7ff fda0 	bl	8000554 <HAL_GetTick>
 8000a14:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	05da      	lsls	r2, r3, #23
 8000a1a:	d4d9      	bmi.n	80009d0 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1c:	f7ff fd9a 	bl	8000554 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9f7      	bls.n	8000a16 <HAL_RCC_OscConfig+0x20e>
 8000a26:	e732      	b.n	800088e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d104      	bne.n	8000a36 <HAL_RCC_OscConfig+0x22e>
 8000a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	672b      	str	r3, [r5, #112]	; 0x70
 8000a34:	e7d0      	b.n	80009d8 <HAL_RCC_OscConfig+0x1d0>
 8000a36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a38:	f022 0201 	bic.w	r2, r2, #1
 8000a3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a40:	f022 0204 	bic.w	r2, r2, #4
 8000a44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1ca      	bne.n	80009e0 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fd83 	bl	8000554 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a56:	0798      	lsls	r0, r3, #30
 8000a58:	d5cb      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5a:	f7ff fd7b 	bl	8000554 <HAL_GetTick>
 8000a5e:	1b80      	subs	r0, r0, r6
 8000a60:	4540      	cmp	r0, r8
 8000a62:	d9f7      	bls.n	8000a54 <HAL_RCC_OscConfig+0x24c>
 8000a64:	e713      	b.n	800088e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a66:	f7ff fd75 	bl	8000554 <HAL_GetTick>
 8000a6a:	1b40      	subs	r0, r0, r5
 8000a6c:	4540      	cmp	r0, r8
 8000a6e:	d9bd      	bls.n	80009ec <HAL_RCC_OscConfig+0x1e4>
 8000a70:	e70d      	b.n	800088e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a72:	4d18      	ldr	r5, [pc, #96]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
 8000a74:	68ab      	ldr	r3, [r5, #8]
 8000a76:	f003 030c 	and.w	r3, r3, #12
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d047      	beq.n	8000b0e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a7e:	4e19      	ldr	r6, [pc, #100]	; (8000ae4 <HAL_RCC_OscConfig+0x2dc>)
 8000a80:	2300      	movs	r3, #0
 8000a82:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a84:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a86:	d135      	bne.n	8000af4 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000a88:	f7ff fd64 	bl	8000554 <HAL_GetTick>
 8000a8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	0199      	lsls	r1, r3, #6
 8000a92:	d429      	bmi.n	8000ae8 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a94:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aa2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000aa8:	0852      	lsrs	r2, r2, #1
 8000aaa:	3a01      	subs	r2, #1
 8000aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ab0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ab6:	f7ff fd4d 	bl	8000554 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aba:	4d06      	ldr	r5, [pc, #24]	; (8000ad4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000abc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	019a      	lsls	r2, r3, #6
 8000ac2:	f53f aeb7 	bmi.w	8000834 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac6:	f7ff fd45 	bl	8000554 <HAL_GetTick>
 8000aca:	1b00      	subs	r0, r0, r4
 8000acc:	2802      	cmp	r0, #2
 8000ace:	d9f6      	bls.n	8000abe <HAL_RCC_OscConfig+0x2b6>
 8000ad0:	e6dd      	b.n	800088e <HAL_RCC_OscConfig+0x86>
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	42470000 	.word	0x42470000
 8000adc:	42470e80 	.word	0x42470e80
 8000ae0:	40007000 	.word	0x40007000
 8000ae4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae8:	f7ff fd34 	bl	8000554 <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9cd      	bls.n	8000a8e <HAL_RCC_OscConfig+0x286>
 8000af2:	e6cc      	b.n	800088e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000af4:	f7ff fd2e 	bl	8000554 <HAL_GetTick>
 8000af8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000afa:	682b      	ldr	r3, [r5, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	f57f ae99 	bpl.w	8000834 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fd27 	bl	8000554 <HAL_GetTick>
 8000b06:	1b00      	subs	r0, r0, r4
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d9f6      	bls.n	8000afa <HAL_RCC_OscConfig+0x2f2>
 8000b0c:	e6bf      	b.n	800088e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b0e:	2801      	cmp	r0, #1
 8000b10:	f43f aebe 	beq.w	8000890 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000b14:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b16:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b18:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b1c:	4291      	cmp	r1, r2
 8000b1e:	f47f aea0 	bne.w	8000862 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b22:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b28:	428a      	cmp	r2, r1
 8000b2a:	f47f ae9a 	bne.w	8000862 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b30:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000b34:	401a      	ands	r2, r3
 8000b36:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000b3a:	f47f ae92 	bne.w	8000862 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b40:	0852      	lsrs	r2, r2, #1
 8000b42:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000b46:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b48:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000b4c:	f47f ae89 	bne.w	8000862 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b52:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b56:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000b5a:	f43f ae6b 	beq.w	8000834 <HAL_RCC_OscConfig+0x2c>
 8000b5e:	e680      	b.n	8000862 <HAL_RCC_OscConfig+0x5a>

08000b60 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b60:	4913      	ldr	r1, [pc, #76]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b62:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b64:	688b      	ldr	r3, [r1, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d01c      	beq.n	8000ba8 <HAL_RCC_GetSysClockFreq+0x48>
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d11c      	bne.n	8000bac <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b74:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b7c:	bf14      	ite	ne
 8000b7e:	480d      	ldrne	r0, [pc, #52]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b80:	480d      	ldreq	r0, [pc, #52]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b86:	bf18      	it	ne
 8000b88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b8e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b92:	f7ff fb19 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000ba2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ba6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000baa:	e7fc      	b.n	8000ba6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000bae:	e7fa      	b.n	8000ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	017d7840 	.word	0x017d7840
 8000bb8:	00f42400 	.word	0x00f42400

08000bbc <HAL_RCC_ClockConfig>:
{
 8000bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b910      	cbnz	r0, 8000bcc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bc6:	2001      	movs	r0, #1
}
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bcc:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <HAL_RCC_ClockConfig+0x124>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f002 0207 	and.w	r2, r2, #7
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	d328      	bcc.n	8000c2a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	0797      	lsls	r7, r2, #30
 8000bdc:	d42d      	bmi.n	8000c3a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bde:	07d0      	lsls	r0, r2, #31
 8000be0:	d441      	bmi.n	8000c66 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000be2:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <HAL_RCC_ClockConfig+0x124>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f002 0207 	and.w	r2, r2, #7
 8000bea:	42aa      	cmp	r2, r5
 8000bec:	d866      	bhi.n	8000cbc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	0751      	lsls	r1, r2, #29
 8000bf2:	d46c      	bmi.n	8000cce <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf4:	0713      	lsls	r3, r2, #28
 8000bf6:	d507      	bpl.n	8000c08 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bf8:	4a3a      	ldr	r2, [pc, #232]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000bfa:	6921      	ldr	r1, [r4, #16]
 8000bfc:	6893      	ldr	r3, [r2, #8]
 8000bfe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c06:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c08:	f7ff ffaa 	bl	8000b60 <HAL_RCC_GetSysClockFreq>
 8000c0c:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c0e:	4a36      	ldr	r2, [pc, #216]	; (8000ce8 <HAL_RCC_ClockConfig+0x12c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	40d8      	lsrs	r0, r3
 8000c1a:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_RCC_ClockConfig+0x130>)
 8000c1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <HAL_RCC_ClockConfig+0x134>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f7ff fc4d 	bl	80004c0 <HAL_InitTick>
  return HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	e7ce      	b.n	8000bc8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d1c6      	bne.n	8000bc6 <HAL_RCC_ClockConfig+0xa>
 8000c38:	e7ce      	b.n	8000bd8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c3c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c40:	bf1e      	ittt	ne
 8000c42:	6899      	ldrne	r1, [r3, #8]
 8000c44:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000c48:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c4a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c4c:	bf42      	ittt	mi
 8000c4e:	6899      	ldrmi	r1, [r3, #8]
 8000c50:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000c54:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c56:	4923      	ldr	r1, [pc, #140]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c58:	68a0      	ldr	r0, [r4, #8]
 8000c5a:	688b      	ldr	r3, [r1, #8]
 8000c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c60:	4303      	orrs	r3, r0
 8000c62:	608b      	str	r3, [r1, #8]
 8000c64:	e7bb      	b.n	8000bde <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c66:	6862      	ldr	r2, [r4, #4]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c6a:	2a01      	cmp	r2, #1
 8000c6c:	d11c      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c74:	d0a7      	beq.n	8000bc6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c76:	4e1b      	ldr	r6, [pc, #108]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c78:	68b3      	ldr	r3, [r6, #8]
 8000c7a:	f023 0303 	bic.w	r3, r3, #3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c82:	f7ff fc67 	bl	8000554 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c86:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c8c:	68b3      	ldr	r3, [r6, #8]
 8000c8e:	6862      	ldr	r2, [r4, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c98:	d0a3      	beq.n	8000be2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9a:	f7ff fc5b 	bl	8000554 <HAL_GetTick>
 8000c9e:	1bc0      	subs	r0, r0, r7
 8000ca0:	4540      	cmp	r0, r8
 8000ca2:	d9f3      	bls.n	8000c8c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	e78f      	b.n	8000bc8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca8:	1e91      	subs	r1, r2, #2
 8000caa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cac:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cae:	d802      	bhi.n	8000cb6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb4:	e7de      	b.n	8000c74 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb6:	f013 0f02 	tst.w	r3, #2
 8000cba:	e7db      	b.n	8000c74 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbc:	b2ea      	uxtb	r2, r5
 8000cbe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	f47f af7d 	bne.w	8000bc6 <HAL_RCC_ClockConfig+0xa>
 8000ccc:	e78f      	b.n	8000bee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cce:	4905      	ldr	r1, [pc, #20]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000cd0:	68e0      	ldr	r0, [r4, #12]
 8000cd2:	688b      	ldr	r3, [r1, #8]
 8000cd4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	608b      	str	r3, [r1, #8]
 8000cdc:	e78a      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x38>
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	08001414 	.word	0x08001414
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000cf4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d12c      	bne.n	8000d56 <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000cfc:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8000d00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000d04:	6803      	ldr	r3, [r0, #0]
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d01a      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0e:	d017      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d10:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00f      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00b      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d28:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d30:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d003      	beq.n	8000d40 <HAL_TIM_Base_Start+0x4c>
 8000d38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d104      	bne.n	8000d4a <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d46:	2a06      	cmp	r2, #6
 8000d48:	d003      	beq.n	8000d52 <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f042 0201 	orr.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	4770      	bx	lr
    return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40010000 	.word	0x40010000

08000d60 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000d62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d64:	4290      	cmp	r0, r2
 8000d66:	d012      	beq.n	8000d8e <TIM_Base_SetConfig+0x2e>
 8000d68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d6c:	d00f      	beq.n	8000d8e <TIM_Base_SetConfig+0x2e>
 8000d6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d00b      	beq.n	8000d8e <TIM_Base_SetConfig+0x2e>
 8000d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	d007      	beq.n	8000d8e <TIM_Base_SetConfig+0x2e>
 8000d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d003      	beq.n	8000d8e <TIM_Base_SetConfig+0x2e>
 8000d86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d119      	bne.n	8000dc2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d96:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <TIM_Base_SetConfig+0xc4>)
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d029      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000d9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000da0:	d026      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000da2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d022      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dae:	4290      	cmp	r0, r2
 8000db0:	d01e      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d01a      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000dba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d016      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000dc2:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <TIM_Base_SetConfig+0xc8>)
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	d013      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d00f      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	d00b      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000dd8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	d007      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de4:	4290      	cmp	r0, r2
 8000de6:	d003      	beq.n	8000df0 <TIM_Base_SetConfig+0x90>
 8000de8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dec:	4290      	cmp	r0, r2
 8000dee:	d103      	bne.n	8000df8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000df0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000df6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000df8:	694a      	ldr	r2, [r1, #20]
 8000dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dfe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000e00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e02:	688b      	ldr	r3, [r1, #8]
 8000e04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000e06:	680b      	ldr	r3, [r1, #0]
 8000e08:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <TIM_Base_SetConfig+0xc4>)
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	d003      	beq.n	8000e18 <TIM_Base_SetConfig+0xb8>
 8000e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e14:	4298      	cmp	r0, r3
 8000e16:	d101      	bne.n	8000e1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e18:	690b      	ldr	r3, [r1, #16]
 8000e1a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	6143      	str	r3, [r0, #20]
}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40010000 	.word	0x40010000
 8000e28:	40014000 	.word	0x40014000

08000e2c <HAL_TIM_Base_Init>:
{
 8000e2c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b330      	cbz	r0, 8000e80 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000e32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e3a:	b91b      	cbnz	r3, 8000e44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000e3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000e40:	f000 fa56 	bl	80012f0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e46:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e4c:	1d21      	adds	r1, r4, #4
 8000e4e:	f7ff ff87 	bl	8000d60 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8000e58:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000e5e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8000e62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000e66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e72:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8000e7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8000e7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
 8000e82:	e7fc      	b.n	8000e7e <HAL_TIM_Base_Init+0x52>

08000e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000e84:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000e86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f04f 0302 	mov.w	r3, #2
 8000e90:	d032      	beq.n	8000ef8 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000e96:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000e98:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8000e9a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000e9c:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000e9e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000ea2:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000ea4:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000ea6:	4c15      	ldr	r4, [pc, #84]	; (8000efc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d01a      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d017      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000eb2:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d013      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000eba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d00f      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000ec2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000eca:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8000ece:	42a3      	cmp	r3, r4
 8000ed0:	d007      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000ed2:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d003      	beq.n	8000ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8000eda:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d104      	bne.n	8000eec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ee2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ee8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8000eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ef8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000efa:	bd30      	pop	{r4, r5, pc}
 8000efc:	40010000 	.word	0x40010000

08000f00 <delay>:
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time){

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <delay+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim6)< time);
 8000f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0a:	4282      	cmp	r2, r0
 8000f0c:	d3fc      	bcc.n	8000f08 <delay+0x8>

}
 8000f0e:	4770      	bx	lr
 8000f10:	20000068 	.word	0x20000068

08000f14 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


	GPIO_InitTypeDef DHT11_DATA={0};
 8000f16:	2300      	movs	r3, #0

	DHT11_DATA.Pin=GPIO_Pin;
 8000f18:	9101      	str	r1, [sp, #4]
	DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8000f1a:	2201      	movs	r2, #1
	DHT11_DATA.Pull=GPIO_NOPULL;
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000f1c:	a901      	add	r1, sp, #4
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	GPIO_InitTypeDef DHT11_DATA={0};
 8000f22:	9305      	str	r3, [sp, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000f24:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000f26:	f7ff fb89 	bl	800063c <HAL_GPIO_Init>

}
 8000f2a:	b007      	add	sp, #28
 8000f2c:	f85d fb04 	ldr.w	pc, [sp], #4

08000f30 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000f30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}


	GPIO_InitTypeDef DHT11_DATA={0};
 8000f32:	2300      	movs	r3, #0

	DHT11_DATA.Pin=GPIO_Pin;
	DHT11_DATA.Mode=GPIO_MODE_INPUT;
 8000f34:	e9cd 1301 	strd	r1, r3, [sp, #4]
	DHT11_DATA.Pull=GPIO_NOPULL;
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000f38:	a901      	add	r1, sp, #4
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000f3a:	e9cd 3303 	strd	r3, r3, [sp, #12]
	GPIO_InitTypeDef DHT11_DATA={0};
 8000f3e:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000f40:	f7ff fb7c 	bl	800063c <HAL_GPIO_Init>

}
 8000f44:	b007      	add	sp, #28
 8000f46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f4c <DHT11_Read>:
uint8_t mData[40];
uint16_t mTime1 = 0, mTime2 = 0;
uint16_t mbit = 0;
uint8_t  parityVal = 0, genParity = 0;

uint8_t DHT11_Read (void){
 8000f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f50:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001134 <DHT11_Read+0x1e8>

  for(int a=0;a<40;a++) mData[a]=0;
 8000f54:	2300      	movs	r3, #0
uint8_t DHT11_Read (void){
 8000f56:	b085      	sub	sp, #20
 8000f58:	4642      	mov	r2, r8
  for(int a=0;a<40;a++) mData[a]=0;
 8000f5a:	461c      	mov	r4, r3
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	2b28      	cmp	r3, #40	; 0x28
 8000f60:	f802 4b01 	strb.w	r4, [r2], #1
 8000f64:	d1fa      	bne.n	8000f5c <DHT11_Read+0x10>
   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 8000f66:	4b6c      	ldr	r3, [pc, #432]	; (8001118 <DHT11_Read+0x1cc>)
 8000f68:	4a6c      	ldr	r2, [pc, #432]	; (800111c <DHT11_Read+0x1d0>)
 8000f6a:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800113c <DHT11_Read+0x1f0>
 8000f6e:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8001140 <DHT11_Read+0x1f4>
 8000f72:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8001144 <DHT11_Read+0x1f8>
 8000f76:	4e6a      	ldr	r6, [pc, #424]	; (8001120 <DHT11_Read+0x1d4>)
 8000f78:	4f6a      	ldr	r7, [pc, #424]	; (8001124 <DHT11_Read+0x1d8>)
 8000f7a:	4d6b      	ldr	r5, [pc, #428]	; (8001128 <DHT11_Read+0x1dc>)

     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 8000f7c:	486b      	ldr	r0, [pc, #428]	; (800112c <DHT11_Read+0x1e0>)
   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 8000f7e:	801c      	strh	r4, [r3, #0]
     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 8000f80:	2104      	movs	r1, #4
   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 8000f82:	7014      	strb	r4, [r2, #0]
 8000f84:	f88a 4000 	strb.w	r4, [sl]
 8000f88:	f8a9 4000 	strh.w	r4, [r9]
 8000f8c:	f8ab 4000 	strh.w	r4, [fp]
 8000f90:	8034      	strh	r4, [r6, #0]
 8000f92:	703c      	strb	r4, [r7, #0]
 8000f94:	802c      	strh	r4, [r5, #0]
     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 8000f96:	f7ff ffbd 	bl	8000f14 <Set_Pin_Output>
	 HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4863      	ldr	r0, [pc, #396]	; (800112c <DHT11_Read+0x1e0>)
 8000fa0:	f7ff fc2c 	bl	80007fc <HAL_GPIO_WritePin>
    delay(18000);
 8000fa4:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fa8:	f7ff ffaa 	bl	8000f00 <delay>
   	Set_Pin_Input(DHT11_PORT,DHT11_PIN);
 8000fac:	2104      	movs	r1, #4
 8000fae:	485f      	ldr	r0, [pc, #380]	; (800112c <DHT11_Read+0x1e0>)
 8000fb0:	f7ff ffbe 	bl	8000f30 <Set_Pin_Input>

	 __HAL_TIM_SET_COUNTER(&htim6, 0);				//set timer counter to zero
 8000fb4:	4a5e      	ldr	r2, [pc, #376]	; (8001130 <DHT11_Read+0x1e4>)
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <DHT11_Read+0x1cc>)
 8000fb8:	6811      	ldr	r1, [r2, #0]
 8000fba:	f8cd a00c 	str.w	sl, [sp, #12]
 8000fbe:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 8000fc2:	624c      	str	r4, [r1, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000fc4:	4c59      	ldr	r4, [pc, #356]	; (800112c <DHT11_Read+0x1e0>)
 8000fc6:	4692      	mov	sl, r2
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff fc10 	bl	80007f0 <HAL_GPIO_ReadPin>
 8000fd0:	2801      	cmp	r0, #1
 8000fd2:	f8da 3000 	ldr.w	r3, [sl]
 8000fd6:	d078      	beq.n	80010ca <DHT11_Read+0x17e>

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000fd8:	2200      	movs	r2, #0
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000fda:	4c54      	ldr	r4, [pc, #336]	; (800112c <DHT11_Read+0x1e0>)
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff fc05 	bl	80007f0 <HAL_GPIO_ReadPin>
 8000fe6:	f8da 3000 	ldr.w	r3, [sl]
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d077      	beq.n	80010de <DHT11_Read+0x192>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8000fee:	9901      	ldr	r1, [sp, #4]
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	800a      	strh	r2, [r1, #0]

	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000ff4:	4c4d      	ldr	r4, [pc, #308]	; (800112c <DHT11_Read+0x1e0>)
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff fbf7 	bl	80007f0 <HAL_GPIO_ReadPin>
 8001002:	f8da 3000 	ldr.w	r3, [sl]
 8001006:	2801      	cmp	r0, #1
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	d06f      	beq.n	80010ec <DHT11_Read+0x1a0>
    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 800100c:	f8a9 3000 	strh.w	r3, [r9]


	for(int j = 0; j < 40; j++)
	{
		__HAL_TIM_SET_COUNTER(&htim6, 0);
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001010:	4c46      	ldr	r4, [pc, #280]	; (800112c <DHT11_Read+0x1e0>)
	for(int j = 0; j < 40; j++)
 8001012:	f04f 0900 	mov.w	r9, #0
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001016:	46cb      	mov	fp, r9
 8001018:	f8da 2000 	ldr.w	r2, [sl]
 800101c:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001020:	2104      	movs	r1, #4
 8001022:	4620      	mov	r0, r4
 8001024:	f7ff fbe4 	bl	80007f0 <HAL_GPIO_ReadPin>
 8001028:	f8da 2000 	ldr.w	r2, [sl]
 800102c:	2800      	cmp	r0, #0
 800102e:	d062      	beq.n	80010f6 <DHT11_Read+0x1aa>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001030:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001034:	2104      	movs	r1, #4
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fbda 	bl	80007f0 <HAL_GPIO_ReadPin>
 800103c:	f8da 2000 	ldr.w	r2, [sl]
 8001040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001042:	2801      	cmp	r0, #1
 8001044:	b292      	uxth	r2, r2
 8001046:	d05c      	beq.n	8001102 <DHT11_Read+0x1b6>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8001048:	9b01      	ldr	r3, [sp, #4]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800104a:	f1a2 0115 	sub.w	r1, r2, #21
 800104e:	2908      	cmp	r1, #8
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8001050:	801a      	strh	r2, [r3, #0]
		if(mTime1 > 20 && mTime1 < 30)
 8001052:	d85a      	bhi.n	800110a <DHT11_Read+0x1be>
		{
			mbit = 0;
 8001054:	f8a5 b000 	strh.w	fp, [r5]
		{
			 mbit = 1;
		}

		//set i th data in data buffer
		mData[j] = mbit;
 8001058:	4b36      	ldr	r3, [pc, #216]	; (8001134 <DHT11_Read+0x1e8>)
 800105a:	882a      	ldrh	r2, [r5, #0]
 800105c:	f803 2009 	strb.w	r2, [r3, r9]
	for(int j = 0; j < 40; j++)
 8001060:	f109 0901 	add.w	r9, r9, #1
 8001064:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
 8001068:	d1d6      	bne.n	8001018 <DHT11_Read+0xcc>
 800106a:	8831      	ldrh	r1, [r6, #0]

	}

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800106c:	2300      	movs	r3, #0
	{
		humVal += mData[i];
 800106e:	f818 2b01 	ldrb.w	r2, [r8], #1
	for(int i = 0; i < 8; i++)
 8001072:	3301      	adds	r3, #1
		humVal += mData[i];
 8001074:	440a      	add	r2, r1
		humVal = humVal << 1;
 8001076:	0052      	lsls	r2, r2, #1
	for(int i = 0; i < 8; i++)
 8001078:	2b08      	cmp	r3, #8
		humVal = humVal << 1;
 800107a:	b291      	uxth	r1, r2
	for(int i = 0; i < 8; i++)
 800107c:	d1f7      	bne.n	800106e <DHT11_Read+0x122>
 800107e:	9b02      	ldr	r3, [sp, #8]
 8001080:	881b      	ldrh	r3, [r3, #0]
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8001082:	2010      	movs	r0, #16
	{
		tempVal += mData[i];
 8001084:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <DHT11_Read+0x1e8>)
 8001086:	5c12      	ldrb	r2, [r2, r0]
	for(int i = 16; i < 24; i++)
 8001088:	3001      	adds	r0, #1
		tempVal += mData[i];
 800108a:	4413      	add	r3, r2
		tempVal = tempVal << 1;
 800108c:	005b      	lsls	r3, r3, #1
	for(int i = 16; i < 24; i++)
 800108e:	2818      	cmp	r0, #24
		tempVal = tempVal << 1;
 8001090:	b29b      	uxth	r3, r3
	for(int i = 16; i < 24; i++)
 8001092:	d1f7      	bne.n	8001084 <DHT11_Read+0x138>
 8001094:	783a      	ldrb	r2, [r7, #0]
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001096:	2020      	movs	r0, #32
	{
		parityVal += mData[i];
 8001098:	4c26      	ldr	r4, [pc, #152]	; (8001134 <DHT11_Read+0x1e8>)
 800109a:	5c24      	ldrb	r4, [r4, r0]
	for(int i = 32; i < 40; i++)
 800109c:	3001      	adds	r0, #1
		parityVal += mData[i];
 800109e:	4422      	add	r2, r4
		parityVal = parityVal << 1;
 80010a0:	0052      	lsls	r2, r2, #1
	for(int i = 32; i < 40; i++)
 80010a2:	2828      	cmp	r0, #40	; 0x28
		parityVal = parityVal << 1;
 80010a4:	b2d2      	uxtb	r2, r2
	for(int i = 32; i < 40; i++)
 80010a6:	d1f7      	bne.n	8001098 <DHT11_Read+0x14c>
	}

	parityVal = parityVal >> 1;
 80010a8:	0852      	lsrs	r2, r2, #1
 80010aa:	703a      	strb	r2, [r7, #0]
	humVal = humVal >> 1;
 80010ac:	084a      	lsrs	r2, r1, #1
	tempVal = tempVal >> 1;
 80010ae:	9902      	ldr	r1, [sp, #8]

	genParity = humVal + tempVal;
 80010b0:	9803      	ldr	r0, [sp, #12]
	humVal = humVal >> 1;
 80010b2:	8032      	strh	r2, [r6, #0]
	tempVal = tempVal >> 1;
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	800b      	strh	r3, [r1, #0]
	genParity = humVal + tempVal;
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	fa53 f182 	uxtab	r1, r3, r2
 80010be:	7001      	strb	r1, [r0, #0]


	dhtVal[0]= tempVal;
 80010c0:	491d      	ldr	r1, [pc, #116]	; (8001138 <DHT11_Read+0x1ec>)
	dhtVal[1] = humVal;

	return 1;
 80010c2:	2001      	movs	r0, #1
	dhtVal[0]= tempVal;
 80010c4:	700b      	strb	r3, [r1, #0]
	dhtVal[1] = humVal;
 80010c6:	704a      	strb	r2, [r1, #1]
	return 1;
 80010c8:	e006      	b.n	80010d8 <DHT11_Read+0x18c>
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d2:	f67f af79 	bls.w	8000fc8 <DHT11_Read+0x7c>
 80010d6:	2000      	movs	r0, #0
}
 80010d8:	b005      	add	sp, #20
 80010da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e6:	f67f af7a 	bls.w	8000fde <DHT11_Read+0x92>
 80010ea:	e7f4      	b.n	80010d6 <DHT11_Read+0x18a>
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010f2:	d982      	bls.n	8000ffa <DHT11_Read+0xae>
 80010f4:	e7ef      	b.n	80010d6 <DHT11_Read+0x18a>
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 80010f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010f8:	b292      	uxth	r2, r2
 80010fa:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 80010fe:	d98f      	bls.n	8001020 <DHT11_Read+0xd4>
 8001100:	e7e9      	b.n	80010d6 <DHT11_Read+0x18a>
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001102:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8001106:	d995      	bls.n	8001034 <DHT11_Read+0xe8>
 8001108:	e7e5      	b.n	80010d6 <DHT11_Read+0x18a>
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800110a:	3a3d      	subs	r2, #61	; 0x3d
 800110c:	2a12      	cmp	r2, #18
			 mbit = 1;
 800110e:	bf9c      	itt	ls
 8001110:	2201      	movls	r2, #1
 8001112:	802a      	strhls	r2, [r5, #0]
 8001114:	e7a0      	b.n	8001058 <DHT11_Read+0x10c>
 8001116:	bf00      	nop
 8001118:	2000002e 	.word	0x2000002e
 800111c:	2000002a 	.word	0x2000002a
 8001120:	2000002c 	.word	0x2000002c
 8001124:	20000034 	.word	0x20000034
 8001128:	20000032 	.word	0x20000032
 800112c:	40020000 	.word	0x40020000
 8001130:	20000068 	.word	0x20000068
 8001134:	2000003e 	.word	0x2000003e
 8001138:	2000003c 	.word	0x2000003c
 800113c:	2000002b 	.word	0x2000002b
 8001140:	20000036 	.word	0x20000036
 8001144:	20000030 	.word	0x20000030

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114c:	2214      	movs	r2, #20
 800114e:	2100      	movs	r1, #0
 8001150:	a809      	add	r0, sp, #36	; 0x24
 8001152:	f000 f94b 	bl	80013ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001156:	2214      	movs	r2, #20
 8001158:	2100      	movs	r1, #0
 800115a:	a803      	add	r0, sp, #12
 800115c:	f000 f946 	bl	80013ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2400      	movs	r4, #0
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <SystemClock_Config+0x8c>)
 8001164:	9401      	str	r4, [sp, #4]
 8001166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001168:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SystemClock_Config+0x90>)
 800117a:	9402      	str	r4, [sp, #8]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001196:	2108      	movs	r1, #8
 8001198:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800119c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a6:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f7ff fb2b 	bl	8000808 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b4:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	e9cd 0306 	strd	r0, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c4:	2105      	movs	r1, #5
 80011c6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ca:	f7ff fcf7 	bl	8000bbc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011ce:	b015      	add	sp, #84	; 0x54
 80011d0:	bd30      	pop	{r4, r5, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40007000 	.word	0x40007000

080011dc <main>:
{
 80011dc:	b500      	push	{lr}
 80011de:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80011e0:	f7ff f992 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80011e4:	f7ff ffb0 	bl	8001148 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	2214      	movs	r2, #20
 80011ea:	2100      	movs	r1, #0
 80011ec:	a803      	add	r0, sp, #12
 80011ee:	f000 f8fd 	bl	80013ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2400      	movs	r4, #0
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <main+0xb8>)
 80011f6:	9401      	str	r4, [sp, #4]
 80011f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80011fa:	4827      	ldr	r0, [pc, #156]	; (8001298 <main+0xbc>)
  htim6.Instance = TIM6;
 80011fc:	4d27      	ldr	r5, [pc, #156]	; (800129c <main+0xc0>)
	     if (durum ==1)	{Temperature=tempVal; Humidity=humVal;}
 80011fe:	4e28      	ldr	r6, [pc, #160]	; (80012a0 <main+0xc4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
 8001206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001208:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	9402      	str	r4, [sp, #8]
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001220:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001224:	2104      	movs	r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001228:	f7ff fae8 	bl	80007fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2204      	movs	r2, #4
 800122e:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <main+0xbc>)
 8001232:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f7ff f9fe 	bl	800063c <HAL_GPIO_Init>
  htim6.Init.Prescaler = 84-1;
 8001240:	4918      	ldr	r1, [pc, #96]	; (80012a4 <main+0xc8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	60ac      	str	r4, [r5, #8]
  htim6.Init.Prescaler = 84-1;
 8001244:	2353      	movs	r3, #83	; 0x53
 8001246:	e9c5 1300 	strd	r1, r3, [r5]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800124a:	4628      	mov	r0, r5
  htim6.Init.Period = 0xfff-1;
 800124c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001250:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001258:	f7ff fde8 	bl	8000e2c <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800125c:	a903      	add	r1, sp, #12
 800125e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001264:	f7ff fe0e 	bl	8000e84 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start(&htim6);
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fd43 	bl	8000cf4 <HAL_TIM_Base_Start>
	     durum=DHT11_Read();
 800126e:	4c0e      	ldr	r4, [pc, #56]	; (80012a8 <main+0xcc>)
	     if (durum ==1)	{Temperature=tempVal; Humidity=humVal;}
 8001270:	4d0e      	ldr	r5, [pc, #56]	; (80012ac <main+0xd0>)
	     durum=DHT11_Read();
 8001272:	f7ff fe6b 	bl	8000f4c <DHT11_Read>
	     if (durum ==1)	{Temperature=tempVal; Humidity=humVal;}
 8001276:	2801      	cmp	r0, #1
	     durum=DHT11_Read();
 8001278:	7020      	strb	r0, [r4, #0]
	     if (durum ==1)	{Temperature=tempVal; Humidity=humVal;}
 800127a:	d105      	bne.n	8001288 <main+0xac>
 800127c:	8833      	ldrh	r3, [r6, #0]
 800127e:	702b      	strb	r3, [r5, #0]
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <main+0xd4>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <main+0xd8>)
 8001286:	701a      	strb	r2, [r3, #0]
	     HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f7ff f968 	bl	8000560 <HAL_Delay>
	     durum=DHT11_Read();
 8001290:	e7ef      	b.n	8001272 <main+0x96>
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	20000068 	.word	0x20000068
 80012a0:	20000036 	.word	0x20000036
 80012a4:	40001000 	.word	0x40001000
 80012a8:	2000002a 	.word	0x2000002a
 80012ac:	20000029 	.word	0x20000029
 80012b0:	2000002c 	.word	0x2000002c
 80012b4:	20000028 	.word	0x20000028

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x34>)
 80012bc:	2100      	movs	r1, #0
 80012be:	9100      	str	r1, [sp, #0]
 80012c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44
 80012c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ce:	9200      	str	r2, [sp, #0]
 80012d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	9101      	str	r1, [sp, #4]
 80012d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	b002      	add	sp, #8
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80012f0:	6802      	ldr	r2, [r0, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x28>)
 80012f4:	429a      	cmp	r2, r3
{
 80012f6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 80012f8:	d10b      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_TIM_Base_MspInit+0x2c>)
 8001300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001302:	f042 0210 	orr.w	r2, r2, #16
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001312:	b002      	add	sp, #8
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40001000 	.word	0x40001000
 800131c:	40023800 	.word	0x40023800

08001320 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001320:	4770      	bx	lr

08001322 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler>

08001324 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler>

08001326 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler>

08001328 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler>

0800132a <SVC_Handler>:
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f7ff b904 	b.w	800053c <HAL_IncTick>

08001334 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SystemInit+0x18>)
 8001336:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800133a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800133e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	609a      	str	r2, [r3, #8]
#endif
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001354:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001356:	e003      	b.n	8001360 <LoopCopyDataInit>

08001358 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800135a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800135c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800135e:	3104      	adds	r1, #4

08001360 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001360:	480b      	ldr	r0, [pc, #44]	; (8001390 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001364:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001366:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001368:	d3f6      	bcc.n	8001358 <CopyDataInit>
  ldr  r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800136c:	e002      	b.n	8001374 <LoopFillZerobss>

0800136e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800136e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001370:	f842 3b04 	str.w	r3, [r2], #4

08001374 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001378:	d3f9      	bcc.n	800136e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffdb 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f000 f811 	bl	80013a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff ff2b 	bl	80011dc <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800138c:	08001434 	.word	0x08001434
  ldr  r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001394:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001398:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800139c:	200000b0 	.word	0x200000b0

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <__libc_init_array>:
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	4d0d      	ldr	r5, [pc, #52]	; (80013dc <__libc_init_array+0x38>)
 80013a8:	4c0d      	ldr	r4, [pc, #52]	; (80013e0 <__libc_init_array+0x3c>)
 80013aa:	1b64      	subs	r4, r4, r5
 80013ac:	10a4      	asrs	r4, r4, #2
 80013ae:	2600      	movs	r6, #0
 80013b0:	42a6      	cmp	r6, r4
 80013b2:	d109      	bne.n	80013c8 <__libc_init_array+0x24>
 80013b4:	4d0b      	ldr	r5, [pc, #44]	; (80013e4 <__libc_init_array+0x40>)
 80013b6:	4c0c      	ldr	r4, [pc, #48]	; (80013e8 <__libc_init_array+0x44>)
 80013b8:	f000 f820 	bl	80013fc <_init>
 80013bc:	1b64      	subs	r4, r4, r5
 80013be:	10a4      	asrs	r4, r4, #2
 80013c0:	2600      	movs	r6, #0
 80013c2:	42a6      	cmp	r6, r4
 80013c4:	d105      	bne.n	80013d2 <__libc_init_array+0x2e>
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013cc:	4798      	blx	r3
 80013ce:	3601      	adds	r6, #1
 80013d0:	e7ee      	b.n	80013b0 <__libc_init_array+0xc>
 80013d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d6:	4798      	blx	r3
 80013d8:	3601      	adds	r6, #1
 80013da:	e7f2      	b.n	80013c2 <__libc_init_array+0x1e>
 80013dc:	0800142c 	.word	0x0800142c
 80013e0:	0800142c 	.word	0x0800142c
 80013e4:	0800142c 	.word	0x0800142c
 80013e8:	08001430 	.word	0x08001430

080013ec <memset>:
 80013ec:	4402      	add	r2, r0
 80013ee:	4603      	mov	r3, r0
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d100      	bne.n	80013f6 <memset+0xa>
 80013f4:	4770      	bx	lr
 80013f6:	f803 1b01 	strb.w	r1, [r3], #1
 80013fa:	e7f9      	b.n	80013f0 <memset+0x4>

080013fc <_init>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr

08001408 <_fini>:
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	bf00      	nop
 800140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140e:	bc08      	pop	{r3}
 8001410:	469e      	mov	lr, r3
 8001412:	4770      	bx	lr
